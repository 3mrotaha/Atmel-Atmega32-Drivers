
UART_START.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00007660  000076f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080019e  0080019e  00007832  2**0
                  ALLOC
  3 .stab         00004980  00000000  00000000  00007834  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b36  00000000  00000000  0000c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c0  00000000  00000000  0000dcea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000317  00000000  00000000  0000dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d8a  00000000  00000000  0000e2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d10  00000000  00000000  0001204b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001cbf  00000000  00000000  00013d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002e0  00000000  00000000  00015a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003f6  00000000  00000000  00015cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002900  00000000  00000000  000160f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000189f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__vector_4>
      14:	0c 94 7f 26 	jmp	0x4cfe	; 0x4cfe <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 2b 23 	jmp	0x4656	; 0x4656 <__vector_13>
      38:	0c 94 99 23 	jmp	0x4732	; 0x4732 <__vector_14>
      3c:	0c 94 62 23 	jmp	0x46c4	; 0x46c4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f6 e7       	ldi	r31, 0x76	; 118
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 39 	call	0x73f8	; 0x73f8 <main>
      8a:	0c 94 2e 3b 	jmp	0x765c	; 0x765c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
     1bc:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__fixsfdi>:
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	7b 01       	movw	r14, r22
     1f2:	8c 01       	movw	r16, r24
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
     200:	88 23       	and	r24, r24
     202:	0c f0       	brlt	.+2      	; 0x206 <__fixsfdi+0x1e>
     204:	5c c0       	rjmp	.+184    	; 0x2be <__fixsfdi+0xd6>
     206:	c8 01       	movw	r24, r16
     208:	b7 01       	movw	r22, r14
     20a:	90 58       	subi	r25, 0x80	; 128
     20c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfdi>
     210:	21 95       	neg	r18
     212:	e1 e0       	ldi	r30, 0x01	; 1
     214:	12 16       	cp	r1, r18
     216:	08 f0       	brcs	.+2      	; 0x21a <__fixsfdi+0x32>
     218:	e0 e0       	ldi	r30, 0x00	; 0
     21a:	31 95       	neg	r19
     21c:	f1 e0       	ldi	r31, 0x01	; 1
     21e:	13 16       	cp	r1, r19
     220:	08 f0       	brcs	.+2      	; 0x224 <__fixsfdi+0x3c>
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	e3 2e       	mov	r14, r19
     226:	ee 1a       	sub	r14, r30
     228:	e1 e0       	ldi	r30, 0x01	; 1
     22a:	3e 15       	cp	r19, r14
     22c:	08 f0       	brcs	.+2      	; 0x230 <__fixsfdi+0x48>
     22e:	e0 e0       	ldi	r30, 0x00	; 0
     230:	fe 2b       	or	r31, r30
     232:	41 95       	neg	r20
     234:	a1 e0       	ldi	r26, 0x01	; 1
     236:	14 16       	cp	r1, r20
     238:	08 f0       	brcs	.+2      	; 0x23c <__fixsfdi+0x54>
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	f4 2e       	mov	r15, r20
     23e:	ff 1a       	sub	r15, r31
     240:	e1 e0       	ldi	r30, 0x01	; 1
     242:	4f 15       	cp	r20, r15
     244:	08 f0       	brcs	.+2      	; 0x248 <__fixsfdi+0x60>
     246:	e0 e0       	ldi	r30, 0x00	; 0
     248:	ae 2b       	or	r26, r30
     24a:	51 95       	neg	r21
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	15 16       	cp	r1, r21
     250:	08 f0       	brcs	.+2      	; 0x254 <__fixsfdi+0x6c>
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	05 2f       	mov	r16, r21
     256:	0a 1b       	sub	r16, r26
     258:	e1 e0       	ldi	r30, 0x01	; 1
     25a:	50 17       	cp	r21, r16
     25c:	08 f0       	brcs	.+2      	; 0x260 <__fixsfdi+0x78>
     25e:	e0 e0       	ldi	r30, 0x00	; 0
     260:	fe 2b       	or	r31, r30
     262:	61 95       	neg	r22
     264:	a1 e0       	ldi	r26, 0x01	; 1
     266:	16 16       	cp	r1, r22
     268:	08 f0       	brcs	.+2      	; 0x26c <__fixsfdi+0x84>
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	16 2f       	mov	r17, r22
     26e:	1f 1b       	sub	r17, r31
     270:	e1 e0       	ldi	r30, 0x01	; 1
     272:	61 17       	cp	r22, r17
     274:	08 f0       	brcs	.+2      	; 0x278 <__fixsfdi+0x90>
     276:	e0 e0       	ldi	r30, 0x00	; 0
     278:	ae 2b       	or	r26, r30
     27a:	71 95       	neg	r23
     27c:	f1 e0       	ldi	r31, 0x01	; 1
     27e:	17 16       	cp	r1, r23
     280:	08 f0       	brcs	.+2      	; 0x284 <__fixsfdi+0x9c>
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	b7 2f       	mov	r27, r23
     286:	ba 1b       	sub	r27, r26
     288:	e1 e0       	ldi	r30, 0x01	; 1
     28a:	7b 17       	cp	r23, r27
     28c:	08 f0       	brcs	.+2      	; 0x290 <__fixsfdi+0xa8>
     28e:	e0 e0       	ldi	r30, 0x00	; 0
     290:	fe 2b       	or	r31, r30
     292:	81 95       	neg	r24
     294:	a1 e0       	ldi	r26, 0x01	; 1
     296:	18 16       	cp	r1, r24
     298:	08 f0       	brcs	.+2      	; 0x29c <__fixsfdi+0xb4>
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	38 2f       	mov	r19, r24
     29e:	3f 1b       	sub	r19, r31
     2a0:	f3 2f       	mov	r31, r19
     2a2:	e1 e0       	ldi	r30, 0x01	; 1
     2a4:	83 17       	cp	r24, r19
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <__fixsfdi+0xc2>
     2a8:	e0 e0       	ldi	r30, 0x00	; 0
     2aa:	ae 2b       	or	r26, r30
     2ac:	91 95       	neg	r25
     2ae:	3e 2d       	mov	r19, r14
     2b0:	4f 2d       	mov	r20, r15
     2b2:	50 2f       	mov	r21, r16
     2b4:	61 2f       	mov	r22, r17
     2b6:	7b 2f       	mov	r23, r27
     2b8:	8f 2f       	mov	r24, r31
     2ba:	9a 1b       	sub	r25, r26
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__fixsfdi+0xde>
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfdi>
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	08 95       	ret

000002d0 <__fixunssfdi>:
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ee e6       	ldi	r30, 0x6E	; 110
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	0c 94 f7 3a 	jmp	0x75ee	; 0x75ee <__prologue_saves__>
     2dc:	7b 01       	movw	r14, r22
     2de:	8c 01       	movw	r16, r24
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e8       	ldi	r20, 0x80	; 128
     2e6:	5f e3       	ldi	r21, 0x3F	; 63
     2e8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
     2ec:	88 23       	and	r24, r24
     2ee:	4c f4       	brge	.+18     	; 0x302 <__fixunssfdi+0x32>
     2f0:	aa 24       	eor	r10, r10
     2f2:	bb 24       	eor	r11, r11
     2f4:	cc 24       	eor	r12, r12
     2f6:	dd 24       	eor	r13, r13
     2f8:	ee 24       	eor	r14, r14
     2fa:	ff 24       	eor	r15, r15
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	86 c0       	rjmp	.+268    	; 0x40e <__fixunssfdi+0x13e>
     302:	c8 01       	movw	r24, r16
     304:	b7 01       	movw	r22, r14
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e8       	ldi	r20, 0x80	; 128
     30c:	5f e4       	ldi	r21, 0x4F	; 79
     30e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
     312:	88 23       	and	r24, r24
     314:	54 f4       	brge	.+20     	; 0x32a <__fixunssfdi+0x5a>
     316:	c8 01       	movw	r24, r16
     318:	b7 01       	movw	r22, r14
     31a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     31e:	5b 01       	movw	r10, r22
     320:	6c 01       	movw	r12, r24
     322:	ee 24       	eor	r14, r14
     324:	ff 24       	eor	r15, r15
     326:	87 01       	movw	r16, r14
     328:	72 c0       	rjmp	.+228    	; 0x40e <__fixunssfdi+0x13e>
     32a:	c8 01       	movw	r24, r16
     32c:	b7 01       	movw	r22, r14
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e5       	ldi	r21, 0x5F	; 95
     336:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
     33a:	87 fd       	sbrc	r24, 7
     33c:	0f c0       	rjmp	.+30     	; 0x35c <__fixunssfdi+0x8c>
     33e:	aa 24       	eor	r10, r10
     340:	aa 94       	dec	r10
     342:	bb 24       	eor	r11, r11
     344:	ba 94       	dec	r11
     346:	cc 24       	eor	r12, r12
     348:	ca 94       	dec	r12
     34a:	dd 24       	eor	r13, r13
     34c:	da 94       	dec	r13
     34e:	ee 24       	eor	r14, r14
     350:	ea 94       	dec	r14
     352:	ff 24       	eor	r15, r15
     354:	fa 94       	dec	r15
     356:	0f ef       	ldi	r16, 0xFF	; 255
     358:	1f ef       	ldi	r17, 0xFF	; 255
     35a:	59 c0       	rjmp	.+178    	; 0x40e <__fixunssfdi+0x13e>
     35c:	c8 01       	movw	r24, r16
     35e:	b7 01       	movw	r22, r14
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 e8       	ldi	r20, 0x80	; 128
     366:	5f e2       	ldi	r21, 0x2F	; 47
     368:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
     36c:	7b 01       	movw	r14, r22
     36e:	8c 01       	movw	r16, r24
     370:	22 24       	eor	r2, r2
     372:	33 24       	eor	r3, r3
     374:	21 01       	movw	r4, r2
     376:	90 e1       	ldi	r25, 0x10	; 16
     378:	a9 2e       	mov	r10, r25
     37a:	b1 2c       	mov	r11, r1
     37c:	c1 2c       	mov	r12, r1
     37e:	d1 2c       	mov	r13, r1
     380:	c0 e0       	ldi	r28, 0x00	; 0
     382:	d0 e0       	ldi	r29, 0x00	; 0
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0a 2c       	mov	r0, r10
     38e:	04 c0       	rjmp	.+8      	; 0x398 <__fixunssfdi+0xc8>
     390:	66 0f       	add	r22, r22
     392:	77 1f       	adc	r23, r23
     394:	88 1f       	adc	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	0a 94       	dec	r0
     39a:	d2 f7       	brpl	.-12     	; 0x390 <__fixunssfdi+0xc0>
     39c:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
     3a0:	3b 01       	movw	r6, r22
     3a2:	4c 01       	movw	r8, r24
     3a4:	c8 01       	movw	r24, r16
     3a6:	b7 01       	movw	r22, r14
     3a8:	a4 01       	movw	r20, r8
     3aa:	93 01       	movw	r18, r6
     3ac:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__gesf2>
     3b0:	88 23       	and	r24, r24
     3b2:	64 f0       	brlt	.+24     	; 0x3cc <__fixunssfdi+0xfc>
     3b4:	2a 28       	or	r2, r10
     3b6:	3b 28       	or	r3, r11
     3b8:	4c 28       	or	r4, r12
     3ba:	5d 28       	or	r5, r13
     3bc:	c8 01       	movw	r24, r16
     3be:	b7 01       	movw	r22, r14
     3c0:	a4 01       	movw	r20, r8
     3c2:	93 01       	movw	r18, r6
     3c4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__divsf3>
     3c8:	7b 01       	movw	r14, r22
     3ca:	8c 01       	movw	r16, r24
     3cc:	d6 94       	lsr	r13
     3ce:	c7 94       	ror	r12
     3d0:	b7 94       	ror	r11
     3d2:	a7 94       	ror	r10
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	c5 30       	cpi	r28, 0x05	; 5
     3d8:	d1 05       	cpc	r29, r1
     3da:	a1 f6       	brne	.-88     	; 0x384 <__fixunssfdi+0xb4>
     3dc:	c8 01       	movw	r24, r16
     3de:	b7 01       	movw	r22, r14
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e8       	ldi	r20, 0x80	; 128
     3e6:	5f e4       	ldi	r21, 0x4F	; 79
     3e8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
     3ec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     3f0:	5b 01       	movw	r10, r22
     3f2:	6c 01       	movw	r12, r24
     3f4:	9b 01       	movw	r18, r22
     3f6:	a6 01       	movw	r20, r12
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	02 2d       	mov	r16, r2
     402:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
     406:	59 01       	movw	r10, r18
     408:	6a 01       	movw	r12, r20
     40a:	7b 01       	movw	r14, r22
     40c:	8c 01       	movw	r16, r24
     40e:	95 01       	movw	r18, r10
     410:	a6 01       	movw	r20, r12
     412:	b7 01       	movw	r22, r14
     414:	c8 01       	movw	r24, r16
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	e2 e1       	ldi	r30, 0x12	; 18
     41c:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <__epilogue_restores__>

00000420 <__floatundisf>:
     420:	a2 e0       	ldi	r26, 0x02	; 2
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 f7 3a 	jmp	0x75ee	; 0x75ee <__prologue_saves__>
     42c:	12 2f       	mov	r17, r18
     42e:	b3 2e       	mov	r11, r19
     430:	a4 2e       	mov	r10, r20
     432:	95 2e       	mov	r9, r21
     434:	86 2e       	mov	r8, r22
     436:	37 2e       	mov	r3, r23
     438:	28 2e       	mov	r2, r24
     43a:	9a 83       	std	Y+2, r25	; 0x02
     43c:	c2 2e       	mov	r12, r18
     43e:	d3 2e       	mov	r13, r19
     440:	e4 2e       	mov	r14, r20
     442:	f5 2e       	mov	r15, r21
     444:	a7 01       	movw	r20, r14
     446:	96 01       	movw	r18, r12
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	21 17       	cp	r18, r17
     452:	a1 f4       	brne	.+40     	; 0x47c <__floatundisf+0x5c>
     454:	3b 15       	cp	r19, r11
     456:	91 f4       	brne	.+36     	; 0x47c <__floatundisf+0x5c>
     458:	4a 15       	cp	r20, r10
     45a:	81 f4       	brne	.+32     	; 0x47c <__floatundisf+0x5c>
     45c:	59 15       	cp	r21, r9
     45e:	71 f4       	brne	.+28     	; 0x47c <__floatundisf+0x5c>
     460:	68 15       	cp	r22, r8
     462:	61 f4       	brne	.+24     	; 0x47c <__floatundisf+0x5c>
     464:	73 15       	cp	r23, r3
     466:	51 f4       	brne	.+20     	; 0x47c <__floatundisf+0x5c>
     468:	82 15       	cp	r24, r2
     46a:	41 f4       	brne	.+16     	; 0x47c <__floatundisf+0x5c>
     46c:	aa 81       	ldd	r26, Y+2	; 0x02
     46e:	9a 17       	cp	r25, r26
     470:	29 f4       	brne	.+10     	; 0x47c <__floatundisf+0x5c>
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
     47a:	aa c0       	rjmp	.+340    	; 0x5d0 <__floatundisf+0x1b0>
     47c:	21 2f       	mov	r18, r17
     47e:	3b 2d       	mov	r19, r11
     480:	4a 2d       	mov	r20, r10
     482:	59 2d       	mov	r21, r9
     484:	68 2d       	mov	r22, r8
     486:	73 2d       	mov	r23, r3
     488:	82 2d       	mov	r24, r2
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	00 e2       	ldi	r16, 0x20	; 32
     48e:	0e 94 8c 18 	call	0x3118	; 0x3118 <__lshrdi3>
     492:	c9 01       	movw	r24, r18
     494:	da 01       	movw	r26, r20
     496:	80 30       	cpi	r24, 0x00	; 0
     498:	e0 e0       	ldi	r30, 0x00	; 0
     49a:	9e 07       	cpc	r25, r30
     49c:	e1 e0       	ldi	r30, 0x01	; 1
     49e:	ae 07       	cpc	r26, r30
     4a0:	e0 e0       	ldi	r30, 0x00	; 0
     4a2:	be 07       	cpc	r27, r30
     4a4:	80 f4       	brcc	.+32     	; 0x4c6 <__floatundisf+0xa6>
     4a6:	8f 3f       	cpi	r24, 0xFF	; 255
     4a8:	91 05       	cpc	r25, r1
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	31 f0       	breq	.+12     	; 0x4bc <__floatundisf+0x9c>
     4b0:	28 f0       	brcs	.+10     	; 0x4bc <__floatundisf+0x9c>
     4b2:	28 e0       	ldi	r18, 0x08	; 8
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <__floatundisf+0xc8>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <__floatundisf+0xc8>
     4c6:	80 30       	cpi	r24, 0x00	; 0
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	9f 07       	cpc	r25, r31
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	af 07       	cpc	r26, r31
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	bf 07       	cpc	r27, r31
     4d4:	28 f0       	brcs	.+10     	; 0x4e0 <__floatundisf+0xc0>
     4d6:	28 e1       	ldi	r18, 0x18	; 24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__floatundisf+0xc8>
     4e0:	20 e1       	ldi	r18, 0x10	; 16
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	02 2e       	mov	r0, r18
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__floatundisf+0xd4>
     4ec:	b6 95       	lsr	r27
     4ee:	a7 95       	ror	r26
     4f0:	97 95       	ror	r25
     4f2:	87 95       	ror	r24
     4f4:	0a 94       	dec	r0
     4f6:	d2 f7       	brpl	.-12     	; 0x4ec <__floatundisf+0xcc>
     4f8:	fc 01       	movw	r30, r24
     4fa:	e2 56       	subi	r30, 0x62	; 98
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	80 81       	ld	r24, Z
     500:	29 01       	movw	r4, r18
     502:	3a 01       	movw	r6, r20
     504:	48 0e       	add	r4, r24
     506:	51 1c       	adc	r5, r1
     508:	61 1c       	adc	r6, r1
     50a:	71 1c       	adc	r7, r1
     50c:	49 82       	std	Y+1, r4	; 0x01
     50e:	21 2f       	mov	r18, r17
     510:	3b 2d       	mov	r19, r11
     512:	4a 2d       	mov	r20, r10
     514:	59 2d       	mov	r21, r9
     516:	68 2d       	mov	r22, r8
     518:	73 2d       	mov	r23, r3
     51a:	82 2d       	mov	r24, r2
     51c:	9a 81       	ldd	r25, Y+2	; 0x02
     51e:	04 2d       	mov	r16, r4
     520:	0e 94 8c 18 	call	0x3118	; 0x3118 <__lshrdi3>
     524:	c9 01       	movw	r24, r18
     526:	da 01       	movw	r26, r20
     528:	4c 01       	movw	r8, r24
     52a:	5d 01       	movw	r10, r26
     52c:	80 e2       	ldi	r24, 0x20	; 32
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	84 19       	sub	r24, r4
     532:	95 09       	sbc	r25, r5
     534:	04 c0       	rjmp	.+8      	; 0x53e <__floatundisf+0x11e>
     536:	cc 0c       	add	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	ee 1c       	adc	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	8a 95       	dec	r24
     540:	d2 f7       	brpl	.-12     	; 0x536 <__floatundisf+0x116>
     542:	c1 14       	cp	r12, r1
     544:	d1 04       	cpc	r13, r1
     546:	e1 04       	cpc	r14, r1
     548:	f1 04       	cpc	r15, r1
     54a:	41 f0       	breq	.+16     	; 0x55c <__floatundisf+0x13c>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	88 2a       	or	r8, r24
     556:	99 2a       	or	r9, r25
     558:	aa 2a       	or	r10, r26
     55a:	bb 2a       	or	r11, r27
     55c:	90 e2       	ldi	r25, 0x20	; 32
     55e:	49 16       	cp	r4, r25
     560:	51 04       	cpc	r5, r1
     562:	61 04       	cpc	r6, r1
     564:	71 04       	cpc	r7, r1
     566:	59 f4       	brne	.+22     	; 0x57e <__floatundisf+0x15e>
     568:	0f 2e       	mov	r0, r31
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	ef 2e       	mov	r14, r31
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	ff 2e       	mov	r15, r31
     572:	f0 e8       	ldi	r31, 0x80	; 128
     574:	0f 2f       	mov	r16, r31
     576:	ff e4       	ldi	r31, 0x4F	; 79
     578:	1f 2f       	mov	r17, r31
     57a:	f0 2d       	mov	r31, r0
     57c:	21 c0       	rjmp	.+66     	; 0x5c0 <__floatundisf+0x1a0>
     57e:	af e1       	ldi	r26, 0x1F	; 31
     580:	4a 16       	cp	r4, r26
     582:	51 04       	cpc	r5, r1
     584:	61 04       	cpc	r6, r1
     586:	71 04       	cpc	r7, r1
     588:	59 f4       	brne	.+22     	; 0x5a0 <__floatundisf+0x180>
     58a:	0f 2e       	mov	r0, r31
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	ef 2e       	mov	r14, r31
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ff 2e       	mov	r15, r31
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	0f 2f       	mov	r16, r31
     598:	ff e4       	ldi	r31, 0x4F	; 79
     59a:	1f 2f       	mov	r17, r31
     59c:	f0 2d       	mov	r31, r0
     59e:	10 c0       	rjmp	.+32     	; 0x5c0 <__floatundisf+0x1a0>
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	09 80       	ldd	r0, Y+1	; 0x01
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <__floatundisf+0x194>
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	88 1f       	adc	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	0a 94       	dec	r0
     5b6:	d2 f7       	brpl	.-12     	; 0x5ac <__floatundisf+0x18c>
     5b8:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__floatsisf>
     5bc:	7b 01       	movw	r14, r22
     5be:	8c 01       	movw	r16, r24
     5c0:	c5 01       	movw	r24, r10
     5c2:	b4 01       	movw	r22, r8
     5c4:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
     5c8:	a8 01       	movw	r20, r16
     5ca:	97 01       	movw	r18, r14
     5cc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
     5d0:	22 96       	adiw	r28, 0x02	; 2
     5d2:	e2 e1       	ldi	r30, 0x12	; 18
     5d4:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <__epilogue_restores__>

000005d8 <__divdi3>:
     5d8:	a2 e7       	ldi	r26, 0x72	; 114
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e2 ef       	ldi	r30, 0xF2	; 242
     5de:	f2 e0       	ldi	r31, 0x02	; 2
     5e0:	0c 94 f7 3a 	jmp	0x75ee	; 0x75ee <__prologue_saves__>
     5e4:	98 2e       	mov	r9, r24
     5e6:	89 2e       	mov	r8, r25
     5e8:	71 2e       	mov	r7, r17
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	fe 01       	movw	r30, r28
     5ee:	31 96       	adiw	r30, 0x01	; 1
     5f0:	df 01       	movw	r26, r30
     5f2:	68 2e       	mov	r6, r24
     5f4:	1d 92       	st	X+, r1
     5f6:	6a 94       	dec	r6
     5f8:	e9 f7       	brne	.-6      	; 0x5f4 <__divdi3+0x1c>
     5fa:	29 83       	std	Y+1, r18	; 0x01
     5fc:	3a 83       	std	Y+2, r19	; 0x02
     5fe:	4b 83       	std	Y+3, r20	; 0x03
     600:	5c 83       	std	Y+4, r21	; 0x04
     602:	6d 83       	std	Y+5, r22	; 0x05
     604:	7e 83       	std	Y+6, r23	; 0x06
     606:	9f 82       	std	Y+7, r9	; 0x07
     608:	98 87       	std	Y+8, r25	; 0x08
     60a:	fe 01       	movw	r30, r28
     60c:	39 96       	adiw	r30, 0x09	; 9
     60e:	df 01       	movw	r26, r30
     610:	1d 92       	st	X+, r1
     612:	8a 95       	dec	r24
     614:	e9 f7       	brne	.-6      	; 0x610 <__divdi3+0x38>
     616:	a9 86       	std	Y+9, r10	; 0x09
     618:	ba 86       	std	Y+10, r11	; 0x0a
     61a:	cb 86       	std	Y+11, r12	; 0x0b
     61c:	dc 86       	std	Y+12, r13	; 0x0c
     61e:	ed 86       	std	Y+13, r14	; 0x0d
     620:	fe 86       	std	Y+14, r15	; 0x0e
     622:	0f 87       	std	Y+15, r16	; 0x0f
     624:	18 8b       	std	Y+16, r17	; 0x10
     626:	8d 81       	ldd	r24, Y+5	; 0x05
     628:	9e 81       	ldd	r25, Y+6	; 0x06
     62a:	af 81       	ldd	r26, Y+7	; 0x07
     62c:	b8 85       	ldd	r27, Y+8	; 0x08
     62e:	b7 fd       	sbrc	r27, 7
     630:	07 c0       	rjmp	.+14     	; 0x640 <__divdi3+0x68>
     632:	e1 96       	adiw	r28, 0x31	; 49
     634:	1c ae       	std	Y+60, r1	; 0x3c
     636:	1d ae       	std	Y+61, r1	; 0x3d
     638:	1e ae       	std	Y+62, r1	; 0x3e
     63a:	1f ae       	std	Y+63, r1	; 0x3f
     63c:	e1 97       	sbiw	r28, 0x31	; 49
     63e:	64 c0       	rjmp	.+200    	; 0x708 <__divdi3+0x130>
     640:	21 95       	neg	r18
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	12 16       	cp	r1, r18
     646:	08 f0       	brcs	.+2      	; 0x64a <__divdi3+0x72>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	31 95       	neg	r19
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	13 16       	cp	r1, r19
     650:	08 f0       	brcs	.+2      	; 0x654 <__divdi3+0x7c>
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	b3 2f       	mov	r27, r19
     656:	b8 1b       	sub	r27, r24
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	3b 17       	cp	r19, r27
     65c:	08 f0       	brcs	.+2      	; 0x660 <__divdi3+0x88>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	98 2b       	or	r25, r24
     662:	41 95       	neg	r20
     664:	31 e0       	ldi	r19, 0x01	; 1
     666:	14 16       	cp	r1, r20
     668:	08 f0       	brcs	.+2      	; 0x66c <__divdi3+0x94>
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	a4 2f       	mov	r26, r20
     66e:	a9 1b       	sub	r26, r25
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	4a 17       	cp	r20, r26
     674:	08 f0       	brcs	.+2      	; 0x678 <__divdi3+0xa0>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	38 2b       	or	r19, r24
     67a:	51 95       	neg	r21
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	15 16       	cp	r1, r21
     680:	08 f0       	brcs	.+2      	; 0x684 <__divdi3+0xac>
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	f5 2f       	mov	r31, r21
     686:	f3 1b       	sub	r31, r19
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	5f 17       	cp	r21, r31
     68c:	08 f0       	brcs	.+2      	; 0x690 <__divdi3+0xb8>
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	98 2b       	or	r25, r24
     692:	61 95       	neg	r22
     694:	31 e0       	ldi	r19, 0x01	; 1
     696:	16 16       	cp	r1, r22
     698:	08 f0       	brcs	.+2      	; 0x69c <__divdi3+0xc4>
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	e6 2f       	mov	r30, r22
     69e:	e9 1b       	sub	r30, r25
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	6e 17       	cp	r22, r30
     6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__divdi3+0xd0>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	38 2b       	or	r19, r24
     6aa:	71 95       	neg	r23
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	17 16       	cp	r1, r23
     6b0:	08 f0       	brcs	.+2      	; 0x6b4 <__divdi3+0xdc>
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	57 2f       	mov	r21, r23
     6b6:	53 1b       	sub	r21, r19
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	75 17       	cp	r23, r21
     6bc:	08 f0       	brcs	.+2      	; 0x6c0 <__divdi3+0xe8>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	48 2b       	or	r20, r24
     6c2:	89 2d       	mov	r24, r9
     6c4:	81 95       	neg	r24
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	18 16       	cp	r1, r24
     6ca:	08 f0       	brcs	.+2      	; 0x6ce <__divdi3+0xf6>
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	68 2e       	mov	r6, r24
     6d0:	64 1a       	sub	r6, r20
     6d2:	46 2d       	mov	r20, r6
     6d4:	31 e0       	ldi	r19, 0x01	; 1
     6d6:	86 15       	cp	r24, r6
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <__divdi3+0x104>
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	93 2b       	or	r25, r19
     6de:	88 2d       	mov	r24, r8
     6e0:	81 95       	neg	r24
     6e2:	89 1b       	sub	r24, r25
     6e4:	29 83       	std	Y+1, r18	; 0x01
     6e6:	ba 83       	std	Y+2, r27	; 0x02
     6e8:	ab 83       	std	Y+3, r26	; 0x03
     6ea:	fc 83       	std	Y+4, r31	; 0x04
     6ec:	ed 83       	std	Y+5, r30	; 0x05
     6ee:	5e 83       	std	Y+6, r21	; 0x06
     6f0:	4f 83       	std	Y+7, r20	; 0x07
     6f2:	88 87       	std	Y+8, r24	; 0x08
     6f4:	2f ef       	ldi	r18, 0xFF	; 255
     6f6:	3f ef       	ldi	r19, 0xFF	; 255
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f ef       	ldi	r21, 0xFF	; 255
     6fc:	e1 96       	adiw	r28, 0x31	; 49
     6fe:	2c af       	std	Y+60, r18	; 0x3c
     700:	3d af       	std	Y+61, r19	; 0x3d
     702:	4e af       	std	Y+62, r20	; 0x3e
     704:	5f af       	std	Y+63, r21	; 0x3f
     706:	e1 97       	sbiw	r28, 0x31	; 49
     708:	8d 85       	ldd	r24, Y+13	; 0x0d
     70a:	9e 85       	ldd	r25, Y+14	; 0x0e
     70c:	af 85       	ldd	r26, Y+15	; 0x0f
     70e:	b8 89       	ldd	r27, Y+16	; 0x10
     710:	b7 ff       	sbrs	r27, 7
     712:	6a c0       	rjmp	.+212    	; 0x7e8 <__divdi3+0x210>
     714:	e1 96       	adiw	r28, 0x31	; 49
     716:	4c ad       	ldd	r20, Y+60	; 0x3c
     718:	5d ad       	ldd	r21, Y+61	; 0x3d
     71a:	6e ad       	ldd	r22, Y+62	; 0x3e
     71c:	7f ad       	ldd	r23, Y+63	; 0x3f
     71e:	e1 97       	sbiw	r28, 0x31	; 49
     720:	40 95       	com	r20
     722:	50 95       	com	r21
     724:	60 95       	com	r22
     726:	70 95       	com	r23
     728:	e1 96       	adiw	r28, 0x31	; 49
     72a:	4c af       	std	Y+60, r20	; 0x3c
     72c:	5d af       	std	Y+61, r21	; 0x3d
     72e:	6e af       	std	Y+62, r22	; 0x3e
     730:	7f af       	std	Y+63, r23	; 0x3f
     732:	e1 97       	sbiw	r28, 0x31	; 49
     734:	a1 94       	neg	r10
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	1a 14       	cp	r1, r10
     73a:	08 f0       	brcs	.+2      	; 0x73e <__divdi3+0x166>
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	b1 94       	neg	r11
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	1b 14       	cp	r1, r11
     744:	08 f0       	brcs	.+2      	; 0x748 <__divdi3+0x170>
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	6b 2d       	mov	r22, r11
     74a:	68 1b       	sub	r22, r24
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	b6 16       	cp	r11, r22
     750:	08 f0       	brcs	.+2      	; 0x754 <__divdi3+0x17c>
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	98 2b       	or	r25, r24
     756:	c1 94       	neg	r12
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	1c 14       	cp	r1, r12
     75c:	08 f0       	brcs	.+2      	; 0x760 <__divdi3+0x188>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	5c 2d       	mov	r21, r12
     762:	59 1b       	sub	r21, r25
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	c5 16       	cp	r12, r21
     768:	08 f0       	brcs	.+2      	; 0x76c <__divdi3+0x194>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	28 2b       	or	r18, r24
     76e:	d1 94       	neg	r13
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	1d 14       	cp	r1, r13
     774:	08 f0       	brcs	.+2      	; 0x778 <__divdi3+0x1a0>
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	4d 2d       	mov	r20, r13
     77a:	42 1b       	sub	r20, r18
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	d4 16       	cp	r13, r20
     780:	08 f0       	brcs	.+2      	; 0x784 <__divdi3+0x1ac>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	98 2b       	or	r25, r24
     786:	e1 94       	neg	r14
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	1e 14       	cp	r1, r14
     78c:	08 f0       	brcs	.+2      	; 0x790 <__divdi3+0x1b8>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	3e 2d       	mov	r19, r14
     792:	39 1b       	sub	r19, r25
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	e3 16       	cp	r14, r19
     798:	08 f0       	brcs	.+2      	; 0x79c <__divdi3+0x1c4>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	28 2b       	or	r18, r24
     79e:	f1 94       	neg	r15
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	1f 14       	cp	r1, r15
     7a4:	08 f0       	brcs	.+2      	; 0x7a8 <__divdi3+0x1d0>
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	7f 2d       	mov	r23, r15
     7aa:	72 1b       	sub	r23, r18
     7ac:	27 2f       	mov	r18, r23
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	f7 16       	cp	r15, r23
     7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__divdi3+0x1de>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	98 2b       	or	r25, r24
     7b8:	01 95       	neg	r16
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	10 16       	cp	r1, r16
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <__divdi3+0x1ea>
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	80 2f       	mov	r24, r16
     7c4:	89 1b       	sub	r24, r25
     7c6:	98 2f       	mov	r25, r24
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	09 17       	cp	r16, r25
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <__divdi3+0x1f8>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	18 2b       	or	r17, r24
     7d2:	87 2d       	mov	r24, r7
     7d4:	81 95       	neg	r24
     7d6:	81 1b       	sub	r24, r17
     7d8:	a9 86       	std	Y+9, r10	; 0x09
     7da:	6a 87       	std	Y+10, r22	; 0x0a
     7dc:	5b 87       	std	Y+11, r21	; 0x0b
     7de:	4c 87       	std	Y+12, r20	; 0x0c
     7e0:	3d 87       	std	Y+13, r19	; 0x0d
     7e2:	2e 87       	std	Y+14, r18	; 0x0e
     7e4:	9f 87       	std	Y+15, r25	; 0x0f
     7e6:	88 8b       	std	Y+16, r24	; 0x10
     7e8:	99 81       	ldd	r25, Y+1	; 0x01
     7ea:	2a 81       	ldd	r18, Y+2	; 0x02
     7ec:	3b 81       	ldd	r19, Y+3	; 0x03
     7ee:	4c 81       	ldd	r20, Y+4	; 0x04
     7f0:	5d 81       	ldd	r21, Y+5	; 0x05
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	7f 81       	ldd	r23, Y+7	; 0x07
     7f6:	a8 85       	ldd	r26, Y+8	; 0x08
     7f8:	b9 85       	ldd	r27, Y+9	; 0x09
     7fa:	1a 85       	ldd	r17, Y+10	; 0x0a
     7fc:	0b 85       	ldd	r16, Y+11	; 0x0b
     7fe:	fc 84       	ldd	r15, Y+12	; 0x0c
     800:	ed 84       	ldd	r14, Y+13	; 0x0d
     802:	de 84       	ldd	r13, Y+14	; 0x0e
     804:	cf 84       	ldd	r12, Y+15	; 0x0f
     806:	b8 88       	ldd	r11, Y+16	; 0x10
     808:	88 e0       	ldi	r24, 0x08	; 8
     80a:	e1 e1       	ldi	r30, 0x11	; 17
     80c:	8e 2e       	mov	r8, r30
     80e:	91 2c       	mov	r9, r1
     810:	8c 0e       	add	r8, r28
     812:	9d 1e       	adc	r9, r29
     814:	f4 01       	movw	r30, r8
     816:	68 2e       	mov	r6, r24
     818:	11 92       	st	Z+, r1
     81a:	6a 94       	dec	r6
     81c:	e9 f7       	brne	.-6      	; 0x818 <__divdi3+0x240>
     81e:	99 8b       	std	Y+17, r25	; 0x11
     820:	2a 8b       	std	Y+18, r18	; 0x12
     822:	3b 8b       	std	Y+19, r19	; 0x13
     824:	4c 8b       	std	Y+20, r20	; 0x14
     826:	5d 8b       	std	Y+21, r21	; 0x15
     828:	6e 8b       	std	Y+22, r22	; 0x16
     82a:	7f 8b       	std	Y+23, r23	; 0x17
     82c:	a8 8f       	std	Y+24, r26	; 0x18
     82e:	9e 01       	movw	r18, r28
     830:	27 5e       	subi	r18, 0xE7	; 231
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	f9 01       	movw	r30, r18
     836:	11 92       	st	Z+, r1
     838:	8a 95       	dec	r24
     83a:	e9 f7       	brne	.-6      	; 0x836 <__divdi3+0x25e>
     83c:	b9 8f       	std	Y+25, r27	; 0x19
     83e:	1a 8f       	std	Y+26, r17	; 0x1a
     840:	0b 8f       	std	Y+27, r16	; 0x1b
     842:	fc 8e       	std	Y+28, r15	; 0x1c
     844:	ed 8e       	std	Y+29, r14	; 0x1d
     846:	de 8e       	std	Y+30, r13	; 0x1e
     848:	cf 8e       	std	Y+31, r12	; 0x1f
     84a:	b8 a2       	std	Y+32, r11	; 0x20
     84c:	29 8c       	ldd	r2, Y+25	; 0x19
     84e:	3a 8c       	ldd	r3, Y+26	; 0x1a
     850:	4b 8c       	ldd	r4, Y+27	; 0x1b
     852:	5c 8c       	ldd	r5, Y+28	; 0x1c
     854:	ed 8c       	ldd	r14, Y+29	; 0x1d
     856:	fe 8c       	ldd	r15, Y+30	; 0x1e
     858:	0f 8d       	ldd	r16, Y+31	; 0x1f
     85a:	18 a1       	ldd	r17, Y+32	; 0x20
     85c:	69 88       	ldd	r6, Y+17	; 0x11
     85e:	7a 88       	ldd	r7, Y+18	; 0x12
     860:	8b 88       	ldd	r8, Y+19	; 0x13
     862:	9c 88       	ldd	r9, Y+20	; 0x14
     864:	21 96       	adiw	r28, 0x01	; 1
     866:	6c ae       	std	Y+60, r6	; 0x3c
     868:	7d ae       	std	Y+61, r7	; 0x3d
     86a:	8e ae       	std	Y+62, r8	; 0x3e
     86c:	9f ae       	std	Y+63, r9	; 0x3f
     86e:	21 97       	sbiw	r28, 0x01	; 1
     870:	6d 88       	ldd	r6, Y+21	; 0x15
     872:	7e 88       	ldd	r7, Y+22	; 0x16
     874:	8f 88       	ldd	r8, Y+23	; 0x17
     876:	98 8c       	ldd	r9, Y+24	; 0x18
     878:	e1 14       	cp	r14, r1
     87a:	f1 04       	cpc	r15, r1
     87c:	01 05       	cpc	r16, r1
     87e:	11 05       	cpc	r17, r1
     880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
     882:	d9 c3       	rjmp	.+1970   	; 0x1036 <__stack+0x7d7>
     884:	62 14       	cp	r6, r2
     886:	73 04       	cpc	r7, r3
     888:	84 04       	cpc	r8, r4
     88a:	95 04       	cpc	r9, r5
     88c:	08 f0       	brcs	.+2      	; 0x890 <__stack+0x31>
     88e:	57 c1       	rjmp	.+686    	; 0xb3e <__stack+0x2df>
     890:	00 e0       	ldi	r16, 0x00	; 0
     892:	20 16       	cp	r2, r16
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	30 06       	cpc	r3, r16
     898:	01 e0       	ldi	r16, 0x01	; 1
     89a:	40 06       	cpc	r4, r16
     89c:	00 e0       	ldi	r16, 0x00	; 0
     89e:	50 06       	cpc	r5, r16
     8a0:	88 f4       	brcc	.+34     	; 0x8c4 <__stack+0x65>
     8a2:	1f ef       	ldi	r17, 0xFF	; 255
     8a4:	21 16       	cp	r2, r17
     8a6:	31 04       	cpc	r3, r1
     8a8:	41 04       	cpc	r4, r1
     8aa:	51 04       	cpc	r5, r1
     8ac:	39 f0       	breq	.+14     	; 0x8bc <__stack+0x5d>
     8ae:	30 f0       	brcs	.+12     	; 0x8bc <__stack+0x5d>
     8b0:	48 e0       	ldi	r20, 0x08	; 8
     8b2:	e4 2e       	mov	r14, r20
     8b4:	f1 2c       	mov	r15, r1
     8b6:	01 2d       	mov	r16, r1
     8b8:	11 2d       	mov	r17, r1
     8ba:	18 c0       	rjmp	.+48     	; 0x8ec <__stack+0x8d>
     8bc:	ee 24       	eor	r14, r14
     8be:	ff 24       	eor	r15, r15
     8c0:	87 01       	movw	r16, r14
     8c2:	14 c0       	rjmp	.+40     	; 0x8ec <__stack+0x8d>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	22 16       	cp	r2, r18
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	32 06       	cpc	r3, r18
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	42 06       	cpc	r4, r18
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	52 06       	cpc	r5, r18
     8d4:	30 f0       	brcs	.+12     	; 0x8e2 <__stack+0x83>
     8d6:	38 e1       	ldi	r19, 0x18	; 24
     8d8:	e3 2e       	mov	r14, r19
     8da:	f1 2c       	mov	r15, r1
     8dc:	01 2d       	mov	r16, r1
     8de:	11 2d       	mov	r17, r1
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <__stack+0x8d>
     8e2:	20 e1       	ldi	r18, 0x10	; 16
     8e4:	e2 2e       	mov	r14, r18
     8e6:	f1 2c       	mov	r15, r1
     8e8:	01 2d       	mov	r16, r1
     8ea:	11 2d       	mov	r17, r1
     8ec:	d2 01       	movw	r26, r4
     8ee:	c1 01       	movw	r24, r2
     8f0:	0e 2c       	mov	r0, r14
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__stack+0x9d>
     8f4:	b6 95       	lsr	r27
     8f6:	a7 95       	ror	r26
     8f8:	97 95       	ror	r25
     8fa:	87 95       	ror	r24
     8fc:	0a 94       	dec	r0
     8fe:	d2 f7       	brpl	.-12     	; 0x8f4 <__stack+0x95>
     900:	82 56       	subi	r24, 0x62	; 98
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	dc 01       	movw	r26, r24
     906:	2c 91       	ld	r18, X
     908:	80 e2       	ldi	r24, 0x20	; 32
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	8e 19       	sub	r24, r14
     912:	9f 09       	sbc	r25, r15
     914:	a0 0b       	sbc	r26, r16
     916:	b1 0b       	sbc	r27, r17
     918:	7c 01       	movw	r14, r24
     91a:	8d 01       	movw	r16, r26
     91c:	e2 1a       	sub	r14, r18
     91e:	f1 08       	sbc	r15, r1
     920:	01 09       	sbc	r16, r1
     922:	11 09       	sbc	r17, r1
     924:	e1 14       	cp	r14, r1
     926:	f1 04       	cpc	r15, r1
     928:	01 05       	cpc	r16, r1
     92a:	11 05       	cpc	r17, r1
     92c:	d1 f1       	breq	.+116    	; 0x9a2 <__stack+0x143>
     92e:	0e 2c       	mov	r0, r14
     930:	04 c0       	rjmp	.+8      	; 0x93a <__stack+0xdb>
     932:	22 0c       	add	r2, r2
     934:	33 1c       	adc	r3, r3
     936:	44 1c       	adc	r4, r4
     938:	55 1c       	adc	r5, r5
     93a:	0a 94       	dec	r0
     93c:	d2 f7       	brpl	.-12     	; 0x932 <__stack+0xd3>
     93e:	a4 01       	movw	r20, r8
     940:	93 01       	movw	r18, r6
     942:	0e 2c       	mov	r0, r14
     944:	04 c0       	rjmp	.+8      	; 0x94e <__stack+0xef>
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	44 1f       	adc	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	0a 94       	dec	r0
     950:	d2 f7       	brpl	.-12     	; 0x946 <__stack+0xe7>
     952:	80 e2       	ldi	r24, 0x20	; 32
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	8e 19       	sub	r24, r14
     958:	9f 09       	sbc	r25, r15
     95a:	21 96       	adiw	r28, 0x01	; 1
     95c:	6c ac       	ldd	r6, Y+60	; 0x3c
     95e:	7d ac       	ldd	r7, Y+61	; 0x3d
     960:	8e ac       	ldd	r8, Y+62	; 0x3e
     962:	9f ac       	ldd	r9, Y+63	; 0x3f
     964:	21 97       	sbiw	r28, 0x01	; 1
     966:	04 c0       	rjmp	.+8      	; 0x970 <__stack+0x111>
     968:	96 94       	lsr	r9
     96a:	87 94       	ror	r8
     96c:	77 94       	ror	r7
     96e:	67 94       	ror	r6
     970:	8a 95       	dec	r24
     972:	d2 f7       	brpl	.-12     	; 0x968 <__stack+0x109>
     974:	62 2a       	or	r6, r18
     976:	73 2a       	or	r7, r19
     978:	84 2a       	or	r8, r20
     97a:	95 2a       	or	r9, r21
     97c:	21 96       	adiw	r28, 0x01	; 1
     97e:	ac ac       	ldd	r10, Y+60	; 0x3c
     980:	bd ac       	ldd	r11, Y+61	; 0x3d
     982:	ce ac       	ldd	r12, Y+62	; 0x3e
     984:	df ac       	ldd	r13, Y+63	; 0x3f
     986:	21 97       	sbiw	r28, 0x01	; 1
     988:	04 c0       	rjmp	.+8      	; 0x992 <__stack+0x133>
     98a:	aa 0c       	add	r10, r10
     98c:	bb 1c       	adc	r11, r11
     98e:	cc 1c       	adc	r12, r12
     990:	dd 1c       	adc	r13, r13
     992:	ea 94       	dec	r14
     994:	d2 f7       	brpl	.-12     	; 0x98a <__stack+0x12b>
     996:	21 96       	adiw	r28, 0x01	; 1
     998:	ac ae       	std	Y+60, r10	; 0x3c
     99a:	bd ae       	std	Y+61, r11	; 0x3d
     99c:	ce ae       	std	Y+62, r12	; 0x3e
     99e:	df ae       	std	Y+63, r13	; 0x3f
     9a0:	21 97       	sbiw	r28, 0x01	; 1
     9a2:	62 01       	movw	r12, r4
     9a4:	ee 24       	eor	r14, r14
     9a6:	ff 24       	eor	r15, r15
     9a8:	29 96       	adiw	r28, 0x09	; 9
     9aa:	cc ae       	std	Y+60, r12	; 0x3c
     9ac:	dd ae       	std	Y+61, r13	; 0x3d
     9ae:	ee ae       	std	Y+62, r14	; 0x3e
     9b0:	ff ae       	std	Y+63, r15	; 0x3f
     9b2:	29 97       	sbiw	r28, 0x09	; 9
     9b4:	92 01       	movw	r18, r4
     9b6:	81 01       	movw	r16, r2
     9b8:	20 70       	andi	r18, 0x00	; 0
     9ba:	30 70       	andi	r19, 0x00	; 0
     9bc:	2d 96       	adiw	r28, 0x0d	; 13
     9be:	0c af       	std	Y+60, r16	; 0x3c
     9c0:	1d af       	std	Y+61, r17	; 0x3d
     9c2:	2e af       	std	Y+62, r18	; 0x3e
     9c4:	3f af       	std	Y+63, r19	; 0x3f
     9c6:	2d 97       	sbiw	r28, 0x0d	; 13
     9c8:	c4 01       	movw	r24, r8
     9ca:	b3 01       	movw	r22, r6
     9cc:	a7 01       	movw	r20, r14
     9ce:	96 01       	movw	r18, r12
     9d0:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     9d4:	7b 01       	movw	r14, r22
     9d6:	8c 01       	movw	r16, r24
     9d8:	c4 01       	movw	r24, r8
     9da:	b3 01       	movw	r22, r6
     9dc:	29 96       	adiw	r28, 0x09	; 9
     9de:	2c ad       	ldd	r18, Y+60	; 0x3c
     9e0:	3d ad       	ldd	r19, Y+61	; 0x3d
     9e2:	4e ad       	ldd	r20, Y+62	; 0x3e
     9e4:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e6:	29 97       	sbiw	r28, 0x09	; 9
     9e8:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     9ec:	c9 01       	movw	r24, r18
     9ee:	da 01       	movw	r26, r20
     9f0:	3c 01       	movw	r6, r24
     9f2:	4d 01       	movw	r8, r26
     9f4:	c4 01       	movw	r24, r8
     9f6:	b3 01       	movw	r22, r6
     9f8:	2d 96       	adiw	r28, 0x0d	; 13
     9fa:	2c ad       	ldd	r18, Y+60	; 0x3c
     9fc:	3d ad       	ldd	r19, Y+61	; 0x3d
     9fe:	4e ad       	ldd	r20, Y+62	; 0x3e
     a00:	5f ad       	ldd	r21, Y+63	; 0x3f
     a02:	2d 97       	sbiw	r28, 0x0d	; 13
     a04:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	87 01       	movw	r16, r14
     a0e:	ff 24       	eor	r15, r15
     a10:	ee 24       	eor	r14, r14
     a12:	21 96       	adiw	r28, 0x01	; 1
     a14:	ac ac       	ldd	r10, Y+60	; 0x3c
     a16:	bd ac       	ldd	r11, Y+61	; 0x3d
     a18:	ce ac       	ldd	r12, Y+62	; 0x3e
     a1a:	df ac       	ldd	r13, Y+63	; 0x3f
     a1c:	21 97       	sbiw	r28, 0x01	; 1
     a1e:	c6 01       	movw	r24, r12
     a20:	aa 27       	eor	r26, r26
     a22:	bb 27       	eor	r27, r27
     a24:	57 01       	movw	r10, r14
     a26:	68 01       	movw	r12, r16
     a28:	a8 2a       	or	r10, r24
     a2a:	b9 2a       	or	r11, r25
     a2c:	ca 2a       	or	r12, r26
     a2e:	db 2a       	or	r13, r27
     a30:	a2 16       	cp	r10, r18
     a32:	b3 06       	cpc	r11, r19
     a34:	c4 06       	cpc	r12, r20
     a36:	d5 06       	cpc	r13, r21
     a38:	e0 f4       	brcc	.+56     	; 0xa72 <__stack+0x213>
     a3a:	08 94       	sec
     a3c:	61 08       	sbc	r6, r1
     a3e:	71 08       	sbc	r7, r1
     a40:	81 08       	sbc	r8, r1
     a42:	91 08       	sbc	r9, r1
     a44:	a2 0c       	add	r10, r2
     a46:	b3 1c       	adc	r11, r3
     a48:	c4 1c       	adc	r12, r4
     a4a:	d5 1c       	adc	r13, r5
     a4c:	a2 14       	cp	r10, r2
     a4e:	b3 04       	cpc	r11, r3
     a50:	c4 04       	cpc	r12, r4
     a52:	d5 04       	cpc	r13, r5
     a54:	70 f0       	brcs	.+28     	; 0xa72 <__stack+0x213>
     a56:	a2 16       	cp	r10, r18
     a58:	b3 06       	cpc	r11, r19
     a5a:	c4 06       	cpc	r12, r20
     a5c:	d5 06       	cpc	r13, r21
     a5e:	48 f4       	brcc	.+18     	; 0xa72 <__stack+0x213>
     a60:	08 94       	sec
     a62:	61 08       	sbc	r6, r1
     a64:	71 08       	sbc	r7, r1
     a66:	81 08       	sbc	r8, r1
     a68:	91 08       	sbc	r9, r1
     a6a:	a2 0c       	add	r10, r2
     a6c:	b3 1c       	adc	r11, r3
     a6e:	c4 1c       	adc	r12, r4
     a70:	d5 1c       	adc	r13, r5
     a72:	a2 1a       	sub	r10, r18
     a74:	b3 0a       	sbc	r11, r19
     a76:	c4 0a       	sbc	r12, r20
     a78:	d5 0a       	sbc	r13, r21
     a7a:	c6 01       	movw	r24, r12
     a7c:	b5 01       	movw	r22, r10
     a7e:	29 96       	adiw	r28, 0x09	; 9
     a80:	2c ad       	ldd	r18, Y+60	; 0x3c
     a82:	3d ad       	ldd	r19, Y+61	; 0x3d
     a84:	4e ad       	ldd	r20, Y+62	; 0x3e
     a86:	5f ad       	ldd	r21, Y+63	; 0x3f
     a88:	29 97       	sbiw	r28, 0x09	; 9
     a8a:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     a8e:	7b 01       	movw	r14, r22
     a90:	8c 01       	movw	r16, r24
     a92:	c6 01       	movw	r24, r12
     a94:	b5 01       	movw	r22, r10
     a96:	29 96       	adiw	r28, 0x09	; 9
     a98:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9a:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9c:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9e:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa0:	29 97       	sbiw	r28, 0x09	; 9
     aa2:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     aa6:	c9 01       	movw	r24, r18
     aa8:	da 01       	movw	r26, r20
     aaa:	5c 01       	movw	r10, r24
     aac:	6d 01       	movw	r12, r26
     aae:	c6 01       	movw	r24, r12
     ab0:	b5 01       	movw	r22, r10
     ab2:	2d 96       	adiw	r28, 0x0d	; 13
     ab4:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab6:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab8:	4e ad       	ldd	r20, Y+62	; 0x3e
     aba:	5f ad       	ldd	r21, Y+63	; 0x3f
     abc:	2d 97       	sbiw	r28, 0x0d	; 13
     abe:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	87 01       	movw	r16, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	ee 24       	eor	r14, r14
     acc:	21 96       	adiw	r28, 0x01	; 1
     ace:	8c ad       	ldd	r24, Y+60	; 0x3c
     ad0:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad2:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad4:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad6:	21 97       	sbiw	r28, 0x01	; 1
     ad8:	a0 70       	andi	r26, 0x00	; 0
     ada:	b0 70       	andi	r27, 0x00	; 0
     adc:	e8 2a       	or	r14, r24
     ade:	f9 2a       	or	r15, r25
     ae0:	0a 2b       	or	r16, r26
     ae2:	1b 2b       	or	r17, r27
     ae4:	e2 16       	cp	r14, r18
     ae6:	f3 06       	cpc	r15, r19
     ae8:	04 07       	cpc	r16, r20
     aea:	15 07       	cpc	r17, r21
     aec:	c0 f4       	brcc	.+48     	; 0xb1e <__stack+0x2bf>
     aee:	08 94       	sec
     af0:	a1 08       	sbc	r10, r1
     af2:	b1 08       	sbc	r11, r1
     af4:	c1 08       	sbc	r12, r1
     af6:	d1 08       	sbc	r13, r1
     af8:	e2 0c       	add	r14, r2
     afa:	f3 1c       	adc	r15, r3
     afc:	04 1d       	adc	r16, r4
     afe:	15 1d       	adc	r17, r5
     b00:	e2 14       	cp	r14, r2
     b02:	f3 04       	cpc	r15, r3
     b04:	04 05       	cpc	r16, r4
     b06:	15 05       	cpc	r17, r5
     b08:	50 f0       	brcs	.+20     	; 0xb1e <__stack+0x2bf>
     b0a:	e2 16       	cp	r14, r18
     b0c:	f3 06       	cpc	r15, r19
     b0e:	04 07       	cpc	r16, r20
     b10:	15 07       	cpc	r17, r21
     b12:	28 f4       	brcc	.+10     	; 0xb1e <__stack+0x2bf>
     b14:	08 94       	sec
     b16:	a1 08       	sbc	r10, r1
     b18:	b1 08       	sbc	r11, r1
     b1a:	c1 08       	sbc	r12, r1
     b1c:	d1 08       	sbc	r13, r1
     b1e:	d3 01       	movw	r26, r6
     b20:	99 27       	eor	r25, r25
     b22:	88 27       	eor	r24, r24
     b24:	86 01       	movw	r16, r12
     b26:	75 01       	movw	r14, r10
     b28:	e8 2a       	or	r14, r24
     b2a:	f9 2a       	or	r15, r25
     b2c:	0a 2b       	or	r16, r26
     b2e:	1b 2b       	or	r17, r27
     b30:	25 96       	adiw	r28, 0x05	; 5
     b32:	ec ae       	std	Y+60, r14	; 0x3c
     b34:	fd ae       	std	Y+61, r15	; 0x3d
     b36:	0e af       	std	Y+62, r16	; 0x3e
     b38:	1f af       	std	Y+63, r17	; 0x3f
     b3a:	25 97       	sbiw	r28, 0x05	; 5
     b3c:	eb c4       	rjmp	.+2518   	; 0x1514 <__stack+0xcb5>
     b3e:	21 14       	cp	r2, r1
     b40:	31 04       	cpc	r3, r1
     b42:	41 04       	cpc	r4, r1
     b44:	51 04       	cpc	r5, r1
     b46:	71 f4       	brne	.+28     	; 0xb64 <__stack+0x305>
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     b5c:	c9 01       	movw	r24, r18
     b5e:	da 01       	movw	r26, r20
     b60:	1c 01       	movw	r2, r24
     b62:	2d 01       	movw	r4, r26
     b64:	00 e0       	ldi	r16, 0x00	; 0
     b66:	20 16       	cp	r2, r16
     b68:	00 e0       	ldi	r16, 0x00	; 0
     b6a:	30 06       	cpc	r3, r16
     b6c:	01 e0       	ldi	r16, 0x01	; 1
     b6e:	40 06       	cpc	r4, r16
     b70:	00 e0       	ldi	r16, 0x00	; 0
     b72:	50 06       	cpc	r5, r16
     b74:	88 f4       	brcc	.+34     	; 0xb98 <__stack+0x339>
     b76:	1f ef       	ldi	r17, 0xFF	; 255
     b78:	21 16       	cp	r2, r17
     b7a:	31 04       	cpc	r3, r1
     b7c:	41 04       	cpc	r4, r1
     b7e:	51 04       	cpc	r5, r1
     b80:	31 f0       	breq	.+12     	; 0xb8e <__stack+0x32f>
     b82:	28 f0       	brcs	.+10     	; 0xb8e <__stack+0x32f>
     b84:	48 e0       	ldi	r20, 0x08	; 8
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	17 c0       	rjmp	.+46     	; 0xbbc <__stack+0x35d>
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	12 c0       	rjmp	.+36     	; 0xbbc <__stack+0x35d>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	22 16       	cp	r2, r18
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	32 06       	cpc	r3, r18
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	42 06       	cpc	r4, r18
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	52 06       	cpc	r5, r18
     ba8:	28 f0       	brcs	.+10     	; 0xbb4 <__stack+0x355>
     baa:	48 e1       	ldi	r20, 0x18	; 24
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x35d>
     bb4:	40 e1       	ldi	r20, 0x10	; 16
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	d2 01       	movw	r26, r4
     bbe:	c1 01       	movw	r24, r2
     bc0:	04 2e       	mov	r0, r20
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__stack+0x36d>
     bc4:	b6 95       	lsr	r27
     bc6:	a7 95       	ror	r26
     bc8:	97 95       	ror	r25
     bca:	87 95       	ror	r24
     bcc:	0a 94       	dec	r0
     bce:	d2 f7       	brpl	.-12     	; 0xbc4 <__stack+0x365>
     bd0:	82 56       	subi	r24, 0x62	; 98
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	dc 01       	movw	r26, r24
     bd6:	2c 91       	ld	r18, X
     bd8:	e0 e2       	ldi	r30, 0x20	; 32
     bda:	ee 2e       	mov	r14, r30
     bdc:	f1 2c       	mov	r15, r1
     bde:	01 2d       	mov	r16, r1
     be0:	11 2d       	mov	r17, r1
     be2:	d8 01       	movw	r26, r16
     be4:	c7 01       	movw	r24, r14
     be6:	84 1b       	sub	r24, r20
     be8:	95 0b       	sbc	r25, r21
     bea:	a6 0b       	sbc	r26, r22
     bec:	b7 0b       	sbc	r27, r23
     bee:	82 1b       	sub	r24, r18
     bf0:	91 09       	sbc	r25, r1
     bf2:	a1 09       	sbc	r26, r1
     bf4:	b1 09       	sbc	r27, r1
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 05       	cpc	r26, r1
     bfa:	b1 05       	cpc	r27, r1
     bfc:	61 f4       	brne	.+24     	; 0xc16 <__stack+0x3b7>
     bfe:	64 01       	movw	r12, r8
     c00:	53 01       	movw	r10, r6
     c02:	a2 18       	sub	r10, r2
     c04:	b3 08       	sbc	r11, r3
     c06:	c4 08       	sbc	r12, r4
     c08:	d5 08       	sbc	r13, r5
     c0a:	31 e0       	ldi	r19, 0x01	; 1
     c0c:	63 2e       	mov	r6, r19
     c0e:	71 2c       	mov	r7, r1
     c10:	81 2c       	mov	r8, r1
     c12:	91 2c       	mov	r9, r1
     c14:	24 c1       	rjmp	.+584    	; 0xe5e <__stack+0x5ff>
     c16:	e3 96       	adiw	r28, 0x33	; 51
     c18:	8f af       	std	Y+63, r24	; 0x3f
     c1a:	e3 97       	sbiw	r28, 0x33	; 51
     c1c:	08 2e       	mov	r0, r24
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__stack+0x3c9>
     c20:	22 0c       	add	r2, r2
     c22:	33 1c       	adc	r3, r3
     c24:	44 1c       	adc	r4, r4
     c26:	55 1c       	adc	r5, r5
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__stack+0x3c1>
     c2c:	ee 2d       	mov	r30, r14
     c2e:	e8 1b       	sub	r30, r24
     c30:	64 01       	movw	r12, r8
     c32:	53 01       	movw	r10, r6
     c34:	0e 2e       	mov	r0, r30
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <__stack+0x3e1>
     c38:	d6 94       	lsr	r13
     c3a:	c7 94       	ror	r12
     c3c:	b7 94       	ror	r11
     c3e:	a7 94       	ror	r10
     c40:	0a 94       	dec	r0
     c42:	d2 f7       	brpl	.-12     	; 0xc38 <__stack+0x3d9>
     c44:	a4 01       	movw	r20, r8
     c46:	93 01       	movw	r18, r6
     c48:	e3 96       	adiw	r28, 0x33	; 51
     c4a:	0f ac       	ldd	r0, Y+63	; 0x3f
     c4c:	e3 97       	sbiw	r28, 0x33	; 51
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__stack+0x3f9>
     c50:	22 0f       	add	r18, r18
     c52:	33 1f       	adc	r19, r19
     c54:	44 1f       	adc	r20, r20
     c56:	55 1f       	adc	r21, r21
     c58:	0a 94       	dec	r0
     c5a:	d2 f7       	brpl	.-12     	; 0xc50 <__stack+0x3f1>
     c5c:	21 96       	adiw	r28, 0x01	; 1
     c5e:	6c ac       	ldd	r6, Y+60	; 0x3c
     c60:	7d ac       	ldd	r7, Y+61	; 0x3d
     c62:	8e ac       	ldd	r8, Y+62	; 0x3e
     c64:	9f ac       	ldd	r9, Y+63	; 0x3f
     c66:	21 97       	sbiw	r28, 0x01	; 1
     c68:	0e 2e       	mov	r0, r30
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__stack+0x415>
     c6c:	96 94       	lsr	r9
     c6e:	87 94       	ror	r8
     c70:	77 94       	ror	r7
     c72:	67 94       	ror	r6
     c74:	0a 94       	dec	r0
     c76:	d2 f7       	brpl	.-12     	; 0xc6c <__stack+0x40d>
     c78:	84 01       	movw	r16, r8
     c7a:	73 01       	movw	r14, r6
     c7c:	e2 2a       	or	r14, r18
     c7e:	f3 2a       	or	r15, r19
     c80:	04 2b       	or	r16, r20
     c82:	15 2b       	or	r17, r21
     c84:	e9 ae       	std	Y+57, r14	; 0x39
     c86:	fa ae       	std	Y+58, r15	; 0x3a
     c88:	0b af       	std	Y+59, r16	; 0x3b
     c8a:	1c af       	std	Y+60, r17	; 0x3c
     c8c:	32 01       	movw	r6, r4
     c8e:	88 24       	eor	r8, r8
     c90:	99 24       	eor	r9, r9
     c92:	92 01       	movw	r18, r4
     c94:	81 01       	movw	r16, r2
     c96:	20 70       	andi	r18, 0x00	; 0
     c98:	30 70       	andi	r19, 0x00	; 0
     c9a:	61 96       	adiw	r28, 0x11	; 17
     c9c:	0c af       	std	Y+60, r16	; 0x3c
     c9e:	1d af       	std	Y+61, r17	; 0x3d
     ca0:	2e af       	std	Y+62, r18	; 0x3e
     ca2:	3f af       	std	Y+63, r19	; 0x3f
     ca4:	61 97       	sbiw	r28, 0x11	; 17
     ca6:	c6 01       	movw	r24, r12
     ca8:	b5 01       	movw	r22, r10
     caa:	a4 01       	movw	r20, r8
     cac:	93 01       	movw	r18, r6
     cae:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     cb2:	7b 01       	movw	r14, r22
     cb4:	8c 01       	movw	r16, r24
     cb6:	c6 01       	movw	r24, r12
     cb8:	b5 01       	movw	r22, r10
     cba:	a4 01       	movw	r20, r8
     cbc:	93 01       	movw	r18, r6
     cbe:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     cc2:	c9 01       	movw	r24, r18
     cc4:	da 01       	movw	r26, r20
     cc6:	65 96       	adiw	r28, 0x15	; 21
     cc8:	8c af       	std	Y+60, r24	; 0x3c
     cca:	9d af       	std	Y+61, r25	; 0x3d
     ccc:	ae af       	std	Y+62, r26	; 0x3e
     cce:	bf af       	std	Y+63, r27	; 0x3f
     cd0:	65 97       	sbiw	r28, 0x15	; 21
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	61 96       	adiw	r28, 0x11	; 17
     cd8:	2c ad       	ldd	r18, Y+60	; 0x3c
     cda:	3d ad       	ldd	r19, Y+61	; 0x3d
     cdc:	4e ad       	ldd	r20, Y+62	; 0x3e
     cde:	5f ad       	ldd	r21, Y+63	; 0x3f
     ce0:	61 97       	sbiw	r28, 0x11	; 17
     ce2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	87 01       	movw	r16, r14
     cec:	ff 24       	eor	r15, r15
     cee:	ee 24       	eor	r14, r14
     cf0:	a9 ac       	ldd	r10, Y+57	; 0x39
     cf2:	ba ac       	ldd	r11, Y+58	; 0x3a
     cf4:	cb ac       	ldd	r12, Y+59	; 0x3b
     cf6:	dc ac       	ldd	r13, Y+60	; 0x3c
     cf8:	c6 01       	movw	r24, r12
     cfa:	aa 27       	eor	r26, r26
     cfc:	bb 27       	eor	r27, r27
     cfe:	5c 01       	movw	r10, r24
     d00:	6d 01       	movw	r12, r26
     d02:	ae 28       	or	r10, r14
     d04:	bf 28       	or	r11, r15
     d06:	c0 2a       	or	r12, r16
     d08:	d1 2a       	or	r13, r17
     d0a:	a2 16       	cp	r10, r18
     d0c:	b3 06       	cpc	r11, r19
     d0e:	c4 06       	cpc	r12, r20
     d10:	d5 06       	cpc	r13, r21
     d12:	60 f5       	brcc	.+88     	; 0xd6c <__stack+0x50d>
     d14:	65 96       	adiw	r28, 0x15	; 21
     d16:	6c ad       	ldd	r22, Y+60	; 0x3c
     d18:	7d ad       	ldd	r23, Y+61	; 0x3d
     d1a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d1c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d1e:	65 97       	sbiw	r28, 0x15	; 21
     d20:	61 50       	subi	r22, 0x01	; 1
     d22:	70 40       	sbci	r23, 0x00	; 0
     d24:	80 40       	sbci	r24, 0x00	; 0
     d26:	90 40       	sbci	r25, 0x00	; 0
     d28:	65 96       	adiw	r28, 0x15	; 21
     d2a:	6c af       	std	Y+60, r22	; 0x3c
     d2c:	7d af       	std	Y+61, r23	; 0x3d
     d2e:	8e af       	std	Y+62, r24	; 0x3e
     d30:	9f af       	std	Y+63, r25	; 0x3f
     d32:	65 97       	sbiw	r28, 0x15	; 21
     d34:	a2 0c       	add	r10, r2
     d36:	b3 1c       	adc	r11, r3
     d38:	c4 1c       	adc	r12, r4
     d3a:	d5 1c       	adc	r13, r5
     d3c:	a2 14       	cp	r10, r2
     d3e:	b3 04       	cpc	r11, r3
     d40:	c4 04       	cpc	r12, r4
     d42:	d5 04       	cpc	r13, r5
     d44:	98 f0       	brcs	.+38     	; 0xd6c <__stack+0x50d>
     d46:	a2 16       	cp	r10, r18
     d48:	b3 06       	cpc	r11, r19
     d4a:	c4 06       	cpc	r12, r20
     d4c:	d5 06       	cpc	r13, r21
     d4e:	70 f4       	brcc	.+28     	; 0xd6c <__stack+0x50d>
     d50:	61 50       	subi	r22, 0x01	; 1
     d52:	70 40       	sbci	r23, 0x00	; 0
     d54:	80 40       	sbci	r24, 0x00	; 0
     d56:	90 40       	sbci	r25, 0x00	; 0
     d58:	65 96       	adiw	r28, 0x15	; 21
     d5a:	6c af       	std	Y+60, r22	; 0x3c
     d5c:	7d af       	std	Y+61, r23	; 0x3d
     d5e:	8e af       	std	Y+62, r24	; 0x3e
     d60:	9f af       	std	Y+63, r25	; 0x3f
     d62:	65 97       	sbiw	r28, 0x15	; 21
     d64:	a2 0c       	add	r10, r2
     d66:	b3 1c       	adc	r11, r3
     d68:	c4 1c       	adc	r12, r4
     d6a:	d5 1c       	adc	r13, r5
     d6c:	a2 1a       	sub	r10, r18
     d6e:	b3 0a       	sbc	r11, r19
     d70:	c4 0a       	sbc	r12, r20
     d72:	d5 0a       	sbc	r13, r21
     d74:	c6 01       	movw	r24, r12
     d76:	b5 01       	movw	r22, r10
     d78:	a4 01       	movw	r20, r8
     d7a:	93 01       	movw	r18, r6
     d7c:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     d80:	7b 01       	movw	r14, r22
     d82:	8c 01       	movw	r16, r24
     d84:	c6 01       	movw	r24, r12
     d86:	b5 01       	movw	r22, r10
     d88:	a4 01       	movw	r20, r8
     d8a:	93 01       	movw	r18, r6
     d8c:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     d90:	c9 01       	movw	r24, r18
     d92:	da 01       	movw	r26, r20
     d94:	3c 01       	movw	r6, r24
     d96:	4d 01       	movw	r8, r26
     d98:	c4 01       	movw	r24, r8
     d9a:	b3 01       	movw	r22, r6
     d9c:	61 96       	adiw	r28, 0x11	; 17
     d9e:	2c ad       	ldd	r18, Y+60	; 0x3c
     da0:	3d ad       	ldd	r19, Y+61	; 0x3d
     da2:	4e ad       	ldd	r20, Y+62	; 0x3e
     da4:	5f ad       	ldd	r21, Y+63	; 0x3f
     da6:	61 97       	sbiw	r28, 0x11	; 17
     da8:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	87 01       	movw	r16, r14
     db2:	ff 24       	eor	r15, r15
     db4:	ee 24       	eor	r14, r14
     db6:	89 ad       	ldd	r24, Y+57	; 0x39
     db8:	9a ad       	ldd	r25, Y+58	; 0x3a
     dba:	ab ad       	ldd	r26, Y+59	; 0x3b
     dbc:	bc ad       	ldd	r27, Y+60	; 0x3c
     dbe:	a0 70       	andi	r26, 0x00	; 0
     dc0:	b0 70       	andi	r27, 0x00	; 0
     dc2:	57 01       	movw	r10, r14
     dc4:	68 01       	movw	r12, r16
     dc6:	a8 2a       	or	r10, r24
     dc8:	b9 2a       	or	r11, r25
     dca:	ca 2a       	or	r12, r26
     dcc:	db 2a       	or	r13, r27
     dce:	a2 16       	cp	r10, r18
     dd0:	b3 06       	cpc	r11, r19
     dd2:	c4 06       	cpc	r12, r20
     dd4:	d5 06       	cpc	r13, r21
     dd6:	e0 f4       	brcc	.+56     	; 0xe10 <__stack+0x5b1>
     dd8:	08 94       	sec
     dda:	61 08       	sbc	r6, r1
     ddc:	71 08       	sbc	r7, r1
     dde:	81 08       	sbc	r8, r1
     de0:	91 08       	sbc	r9, r1
     de2:	a2 0c       	add	r10, r2
     de4:	b3 1c       	adc	r11, r3
     de6:	c4 1c       	adc	r12, r4
     de8:	d5 1c       	adc	r13, r5
     dea:	a2 14       	cp	r10, r2
     dec:	b3 04       	cpc	r11, r3
     dee:	c4 04       	cpc	r12, r4
     df0:	d5 04       	cpc	r13, r5
     df2:	70 f0       	brcs	.+28     	; 0xe10 <__stack+0x5b1>
     df4:	a2 16       	cp	r10, r18
     df6:	b3 06       	cpc	r11, r19
     df8:	c4 06       	cpc	r12, r20
     dfa:	d5 06       	cpc	r13, r21
     dfc:	48 f4       	brcc	.+18     	; 0xe10 <__stack+0x5b1>
     dfe:	08 94       	sec
     e00:	61 08       	sbc	r6, r1
     e02:	71 08       	sbc	r7, r1
     e04:	81 08       	sbc	r8, r1
     e06:	91 08       	sbc	r9, r1
     e08:	a2 0c       	add	r10, r2
     e0a:	b3 1c       	adc	r11, r3
     e0c:	c4 1c       	adc	r12, r4
     e0e:	d5 1c       	adc	r13, r5
     e10:	21 96       	adiw	r28, 0x01	; 1
     e12:	8c ad       	ldd	r24, Y+60	; 0x3c
     e14:	9d ad       	ldd	r25, Y+61	; 0x3d
     e16:	ae ad       	ldd	r26, Y+62	; 0x3e
     e18:	bf ad       	ldd	r27, Y+63	; 0x3f
     e1a:	21 97       	sbiw	r28, 0x01	; 1
     e1c:	e3 96       	adiw	r28, 0x33	; 51
     e1e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e20:	e3 97       	sbiw	r28, 0x33	; 51
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__stack+0x5cd>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	aa 1f       	adc	r26, r26
     e2a:	bb 1f       	adc	r27, r27
     e2c:	0a 94       	dec	r0
     e2e:	d2 f7       	brpl	.-12     	; 0xe24 <__stack+0x5c5>
     e30:	21 96       	adiw	r28, 0x01	; 1
     e32:	8c af       	std	Y+60, r24	; 0x3c
     e34:	9d af       	std	Y+61, r25	; 0x3d
     e36:	ae af       	std	Y+62, r26	; 0x3e
     e38:	bf af       	std	Y+63, r27	; 0x3f
     e3a:	21 97       	sbiw	r28, 0x01	; 1
     e3c:	a2 1a       	sub	r10, r18
     e3e:	b3 0a       	sbc	r11, r19
     e40:	c4 0a       	sbc	r12, r20
     e42:	d5 0a       	sbc	r13, r21
     e44:	65 96       	adiw	r28, 0x15	; 21
     e46:	ec ac       	ldd	r14, Y+60	; 0x3c
     e48:	fd ac       	ldd	r15, Y+61	; 0x3d
     e4a:	0e ad       	ldd	r16, Y+62	; 0x3e
     e4c:	1f ad       	ldd	r17, Y+63	; 0x3f
     e4e:	65 97       	sbiw	r28, 0x15	; 21
     e50:	d7 01       	movw	r26, r14
     e52:	99 27       	eor	r25, r25
     e54:	88 27       	eor	r24, r24
     e56:	68 2a       	or	r6, r24
     e58:	79 2a       	or	r7, r25
     e5a:	8a 2a       	or	r8, r26
     e5c:	9b 2a       	or	r9, r27
     e5e:	82 01       	movw	r16, r4
     e60:	22 27       	eor	r18, r18
     e62:	33 27       	eor	r19, r19
     e64:	69 96       	adiw	r28, 0x19	; 25
     e66:	0c af       	std	Y+60, r16	; 0x3c
     e68:	1d af       	std	Y+61, r17	; 0x3d
     e6a:	2e af       	std	Y+62, r18	; 0x3e
     e6c:	3f af       	std	Y+63, r19	; 0x3f
     e6e:	69 97       	sbiw	r28, 0x19	; 25
     e70:	a2 01       	movw	r20, r4
     e72:	91 01       	movw	r18, r2
     e74:	40 70       	andi	r20, 0x00	; 0
     e76:	50 70       	andi	r21, 0x00	; 0
     e78:	6d 96       	adiw	r28, 0x1d	; 29
     e7a:	2c af       	std	Y+60, r18	; 0x3c
     e7c:	3d af       	std	Y+61, r19	; 0x3d
     e7e:	4e af       	std	Y+62, r20	; 0x3e
     e80:	5f af       	std	Y+63, r21	; 0x3f
     e82:	6d 97       	sbiw	r28, 0x1d	; 29
     e84:	c6 01       	movw	r24, r12
     e86:	b5 01       	movw	r22, r10
     e88:	69 96       	adiw	r28, 0x19	; 25
     e8a:	2c ad       	ldd	r18, Y+60	; 0x3c
     e8c:	3d ad       	ldd	r19, Y+61	; 0x3d
     e8e:	4e ad       	ldd	r20, Y+62	; 0x3e
     e90:	5f ad       	ldd	r21, Y+63	; 0x3f
     e92:	69 97       	sbiw	r28, 0x19	; 25
     e94:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     e98:	7b 01       	movw	r14, r22
     e9a:	8c 01       	movw	r16, r24
     e9c:	c6 01       	movw	r24, r12
     e9e:	b5 01       	movw	r22, r10
     ea0:	69 96       	adiw	r28, 0x19	; 25
     ea2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ea4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ea6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ea8:	5f ad       	ldd	r21, Y+63	; 0x3f
     eaa:	69 97       	sbiw	r28, 0x19	; 25
     eac:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     eb0:	c9 01       	movw	r24, r18
     eb2:	da 01       	movw	r26, r20
     eb4:	a1 96       	adiw	r28, 0x21	; 33
     eb6:	8c af       	std	Y+60, r24	; 0x3c
     eb8:	9d af       	std	Y+61, r25	; 0x3d
     eba:	ae af       	std	Y+62, r26	; 0x3e
     ebc:	bf af       	std	Y+63, r27	; 0x3f
     ebe:	a1 97       	sbiw	r28, 0x21	; 33
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	6d 96       	adiw	r28, 0x1d	; 29
     ec6:	2c ad       	ldd	r18, Y+60	; 0x3c
     ec8:	3d ad       	ldd	r19, Y+61	; 0x3d
     eca:	4e ad       	ldd	r20, Y+62	; 0x3e
     ecc:	5f ad       	ldd	r21, Y+63	; 0x3f
     ece:	6d 97       	sbiw	r28, 0x1d	; 29
     ed0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
     ed4:	9b 01       	movw	r18, r22
     ed6:	ac 01       	movw	r20, r24
     ed8:	87 01       	movw	r16, r14
     eda:	ff 24       	eor	r15, r15
     edc:	ee 24       	eor	r14, r14
     ede:	21 96       	adiw	r28, 0x01	; 1
     ee0:	ac ac       	ldd	r10, Y+60	; 0x3c
     ee2:	bd ac       	ldd	r11, Y+61	; 0x3d
     ee4:	ce ac       	ldd	r12, Y+62	; 0x3e
     ee6:	df ac       	ldd	r13, Y+63	; 0x3f
     ee8:	21 97       	sbiw	r28, 0x01	; 1
     eea:	c6 01       	movw	r24, r12
     eec:	aa 27       	eor	r26, r26
     eee:	bb 27       	eor	r27, r27
     ef0:	57 01       	movw	r10, r14
     ef2:	68 01       	movw	r12, r16
     ef4:	a8 2a       	or	r10, r24
     ef6:	b9 2a       	or	r11, r25
     ef8:	ca 2a       	or	r12, r26
     efa:	db 2a       	or	r13, r27
     efc:	a2 16       	cp	r10, r18
     efe:	b3 06       	cpc	r11, r19
     f00:	c4 06       	cpc	r12, r20
     f02:	d5 06       	cpc	r13, r21
     f04:	60 f5       	brcc	.+88     	; 0xf5e <__stack+0x6ff>
     f06:	a1 96       	adiw	r28, 0x21	; 33
     f08:	6c ad       	ldd	r22, Y+60	; 0x3c
     f0a:	7d ad       	ldd	r23, Y+61	; 0x3d
     f0c:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0e:	9f ad       	ldd	r25, Y+63	; 0x3f
     f10:	a1 97       	sbiw	r28, 0x21	; 33
     f12:	61 50       	subi	r22, 0x01	; 1
     f14:	70 40       	sbci	r23, 0x00	; 0
     f16:	80 40       	sbci	r24, 0x00	; 0
     f18:	90 40       	sbci	r25, 0x00	; 0
     f1a:	a1 96       	adiw	r28, 0x21	; 33
     f1c:	6c af       	std	Y+60, r22	; 0x3c
     f1e:	7d af       	std	Y+61, r23	; 0x3d
     f20:	8e af       	std	Y+62, r24	; 0x3e
     f22:	9f af       	std	Y+63, r25	; 0x3f
     f24:	a1 97       	sbiw	r28, 0x21	; 33
     f26:	a2 0c       	add	r10, r2
     f28:	b3 1c       	adc	r11, r3
     f2a:	c4 1c       	adc	r12, r4
     f2c:	d5 1c       	adc	r13, r5
     f2e:	a2 14       	cp	r10, r2
     f30:	b3 04       	cpc	r11, r3
     f32:	c4 04       	cpc	r12, r4
     f34:	d5 04       	cpc	r13, r5
     f36:	98 f0       	brcs	.+38     	; 0xf5e <__stack+0x6ff>
     f38:	a2 16       	cp	r10, r18
     f3a:	b3 06       	cpc	r11, r19
     f3c:	c4 06       	cpc	r12, r20
     f3e:	d5 06       	cpc	r13, r21
     f40:	70 f4       	brcc	.+28     	; 0xf5e <__stack+0x6ff>
     f42:	61 50       	subi	r22, 0x01	; 1
     f44:	70 40       	sbci	r23, 0x00	; 0
     f46:	80 40       	sbci	r24, 0x00	; 0
     f48:	90 40       	sbci	r25, 0x00	; 0
     f4a:	a1 96       	adiw	r28, 0x21	; 33
     f4c:	6c af       	std	Y+60, r22	; 0x3c
     f4e:	7d af       	std	Y+61, r23	; 0x3d
     f50:	8e af       	std	Y+62, r24	; 0x3e
     f52:	9f af       	std	Y+63, r25	; 0x3f
     f54:	a1 97       	sbiw	r28, 0x21	; 33
     f56:	a2 0c       	add	r10, r2
     f58:	b3 1c       	adc	r11, r3
     f5a:	c4 1c       	adc	r12, r4
     f5c:	d5 1c       	adc	r13, r5
     f5e:	a2 1a       	sub	r10, r18
     f60:	b3 0a       	sbc	r11, r19
     f62:	c4 0a       	sbc	r12, r20
     f64:	d5 0a       	sbc	r13, r21
     f66:	c6 01       	movw	r24, r12
     f68:	b5 01       	movw	r22, r10
     f6a:	69 96       	adiw	r28, 0x19	; 25
     f6c:	2c ad       	ldd	r18, Y+60	; 0x3c
     f6e:	3d ad       	ldd	r19, Y+61	; 0x3d
     f70:	4e ad       	ldd	r20, Y+62	; 0x3e
     f72:	5f ad       	ldd	r21, Y+63	; 0x3f
     f74:	69 97       	sbiw	r28, 0x19	; 25
     f76:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     f7a:	7b 01       	movw	r14, r22
     f7c:	8c 01       	movw	r16, r24
     f7e:	c6 01       	movw	r24, r12
     f80:	b5 01       	movw	r22, r10
     f82:	69 96       	adiw	r28, 0x19	; 25
     f84:	2c ad       	ldd	r18, Y+60	; 0x3c
     f86:	3d ad       	ldd	r19, Y+61	; 0x3d
     f88:	4e ad       	ldd	r20, Y+62	; 0x3e
     f8a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f8c:	69 97       	sbiw	r28, 0x19	; 25
     f8e:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
     f92:	c9 01       	movw	r24, r18
     f94:	da 01       	movw	r26, r20
     f96:	5c 01       	movw	r10, r24
     f98:	6d 01       	movw	r12, r26
     f9a:	c6 01       	movw	r24, r12
     f9c:	b5 01       	movw	r22, r10
     f9e:	6d 96       	adiw	r28, 0x1d	; 29
     fa0:	2c ad       	ldd	r18, Y+60	; 0x3c
     fa2:	3d ad       	ldd	r19, Y+61	; 0x3d
     fa4:	4e ad       	ldd	r20, Y+62	; 0x3e
     fa6:	5f ad       	ldd	r21, Y+63	; 0x3f
     fa8:	6d 97       	sbiw	r28, 0x1d	; 29
     faa:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
     fae:	9b 01       	movw	r18, r22
     fb0:	ac 01       	movw	r20, r24
     fb2:	87 01       	movw	r16, r14
     fb4:	ff 24       	eor	r15, r15
     fb6:	ee 24       	eor	r14, r14
     fb8:	21 96       	adiw	r28, 0x01	; 1
     fba:	8c ad       	ldd	r24, Y+60	; 0x3c
     fbc:	9d ad       	ldd	r25, Y+61	; 0x3d
     fbe:	ae ad       	ldd	r26, Y+62	; 0x3e
     fc0:	bf ad       	ldd	r27, Y+63	; 0x3f
     fc2:	21 97       	sbiw	r28, 0x01	; 1
     fc4:	a0 70       	andi	r26, 0x00	; 0
     fc6:	b0 70       	andi	r27, 0x00	; 0
     fc8:	e8 2a       	or	r14, r24
     fca:	f9 2a       	or	r15, r25
     fcc:	0a 2b       	or	r16, r26
     fce:	1b 2b       	or	r17, r27
     fd0:	e2 16       	cp	r14, r18
     fd2:	f3 06       	cpc	r15, r19
     fd4:	04 07       	cpc	r16, r20
     fd6:	15 07       	cpc	r17, r21
     fd8:	c0 f4       	brcc	.+48     	; 0x100a <__stack+0x7ab>
     fda:	08 94       	sec
     fdc:	a1 08       	sbc	r10, r1
     fde:	b1 08       	sbc	r11, r1
     fe0:	c1 08       	sbc	r12, r1
     fe2:	d1 08       	sbc	r13, r1
     fe4:	e2 0c       	add	r14, r2
     fe6:	f3 1c       	adc	r15, r3
     fe8:	04 1d       	adc	r16, r4
     fea:	15 1d       	adc	r17, r5
     fec:	e2 14       	cp	r14, r2
     fee:	f3 04       	cpc	r15, r3
     ff0:	04 05       	cpc	r16, r4
     ff2:	15 05       	cpc	r17, r5
     ff4:	50 f0       	brcs	.+20     	; 0x100a <__stack+0x7ab>
     ff6:	e2 16       	cp	r14, r18
     ff8:	f3 06       	cpc	r15, r19
     ffa:	04 07       	cpc	r16, r20
     ffc:	15 07       	cpc	r17, r21
     ffe:	28 f4       	brcc	.+10     	; 0x100a <__stack+0x7ab>
    1000:	08 94       	sec
    1002:	a1 08       	sbc	r10, r1
    1004:	b1 08       	sbc	r11, r1
    1006:	c1 08       	sbc	r12, r1
    1008:	d1 08       	sbc	r13, r1
    100a:	a1 96       	adiw	r28, 0x21	; 33
    100c:	ec ac       	ldd	r14, Y+60	; 0x3c
    100e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1010:	0e ad       	ldd	r16, Y+62	; 0x3e
    1012:	1f ad       	ldd	r17, Y+63	; 0x3f
    1014:	a1 97       	sbiw	r28, 0x21	; 33
    1016:	d7 01       	movw	r26, r14
    1018:	99 27       	eor	r25, r25
    101a:	88 27       	eor	r24, r24
    101c:	96 01       	movw	r18, r12
    101e:	85 01       	movw	r16, r10
    1020:	08 2b       	or	r16, r24
    1022:	19 2b       	or	r17, r25
    1024:	2a 2b       	or	r18, r26
    1026:	3b 2b       	or	r19, r27
    1028:	25 96       	adiw	r28, 0x05	; 5
    102a:	0c af       	std	Y+60, r16	; 0x3c
    102c:	1d af       	std	Y+61, r17	; 0x3d
    102e:	2e af       	std	Y+62, r18	; 0x3e
    1030:	3f af       	std	Y+63, r19	; 0x3f
    1032:	25 97       	sbiw	r28, 0x05	; 5
    1034:	72 c2       	rjmp	.+1252   	; 0x151a <__stack+0xcbb>
    1036:	6e 14       	cp	r6, r14
    1038:	7f 04       	cpc	r7, r15
    103a:	80 06       	cpc	r8, r16
    103c:	91 06       	cpc	r9, r17
    103e:	08 f4       	brcc	.+2      	; 0x1042 <__stack+0x7e3>
    1040:	5f c2       	rjmp	.+1214   	; 0x1500 <__stack+0xca1>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	e2 16       	cp	r14, r18
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	f2 06       	cpc	r15, r18
    104a:	21 e0       	ldi	r18, 0x01	; 1
    104c:	02 07       	cpc	r16, r18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	12 07       	cpc	r17, r18
    1052:	88 f4       	brcc	.+34     	; 0x1076 <__stack+0x817>
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	e3 16       	cp	r14, r19
    1058:	f1 04       	cpc	r15, r1
    105a:	01 05       	cpc	r16, r1
    105c:	11 05       	cpc	r17, r1
    105e:	31 f0       	breq	.+12     	; 0x106c <__stack+0x80d>
    1060:	28 f0       	brcs	.+10     	; 0x106c <__stack+0x80d>
    1062:	48 e0       	ldi	r20, 0x08	; 8
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	17 c0       	rjmp	.+46     	; 0x109a <__stack+0x83b>
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	12 c0       	rjmp	.+36     	; 0x109a <__stack+0x83b>
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	e4 16       	cp	r14, r20
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	f4 06       	cpc	r15, r20
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	04 07       	cpc	r16, r20
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	14 07       	cpc	r17, r20
    1086:	28 f0       	brcs	.+10     	; 0x1092 <__stack+0x833>
    1088:	48 e1       	ldi	r20, 0x18	; 24
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	04 c0       	rjmp	.+8      	; 0x109a <__stack+0x83b>
    1092:	40 e1       	ldi	r20, 0x10	; 16
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	d8 01       	movw	r26, r16
    109c:	c7 01       	movw	r24, r14
    109e:	04 2e       	mov	r0, r20
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <__stack+0x84b>
    10a2:	b6 95       	lsr	r27
    10a4:	a7 95       	ror	r26
    10a6:	97 95       	ror	r25
    10a8:	87 95       	ror	r24
    10aa:	0a 94       	dec	r0
    10ac:	d2 f7       	brpl	.-12     	; 0x10a2 <__stack+0x843>
    10ae:	82 56       	subi	r24, 0x62	; 98
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	dc 01       	movw	r26, r24
    10b4:	2c 91       	ld	r18, X
    10b6:	30 e2       	ldi	r19, 0x20	; 32
    10b8:	a3 2e       	mov	r10, r19
    10ba:	b1 2c       	mov	r11, r1
    10bc:	c1 2c       	mov	r12, r1
    10be:	d1 2c       	mov	r13, r1
    10c0:	d6 01       	movw	r26, r12
    10c2:	c5 01       	movw	r24, r10
    10c4:	84 1b       	sub	r24, r20
    10c6:	95 0b       	sbc	r25, r21
    10c8:	a6 0b       	sbc	r26, r22
    10ca:	b7 0b       	sbc	r27, r23
    10cc:	82 1b       	sub	r24, r18
    10ce:	91 09       	sbc	r25, r1
    10d0:	a1 09       	sbc	r26, r1
    10d2:	b1 09       	sbc	r27, r1
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	a1 05       	cpc	r26, r1
    10d8:	b1 05       	cpc	r27, r1
    10da:	99 f4       	brne	.+38     	; 0x1102 <__stack+0x8a3>
    10dc:	e6 14       	cp	r14, r6
    10de:	f7 04       	cpc	r15, r7
    10e0:	08 05       	cpc	r16, r8
    10e2:	19 05       	cpc	r17, r9
    10e4:	08 f4       	brcc	.+2      	; 0x10e8 <__stack+0x889>
    10e6:	fe c1       	rjmp	.+1020   	; 0x14e4 <__stack+0xc85>
    10e8:	21 96       	adiw	r28, 0x01	; 1
    10ea:	6c ac       	ldd	r6, Y+60	; 0x3c
    10ec:	7d ac       	ldd	r7, Y+61	; 0x3d
    10ee:	8e ac       	ldd	r8, Y+62	; 0x3e
    10f0:	9f ac       	ldd	r9, Y+63	; 0x3f
    10f2:	21 97       	sbiw	r28, 0x01	; 1
    10f4:	62 14       	cp	r6, r2
    10f6:	73 04       	cpc	r7, r3
    10f8:	84 04       	cpc	r8, r4
    10fa:	95 04       	cpc	r9, r5
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <__stack+0x8a1>
    10fe:	f2 c1       	rjmp	.+996    	; 0x14e4 <__stack+0xc85>
    1100:	ff c1       	rjmp	.+1022   	; 0x1500 <__stack+0xca1>
    1102:	e2 96       	adiw	r28, 0x32	; 50
    1104:	8f af       	std	Y+63, r24	; 0x3f
    1106:	e2 97       	sbiw	r28, 0x32	; 50
    1108:	08 2e       	mov	r0, r24
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <__stack+0x8b5>
    110c:	ee 0c       	add	r14, r14
    110e:	ff 1c       	adc	r15, r15
    1110:	00 1f       	adc	r16, r16
    1112:	11 1f       	adc	r17, r17
    1114:	0a 94       	dec	r0
    1116:	d2 f7       	brpl	.-12     	; 0x110c <__stack+0x8ad>
    1118:	6a 2d       	mov	r22, r10
    111a:	68 1b       	sub	r22, r24
    111c:	d2 01       	movw	r26, r4
    111e:	c1 01       	movw	r24, r2
    1120:	06 2e       	mov	r0, r22
    1122:	04 c0       	rjmp	.+8      	; 0x112c <__stack+0x8cd>
    1124:	b6 95       	lsr	r27
    1126:	a7 95       	ror	r26
    1128:	97 95       	ror	r25
    112a:	87 95       	ror	r24
    112c:	0a 94       	dec	r0
    112e:	d2 f7       	brpl	.-12     	; 0x1124 <__stack+0x8c5>
    1130:	5c 01       	movw	r10, r24
    1132:	6d 01       	movw	r12, r26
    1134:	ae 28       	or	r10, r14
    1136:	bf 28       	or	r11, r15
    1138:	c0 2a       	or	r12, r16
    113a:	d1 2a       	or	r13, r17
    113c:	ad aa       	std	Y+53, r10	; 0x35
    113e:	be aa       	std	Y+54, r11	; 0x36
    1140:	cf aa       	std	Y+55, r12	; 0x37
    1142:	d8 ae       	std	Y+56, r13	; 0x38
    1144:	72 01       	movw	r14, r4
    1146:	61 01       	movw	r12, r2
    1148:	e2 96       	adiw	r28, 0x32	; 50
    114a:	0f ac       	ldd	r0, Y+63	; 0x3f
    114c:	e2 97       	sbiw	r28, 0x32	; 50
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <__stack+0x8f9>
    1150:	cc 0c       	add	r12, r12
    1152:	dd 1c       	adc	r13, r13
    1154:	ee 1c       	adc	r14, r14
    1156:	ff 1c       	adc	r15, r15
    1158:	0a 94       	dec	r0
    115a:	d2 f7       	brpl	.-12     	; 0x1150 <__stack+0x8f1>
    115c:	c9 aa       	std	Y+49, r12	; 0x31
    115e:	da aa       	std	Y+50, r13	; 0x32
    1160:	eb aa       	std	Y+51, r14	; 0x33
    1162:	fc aa       	std	Y+52, r15	; 0x34
    1164:	64 01       	movw	r12, r8
    1166:	53 01       	movw	r10, r6
    1168:	06 2e       	mov	r0, r22
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <__stack+0x915>
    116c:	d6 94       	lsr	r13
    116e:	c7 94       	ror	r12
    1170:	b7 94       	ror	r11
    1172:	a7 94       	ror	r10
    1174:	0a 94       	dec	r0
    1176:	d2 f7       	brpl	.-12     	; 0x116c <__stack+0x90d>
    1178:	d4 01       	movw	r26, r8
    117a:	c3 01       	movw	r24, r6
    117c:	e2 96       	adiw	r28, 0x32	; 50
    117e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1180:	e2 97       	sbiw	r28, 0x32	; 50
    1182:	04 c0       	rjmp	.+8      	; 0x118c <__stack+0x92d>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	aa 1f       	adc	r26, r26
    118a:	bb 1f       	adc	r27, r27
    118c:	0a 94       	dec	r0
    118e:	d2 f7       	brpl	.-12     	; 0x1184 <__stack+0x925>
    1190:	21 96       	adiw	r28, 0x01	; 1
    1192:	ec ac       	ldd	r14, Y+60	; 0x3c
    1194:	fd ac       	ldd	r15, Y+61	; 0x3d
    1196:	0e ad       	ldd	r16, Y+62	; 0x3e
    1198:	1f ad       	ldd	r17, Y+63	; 0x3f
    119a:	21 97       	sbiw	r28, 0x01	; 1
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <__stack+0x947>
    119e:	16 95       	lsr	r17
    11a0:	07 95       	ror	r16
    11a2:	f7 94       	ror	r15
    11a4:	e7 94       	ror	r14
    11a6:	6a 95       	dec	r22
    11a8:	d2 f7       	brpl	.-12     	; 0x119e <__stack+0x93f>
    11aa:	37 01       	movw	r6, r14
    11ac:	48 01       	movw	r8, r16
    11ae:	68 2a       	or	r6, r24
    11b0:	79 2a       	or	r7, r25
    11b2:	8a 2a       	or	r8, r26
    11b4:	9b 2a       	or	r9, r27
    11b6:	6d a6       	std	Y+45, r6	; 0x2d
    11b8:	7e a6       	std	Y+46, r7	; 0x2e
    11ba:	8f a6       	std	Y+47, r8	; 0x2f
    11bc:	98 aa       	std	Y+48, r9	; 0x30
    11be:	ed a8       	ldd	r14, Y+53	; 0x35
    11c0:	fe a8       	ldd	r15, Y+54	; 0x36
    11c2:	0f a9       	ldd	r16, Y+55	; 0x37
    11c4:	18 ad       	ldd	r17, Y+56	; 0x38
    11c6:	38 01       	movw	r6, r16
    11c8:	88 24       	eor	r8, r8
    11ca:	99 24       	eor	r9, r9
    11cc:	98 01       	movw	r18, r16
    11ce:	87 01       	movw	r16, r14
    11d0:	20 70       	andi	r18, 0x00	; 0
    11d2:	30 70       	andi	r19, 0x00	; 0
    11d4:	a5 96       	adiw	r28, 0x25	; 37
    11d6:	0c af       	std	Y+60, r16	; 0x3c
    11d8:	1d af       	std	Y+61, r17	; 0x3d
    11da:	2e af       	std	Y+62, r18	; 0x3e
    11dc:	3f af       	std	Y+63, r19	; 0x3f
    11de:	a5 97       	sbiw	r28, 0x25	; 37
    11e0:	c6 01       	movw	r24, r12
    11e2:	b5 01       	movw	r22, r10
    11e4:	a4 01       	movw	r20, r8
    11e6:	93 01       	movw	r18, r6
    11e8:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    11ec:	7b 01       	movw	r14, r22
    11ee:	8c 01       	movw	r16, r24
    11f0:	c6 01       	movw	r24, r12
    11f2:	b5 01       	movw	r22, r10
    11f4:	a4 01       	movw	r20, r8
    11f6:	93 01       	movw	r18, r6
    11f8:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    11fc:	c9 01       	movw	r24, r18
    11fe:	da 01       	movw	r26, r20
    1200:	1c 01       	movw	r2, r24
    1202:	2d 01       	movw	r4, r26
    1204:	c2 01       	movw	r24, r4
    1206:	b1 01       	movw	r22, r2
    1208:	a5 96       	adiw	r28, 0x25	; 37
    120a:	2c ad       	ldd	r18, Y+60	; 0x3c
    120c:	3d ad       	ldd	r19, Y+61	; 0x3d
    120e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1210:	5f ad       	ldd	r21, Y+63	; 0x3f
    1212:	a5 97       	sbiw	r28, 0x25	; 37
    1214:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	87 01       	movw	r16, r14
    121e:	ff 24       	eor	r15, r15
    1220:	ee 24       	eor	r14, r14
    1222:	ad a4       	ldd	r10, Y+45	; 0x2d
    1224:	be a4       	ldd	r11, Y+46	; 0x2e
    1226:	cf a4       	ldd	r12, Y+47	; 0x2f
    1228:	d8 a8       	ldd	r13, Y+48	; 0x30
    122a:	c6 01       	movw	r24, r12
    122c:	aa 27       	eor	r26, r26
    122e:	bb 27       	eor	r27, r27
    1230:	57 01       	movw	r10, r14
    1232:	68 01       	movw	r12, r16
    1234:	a8 2a       	or	r10, r24
    1236:	b9 2a       	or	r11, r25
    1238:	ca 2a       	or	r12, r26
    123a:	db 2a       	or	r13, r27
    123c:	a2 16       	cp	r10, r18
    123e:	b3 06       	cpc	r11, r19
    1240:	c4 06       	cpc	r12, r20
    1242:	d5 06       	cpc	r13, r21
    1244:	00 f5       	brcc	.+64     	; 0x1286 <__stack+0xa27>
    1246:	08 94       	sec
    1248:	21 08       	sbc	r2, r1
    124a:	31 08       	sbc	r3, r1
    124c:	41 08       	sbc	r4, r1
    124e:	51 08       	sbc	r5, r1
    1250:	ed a8       	ldd	r14, Y+53	; 0x35
    1252:	fe a8       	ldd	r15, Y+54	; 0x36
    1254:	0f a9       	ldd	r16, Y+55	; 0x37
    1256:	18 ad       	ldd	r17, Y+56	; 0x38
    1258:	ae 0c       	add	r10, r14
    125a:	bf 1c       	adc	r11, r15
    125c:	c0 1e       	adc	r12, r16
    125e:	d1 1e       	adc	r13, r17
    1260:	ae 14       	cp	r10, r14
    1262:	bf 04       	cpc	r11, r15
    1264:	c0 06       	cpc	r12, r16
    1266:	d1 06       	cpc	r13, r17
    1268:	70 f0       	brcs	.+28     	; 0x1286 <__stack+0xa27>
    126a:	a2 16       	cp	r10, r18
    126c:	b3 06       	cpc	r11, r19
    126e:	c4 06       	cpc	r12, r20
    1270:	d5 06       	cpc	r13, r21
    1272:	48 f4       	brcc	.+18     	; 0x1286 <__stack+0xa27>
    1274:	08 94       	sec
    1276:	21 08       	sbc	r2, r1
    1278:	31 08       	sbc	r3, r1
    127a:	41 08       	sbc	r4, r1
    127c:	51 08       	sbc	r5, r1
    127e:	ae 0c       	add	r10, r14
    1280:	bf 1c       	adc	r11, r15
    1282:	c0 1e       	adc	r12, r16
    1284:	d1 1e       	adc	r13, r17
    1286:	a2 1a       	sub	r10, r18
    1288:	b3 0a       	sbc	r11, r19
    128a:	c4 0a       	sbc	r12, r20
    128c:	d5 0a       	sbc	r13, r21
    128e:	c6 01       	movw	r24, r12
    1290:	b5 01       	movw	r22, r10
    1292:	a4 01       	movw	r20, r8
    1294:	93 01       	movw	r18, r6
    1296:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    129a:	7b 01       	movw	r14, r22
    129c:	8c 01       	movw	r16, r24
    129e:	c6 01       	movw	r24, r12
    12a0:	b5 01       	movw	r22, r10
    12a2:	a4 01       	movw	r20, r8
    12a4:	93 01       	movw	r18, r6
    12a6:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    12aa:	c9 01       	movw	r24, r18
    12ac:	da 01       	movw	r26, r20
    12ae:	3c 01       	movw	r6, r24
    12b0:	4d 01       	movw	r8, r26
    12b2:	c4 01       	movw	r24, r8
    12b4:	b3 01       	movw	r22, r6
    12b6:	a5 96       	adiw	r28, 0x25	; 37
    12b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    12ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    12bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    12be:	5f ad       	ldd	r21, Y+63	; 0x3f
    12c0:	a5 97       	sbiw	r28, 0x25	; 37
    12c2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    12c6:	9b 01       	movw	r18, r22
    12c8:	ac 01       	movw	r20, r24
    12ca:	87 01       	movw	r16, r14
    12cc:	ff 24       	eor	r15, r15
    12ce:	ee 24       	eor	r14, r14
    12d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    12d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    12d4:	af a5       	ldd	r26, Y+47	; 0x2f
    12d6:	b8 a9       	ldd	r27, Y+48	; 0x30
    12d8:	a0 70       	andi	r26, 0x00	; 0
    12da:	b0 70       	andi	r27, 0x00	; 0
    12dc:	57 01       	movw	r10, r14
    12de:	68 01       	movw	r12, r16
    12e0:	a8 2a       	or	r10, r24
    12e2:	b9 2a       	or	r11, r25
    12e4:	ca 2a       	or	r12, r26
    12e6:	db 2a       	or	r13, r27
    12e8:	a2 16       	cp	r10, r18
    12ea:	b3 06       	cpc	r11, r19
    12ec:	c4 06       	cpc	r12, r20
    12ee:	d5 06       	cpc	r13, r21
    12f0:	00 f5       	brcc	.+64     	; 0x1332 <__stack+0xad3>
    12f2:	08 94       	sec
    12f4:	61 08       	sbc	r6, r1
    12f6:	71 08       	sbc	r7, r1
    12f8:	81 08       	sbc	r8, r1
    12fa:	91 08       	sbc	r9, r1
    12fc:	6d a9       	ldd	r22, Y+53	; 0x35
    12fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1300:	8f a9       	ldd	r24, Y+55	; 0x37
    1302:	98 ad       	ldd	r25, Y+56	; 0x38
    1304:	a6 0e       	add	r10, r22
    1306:	b7 1e       	adc	r11, r23
    1308:	c8 1e       	adc	r12, r24
    130a:	d9 1e       	adc	r13, r25
    130c:	a6 16       	cp	r10, r22
    130e:	b7 06       	cpc	r11, r23
    1310:	c8 06       	cpc	r12, r24
    1312:	d9 06       	cpc	r13, r25
    1314:	70 f0       	brcs	.+28     	; 0x1332 <__stack+0xad3>
    1316:	a2 16       	cp	r10, r18
    1318:	b3 06       	cpc	r11, r19
    131a:	c4 06       	cpc	r12, r20
    131c:	d5 06       	cpc	r13, r21
    131e:	48 f4       	brcc	.+18     	; 0x1332 <__stack+0xad3>
    1320:	08 94       	sec
    1322:	61 08       	sbc	r6, r1
    1324:	71 08       	sbc	r7, r1
    1326:	81 08       	sbc	r8, r1
    1328:	91 08       	sbc	r9, r1
    132a:	a6 0e       	add	r10, r22
    132c:	b7 1e       	adc	r11, r23
    132e:	c8 1e       	adc	r12, r24
    1330:	d9 1e       	adc	r13, r25
    1332:	d6 01       	movw	r26, r12
    1334:	c5 01       	movw	r24, r10
    1336:	82 1b       	sub	r24, r18
    1338:	93 0b       	sbc	r25, r19
    133a:	a4 0b       	sbc	r26, r20
    133c:	b5 0b       	sbc	r27, r21
    133e:	89 a7       	std	Y+41, r24	; 0x29
    1340:	9a a7       	std	Y+42, r25	; 0x2a
    1342:	ab a7       	std	Y+43, r26	; 0x2b
    1344:	bc a7       	std	Y+44, r27	; 0x2c
    1346:	d1 01       	movw	r26, r2
    1348:	99 27       	eor	r25, r25
    134a:	88 27       	eor	r24, r24
    134c:	64 01       	movw	r12, r8
    134e:	53 01       	movw	r10, r6
    1350:	a8 2a       	or	r10, r24
    1352:	b9 2a       	or	r11, r25
    1354:	ca 2a       	or	r12, r26
    1356:	db 2a       	or	r13, r27
    1358:	25 96       	adiw	r28, 0x05	; 5
    135a:	ac ae       	std	Y+60, r10	; 0x3c
    135c:	bd ae       	std	Y+61, r11	; 0x3d
    135e:	ce ae       	std	Y+62, r12	; 0x3e
    1360:	df ae       	std	Y+63, r13	; 0x3f
    1362:	25 97       	sbiw	r28, 0x05	; 5
    1364:	86 01       	movw	r16, r12
    1366:	75 01       	movw	r14, r10
    1368:	2f ef       	ldi	r18, 0xFF	; 255
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	e2 22       	and	r14, r18
    1372:	f3 22       	and	r15, r19
    1374:	04 23       	and	r16, r20
    1376:	15 23       	and	r17, r21
    1378:	a6 01       	movw	r20, r12
    137a:	66 27       	eor	r22, r22
    137c:	77 27       	eor	r23, r23
    137e:	ad 96       	adiw	r28, 0x2d	; 45
    1380:	4c af       	std	Y+60, r20	; 0x3c
    1382:	5d af       	std	Y+61, r21	; 0x3d
    1384:	6e af       	std	Y+62, r22	; 0x3e
    1386:	7f af       	std	Y+63, r23	; 0x3f
    1388:	ad 97       	sbiw	r28, 0x2d	; 45
    138a:	a9 a8       	ldd	r10, Y+49	; 0x31
    138c:	ba a8       	ldd	r11, Y+50	; 0x32
    138e:	cb a8       	ldd	r12, Y+51	; 0x33
    1390:	dc a8       	ldd	r13, Y+52	; 0x34
    1392:	6f ef       	ldi	r22, 0xFF	; 255
    1394:	7f ef       	ldi	r23, 0xFF	; 255
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a6 22       	and	r10, r22
    139c:	b7 22       	and	r11, r23
    139e:	c8 22       	and	r12, r24
    13a0:	d9 22       	and	r13, r25
    13a2:	89 a9       	ldd	r24, Y+49	; 0x31
    13a4:	9a a9       	ldd	r25, Y+50	; 0x32
    13a6:	ab a9       	ldd	r26, Y+51	; 0x33
    13a8:	bc a9       	ldd	r27, Y+52	; 0x34
    13aa:	1d 01       	movw	r2, r26
    13ac:	44 24       	eor	r4, r4
    13ae:	55 24       	eor	r5, r5
    13b0:	c8 01       	movw	r24, r16
    13b2:	b7 01       	movw	r22, r14
    13b4:	a6 01       	movw	r20, r12
    13b6:	95 01       	movw	r18, r10
    13b8:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    13bc:	a9 96       	adiw	r28, 0x29	; 41
    13be:	6c af       	std	Y+60, r22	; 0x3c
    13c0:	7d af       	std	Y+61, r23	; 0x3d
    13c2:	8e af       	std	Y+62, r24	; 0x3e
    13c4:	9f af       	std	Y+63, r25	; 0x3f
    13c6:	a9 97       	sbiw	r28, 0x29	; 41
    13c8:	c8 01       	movw	r24, r16
    13ca:	b7 01       	movw	r22, r14
    13cc:	a2 01       	movw	r20, r4
    13ce:	91 01       	movw	r18, r2
    13d0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    13d4:	3b 01       	movw	r6, r22
    13d6:	4c 01       	movw	r8, r24
    13d8:	ad 96       	adiw	r28, 0x2d	; 45
    13da:	6c ad       	ldd	r22, Y+60	; 0x3c
    13dc:	7d ad       	ldd	r23, Y+61	; 0x3d
    13de:	8e ad       	ldd	r24, Y+62	; 0x3e
    13e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    13e2:	ad 97       	sbiw	r28, 0x2d	; 45
    13e4:	a6 01       	movw	r20, r12
    13e6:	95 01       	movw	r18, r10
    13e8:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    13ec:	7b 01       	movw	r14, r22
    13ee:	8c 01       	movw	r16, r24
    13f0:	ad 96       	adiw	r28, 0x2d	; 45
    13f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    13f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    13f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    13f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    13fa:	ad 97       	sbiw	r28, 0x2d	; 45
    13fc:	a2 01       	movw	r20, r4
    13fe:	91 01       	movw	r18, r2
    1400:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    1404:	5b 01       	movw	r10, r22
    1406:	6c 01       	movw	r12, r24
    1408:	a8 01       	movw	r20, r16
    140a:	97 01       	movw	r18, r14
    140c:	26 0d       	add	r18, r6
    140e:	37 1d       	adc	r19, r7
    1410:	48 1d       	adc	r20, r8
    1412:	59 1d       	adc	r21, r9
    1414:	a9 96       	adiw	r28, 0x29	; 41
    1416:	6c ac       	ldd	r6, Y+60	; 0x3c
    1418:	7d ac       	ldd	r7, Y+61	; 0x3d
    141a:	8e ac       	ldd	r8, Y+62	; 0x3e
    141c:	9f ac       	ldd	r9, Y+63	; 0x3f
    141e:	a9 97       	sbiw	r28, 0x29	; 41
    1420:	c4 01       	movw	r24, r8
    1422:	aa 27       	eor	r26, r26
    1424:	bb 27       	eor	r27, r27
    1426:	28 0f       	add	r18, r24
    1428:	39 1f       	adc	r19, r25
    142a:	4a 1f       	adc	r20, r26
    142c:	5b 1f       	adc	r21, r27
    142e:	2e 15       	cp	r18, r14
    1430:	3f 05       	cpc	r19, r15
    1432:	40 07       	cpc	r20, r16
    1434:	51 07       	cpc	r21, r17
    1436:	48 f4       	brcc	.+18     	; 0x144a <__stack+0xbeb>
    1438:	e1 2c       	mov	r14, r1
    143a:	f1 2c       	mov	r15, r1
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	06 2f       	mov	r16, r22
    1440:	11 2d       	mov	r17, r1
    1442:	ae 0c       	add	r10, r14
    1444:	bf 1c       	adc	r11, r15
    1446:	c0 1e       	adc	r12, r16
    1448:	d1 1e       	adc	r13, r17
    144a:	ca 01       	movw	r24, r20
    144c:	aa 27       	eor	r26, r26
    144e:	bb 27       	eor	r27, r27
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	6a 0d       	add	r22, r10
    1456:	7b 1d       	adc	r23, r11
    1458:	8c 1d       	adc	r24, r12
    145a:	9d 1d       	adc	r25, r13
    145c:	69 a4       	ldd	r6, Y+41	; 0x29
    145e:	7a a4       	ldd	r7, Y+42	; 0x2a
    1460:	8b a4       	ldd	r8, Y+43	; 0x2b
    1462:	9c a4       	ldd	r9, Y+44	; 0x2c
    1464:	66 16       	cp	r6, r22
    1466:	77 06       	cpc	r7, r23
    1468:	88 06       	cpc	r8, r24
    146a:	99 06       	cpc	r9, r25
    146c:	50 f1       	brcs	.+84     	; 0x14c2 <__stack+0xc63>
    146e:	66 15       	cp	r22, r6
    1470:	77 05       	cpc	r23, r7
    1472:	88 05       	cpc	r24, r8
    1474:	99 05       	cpc	r25, r9
    1476:	09 f0       	breq	.+2      	; 0x147a <__stack+0xc1b>
    1478:	4d c0       	rjmp	.+154    	; 0x1514 <__stack+0xcb5>
    147a:	d9 01       	movw	r26, r18
    147c:	99 27       	eor	r25, r25
    147e:	88 27       	eor	r24, r24
    1480:	a9 96       	adiw	r28, 0x29	; 41
    1482:	2c ad       	ldd	r18, Y+60	; 0x3c
    1484:	3d ad       	ldd	r19, Y+61	; 0x3d
    1486:	4e ad       	ldd	r20, Y+62	; 0x3e
    1488:	5f ad       	ldd	r21, Y+63	; 0x3f
    148a:	a9 97       	sbiw	r28, 0x29	; 41
    148c:	40 70       	andi	r20, 0x00	; 0
    148e:	50 70       	andi	r21, 0x00	; 0
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	a4 1f       	adc	r26, r20
    1496:	b5 1f       	adc	r27, r21
    1498:	21 96       	adiw	r28, 0x01	; 1
    149a:	2c ad       	ldd	r18, Y+60	; 0x3c
    149c:	3d ad       	ldd	r19, Y+61	; 0x3d
    149e:	4e ad       	ldd	r20, Y+62	; 0x3e
    14a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    14a2:	21 97       	sbiw	r28, 0x01	; 1
    14a4:	e2 96       	adiw	r28, 0x32	; 50
    14a6:	0f ac       	ldd	r0, Y+63	; 0x3f
    14a8:	e2 97       	sbiw	r28, 0x32	; 50
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <__stack+0xc55>
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	44 1f       	adc	r20, r20
    14b2:	55 1f       	adc	r21, r21
    14b4:	0a 94       	dec	r0
    14b6:	d2 f7       	brpl	.-12     	; 0x14ac <__stack+0xc4d>
    14b8:	28 17       	cp	r18, r24
    14ba:	39 07       	cpc	r19, r25
    14bc:	4a 07       	cpc	r20, r26
    14be:	5b 07       	cpc	r21, r27
    14c0:	48 f5       	brcc	.+82     	; 0x1514 <__stack+0xcb5>
    14c2:	25 96       	adiw	r28, 0x05	; 5
    14c4:	0c ad       	ldd	r16, Y+60	; 0x3c
    14c6:	1d ad       	ldd	r17, Y+61	; 0x3d
    14c8:	2e ad       	ldd	r18, Y+62	; 0x3e
    14ca:	3f ad       	ldd	r19, Y+63	; 0x3f
    14cc:	25 97       	sbiw	r28, 0x05	; 5
    14ce:	01 50       	subi	r16, 0x01	; 1
    14d0:	10 40       	sbci	r17, 0x00	; 0
    14d2:	20 40       	sbci	r18, 0x00	; 0
    14d4:	30 40       	sbci	r19, 0x00	; 0
    14d6:	25 96       	adiw	r28, 0x05	; 5
    14d8:	0c af       	std	Y+60, r16	; 0x3c
    14da:	1d af       	std	Y+61, r17	; 0x3d
    14dc:	2e af       	std	Y+62, r18	; 0x3e
    14de:	3f af       	std	Y+63, r19	; 0x3f
    14e0:	25 97       	sbiw	r28, 0x05	; 5
    14e2:	18 c0       	rjmp	.+48     	; 0x1514 <__stack+0xcb5>
    14e4:	66 24       	eor	r6, r6
    14e6:	77 24       	eor	r7, r7
    14e8:	43 01       	movw	r8, r6
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	25 96       	adiw	r28, 0x05	; 5
    14f4:	2c af       	std	Y+60, r18	; 0x3c
    14f6:	3d af       	std	Y+61, r19	; 0x3d
    14f8:	4e af       	std	Y+62, r20	; 0x3e
    14fa:	5f af       	std	Y+63, r21	; 0x3f
    14fc:	25 97       	sbiw	r28, 0x05	; 5
    14fe:	0d c0       	rjmp	.+26     	; 0x151a <__stack+0xcbb>
    1500:	66 24       	eor	r6, r6
    1502:	77 24       	eor	r7, r7
    1504:	43 01       	movw	r8, r6
    1506:	25 96       	adiw	r28, 0x05	; 5
    1508:	1c ae       	std	Y+60, r1	; 0x3c
    150a:	1d ae       	std	Y+61, r1	; 0x3d
    150c:	1e ae       	std	Y+62, r1	; 0x3e
    150e:	1f ae       	std	Y+63, r1	; 0x3f
    1510:	25 97       	sbiw	r28, 0x05	; 5
    1512:	03 c0       	rjmp	.+6      	; 0x151a <__stack+0xcbb>
    1514:	66 24       	eor	r6, r6
    1516:	77 24       	eor	r7, r7
    1518:	43 01       	movw	r8, r6
    151a:	fe 01       	movw	r30, r28
    151c:	b1 96       	adiw	r30, 0x21	; 33
    151e:	88 e0       	ldi	r24, 0x08	; 8
    1520:	df 01       	movw	r26, r30
    1522:	1d 92       	st	X+, r1
    1524:	8a 95       	dec	r24
    1526:	e9 f7       	brne	.-6      	; 0x1522 <__stack+0xcc3>
    1528:	25 96       	adiw	r28, 0x05	; 5
    152a:	ac ac       	ldd	r10, Y+60	; 0x3c
    152c:	bd ac       	ldd	r11, Y+61	; 0x3d
    152e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1530:	df ac       	ldd	r13, Y+63	; 0x3f
    1532:	25 97       	sbiw	r28, 0x05	; 5
    1534:	a9 a2       	std	Y+33, r10	; 0x21
    1536:	ba a2       	std	Y+34, r11	; 0x22
    1538:	cb a2       	std	Y+35, r12	; 0x23
    153a:	dc a2       	std	Y+36, r13	; 0x24
    153c:	6d a2       	std	Y+37, r6	; 0x25
    153e:	7e a2       	std	Y+38, r7	; 0x26
    1540:	8f a2       	std	Y+39, r8	; 0x27
    1542:	98 a6       	std	Y+40, r9	; 0x28
    1544:	22 96       	adiw	r28, 0x02	; 2
    1546:	2f ad       	ldd	r18, Y+63	; 0x3f
    1548:	22 97       	sbiw	r28, 0x02	; 2
    154a:	3a a1       	ldd	r19, Y+34	; 0x22
    154c:	4b a1       	ldd	r20, Y+35	; 0x23
    154e:	5c a1       	ldd	r21, Y+36	; 0x24
    1550:	66 2d       	mov	r22, r6
    1552:	7e a1       	ldd	r23, Y+38	; 0x26
    1554:	df a0       	ldd	r13, Y+39	; 0x27
    1556:	98 a5       	ldd	r25, Y+40	; 0x28
    1558:	e1 96       	adiw	r28, 0x31	; 49
    155a:	ec ac       	ldd	r14, Y+60	; 0x3c
    155c:	fd ac       	ldd	r15, Y+61	; 0x3d
    155e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1560:	1f ad       	ldd	r17, Y+63	; 0x3f
    1562:	e1 97       	sbiw	r28, 0x31	; 49
    1564:	e1 14       	cp	r14, r1
    1566:	f1 04       	cpc	r15, r1
    1568:	01 05       	cpc	r16, r1
    156a:	11 05       	cpc	r17, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <__stack+0xd11>
    156e:	56 c0       	rjmp	.+172    	; 0x161c <__stack+0xdbd>
    1570:	21 95       	neg	r18
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	12 16       	cp	r1, r18
    1576:	08 f0       	brcs	.+2      	; 0x157a <__stack+0xd1b>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	31 95       	neg	r19
    157c:	e1 e0       	ldi	r30, 0x01	; 1
    157e:	13 16       	cp	r1, r19
    1580:	08 f0       	brcs	.+2      	; 0x1584 <__stack+0xd25>
    1582:	e0 e0       	ldi	r30, 0x00	; 0
    1584:	93 2e       	mov	r9, r19
    1586:	98 1a       	sub	r9, r24
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	39 15       	cp	r19, r9
    158c:	08 f0       	brcs	.+2      	; 0x1590 <__stack+0xd31>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	e8 2b       	or	r30, r24
    1592:	41 95       	neg	r20
    1594:	f1 e0       	ldi	r31, 0x01	; 1
    1596:	14 16       	cp	r1, r20
    1598:	08 f0       	brcs	.+2      	; 0x159c <__stack+0xd3d>
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	a4 2e       	mov	r10, r20
    159e:	ae 1a       	sub	r10, r30
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	4a 15       	cp	r20, r10
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <__stack+0xd49>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	f8 2b       	or	r31, r24
    15aa:	51 95       	neg	r21
    15ac:	e1 e0       	ldi	r30, 0x01	; 1
    15ae:	15 16       	cp	r1, r21
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <__stack+0xd55>
    15b2:	e0 e0       	ldi	r30, 0x00	; 0
    15b4:	b5 2e       	mov	r11, r21
    15b6:	bf 1a       	sub	r11, r31
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	5b 15       	cp	r21, r11
    15bc:	08 f0       	brcs	.+2      	; 0x15c0 <__stack+0xd61>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	e8 2b       	or	r30, r24
    15c2:	61 95       	neg	r22
    15c4:	f1 e0       	ldi	r31, 0x01	; 1
    15c6:	16 16       	cp	r1, r22
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <__stack+0xd6d>
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	a6 2f       	mov	r26, r22
    15ce:	ae 1b       	sub	r26, r30
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	6a 17       	cp	r22, r26
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <__stack+0xd79>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	f8 2b       	or	r31, r24
    15da:	71 95       	neg	r23
    15dc:	e1 e0       	ldi	r30, 0x01	; 1
    15de:	17 16       	cp	r1, r23
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <__stack+0xd85>
    15e2:	e0 e0       	ldi	r30, 0x00	; 0
    15e4:	c7 2e       	mov	r12, r23
    15e6:	cf 1a       	sub	r12, r31
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	7c 15       	cp	r23, r12
    15ec:	08 f0       	brcs	.+2      	; 0x15f0 <__stack+0xd91>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	e8 2b       	or	r30, r24
    15f2:	8d 2d       	mov	r24, r13
    15f4:	81 95       	neg	r24
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
    15f8:	18 16       	cp	r1, r24
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <__stack+0xd9f>
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	d8 2e       	mov	r13, r24
    1600:	de 1a       	sub	r13, r30
    1602:	e1 e0       	ldi	r30, 0x01	; 1
    1604:	8d 15       	cp	r24, r13
    1606:	08 f0       	brcs	.+2      	; 0x160a <__stack+0xdab>
    1608:	e0 e0       	ldi	r30, 0x00	; 0
    160a:	fe 2b       	or	r31, r30
    160c:	89 2f       	mov	r24, r25
    160e:	81 95       	neg	r24
    1610:	39 2d       	mov	r19, r9
    1612:	a5 01       	movw	r20, r10
    1614:	6a 2f       	mov	r22, r26
    1616:	7c 2d       	mov	r23, r12
    1618:	98 2f       	mov	r25, r24
    161a:	9f 1b       	sub	r25, r31
    161c:	8d 2d       	mov	r24, r13
    161e:	ce 58       	subi	r28, 0x8E	; 142
    1620:	df 4f       	sbci	r29, 0xFF	; 255
    1622:	e2 e1       	ldi	r30, 0x12	; 18
    1624:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <__epilogue_restores__>

00001628 <__moddi3>:
    1628:	a7 e7       	ldi	r26, 0x77	; 119
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ea e1       	ldi	r30, 0x1A	; 26
    162e:	fb e0       	ldi	r31, 0x0B	; 11
    1630:	0c 94 f7 3a 	jmp	0x75ee	; 0x75ee <__prologue_saves__>
    1634:	98 2e       	mov	r9, r24
    1636:	89 2e       	mov	r8, r25
    1638:	71 2e       	mov	r7, r17
    163a:	88 e0       	ldi	r24, 0x08	; 8
    163c:	fe 01       	movw	r30, r28
    163e:	31 96       	adiw	r30, 0x01	; 1
    1640:	df 01       	movw	r26, r30
    1642:	68 2e       	mov	r6, r24
    1644:	1d 92       	st	X+, r1
    1646:	6a 94       	dec	r6
    1648:	e9 f7       	brne	.-6      	; 0x1644 <__moddi3+0x1c>
    164a:	29 83       	std	Y+1, r18	; 0x01
    164c:	3a 83       	std	Y+2, r19	; 0x02
    164e:	4b 83       	std	Y+3, r20	; 0x03
    1650:	5c 83       	std	Y+4, r21	; 0x04
    1652:	6d 83       	std	Y+5, r22	; 0x05
    1654:	7e 83       	std	Y+6, r23	; 0x06
    1656:	9f 82       	std	Y+7, r9	; 0x07
    1658:	98 87       	std	Y+8, r25	; 0x08
    165a:	fe 01       	movw	r30, r28
    165c:	39 96       	adiw	r30, 0x09	; 9
    165e:	df 01       	movw	r26, r30
    1660:	1d 92       	st	X+, r1
    1662:	8a 95       	dec	r24
    1664:	e9 f7       	brne	.-6      	; 0x1660 <__moddi3+0x38>
    1666:	a9 86       	std	Y+9, r10	; 0x09
    1668:	ba 86       	std	Y+10, r11	; 0x0a
    166a:	cb 86       	std	Y+11, r12	; 0x0b
    166c:	dc 86       	std	Y+12, r13	; 0x0c
    166e:	ed 86       	std	Y+13, r14	; 0x0d
    1670:	fe 86       	std	Y+14, r15	; 0x0e
    1672:	0f 87       	std	Y+15, r16	; 0x0f
    1674:	18 8b       	std	Y+16, r17	; 0x10
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	af 81       	ldd	r26, Y+7	; 0x07
    167c:	b8 85       	ldd	r27, Y+8	; 0x08
    167e:	b7 fd       	sbrc	r27, 7
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <__moddi3+0x68>
    1682:	e1 96       	adiw	r28, 0x31	; 49
    1684:	1c ae       	std	Y+60, r1	; 0x3c
    1686:	1d ae       	std	Y+61, r1	; 0x3d
    1688:	1e ae       	std	Y+62, r1	; 0x3e
    168a:	1f ae       	std	Y+63, r1	; 0x3f
    168c:	e1 97       	sbiw	r28, 0x31	; 49
    168e:	64 c0       	rjmp	.+200    	; 0x1758 <__moddi3+0x130>
    1690:	21 95       	neg	r18
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	12 16       	cp	r1, r18
    1696:	08 f0       	brcs	.+2      	; 0x169a <__moddi3+0x72>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	31 95       	neg	r19
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	13 16       	cp	r1, r19
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <__moddi3+0x7c>
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	b3 2f       	mov	r27, r19
    16a6:	b8 1b       	sub	r27, r24
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	3b 17       	cp	r19, r27
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <__moddi3+0x88>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	98 2b       	or	r25, r24
    16b2:	41 95       	neg	r20
    16b4:	31 e0       	ldi	r19, 0x01	; 1
    16b6:	14 16       	cp	r1, r20
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <__moddi3+0x94>
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	a4 2f       	mov	r26, r20
    16be:	a9 1b       	sub	r26, r25
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	4a 17       	cp	r20, r26
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <__moddi3+0xa0>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	38 2b       	or	r19, r24
    16ca:	51 95       	neg	r21
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	15 16       	cp	r1, r21
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <__moddi3+0xac>
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	f5 2f       	mov	r31, r21
    16d6:	f3 1b       	sub	r31, r19
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	5f 17       	cp	r21, r31
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <__moddi3+0xb8>
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	98 2b       	or	r25, r24
    16e2:	61 95       	neg	r22
    16e4:	31 e0       	ldi	r19, 0x01	; 1
    16e6:	16 16       	cp	r1, r22
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <__moddi3+0xc4>
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	e6 2f       	mov	r30, r22
    16ee:	e9 1b       	sub	r30, r25
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	6e 17       	cp	r22, r30
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <__moddi3+0xd0>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	38 2b       	or	r19, r24
    16fa:	71 95       	neg	r23
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	17 16       	cp	r1, r23
    1700:	08 f0       	brcs	.+2      	; 0x1704 <__moddi3+0xdc>
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	57 2f       	mov	r21, r23
    1706:	53 1b       	sub	r21, r19
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	75 17       	cp	r23, r21
    170c:	08 f0       	brcs	.+2      	; 0x1710 <__moddi3+0xe8>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	48 2b       	or	r20, r24
    1712:	89 2d       	mov	r24, r9
    1714:	81 95       	neg	r24
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	18 16       	cp	r1, r24
    171a:	08 f0       	brcs	.+2      	; 0x171e <__moddi3+0xf6>
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	68 2e       	mov	r6, r24
    1720:	64 1a       	sub	r6, r20
    1722:	46 2d       	mov	r20, r6
    1724:	31 e0       	ldi	r19, 0x01	; 1
    1726:	86 15       	cp	r24, r6
    1728:	08 f0       	brcs	.+2      	; 0x172c <__moddi3+0x104>
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	93 2b       	or	r25, r19
    172e:	88 2d       	mov	r24, r8
    1730:	81 95       	neg	r24
    1732:	89 1b       	sub	r24, r25
    1734:	29 83       	std	Y+1, r18	; 0x01
    1736:	ba 83       	std	Y+2, r27	; 0x02
    1738:	ab 83       	std	Y+3, r26	; 0x03
    173a:	fc 83       	std	Y+4, r31	; 0x04
    173c:	ed 83       	std	Y+5, r30	; 0x05
    173e:	5e 83       	std	Y+6, r21	; 0x06
    1740:	4f 83       	std	Y+7, r20	; 0x07
    1742:	88 87       	std	Y+8, r24	; 0x08
    1744:	2f ef       	ldi	r18, 0xFF	; 255
    1746:	3f ef       	ldi	r19, 0xFF	; 255
    1748:	4f ef       	ldi	r20, 0xFF	; 255
    174a:	5f ef       	ldi	r21, 0xFF	; 255
    174c:	e1 96       	adiw	r28, 0x31	; 49
    174e:	2c af       	std	Y+60, r18	; 0x3c
    1750:	3d af       	std	Y+61, r19	; 0x3d
    1752:	4e af       	std	Y+62, r20	; 0x3e
    1754:	5f af       	std	Y+63, r21	; 0x3f
    1756:	e1 97       	sbiw	r28, 0x31	; 49
    1758:	8d 85       	ldd	r24, Y+13	; 0x0d
    175a:	9e 85       	ldd	r25, Y+14	; 0x0e
    175c:	af 85       	ldd	r26, Y+15	; 0x0f
    175e:	b8 89       	ldd	r27, Y+16	; 0x10
    1760:	b7 ff       	sbrs	r27, 7
    1762:	5a c0       	rjmp	.+180    	; 0x1818 <__moddi3+0x1f0>
    1764:	a1 94       	neg	r10
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	1a 14       	cp	r1, r10
    176a:	08 f0       	brcs	.+2      	; 0x176e <__moddi3+0x146>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	b1 94       	neg	r11
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	1b 14       	cp	r1, r11
    1774:	08 f0       	brcs	.+2      	; 0x1778 <__moddi3+0x150>
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	6b 2d       	mov	r22, r11
    177a:	68 1b       	sub	r22, r24
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	b6 16       	cp	r11, r22
    1780:	08 f0       	brcs	.+2      	; 0x1784 <__moddi3+0x15c>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	98 2b       	or	r25, r24
    1786:	c1 94       	neg	r12
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	1c 14       	cp	r1, r12
    178c:	08 f0       	brcs	.+2      	; 0x1790 <__moddi3+0x168>
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	5c 2d       	mov	r21, r12
    1792:	59 1b       	sub	r21, r25
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	c5 16       	cp	r12, r21
    1798:	08 f0       	brcs	.+2      	; 0x179c <__moddi3+0x174>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	28 2b       	or	r18, r24
    179e:	d1 94       	neg	r13
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	1d 14       	cp	r1, r13
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <__moddi3+0x180>
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	4d 2d       	mov	r20, r13
    17aa:	42 1b       	sub	r20, r18
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	d4 16       	cp	r13, r20
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <__moddi3+0x18c>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	98 2b       	or	r25, r24
    17b6:	e1 94       	neg	r14
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	1e 14       	cp	r1, r14
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <__moddi3+0x198>
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3e 2d       	mov	r19, r14
    17c2:	39 1b       	sub	r19, r25
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	e3 16       	cp	r14, r19
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <__moddi3+0x1a4>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	28 2b       	or	r18, r24
    17ce:	f1 94       	neg	r15
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	1f 14       	cp	r1, r15
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <__moddi3+0x1b0>
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	7f 2d       	mov	r23, r15
    17da:	72 1b       	sub	r23, r18
    17dc:	27 2f       	mov	r18, r23
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	f7 16       	cp	r15, r23
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <__moddi3+0x1be>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	98 2b       	or	r25, r24
    17e8:	01 95       	neg	r16
    17ea:	11 e0       	ldi	r17, 0x01	; 1
    17ec:	10 16       	cp	r1, r16
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <__moddi3+0x1ca>
    17f0:	10 e0       	ldi	r17, 0x00	; 0
    17f2:	80 2f       	mov	r24, r16
    17f4:	89 1b       	sub	r24, r25
    17f6:	98 2f       	mov	r25, r24
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	09 17       	cp	r16, r25
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <__moddi3+0x1d8>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	18 2b       	or	r17, r24
    1802:	87 2d       	mov	r24, r7
    1804:	81 95       	neg	r24
    1806:	81 1b       	sub	r24, r17
    1808:	a9 86       	std	Y+9, r10	; 0x09
    180a:	6a 87       	std	Y+10, r22	; 0x0a
    180c:	5b 87       	std	Y+11, r21	; 0x0b
    180e:	4c 87       	std	Y+12, r20	; 0x0c
    1810:	3d 87       	std	Y+13, r19	; 0x0d
    1812:	2e 87       	std	Y+14, r18	; 0x0e
    1814:	9f 87       	std	Y+15, r25	; 0x0f
    1816:	88 8b       	std	Y+16, r24	; 0x10
    1818:	99 81       	ldd	r25, Y+1	; 0x01
    181a:	2a 81       	ldd	r18, Y+2	; 0x02
    181c:	3b 81       	ldd	r19, Y+3	; 0x03
    181e:	4c 81       	ldd	r20, Y+4	; 0x04
    1820:	5d 81       	ldd	r21, Y+5	; 0x05
    1822:	6e 81       	ldd	r22, Y+6	; 0x06
    1824:	7f 81       	ldd	r23, Y+7	; 0x07
    1826:	a8 85       	ldd	r26, Y+8	; 0x08
    1828:	b9 85       	ldd	r27, Y+9	; 0x09
    182a:	1a 85       	ldd	r17, Y+10	; 0x0a
    182c:	0b 85       	ldd	r16, Y+11	; 0x0b
    182e:	fc 84       	ldd	r15, Y+12	; 0x0c
    1830:	ed 84       	ldd	r14, Y+13	; 0x0d
    1832:	de 84       	ldd	r13, Y+14	; 0x0e
    1834:	cf 84       	ldd	r12, Y+15	; 0x0f
    1836:	b8 88       	ldd	r11, Y+16	; 0x10
    1838:	88 e0       	ldi	r24, 0x08	; 8
    183a:	e9 e1       	ldi	r30, 0x19	; 25
    183c:	8e 2e       	mov	r8, r30
    183e:	91 2c       	mov	r9, r1
    1840:	8c 0e       	add	r8, r28
    1842:	9d 1e       	adc	r9, r29
    1844:	f4 01       	movw	r30, r8
    1846:	68 2e       	mov	r6, r24
    1848:	11 92       	st	Z+, r1
    184a:	6a 94       	dec	r6
    184c:	e9 f7       	brne	.-6      	; 0x1848 <__moddi3+0x220>
    184e:	99 8f       	std	Y+25, r25	; 0x19
    1850:	2a 8f       	std	Y+26, r18	; 0x1a
    1852:	3b 8f       	std	Y+27, r19	; 0x1b
    1854:	4c 8f       	std	Y+28, r20	; 0x1c
    1856:	5d 8f       	std	Y+29, r21	; 0x1d
    1858:	6e 8f       	std	Y+30, r22	; 0x1e
    185a:	7f 8f       	std	Y+31, r23	; 0x1f
    185c:	a8 a3       	std	Y+32, r26	; 0x20
    185e:	9e 01       	movw	r18, r28
    1860:	2f 5d       	subi	r18, 0xDF	; 223
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	f9 01       	movw	r30, r18
    1866:	11 92       	st	Z+, r1
    1868:	8a 95       	dec	r24
    186a:	e9 f7       	brne	.-6      	; 0x1866 <__moddi3+0x23e>
    186c:	b9 a3       	std	Y+33, r27	; 0x21
    186e:	1a a3       	std	Y+34, r17	; 0x22
    1870:	0b a3       	std	Y+35, r16	; 0x23
    1872:	fc a2       	std	Y+36, r15	; 0x24
    1874:	ed a2       	std	Y+37, r14	; 0x25
    1876:	de a2       	std	Y+38, r13	; 0x26
    1878:	cf a2       	std	Y+39, r12	; 0x27
    187a:	b8 a6       	std	Y+40, r11	; 0x28
    187c:	29 a0       	ldd	r2, Y+33	; 0x21
    187e:	3a a0       	ldd	r3, Y+34	; 0x22
    1880:	4b a0       	ldd	r4, Y+35	; 0x23
    1882:	5c a0       	ldd	r5, Y+36	; 0x24
    1884:	ad a0       	ldd	r10, Y+37	; 0x25
    1886:	be a0       	ldd	r11, Y+38	; 0x26
    1888:	cf a0       	ldd	r12, Y+39	; 0x27
    188a:	d8 a4       	ldd	r13, Y+40	; 0x28
    188c:	49 8d       	ldd	r20, Y+25	; 0x19
    188e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1890:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1892:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1894:	e5 96       	adiw	r28, 0x35	; 53
    1896:	4f af       	std	Y+63, r20	; 0x3f
    1898:	e5 97       	sbiw	r28, 0x35	; 53
    189a:	e6 96       	adiw	r28, 0x36	; 54
    189c:	5f af       	std	Y+63, r21	; 0x3f
    189e:	e6 97       	sbiw	r28, 0x36	; 54
    18a0:	e7 96       	adiw	r28, 0x37	; 55
    18a2:	6f af       	std	Y+63, r22	; 0x3f
    18a4:	e7 97       	sbiw	r28, 0x37	; 55
    18a6:	e8 96       	adiw	r28, 0x38	; 56
    18a8:	7f af       	std	Y+63, r23	; 0x3f
    18aa:	e8 97       	sbiw	r28, 0x38	; 56
    18ac:	e8 96       	adiw	r28, 0x38	; 56
    18ae:	6c ac       	ldd	r6, Y+60	; 0x3c
    18b0:	7d ac       	ldd	r7, Y+61	; 0x3d
    18b2:	8e ac       	ldd	r8, Y+62	; 0x3e
    18b4:	9f ac       	ldd	r9, Y+63	; 0x3f
    18b6:	e8 97       	sbiw	r28, 0x38	; 56
    18b8:	2d 96       	adiw	r28, 0x0d	; 13
    18ba:	6c ae       	std	Y+60, r6	; 0x3c
    18bc:	7d ae       	std	Y+61, r7	; 0x3d
    18be:	8e ae       	std	Y+62, r8	; 0x3e
    18c0:	9f ae       	std	Y+63, r9	; 0x3f
    18c2:	2d 97       	sbiw	r28, 0x0d	; 13
    18c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    18ca:	38 a1       	ldd	r19, Y+32	; 0x20
    18cc:	3c 01       	movw	r6, r24
    18ce:	49 01       	movw	r8, r18
    18d0:	61 96       	adiw	r28, 0x11	; 17
    18d2:	6c ae       	std	Y+60, r6	; 0x3c
    18d4:	7d ae       	std	Y+61, r7	; 0x3d
    18d6:	8e ae       	std	Y+62, r8	; 0x3e
    18d8:	9f ae       	std	Y+63, r9	; 0x3f
    18da:	61 97       	sbiw	r28, 0x11	; 17
    18dc:	a1 14       	cp	r10, r1
    18de:	b1 04       	cpc	r11, r1
    18e0:	c1 04       	cpc	r12, r1
    18e2:	d1 04       	cpc	r13, r1
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <__moddi3+0x2c0>
    18e6:	28 c3       	rjmp	.+1616   	; 0x1f38 <__moddi3+0x910>
    18e8:	62 14       	cp	r6, r2
    18ea:	73 04       	cpc	r7, r3
    18ec:	84 04       	cpc	r8, r4
    18ee:	95 04       	cpc	r9, r5
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <__moddi3+0x2cc>
    18f2:	0e c1       	rjmp	.+540    	; 0x1b10 <__moddi3+0x4e8>
    18f4:	00 e0       	ldi	r16, 0x00	; 0
    18f6:	20 16       	cp	r2, r16
    18f8:	00 e0       	ldi	r16, 0x00	; 0
    18fa:	30 06       	cpc	r3, r16
    18fc:	01 e0       	ldi	r16, 0x01	; 1
    18fe:	40 06       	cpc	r4, r16
    1900:	00 e0       	ldi	r16, 0x00	; 0
    1902:	50 06       	cpc	r5, r16
    1904:	88 f4       	brcc	.+34     	; 0x1928 <__moddi3+0x300>
    1906:	1f ef       	ldi	r17, 0xFF	; 255
    1908:	21 16       	cp	r2, r17
    190a:	31 04       	cpc	r3, r1
    190c:	41 04       	cpc	r4, r1
    190e:	51 04       	cpc	r5, r1
    1910:	39 f0       	breq	.+14     	; 0x1920 <__moddi3+0x2f8>
    1912:	30 f0       	brcs	.+12     	; 0x1920 <__moddi3+0x2f8>
    1914:	88 e0       	ldi	r24, 0x08	; 8
    1916:	e8 2e       	mov	r14, r24
    1918:	f1 2c       	mov	r15, r1
    191a:	01 2d       	mov	r16, r1
    191c:	11 2d       	mov	r17, r1
    191e:	18 c0       	rjmp	.+48     	; 0x1950 <__moddi3+0x328>
    1920:	ee 24       	eor	r14, r14
    1922:	ff 24       	eor	r15, r15
    1924:	87 01       	movw	r16, r14
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <__moddi3+0x328>
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	22 16       	cp	r2, r18
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	32 06       	cpc	r3, r18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	42 06       	cpc	r4, r18
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	52 06       	cpc	r5, r18
    1938:	30 f0       	brcs	.+12     	; 0x1946 <__moddi3+0x31e>
    193a:	b8 e1       	ldi	r27, 0x18	; 24
    193c:	eb 2e       	mov	r14, r27
    193e:	f1 2c       	mov	r15, r1
    1940:	01 2d       	mov	r16, r1
    1942:	11 2d       	mov	r17, r1
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <__moddi3+0x328>
    1946:	a0 e1       	ldi	r26, 0x10	; 16
    1948:	ea 2e       	mov	r14, r26
    194a:	f1 2c       	mov	r15, r1
    194c:	01 2d       	mov	r16, r1
    194e:	11 2d       	mov	r17, r1
    1950:	d2 01       	movw	r26, r4
    1952:	c1 01       	movw	r24, r2
    1954:	0e 2c       	mov	r0, r14
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <__moddi3+0x338>
    1958:	b6 95       	lsr	r27
    195a:	a7 95       	ror	r26
    195c:	97 95       	ror	r25
    195e:	87 95       	ror	r24
    1960:	0a 94       	dec	r0
    1962:	d2 f7       	brpl	.-12     	; 0x1958 <__moddi3+0x330>
    1964:	82 56       	subi	r24, 0x62	; 98
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	dc 01       	movw	r26, r24
    196a:	2c 91       	ld	r18, X
    196c:	80 e2       	ldi	r24, 0x20	; 32
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e0       	ldi	r26, 0x00	; 0
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	8e 19       	sub	r24, r14
    1976:	9f 09       	sbc	r25, r15
    1978:	a0 0b       	sbc	r26, r16
    197a:	b1 0b       	sbc	r27, r17
    197c:	5c 01       	movw	r10, r24
    197e:	6d 01       	movw	r12, r26
    1980:	a2 1a       	sub	r10, r18
    1982:	b1 08       	sbc	r11, r1
    1984:	c1 08       	sbc	r12, r1
    1986:	d1 08       	sbc	r13, r1
    1988:	65 96       	adiw	r28, 0x15	; 21
    198a:	ac ae       	std	Y+60, r10	; 0x3c
    198c:	bd ae       	std	Y+61, r11	; 0x3d
    198e:	ce ae       	std	Y+62, r12	; 0x3e
    1990:	df ae       	std	Y+63, r13	; 0x3f
    1992:	65 97       	sbiw	r28, 0x15	; 21
    1994:	a1 14       	cp	r10, r1
    1996:	b1 04       	cpc	r11, r1
    1998:	c1 04       	cpc	r12, r1
    199a:	d1 04       	cpc	r13, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <__moddi3+0x378>
    199e:	45 c0       	rjmp	.+138    	; 0x1a2a <__moddi3+0x402>
    19a0:	62 96       	adiw	r28, 0x12	; 18
    19a2:	6f ad       	ldd	r22, Y+63	; 0x3f
    19a4:	62 97       	sbiw	r28, 0x12	; 18
    19a6:	06 2e       	mov	r0, r22
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <__moddi3+0x38a>
    19aa:	22 0c       	add	r2, r2
    19ac:	33 1c       	adc	r3, r3
    19ae:	44 1c       	adc	r4, r4
    19b0:	55 1c       	adc	r5, r5
    19b2:	0a 94       	dec	r0
    19b4:	d2 f7       	brpl	.-12     	; 0x19aa <__moddi3+0x382>
    19b6:	a4 01       	movw	r20, r8
    19b8:	93 01       	movw	r18, r6
    19ba:	06 2e       	mov	r0, r22
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <__moddi3+0x39e>
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	44 1f       	adc	r20, r20
    19c4:	55 1f       	adc	r21, r21
    19c6:	0a 94       	dec	r0
    19c8:	d2 f7       	brpl	.-12     	; 0x19be <__moddi3+0x396>
    19ca:	80 e2       	ldi	r24, 0x20	; 32
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	8a 19       	sub	r24, r10
    19d0:	9b 09       	sbc	r25, r11
    19d2:	e8 96       	adiw	r28, 0x38	; 56
    19d4:	cc ac       	ldd	r12, Y+60	; 0x3c
    19d6:	dd ac       	ldd	r13, Y+61	; 0x3d
    19d8:	ee ac       	ldd	r14, Y+62	; 0x3e
    19da:	ff ac       	ldd	r15, Y+63	; 0x3f
    19dc:	e8 97       	sbiw	r28, 0x38	; 56
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <__moddi3+0x3c0>
    19e0:	f6 94       	lsr	r15
    19e2:	e7 94       	ror	r14
    19e4:	d7 94       	ror	r13
    19e6:	c7 94       	ror	r12
    19e8:	8a 95       	dec	r24
    19ea:	d2 f7       	brpl	.-12     	; 0x19e0 <__moddi3+0x3b8>
    19ec:	87 01       	movw	r16, r14
    19ee:	76 01       	movw	r14, r12
    19f0:	e2 2a       	or	r14, r18
    19f2:	f3 2a       	or	r15, r19
    19f4:	04 2b       	or	r16, r20
    19f6:	15 2b       	or	r17, r21
    19f8:	61 96       	adiw	r28, 0x11	; 17
    19fa:	ec ae       	std	Y+60, r14	; 0x3c
    19fc:	fd ae       	std	Y+61, r15	; 0x3d
    19fe:	0e af       	std	Y+62, r16	; 0x3e
    1a00:	1f af       	std	Y+63, r17	; 0x3f
    1a02:	61 97       	sbiw	r28, 0x11	; 17
    1a04:	e8 96       	adiw	r28, 0x38	; 56
    1a06:	0c ad       	ldd	r16, Y+60	; 0x3c
    1a08:	1d ad       	ldd	r17, Y+61	; 0x3d
    1a0a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a0c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a0e:	e8 97       	sbiw	r28, 0x38	; 56
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <__moddi3+0x3f2>
    1a12:	00 0f       	add	r16, r16
    1a14:	11 1f       	adc	r17, r17
    1a16:	22 1f       	adc	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	6a 95       	dec	r22
    1a1c:	d2 f7       	brpl	.-12     	; 0x1a12 <__moddi3+0x3ea>
    1a1e:	2d 96       	adiw	r28, 0x0d	; 13
    1a20:	0c af       	std	Y+60, r16	; 0x3c
    1a22:	1d af       	std	Y+61, r17	; 0x3d
    1a24:	2e af       	std	Y+62, r18	; 0x3e
    1a26:	3f af       	std	Y+63, r19	; 0x3f
    1a28:	2d 97       	sbiw	r28, 0x0d	; 13
    1a2a:	32 01       	movw	r6, r4
    1a2c:	88 24       	eor	r8, r8
    1a2e:	99 24       	eor	r9, r9
    1a30:	a2 01       	movw	r20, r4
    1a32:	91 01       	movw	r18, r2
    1a34:	40 70       	andi	r20, 0x00	; 0
    1a36:	50 70       	andi	r21, 0x00	; 0
    1a38:	69 96       	adiw	r28, 0x19	; 25
    1a3a:	2c af       	std	Y+60, r18	; 0x3c
    1a3c:	3d af       	std	Y+61, r19	; 0x3d
    1a3e:	4e af       	std	Y+62, r20	; 0x3e
    1a40:	5f af       	std	Y+63, r21	; 0x3f
    1a42:	69 97       	sbiw	r28, 0x19	; 25
    1a44:	61 96       	adiw	r28, 0x11	; 17
    1a46:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a48:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a4e:	61 97       	sbiw	r28, 0x11	; 17
    1a50:	a4 01       	movw	r20, r8
    1a52:	93 01       	movw	r18, r6
    1a54:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1a58:	7b 01       	movw	r14, r22
    1a5a:	8c 01       	movw	r16, r24
    1a5c:	61 96       	adiw	r28, 0x11	; 17
    1a5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a60:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a62:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a64:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a66:	61 97       	sbiw	r28, 0x11	; 17
    1a68:	a4 01       	movw	r20, r8
    1a6a:	93 01       	movw	r18, r6
    1a6c:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1a70:	ca 01       	movw	r24, r20
    1a72:	b9 01       	movw	r22, r18
    1a74:	69 96       	adiw	r28, 0x19	; 25
    1a76:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a78:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a7a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a7c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a7e:	69 97       	sbiw	r28, 0x19	; 25
    1a80:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    1a84:	9b 01       	movw	r18, r22
    1a86:	ac 01       	movw	r20, r24
    1a88:	87 01       	movw	r16, r14
    1a8a:	ff 24       	eor	r15, r15
    1a8c:	ee 24       	eor	r14, r14
    1a8e:	2d 96       	adiw	r28, 0x0d	; 13
    1a90:	ac ac       	ldd	r10, Y+60	; 0x3c
    1a92:	bd ac       	ldd	r11, Y+61	; 0x3d
    1a94:	ce ac       	ldd	r12, Y+62	; 0x3e
    1a96:	df ac       	ldd	r13, Y+63	; 0x3f
    1a98:	2d 97       	sbiw	r28, 0x0d	; 13
    1a9a:	c6 01       	movw	r24, r12
    1a9c:	aa 27       	eor	r26, r26
    1a9e:	bb 27       	eor	r27, r27
    1aa0:	57 01       	movw	r10, r14
    1aa2:	68 01       	movw	r12, r16
    1aa4:	a8 2a       	or	r10, r24
    1aa6:	b9 2a       	or	r11, r25
    1aa8:	ca 2a       	or	r12, r26
    1aaa:	db 2a       	or	r13, r27
    1aac:	a2 16       	cp	r10, r18
    1aae:	b3 06       	cpc	r11, r19
    1ab0:	c4 06       	cpc	r12, r20
    1ab2:	d5 06       	cpc	r13, r21
    1ab4:	90 f4       	brcc	.+36     	; 0x1ada <__moddi3+0x4b2>
    1ab6:	a2 0c       	add	r10, r2
    1ab8:	b3 1c       	adc	r11, r3
    1aba:	c4 1c       	adc	r12, r4
    1abc:	d5 1c       	adc	r13, r5
    1abe:	a2 14       	cp	r10, r2
    1ac0:	b3 04       	cpc	r11, r3
    1ac2:	c4 04       	cpc	r12, r4
    1ac4:	d5 04       	cpc	r13, r5
    1ac6:	48 f0       	brcs	.+18     	; 0x1ada <__moddi3+0x4b2>
    1ac8:	a2 16       	cp	r10, r18
    1aca:	b3 06       	cpc	r11, r19
    1acc:	c4 06       	cpc	r12, r20
    1ace:	d5 06       	cpc	r13, r21
    1ad0:	20 f4       	brcc	.+8      	; 0x1ada <__moddi3+0x4b2>
    1ad2:	a2 0c       	add	r10, r2
    1ad4:	b3 1c       	adc	r11, r3
    1ad6:	c4 1c       	adc	r12, r4
    1ad8:	d5 1c       	adc	r13, r5
    1ada:	a2 1a       	sub	r10, r18
    1adc:	b3 0a       	sbc	r11, r19
    1ade:	c4 0a       	sbc	r12, r20
    1ae0:	d5 0a       	sbc	r13, r21
    1ae2:	c6 01       	movw	r24, r12
    1ae4:	b5 01       	movw	r22, r10
    1ae6:	a4 01       	movw	r20, r8
    1ae8:	93 01       	movw	r18, r6
    1aea:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1aee:	7b 01       	movw	r14, r22
    1af0:	8c 01       	movw	r16, r24
    1af2:	c6 01       	movw	r24, r12
    1af4:	b5 01       	movw	r22, r10
    1af6:	a4 01       	movw	r20, r8
    1af8:	93 01       	movw	r18, r6
    1afa:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1afe:	ca 01       	movw	r24, r20
    1b00:	b9 01       	movw	r22, r18
    1b02:	69 96       	adiw	r28, 0x19	; 25
    1b04:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b06:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b08:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b0a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b0c:	69 97       	sbiw	r28, 0x19	; 25
    1b0e:	c8 c1       	rjmp	.+912    	; 0x1ea0 <__moddi3+0x878>
    1b10:	21 14       	cp	r2, r1
    1b12:	31 04       	cpc	r3, r1
    1b14:	41 04       	cpc	r4, r1
    1b16:	51 04       	cpc	r5, r1
    1b18:	71 f4       	brne	.+28     	; 0x1b36 <__moddi3+0x50e>
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1b2e:	c9 01       	movw	r24, r18
    1b30:	da 01       	movw	r26, r20
    1b32:	1c 01       	movw	r2, r24
    1b34:	2d 01       	movw	r4, r26
    1b36:	00 e0       	ldi	r16, 0x00	; 0
    1b38:	20 16       	cp	r2, r16
    1b3a:	00 e0       	ldi	r16, 0x00	; 0
    1b3c:	30 06       	cpc	r3, r16
    1b3e:	01 e0       	ldi	r16, 0x01	; 1
    1b40:	40 06       	cpc	r4, r16
    1b42:	00 e0       	ldi	r16, 0x00	; 0
    1b44:	50 06       	cpc	r5, r16
    1b46:	88 f4       	brcc	.+34     	; 0x1b6a <__moddi3+0x542>
    1b48:	1f ef       	ldi	r17, 0xFF	; 255
    1b4a:	21 16       	cp	r2, r17
    1b4c:	31 04       	cpc	r3, r1
    1b4e:	41 04       	cpc	r4, r1
    1b50:	51 04       	cpc	r5, r1
    1b52:	39 f0       	breq	.+14     	; 0x1b62 <__moddi3+0x53a>
    1b54:	30 f0       	brcs	.+12     	; 0x1b62 <__moddi3+0x53a>
    1b56:	68 e0       	ldi	r22, 0x08	; 8
    1b58:	e6 2e       	mov	r14, r22
    1b5a:	f1 2c       	mov	r15, r1
    1b5c:	01 2d       	mov	r16, r1
    1b5e:	11 2d       	mov	r17, r1
    1b60:	18 c0       	rjmp	.+48     	; 0x1b92 <__moddi3+0x56a>
    1b62:	ee 24       	eor	r14, r14
    1b64:	ff 24       	eor	r15, r15
    1b66:	87 01       	movw	r16, r14
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <__moddi3+0x56a>
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	22 16       	cp	r2, r18
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	32 06       	cpc	r3, r18
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	42 06       	cpc	r4, r18
    1b76:	21 e0       	ldi	r18, 0x01	; 1
    1b78:	52 06       	cpc	r5, r18
    1b7a:	30 f0       	brcs	.+12     	; 0x1b88 <__moddi3+0x560>
    1b7c:	58 e1       	ldi	r21, 0x18	; 24
    1b7e:	e5 2e       	mov	r14, r21
    1b80:	f1 2c       	mov	r15, r1
    1b82:	01 2d       	mov	r16, r1
    1b84:	11 2d       	mov	r17, r1
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <__moddi3+0x56a>
    1b88:	40 e1       	ldi	r20, 0x10	; 16
    1b8a:	e4 2e       	mov	r14, r20
    1b8c:	f1 2c       	mov	r15, r1
    1b8e:	01 2d       	mov	r16, r1
    1b90:	11 2d       	mov	r17, r1
    1b92:	d2 01       	movw	r26, r4
    1b94:	c1 01       	movw	r24, r2
    1b96:	0e 2c       	mov	r0, r14
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <__moddi3+0x57a>
    1b9a:	b6 95       	lsr	r27
    1b9c:	a7 95       	ror	r26
    1b9e:	97 95       	ror	r25
    1ba0:	87 95       	ror	r24
    1ba2:	0a 94       	dec	r0
    1ba4:	d2 f7       	brpl	.-12     	; 0x1b9a <__moddi3+0x572>
    1ba6:	82 56       	subi	r24, 0x62	; 98
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	dc 01       	movw	r26, r24
    1bac:	2c 91       	ld	r18, X
    1bae:	30 e2       	ldi	r19, 0x20	; 32
    1bb0:	a3 2e       	mov	r10, r19
    1bb2:	b1 2c       	mov	r11, r1
    1bb4:	c1 2c       	mov	r12, r1
    1bb6:	d1 2c       	mov	r13, r1
    1bb8:	d6 01       	movw	r26, r12
    1bba:	c5 01       	movw	r24, r10
    1bbc:	8e 19       	sub	r24, r14
    1bbe:	9f 09       	sbc	r25, r15
    1bc0:	a0 0b       	sbc	r26, r16
    1bc2:	b1 0b       	sbc	r27, r17
    1bc4:	7c 01       	movw	r14, r24
    1bc6:	8d 01       	movw	r16, r26
    1bc8:	e2 1a       	sub	r14, r18
    1bca:	f1 08       	sbc	r15, r1
    1bcc:	01 09       	sbc	r16, r1
    1bce:	11 09       	sbc	r17, r1
    1bd0:	65 96       	adiw	r28, 0x15	; 21
    1bd2:	ec ae       	std	Y+60, r14	; 0x3c
    1bd4:	fd ae       	std	Y+61, r15	; 0x3d
    1bd6:	0e af       	std	Y+62, r16	; 0x3e
    1bd8:	1f af       	std	Y+63, r17	; 0x3f
    1bda:	65 97       	sbiw	r28, 0x15	; 21
    1bdc:	e1 14       	cp	r14, r1
    1bde:	f1 04       	cpc	r15, r1
    1be0:	01 05       	cpc	r16, r1
    1be2:	11 05       	cpc	r17, r1
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <__moddi3+0x5cc>
    1be6:	64 01       	movw	r12, r8
    1be8:	53 01       	movw	r10, r6
    1bea:	a2 18       	sub	r10, r2
    1bec:	b3 08       	sbc	r11, r3
    1bee:	c4 08       	sbc	r12, r4
    1bf0:	d5 08       	sbc	r13, r5
    1bf2:	ec c0       	rjmp	.+472    	; 0x1dcc <__moddi3+0x7a4>
    1bf4:	62 96       	adiw	r28, 0x12	; 18
    1bf6:	ff ac       	ldd	r15, Y+63	; 0x3f
    1bf8:	62 97       	sbiw	r28, 0x12	; 18
    1bfa:	e4 96       	adiw	r28, 0x34	; 52
    1bfc:	ff ae       	std	Y+63, r15	; 0x3f
    1bfe:	e4 97       	sbiw	r28, 0x34	; 52
    1c00:	0f 2c       	mov	r0, r15
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <__moddi3+0x5e4>
    1c04:	22 0c       	add	r2, r2
    1c06:	33 1c       	adc	r3, r3
    1c08:	44 1c       	adc	r4, r4
    1c0a:	55 1c       	adc	r5, r5
    1c0c:	0a 94       	dec	r0
    1c0e:	d2 f7       	brpl	.-12     	; 0x1c04 <__moddi3+0x5dc>
    1c10:	8a 2d       	mov	r24, r10
    1c12:	8f 19       	sub	r24, r15
    1c14:	64 01       	movw	r12, r8
    1c16:	53 01       	movw	r10, r6
    1c18:	08 2e       	mov	r0, r24
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <__moddi3+0x5fc>
    1c1c:	d6 94       	lsr	r13
    1c1e:	c7 94       	ror	r12
    1c20:	b7 94       	ror	r11
    1c22:	a7 94       	ror	r10
    1c24:	0a 94       	dec	r0
    1c26:	d2 f7       	brpl	.-12     	; 0x1c1c <__moddi3+0x5f4>
    1c28:	a4 01       	movw	r20, r8
    1c2a:	93 01       	movw	r18, r6
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__moddi3+0x60e>
    1c2e:	22 0f       	add	r18, r18
    1c30:	33 1f       	adc	r19, r19
    1c32:	44 1f       	adc	r20, r20
    1c34:	55 1f       	adc	r21, r21
    1c36:	fa 94       	dec	r15
    1c38:	d2 f7       	brpl	.-12     	; 0x1c2e <__moddi3+0x606>
    1c3a:	e8 96       	adiw	r28, 0x38	; 56
    1c3c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1c3e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1c40:	8e ac       	ldd	r8, Y+62	; 0x3e
    1c42:	9f ac       	ldd	r9, Y+63	; 0x3f
    1c44:	e8 97       	sbiw	r28, 0x38	; 56
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <__moddi3+0x628>
    1c48:	96 94       	lsr	r9
    1c4a:	87 94       	ror	r8
    1c4c:	77 94       	ror	r7
    1c4e:	67 94       	ror	r6
    1c50:	8a 95       	dec	r24
    1c52:	d2 f7       	brpl	.-12     	; 0x1c48 <__moddi3+0x620>
    1c54:	84 01       	movw	r16, r8
    1c56:	73 01       	movw	r14, r6
    1c58:	e2 2a       	or	r14, r18
    1c5a:	f3 2a       	or	r15, r19
    1c5c:	04 2b       	or	r16, r20
    1c5e:	15 2b       	or	r17, r21
    1c60:	29 96       	adiw	r28, 0x09	; 9
    1c62:	ec ae       	std	Y+60, r14	; 0x3c
    1c64:	fd ae       	std	Y+61, r15	; 0x3d
    1c66:	0e af       	std	Y+62, r16	; 0x3e
    1c68:	1f af       	std	Y+63, r17	; 0x3f
    1c6a:	29 97       	sbiw	r28, 0x09	; 9
    1c6c:	32 01       	movw	r6, r4
    1c6e:	88 24       	eor	r8, r8
    1c70:	99 24       	eor	r9, r9
    1c72:	92 01       	movw	r18, r4
    1c74:	81 01       	movw	r16, r2
    1c76:	20 70       	andi	r18, 0x00	; 0
    1c78:	30 70       	andi	r19, 0x00	; 0
    1c7a:	6d 96       	adiw	r28, 0x1d	; 29
    1c7c:	0c af       	std	Y+60, r16	; 0x3c
    1c7e:	1d af       	std	Y+61, r17	; 0x3d
    1c80:	2e af       	std	Y+62, r18	; 0x3e
    1c82:	3f af       	std	Y+63, r19	; 0x3f
    1c84:	6d 97       	sbiw	r28, 0x1d	; 29
    1c86:	c6 01       	movw	r24, r12
    1c88:	b5 01       	movw	r22, r10
    1c8a:	a4 01       	movw	r20, r8
    1c8c:	93 01       	movw	r18, r6
    1c8e:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1c92:	7b 01       	movw	r14, r22
    1c94:	8c 01       	movw	r16, r24
    1c96:	c6 01       	movw	r24, r12
    1c98:	b5 01       	movw	r22, r10
    1c9a:	a4 01       	movw	r20, r8
    1c9c:	93 01       	movw	r18, r6
    1c9e:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	b9 01       	movw	r22, r18
    1ca6:	6d 96       	adiw	r28, 0x1d	; 29
    1ca8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1caa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cac:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cae:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb0:	6d 97       	sbiw	r28, 0x1d	; 29
    1cb2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	ac 01       	movw	r20, r24
    1cba:	87 01       	movw	r16, r14
    1cbc:	ff 24       	eor	r15, r15
    1cbe:	ee 24       	eor	r14, r14
    1cc0:	29 96       	adiw	r28, 0x09	; 9
    1cc2:	ac ac       	ldd	r10, Y+60	; 0x3c
    1cc4:	bd ac       	ldd	r11, Y+61	; 0x3d
    1cc6:	ce ac       	ldd	r12, Y+62	; 0x3e
    1cc8:	df ac       	ldd	r13, Y+63	; 0x3f
    1cca:	29 97       	sbiw	r28, 0x09	; 9
    1ccc:	c6 01       	movw	r24, r12
    1cce:	aa 27       	eor	r26, r26
    1cd0:	bb 27       	eor	r27, r27
    1cd2:	5c 01       	movw	r10, r24
    1cd4:	6d 01       	movw	r12, r26
    1cd6:	ae 28       	or	r10, r14
    1cd8:	bf 28       	or	r11, r15
    1cda:	c0 2a       	or	r12, r16
    1cdc:	d1 2a       	or	r13, r17
    1cde:	a2 16       	cp	r10, r18
    1ce0:	b3 06       	cpc	r11, r19
    1ce2:	c4 06       	cpc	r12, r20
    1ce4:	d5 06       	cpc	r13, r21
    1ce6:	90 f4       	brcc	.+36     	; 0x1d0c <__moddi3+0x6e4>
    1ce8:	a2 0c       	add	r10, r2
    1cea:	b3 1c       	adc	r11, r3
    1cec:	c4 1c       	adc	r12, r4
    1cee:	d5 1c       	adc	r13, r5
    1cf0:	a2 14       	cp	r10, r2
    1cf2:	b3 04       	cpc	r11, r3
    1cf4:	c4 04       	cpc	r12, r4
    1cf6:	d5 04       	cpc	r13, r5
    1cf8:	48 f0       	brcs	.+18     	; 0x1d0c <__moddi3+0x6e4>
    1cfa:	a2 16       	cp	r10, r18
    1cfc:	b3 06       	cpc	r11, r19
    1cfe:	c4 06       	cpc	r12, r20
    1d00:	d5 06       	cpc	r13, r21
    1d02:	20 f4       	brcc	.+8      	; 0x1d0c <__moddi3+0x6e4>
    1d04:	a2 0c       	add	r10, r2
    1d06:	b3 1c       	adc	r11, r3
    1d08:	c4 1c       	adc	r12, r4
    1d0a:	d5 1c       	adc	r13, r5
    1d0c:	a2 1a       	sub	r10, r18
    1d0e:	b3 0a       	sbc	r11, r19
    1d10:	c4 0a       	sbc	r12, r20
    1d12:	d5 0a       	sbc	r13, r21
    1d14:	c6 01       	movw	r24, r12
    1d16:	b5 01       	movw	r22, r10
    1d18:	a4 01       	movw	r20, r8
    1d1a:	93 01       	movw	r18, r6
    1d1c:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1d20:	7b 01       	movw	r14, r22
    1d22:	8c 01       	movw	r16, r24
    1d24:	c6 01       	movw	r24, r12
    1d26:	b5 01       	movw	r22, r10
    1d28:	a4 01       	movw	r20, r8
    1d2a:	93 01       	movw	r18, r6
    1d2c:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1d30:	ca 01       	movw	r24, r20
    1d32:	b9 01       	movw	r22, r18
    1d34:	6d 96       	adiw	r28, 0x1d	; 29
    1d36:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d38:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d3a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d3c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d3e:	6d 97       	sbiw	r28, 0x1d	; 29
    1d40:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    1d44:	9b 01       	movw	r18, r22
    1d46:	ac 01       	movw	r20, r24
    1d48:	87 01       	movw	r16, r14
    1d4a:	ff 24       	eor	r15, r15
    1d4c:	ee 24       	eor	r14, r14
    1d4e:	29 96       	adiw	r28, 0x09	; 9
    1d50:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d52:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d54:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d56:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d58:	29 97       	sbiw	r28, 0x09	; 9
    1d5a:	a0 70       	andi	r26, 0x00	; 0
    1d5c:	b0 70       	andi	r27, 0x00	; 0
    1d5e:	57 01       	movw	r10, r14
    1d60:	68 01       	movw	r12, r16
    1d62:	a8 2a       	or	r10, r24
    1d64:	b9 2a       	or	r11, r25
    1d66:	ca 2a       	or	r12, r26
    1d68:	db 2a       	or	r13, r27
    1d6a:	a2 16       	cp	r10, r18
    1d6c:	b3 06       	cpc	r11, r19
    1d6e:	c4 06       	cpc	r12, r20
    1d70:	d5 06       	cpc	r13, r21
    1d72:	90 f4       	brcc	.+36     	; 0x1d98 <__moddi3+0x770>
    1d74:	a2 0c       	add	r10, r2
    1d76:	b3 1c       	adc	r11, r3
    1d78:	c4 1c       	adc	r12, r4
    1d7a:	d5 1c       	adc	r13, r5
    1d7c:	a2 14       	cp	r10, r2
    1d7e:	b3 04       	cpc	r11, r3
    1d80:	c4 04       	cpc	r12, r4
    1d82:	d5 04       	cpc	r13, r5
    1d84:	48 f0       	brcs	.+18     	; 0x1d98 <__moddi3+0x770>
    1d86:	a2 16       	cp	r10, r18
    1d88:	b3 06       	cpc	r11, r19
    1d8a:	c4 06       	cpc	r12, r20
    1d8c:	d5 06       	cpc	r13, r21
    1d8e:	20 f4       	brcc	.+8      	; 0x1d98 <__moddi3+0x770>
    1d90:	a2 0c       	add	r10, r2
    1d92:	b3 1c       	adc	r11, r3
    1d94:	c4 1c       	adc	r12, r4
    1d96:	d5 1c       	adc	r13, r5
    1d98:	e8 96       	adiw	r28, 0x38	; 56
    1d9a:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d9c:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d9e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1da0:	1f ad       	ldd	r17, Y+63	; 0x3f
    1da2:	e8 97       	sbiw	r28, 0x38	; 56
    1da4:	e4 96       	adiw	r28, 0x34	; 52
    1da6:	0f ac       	ldd	r0, Y+63	; 0x3f
    1da8:	e4 97       	sbiw	r28, 0x34	; 52
    1daa:	04 c0       	rjmp	.+8      	; 0x1db4 <__moddi3+0x78c>
    1dac:	ee 0c       	add	r14, r14
    1dae:	ff 1c       	adc	r15, r15
    1db0:	00 1f       	adc	r16, r16
    1db2:	11 1f       	adc	r17, r17
    1db4:	0a 94       	dec	r0
    1db6:	d2 f7       	brpl	.-12     	; 0x1dac <__moddi3+0x784>
    1db8:	2d 96       	adiw	r28, 0x0d	; 13
    1dba:	ec ae       	std	Y+60, r14	; 0x3c
    1dbc:	fd ae       	std	Y+61, r15	; 0x3d
    1dbe:	0e af       	std	Y+62, r16	; 0x3e
    1dc0:	1f af       	std	Y+63, r17	; 0x3f
    1dc2:	2d 97       	sbiw	r28, 0x0d	; 13
    1dc4:	a2 1a       	sub	r10, r18
    1dc6:	b3 0a       	sbc	r11, r19
    1dc8:	c4 0a       	sbc	r12, r20
    1dca:	d5 0a       	sbc	r13, r21
    1dcc:	32 01       	movw	r6, r4
    1dce:	88 24       	eor	r8, r8
    1dd0:	99 24       	eor	r9, r9
    1dd2:	92 01       	movw	r18, r4
    1dd4:	81 01       	movw	r16, r2
    1dd6:	20 70       	andi	r18, 0x00	; 0
    1dd8:	30 70       	andi	r19, 0x00	; 0
    1dda:	a1 96       	adiw	r28, 0x21	; 33
    1ddc:	0c af       	std	Y+60, r16	; 0x3c
    1dde:	1d af       	std	Y+61, r17	; 0x3d
    1de0:	2e af       	std	Y+62, r18	; 0x3e
    1de2:	3f af       	std	Y+63, r19	; 0x3f
    1de4:	a1 97       	sbiw	r28, 0x21	; 33
    1de6:	c6 01       	movw	r24, r12
    1de8:	b5 01       	movw	r22, r10
    1dea:	a4 01       	movw	r20, r8
    1dec:	93 01       	movw	r18, r6
    1dee:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1df2:	7b 01       	movw	r14, r22
    1df4:	8c 01       	movw	r16, r24
    1df6:	c6 01       	movw	r24, r12
    1df8:	b5 01       	movw	r22, r10
    1dfa:	a4 01       	movw	r20, r8
    1dfc:	93 01       	movw	r18, r6
    1dfe:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1e02:	ca 01       	movw	r24, r20
    1e04:	b9 01       	movw	r22, r18
    1e06:	a1 96       	adiw	r28, 0x21	; 33
    1e08:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e0a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e10:	a1 97       	sbiw	r28, 0x21	; 33
    1e12:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    1e16:	9b 01       	movw	r18, r22
    1e18:	ac 01       	movw	r20, r24
    1e1a:	87 01       	movw	r16, r14
    1e1c:	ff 24       	eor	r15, r15
    1e1e:	ee 24       	eor	r14, r14
    1e20:	2d 96       	adiw	r28, 0x0d	; 13
    1e22:	ac ac       	ldd	r10, Y+60	; 0x3c
    1e24:	bd ac       	ldd	r11, Y+61	; 0x3d
    1e26:	ce ac       	ldd	r12, Y+62	; 0x3e
    1e28:	df ac       	ldd	r13, Y+63	; 0x3f
    1e2a:	2d 97       	sbiw	r28, 0x0d	; 13
    1e2c:	c6 01       	movw	r24, r12
    1e2e:	aa 27       	eor	r26, r26
    1e30:	bb 27       	eor	r27, r27
    1e32:	57 01       	movw	r10, r14
    1e34:	68 01       	movw	r12, r16
    1e36:	a8 2a       	or	r10, r24
    1e38:	b9 2a       	or	r11, r25
    1e3a:	ca 2a       	or	r12, r26
    1e3c:	db 2a       	or	r13, r27
    1e3e:	a2 16       	cp	r10, r18
    1e40:	b3 06       	cpc	r11, r19
    1e42:	c4 06       	cpc	r12, r20
    1e44:	d5 06       	cpc	r13, r21
    1e46:	90 f4       	brcc	.+36     	; 0x1e6c <__moddi3+0x844>
    1e48:	a2 0c       	add	r10, r2
    1e4a:	b3 1c       	adc	r11, r3
    1e4c:	c4 1c       	adc	r12, r4
    1e4e:	d5 1c       	adc	r13, r5
    1e50:	a2 14       	cp	r10, r2
    1e52:	b3 04       	cpc	r11, r3
    1e54:	c4 04       	cpc	r12, r4
    1e56:	d5 04       	cpc	r13, r5
    1e58:	48 f0       	brcs	.+18     	; 0x1e6c <__moddi3+0x844>
    1e5a:	a2 16       	cp	r10, r18
    1e5c:	b3 06       	cpc	r11, r19
    1e5e:	c4 06       	cpc	r12, r20
    1e60:	d5 06       	cpc	r13, r21
    1e62:	20 f4       	brcc	.+8      	; 0x1e6c <__moddi3+0x844>
    1e64:	a2 0c       	add	r10, r2
    1e66:	b3 1c       	adc	r11, r3
    1e68:	c4 1c       	adc	r12, r4
    1e6a:	d5 1c       	adc	r13, r5
    1e6c:	a2 1a       	sub	r10, r18
    1e6e:	b3 0a       	sbc	r11, r19
    1e70:	c4 0a       	sbc	r12, r20
    1e72:	d5 0a       	sbc	r13, r21
    1e74:	c6 01       	movw	r24, r12
    1e76:	b5 01       	movw	r22, r10
    1e78:	a4 01       	movw	r20, r8
    1e7a:	93 01       	movw	r18, r6
    1e7c:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1e80:	7b 01       	movw	r14, r22
    1e82:	8c 01       	movw	r16, r24
    1e84:	c6 01       	movw	r24, r12
    1e86:	b5 01       	movw	r22, r10
    1e88:	a4 01       	movw	r20, r8
    1e8a:	93 01       	movw	r18, r6
    1e8c:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    1e90:	ca 01       	movw	r24, r20
    1e92:	b9 01       	movw	r22, r18
    1e94:	a1 96       	adiw	r28, 0x21	; 33
    1e96:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e98:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e9a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e9c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e9e:	a1 97       	sbiw	r28, 0x21	; 33
    1ea0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    1ea4:	9b 01       	movw	r18, r22
    1ea6:	ac 01       	movw	r20, r24
    1ea8:	87 01       	movw	r16, r14
    1eaa:	ff 24       	eor	r15, r15
    1eac:	ee 24       	eor	r14, r14
    1eae:	2d 96       	adiw	r28, 0x0d	; 13
    1eb0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1eb2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1eb4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1eb6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1eb8:	2d 97       	sbiw	r28, 0x0d	; 13
    1eba:	a0 70       	andi	r26, 0x00	; 0
    1ebc:	b0 70       	andi	r27, 0x00	; 0
    1ebe:	e8 2a       	or	r14, r24
    1ec0:	f9 2a       	or	r15, r25
    1ec2:	0a 2b       	or	r16, r26
    1ec4:	1b 2b       	or	r17, r27
    1ec6:	e2 16       	cp	r14, r18
    1ec8:	f3 06       	cpc	r15, r19
    1eca:	04 07       	cpc	r16, r20
    1ecc:	15 07       	cpc	r17, r21
    1ece:	90 f4       	brcc	.+36     	; 0x1ef4 <__moddi3+0x8cc>
    1ed0:	e2 0c       	add	r14, r2
    1ed2:	f3 1c       	adc	r15, r3
    1ed4:	04 1d       	adc	r16, r4
    1ed6:	15 1d       	adc	r17, r5
    1ed8:	e2 14       	cp	r14, r2
    1eda:	f3 04       	cpc	r15, r3
    1edc:	04 05       	cpc	r16, r4
    1ede:	15 05       	cpc	r17, r5
    1ee0:	48 f0       	brcs	.+18     	; 0x1ef4 <__moddi3+0x8cc>
    1ee2:	e2 16       	cp	r14, r18
    1ee4:	f3 06       	cpc	r15, r19
    1ee6:	04 07       	cpc	r16, r20
    1ee8:	15 07       	cpc	r17, r21
    1eea:	20 f4       	brcc	.+8      	; 0x1ef4 <__moddi3+0x8cc>
    1eec:	e2 0c       	add	r14, r2
    1eee:	f3 1c       	adc	r15, r3
    1ef0:	04 1d       	adc	r16, r4
    1ef2:	15 1d       	adc	r17, r5
    1ef4:	e2 1a       	sub	r14, r18
    1ef6:	f3 0a       	sbc	r15, r19
    1ef8:	04 0b       	sbc	r16, r20
    1efa:	15 0b       	sbc	r17, r21
    1efc:	d8 01       	movw	r26, r16
    1efe:	c7 01       	movw	r24, r14
    1f00:	62 96       	adiw	r28, 0x12	; 18
    1f02:	0f ac       	ldd	r0, Y+63	; 0x3f
    1f04:	62 97       	sbiw	r28, 0x12	; 18
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <__moddi3+0x8e8>
    1f08:	b6 95       	lsr	r27
    1f0a:	a7 95       	ror	r26
    1f0c:	97 95       	ror	r25
    1f0e:	87 95       	ror	r24
    1f10:	0a 94       	dec	r0
    1f12:	d2 f7       	brpl	.-12     	; 0x1f08 <__moddi3+0x8e0>
    1f14:	89 a7       	std	Y+41, r24	; 0x29
    1f16:	9a a7       	std	Y+42, r25	; 0x2a
    1f18:	ab a7       	std	Y+43, r26	; 0x2b
    1f1a:	bc a7       	std	Y+44, r27	; 0x2c
    1f1c:	1d a6       	std	Y+45, r1	; 0x2d
    1f1e:	1e a6       	std	Y+46, r1	; 0x2e
    1f20:	1f a6       	std	Y+47, r1	; 0x2f
    1f22:	18 aa       	std	Y+48, r1	; 0x30
    1f24:	89 8b       	std	Y+17, r24	; 0x11
    1f26:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f28:	8a 8b       	std	Y+18, r24	; 0x12
    1f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2c:	8b 8b       	std	Y+19, r24	; 0x13
    1f2e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f30:	8c 8b       	std	Y+20, r24	; 0x14
    1f32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f34:	8d 8b       	std	Y+21, r24	; 0x15
    1f36:	2f c3       	rjmp	.+1630   	; 0x2596 <__moddi3+0xf6e>
    1f38:	6a 14       	cp	r6, r10
    1f3a:	7b 04       	cpc	r7, r11
    1f3c:	8c 04       	cpc	r8, r12
    1f3e:	9d 04       	cpc	r9, r13
    1f40:	48 f4       	brcc	.+18     	; 0x1f54 <__moddi3+0x92c>
    1f42:	49 8b       	std	Y+17, r20	; 0x11
    1f44:	5a 8b       	std	Y+18, r21	; 0x12
    1f46:	6b 8b       	std	Y+19, r22	; 0x13
    1f48:	7c 8b       	std	Y+20, r23	; 0x14
    1f4a:	8d 8b       	std	Y+21, r24	; 0x15
    1f4c:	9e 8b       	std	Y+22, r25	; 0x16
    1f4e:	2f 8b       	std	Y+23, r18	; 0x17
    1f50:	38 8f       	std	Y+24, r19	; 0x18
    1f52:	27 c3       	rjmp	.+1614   	; 0x25a2 <__moddi3+0xf7a>
    1f54:	00 e0       	ldi	r16, 0x00	; 0
    1f56:	a0 16       	cp	r10, r16
    1f58:	00 e0       	ldi	r16, 0x00	; 0
    1f5a:	b0 06       	cpc	r11, r16
    1f5c:	01 e0       	ldi	r16, 0x01	; 1
    1f5e:	c0 06       	cpc	r12, r16
    1f60:	00 e0       	ldi	r16, 0x00	; 0
    1f62:	d0 06       	cpc	r13, r16
    1f64:	88 f4       	brcc	.+34     	; 0x1f88 <__moddi3+0x960>
    1f66:	1f ef       	ldi	r17, 0xFF	; 255
    1f68:	a1 16       	cp	r10, r17
    1f6a:	b1 04       	cpc	r11, r1
    1f6c:	c1 04       	cpc	r12, r1
    1f6e:	d1 04       	cpc	r13, r1
    1f70:	39 f0       	breq	.+14     	; 0x1f80 <__moddi3+0x958>
    1f72:	30 f0       	brcs	.+12     	; 0x1f80 <__moddi3+0x958>
    1f74:	28 e0       	ldi	r18, 0x08	; 8
    1f76:	e2 2e       	mov	r14, r18
    1f78:	f1 2c       	mov	r15, r1
    1f7a:	01 2d       	mov	r16, r1
    1f7c:	11 2d       	mov	r17, r1
    1f7e:	18 c0       	rjmp	.+48     	; 0x1fb0 <__moddi3+0x988>
    1f80:	ee 24       	eor	r14, r14
    1f82:	ff 24       	eor	r15, r15
    1f84:	87 01       	movw	r16, r14
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <__moddi3+0x988>
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	a2 16       	cp	r10, r18
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	b2 06       	cpc	r11, r18
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	c2 06       	cpc	r12, r18
    1f94:	21 e0       	ldi	r18, 0x01	; 1
    1f96:	d2 06       	cpc	r13, r18
    1f98:	30 f0       	brcs	.+12     	; 0x1fa6 <__moddi3+0x97e>
    1f9a:	98 e1       	ldi	r25, 0x18	; 24
    1f9c:	e9 2e       	mov	r14, r25
    1f9e:	f1 2c       	mov	r15, r1
    1fa0:	01 2d       	mov	r16, r1
    1fa2:	11 2d       	mov	r17, r1
    1fa4:	05 c0       	rjmp	.+10     	; 0x1fb0 <__moddi3+0x988>
    1fa6:	80 e1       	ldi	r24, 0x10	; 16
    1fa8:	e8 2e       	mov	r14, r24
    1faa:	f1 2c       	mov	r15, r1
    1fac:	01 2d       	mov	r16, r1
    1fae:	11 2d       	mov	r17, r1
    1fb0:	d6 01       	movw	r26, r12
    1fb2:	c5 01       	movw	r24, r10
    1fb4:	0e 2c       	mov	r0, r14
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <__moddi3+0x998>
    1fb8:	b6 95       	lsr	r27
    1fba:	a7 95       	ror	r26
    1fbc:	97 95       	ror	r25
    1fbe:	87 95       	ror	r24
    1fc0:	0a 94       	dec	r0
    1fc2:	d2 f7       	brpl	.-12     	; 0x1fb8 <__moddi3+0x990>
    1fc4:	82 56       	subi	r24, 0x62	; 98
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	dc 01       	movw	r26, r24
    1fca:	2c 91       	ld	r18, X
    1fcc:	80 e2       	ldi	r24, 0x20	; 32
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	8e 19       	sub	r24, r14
    1fd6:	9f 09       	sbc	r25, r15
    1fd8:	a0 0b       	sbc	r26, r16
    1fda:	b1 0b       	sbc	r27, r17
    1fdc:	82 1b       	sub	r24, r18
    1fde:	91 09       	sbc	r25, r1
    1fe0:	a1 09       	sbc	r26, r1
    1fe2:	b1 09       	sbc	r27, r1
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	a1 05       	cpc	r26, r1
    1fe8:	b1 05       	cpc	r27, r1
    1fea:	09 f0       	breq	.+2      	; 0x1fee <__moddi3+0x9c6>
    1fec:	59 c0       	rjmp	.+178    	; 0x20a0 <__moddi3+0xa78>
    1fee:	a6 14       	cp	r10, r6
    1ff0:	b7 04       	cpc	r11, r7
    1ff2:	c8 04       	cpc	r12, r8
    1ff4:	d9 04       	cpc	r13, r9
    1ff6:	70 f0       	brcs	.+28     	; 0x2014 <__moddi3+0x9ec>
    1ff8:	e8 96       	adiw	r28, 0x38	; 56
    1ffa:	ec ac       	ldd	r14, Y+60	; 0x3c
    1ffc:	fd ac       	ldd	r15, Y+61	; 0x3d
    1ffe:	0e ad       	ldd	r16, Y+62	; 0x3e
    2000:	1f ad       	ldd	r17, Y+63	; 0x3f
    2002:	e8 97       	sbiw	r28, 0x38	; 56
    2004:	e2 14       	cp	r14, r2
    2006:	f3 04       	cpc	r15, r3
    2008:	04 05       	cpc	r16, r4
    200a:	15 05       	cpc	r17, r5
    200c:	18 f4       	brcc	.+6      	; 0x2014 <__moddi3+0x9ec>
    200e:	d8 01       	movw	r26, r16
    2010:	c7 01       	movw	r24, r14
    2012:	2f c0       	rjmp	.+94     	; 0x2072 <__moddi3+0xa4a>
    2014:	e8 96       	adiw	r28, 0x38	; 56
    2016:	8c ad       	ldd	r24, Y+60	; 0x3c
    2018:	9d ad       	ldd	r25, Y+61	; 0x3d
    201a:	ae ad       	ldd	r26, Y+62	; 0x3e
    201c:	bf ad       	ldd	r27, Y+63	; 0x3f
    201e:	e8 97       	sbiw	r28, 0x38	; 56
    2020:	82 19       	sub	r24, r2
    2022:	93 09       	sbc	r25, r3
    2024:	a4 09       	sbc	r26, r4
    2026:	b5 09       	sbc	r27, r5
    2028:	a4 01       	movw	r20, r8
    202a:	93 01       	movw	r18, r6
    202c:	2a 19       	sub	r18, r10
    202e:	3b 09       	sbc	r19, r11
    2030:	4c 09       	sbc	r20, r12
    2032:	5d 09       	sbc	r21, r13
    2034:	aa 24       	eor	r10, r10
    2036:	bb 24       	eor	r11, r11
    2038:	65 01       	movw	r12, r10
    203a:	e8 96       	adiw	r28, 0x38	; 56
    203c:	6c ac       	ldd	r6, Y+60	; 0x3c
    203e:	7d ac       	ldd	r7, Y+61	; 0x3d
    2040:	8e ac       	ldd	r8, Y+62	; 0x3e
    2042:	9f ac       	ldd	r9, Y+63	; 0x3f
    2044:	e8 97       	sbiw	r28, 0x38	; 56
    2046:	68 16       	cp	r6, r24
    2048:	79 06       	cpc	r7, r25
    204a:	8a 06       	cpc	r8, r26
    204c:	9b 06       	cpc	r9, r27
    204e:	28 f4       	brcc	.+10     	; 0x205a <__moddi3+0xa32>
    2050:	11 e0       	ldi	r17, 0x01	; 1
    2052:	a1 2e       	mov	r10, r17
    2054:	b1 2c       	mov	r11, r1
    2056:	c1 2c       	mov	r12, r1
    2058:	d1 2c       	mov	r13, r1
    205a:	79 01       	movw	r14, r18
    205c:	8a 01       	movw	r16, r20
    205e:	ea 18       	sub	r14, r10
    2060:	fb 08       	sbc	r15, r11
    2062:	0c 09       	sbc	r16, r12
    2064:	1d 09       	sbc	r17, r13
    2066:	61 96       	adiw	r28, 0x11	; 17
    2068:	ec ae       	std	Y+60, r14	; 0x3c
    206a:	fd ae       	std	Y+61, r15	; 0x3d
    206c:	0e af       	std	Y+62, r16	; 0x3e
    206e:	1f af       	std	Y+63, r17	; 0x3f
    2070:	61 97       	sbiw	r28, 0x11	; 17
    2072:	89 a7       	std	Y+41, r24	; 0x29
    2074:	9a a7       	std	Y+42, r25	; 0x2a
    2076:	ab a7       	std	Y+43, r26	; 0x2b
    2078:	bc a7       	std	Y+44, r27	; 0x2c
    207a:	61 96       	adiw	r28, 0x11	; 17
    207c:	0c ad       	ldd	r16, Y+60	; 0x3c
    207e:	1d ad       	ldd	r17, Y+61	; 0x3d
    2080:	2e ad       	ldd	r18, Y+62	; 0x3e
    2082:	3f ad       	ldd	r19, Y+63	; 0x3f
    2084:	61 97       	sbiw	r28, 0x11	; 17
    2086:	0d a7       	std	Y+45, r16	; 0x2d
    2088:	1e a7       	std	Y+46, r17	; 0x2e
    208a:	2f a7       	std	Y+47, r18	; 0x2f
    208c:	38 ab       	std	Y+48, r19	; 0x30
    208e:	89 8b       	std	Y+17, r24	; 0x11
    2090:	8a a5       	ldd	r24, Y+42	; 0x2a
    2092:	8a 8b       	std	Y+18, r24	; 0x12
    2094:	8b a5       	ldd	r24, Y+43	; 0x2b
    2096:	8b 8b       	std	Y+19, r24	; 0x13
    2098:	8c a5       	ldd	r24, Y+44	; 0x2c
    209a:	8c 8b       	std	Y+20, r24	; 0x14
    209c:	0d 8b       	std	Y+21, r16	; 0x15
    209e:	7b c2       	rjmp	.+1270   	; 0x2596 <__moddi3+0xf6e>
    20a0:	e3 96       	adiw	r28, 0x33	; 51
    20a2:	8f af       	std	Y+63, r24	; 0x3f
    20a4:	e3 97       	sbiw	r28, 0x33	; 51
    20a6:	a6 01       	movw	r20, r12
    20a8:	95 01       	movw	r18, r10
    20aa:	08 2e       	mov	r0, r24
    20ac:	04 c0       	rjmp	.+8      	; 0x20b6 <__moddi3+0xa8e>
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	44 1f       	adc	r20, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	0a 94       	dec	r0
    20b8:	d2 f7       	brpl	.-12     	; 0x20ae <__moddi3+0xa86>
    20ba:	10 e2       	ldi	r17, 0x20	; 32
    20bc:	18 1b       	sub	r17, r24
    20be:	e2 96       	adiw	r28, 0x32	; 50
    20c0:	1f af       	std	Y+63, r17	; 0x3f
    20c2:	e2 97       	sbiw	r28, 0x32	; 50
    20c4:	d2 01       	movw	r26, r4
    20c6:	c1 01       	movw	r24, r2
    20c8:	01 2e       	mov	r0, r17
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <__moddi3+0xaac>
    20cc:	b6 95       	lsr	r27
    20ce:	a7 95       	ror	r26
    20d0:	97 95       	ror	r25
    20d2:	87 95       	ror	r24
    20d4:	0a 94       	dec	r0
    20d6:	d2 f7       	brpl	.-12     	; 0x20cc <__moddi3+0xaa4>
    20d8:	5c 01       	movw	r10, r24
    20da:	6d 01       	movw	r12, r26
    20dc:	a2 2a       	or	r10, r18
    20de:	b3 2a       	or	r11, r19
    20e0:	c4 2a       	or	r12, r20
    20e2:	d5 2a       	or	r13, r21
    20e4:	25 96       	adiw	r28, 0x05	; 5
    20e6:	ac ae       	std	Y+60, r10	; 0x3c
    20e8:	bd ae       	std	Y+61, r11	; 0x3d
    20ea:	ce ae       	std	Y+62, r12	; 0x3e
    20ec:	df ae       	std	Y+63, r13	; 0x3f
    20ee:	25 97       	sbiw	r28, 0x05	; 5
    20f0:	72 01       	movw	r14, r4
    20f2:	61 01       	movw	r12, r2
    20f4:	e3 96       	adiw	r28, 0x33	; 51
    20f6:	0f ac       	ldd	r0, Y+63	; 0x3f
    20f8:	e3 97       	sbiw	r28, 0x33	; 51
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <__moddi3+0xadc>
    20fc:	cc 0c       	add	r12, r12
    20fe:	dd 1c       	adc	r13, r13
    2100:	ee 1c       	adc	r14, r14
    2102:	ff 1c       	adc	r15, r15
    2104:	0a 94       	dec	r0
    2106:	d2 f7       	brpl	.-12     	; 0x20fc <__moddi3+0xad4>
    2108:	21 96       	adiw	r28, 0x01	; 1
    210a:	cc ae       	std	Y+60, r12	; 0x3c
    210c:	dd ae       	std	Y+61, r13	; 0x3d
    210e:	ee ae       	std	Y+62, r14	; 0x3e
    2110:	ff ae       	std	Y+63, r15	; 0x3f
    2112:	21 97       	sbiw	r28, 0x01	; 1
    2114:	64 01       	movw	r12, r8
    2116:	53 01       	movw	r10, r6
    2118:	01 2e       	mov	r0, r17
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <__moddi3+0xafc>
    211c:	d6 94       	lsr	r13
    211e:	c7 94       	ror	r12
    2120:	b7 94       	ror	r11
    2122:	a7 94       	ror	r10
    2124:	0a 94       	dec	r0
    2126:	d2 f7       	brpl	.-12     	; 0x211c <__moddi3+0xaf4>
    2128:	a4 01       	movw	r20, r8
    212a:	93 01       	movw	r18, r6
    212c:	e3 96       	adiw	r28, 0x33	; 51
    212e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2130:	e3 97       	sbiw	r28, 0x33	; 51
    2132:	04 c0       	rjmp	.+8      	; 0x213c <__moddi3+0xb14>
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	44 1f       	adc	r20, r20
    213a:	55 1f       	adc	r21, r21
    213c:	0a 94       	dec	r0
    213e:	d2 f7       	brpl	.-12     	; 0x2134 <__moddi3+0xb0c>
    2140:	e8 96       	adiw	r28, 0x38	; 56
    2142:	8c ad       	ldd	r24, Y+60	; 0x3c
    2144:	9d ad       	ldd	r25, Y+61	; 0x3d
    2146:	ae ad       	ldd	r26, Y+62	; 0x3e
    2148:	bf ad       	ldd	r27, Y+63	; 0x3f
    214a:	e8 97       	sbiw	r28, 0x38	; 56
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <__moddi3+0xb2e>
    214e:	b6 95       	lsr	r27
    2150:	a7 95       	ror	r26
    2152:	97 95       	ror	r25
    2154:	87 95       	ror	r24
    2156:	1a 95       	dec	r17
    2158:	d2 f7       	brpl	.-12     	; 0x214e <__moddi3+0xb26>
    215a:	7c 01       	movw	r14, r24
    215c:	8d 01       	movw	r16, r26
    215e:	e2 2a       	or	r14, r18
    2160:	f3 2a       	or	r15, r19
    2162:	04 2b       	or	r16, r20
    2164:	15 2b       	or	r17, r21
    2166:	e9 ae       	std	Y+57, r14	; 0x39
    2168:	fa ae       	std	Y+58, r15	; 0x3a
    216a:	0b af       	std	Y+59, r16	; 0x3b
    216c:	1c af       	std	Y+60, r17	; 0x3c
    216e:	e8 96       	adiw	r28, 0x38	; 56
    2170:	0c ad       	ldd	r16, Y+60	; 0x3c
    2172:	1d ad       	ldd	r17, Y+61	; 0x3d
    2174:	2e ad       	ldd	r18, Y+62	; 0x3e
    2176:	3f ad       	ldd	r19, Y+63	; 0x3f
    2178:	e8 97       	sbiw	r28, 0x38	; 56
    217a:	e3 96       	adiw	r28, 0x33	; 51
    217c:	0f ac       	ldd	r0, Y+63	; 0x3f
    217e:	e3 97       	sbiw	r28, 0x33	; 51
    2180:	04 c0       	rjmp	.+8      	; 0x218a <__moddi3+0xb62>
    2182:	00 0f       	add	r16, r16
    2184:	11 1f       	adc	r17, r17
    2186:	22 1f       	adc	r18, r18
    2188:	33 1f       	adc	r19, r19
    218a:	0a 94       	dec	r0
    218c:	d2 f7       	brpl	.-12     	; 0x2182 <__moddi3+0xb5a>
    218e:	0d ab       	std	Y+53, r16	; 0x35
    2190:	1e ab       	std	Y+54, r17	; 0x36
    2192:	2f ab       	std	Y+55, r18	; 0x37
    2194:	38 af       	std	Y+56, r19	; 0x38
    2196:	25 96       	adiw	r28, 0x05	; 5
    2198:	2c ad       	ldd	r18, Y+60	; 0x3c
    219a:	3d ad       	ldd	r19, Y+61	; 0x3d
    219c:	4e ad       	ldd	r20, Y+62	; 0x3e
    219e:	5f ad       	ldd	r21, Y+63	; 0x3f
    21a0:	25 97       	sbiw	r28, 0x05	; 5
    21a2:	3a 01       	movw	r6, r20
    21a4:	88 24       	eor	r8, r8
    21a6:	99 24       	eor	r9, r9
    21a8:	40 70       	andi	r20, 0x00	; 0
    21aa:	50 70       	andi	r21, 0x00	; 0
    21ac:	a5 96       	adiw	r28, 0x25	; 37
    21ae:	2c af       	std	Y+60, r18	; 0x3c
    21b0:	3d af       	std	Y+61, r19	; 0x3d
    21b2:	4e af       	std	Y+62, r20	; 0x3e
    21b4:	5f af       	std	Y+63, r21	; 0x3f
    21b6:	a5 97       	sbiw	r28, 0x25	; 37
    21b8:	c6 01       	movw	r24, r12
    21ba:	b5 01       	movw	r22, r10
    21bc:	a4 01       	movw	r20, r8
    21be:	93 01       	movw	r18, r6
    21c0:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    21c4:	7b 01       	movw	r14, r22
    21c6:	8c 01       	movw	r16, r24
    21c8:	c6 01       	movw	r24, r12
    21ca:	b5 01       	movw	r22, r10
    21cc:	a4 01       	movw	r20, r8
    21ce:	93 01       	movw	r18, r6
    21d0:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    21d4:	c9 01       	movw	r24, r18
    21d6:	da 01       	movw	r26, r20
    21d8:	1c 01       	movw	r2, r24
    21da:	2d 01       	movw	r4, r26
    21dc:	c2 01       	movw	r24, r4
    21de:	b1 01       	movw	r22, r2
    21e0:	a5 96       	adiw	r28, 0x25	; 37
    21e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    21e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    21e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    21e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    21ea:	a5 97       	sbiw	r28, 0x25	; 37
    21ec:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    21f0:	9b 01       	movw	r18, r22
    21f2:	ac 01       	movw	r20, r24
    21f4:	87 01       	movw	r16, r14
    21f6:	ff 24       	eor	r15, r15
    21f8:	ee 24       	eor	r14, r14
    21fa:	a9 ac       	ldd	r10, Y+57	; 0x39
    21fc:	ba ac       	ldd	r11, Y+58	; 0x3a
    21fe:	cb ac       	ldd	r12, Y+59	; 0x3b
    2200:	dc ac       	ldd	r13, Y+60	; 0x3c
    2202:	c6 01       	movw	r24, r12
    2204:	aa 27       	eor	r26, r26
    2206:	bb 27       	eor	r27, r27
    2208:	57 01       	movw	r10, r14
    220a:	68 01       	movw	r12, r16
    220c:	a8 2a       	or	r10, r24
    220e:	b9 2a       	or	r11, r25
    2210:	ca 2a       	or	r12, r26
    2212:	db 2a       	or	r13, r27
    2214:	a2 16       	cp	r10, r18
    2216:	b3 06       	cpc	r11, r19
    2218:	c4 06       	cpc	r12, r20
    221a:	d5 06       	cpc	r13, r21
    221c:	10 f5       	brcc	.+68     	; 0x2262 <__moddi3+0xc3a>
    221e:	08 94       	sec
    2220:	21 08       	sbc	r2, r1
    2222:	31 08       	sbc	r3, r1
    2224:	41 08       	sbc	r4, r1
    2226:	51 08       	sbc	r5, r1
    2228:	25 96       	adiw	r28, 0x05	; 5
    222a:	ec ac       	ldd	r14, Y+60	; 0x3c
    222c:	fd ac       	ldd	r15, Y+61	; 0x3d
    222e:	0e ad       	ldd	r16, Y+62	; 0x3e
    2230:	1f ad       	ldd	r17, Y+63	; 0x3f
    2232:	25 97       	sbiw	r28, 0x05	; 5
    2234:	ae 0c       	add	r10, r14
    2236:	bf 1c       	adc	r11, r15
    2238:	c0 1e       	adc	r12, r16
    223a:	d1 1e       	adc	r13, r17
    223c:	ae 14       	cp	r10, r14
    223e:	bf 04       	cpc	r11, r15
    2240:	c0 06       	cpc	r12, r16
    2242:	d1 06       	cpc	r13, r17
    2244:	70 f0       	brcs	.+28     	; 0x2262 <__moddi3+0xc3a>
    2246:	a2 16       	cp	r10, r18
    2248:	b3 06       	cpc	r11, r19
    224a:	c4 06       	cpc	r12, r20
    224c:	d5 06       	cpc	r13, r21
    224e:	48 f4       	brcc	.+18     	; 0x2262 <__moddi3+0xc3a>
    2250:	08 94       	sec
    2252:	21 08       	sbc	r2, r1
    2254:	31 08       	sbc	r3, r1
    2256:	41 08       	sbc	r4, r1
    2258:	51 08       	sbc	r5, r1
    225a:	ae 0c       	add	r10, r14
    225c:	bf 1c       	adc	r11, r15
    225e:	c0 1e       	adc	r12, r16
    2260:	d1 1e       	adc	r13, r17
    2262:	a2 1a       	sub	r10, r18
    2264:	b3 0a       	sbc	r11, r19
    2266:	c4 0a       	sbc	r12, r20
    2268:	d5 0a       	sbc	r13, r21
    226a:	c6 01       	movw	r24, r12
    226c:	b5 01       	movw	r22, r10
    226e:	a4 01       	movw	r20, r8
    2270:	93 01       	movw	r18, r6
    2272:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    2276:	7b 01       	movw	r14, r22
    2278:	8c 01       	movw	r16, r24
    227a:	c6 01       	movw	r24, r12
    227c:	b5 01       	movw	r22, r10
    227e:	a4 01       	movw	r20, r8
    2280:	93 01       	movw	r18, r6
    2282:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    2286:	c9 01       	movw	r24, r18
    2288:	da 01       	movw	r26, r20
    228a:	3c 01       	movw	r6, r24
    228c:	4d 01       	movw	r8, r26
    228e:	c4 01       	movw	r24, r8
    2290:	b3 01       	movw	r22, r6
    2292:	a5 96       	adiw	r28, 0x25	; 37
    2294:	2c ad       	ldd	r18, Y+60	; 0x3c
    2296:	3d ad       	ldd	r19, Y+61	; 0x3d
    2298:	4e ad       	ldd	r20, Y+62	; 0x3e
    229a:	5f ad       	ldd	r21, Y+63	; 0x3f
    229c:	a5 97       	sbiw	r28, 0x25	; 37
    229e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    22a2:	9b 01       	movw	r18, r22
    22a4:	ac 01       	movw	r20, r24
    22a6:	87 01       	movw	r16, r14
    22a8:	ff 24       	eor	r15, r15
    22aa:	ee 24       	eor	r14, r14
    22ac:	89 ad       	ldd	r24, Y+57	; 0x39
    22ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    22b0:	ab ad       	ldd	r26, Y+59	; 0x3b
    22b2:	bc ad       	ldd	r27, Y+60	; 0x3c
    22b4:	a0 70       	andi	r26, 0x00	; 0
    22b6:	b0 70       	andi	r27, 0x00	; 0
    22b8:	57 01       	movw	r10, r14
    22ba:	68 01       	movw	r12, r16
    22bc:	a8 2a       	or	r10, r24
    22be:	b9 2a       	or	r11, r25
    22c0:	ca 2a       	or	r12, r26
    22c2:	db 2a       	or	r13, r27
    22c4:	a2 16       	cp	r10, r18
    22c6:	b3 06       	cpc	r11, r19
    22c8:	c4 06       	cpc	r12, r20
    22ca:	d5 06       	cpc	r13, r21
    22cc:	10 f5       	brcc	.+68     	; 0x2312 <__moddi3+0xcea>
    22ce:	08 94       	sec
    22d0:	61 08       	sbc	r6, r1
    22d2:	71 08       	sbc	r7, r1
    22d4:	81 08       	sbc	r8, r1
    22d6:	91 08       	sbc	r9, r1
    22d8:	25 96       	adiw	r28, 0x05	; 5
    22da:	6c ad       	ldd	r22, Y+60	; 0x3c
    22dc:	7d ad       	ldd	r23, Y+61	; 0x3d
    22de:	8e ad       	ldd	r24, Y+62	; 0x3e
    22e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    22e2:	25 97       	sbiw	r28, 0x05	; 5
    22e4:	a6 0e       	add	r10, r22
    22e6:	b7 1e       	adc	r11, r23
    22e8:	c8 1e       	adc	r12, r24
    22ea:	d9 1e       	adc	r13, r25
    22ec:	a6 16       	cp	r10, r22
    22ee:	b7 06       	cpc	r11, r23
    22f0:	c8 06       	cpc	r12, r24
    22f2:	d9 06       	cpc	r13, r25
    22f4:	70 f0       	brcs	.+28     	; 0x2312 <__moddi3+0xcea>
    22f6:	a2 16       	cp	r10, r18
    22f8:	b3 06       	cpc	r11, r19
    22fa:	c4 06       	cpc	r12, r20
    22fc:	d5 06       	cpc	r13, r21
    22fe:	48 f4       	brcc	.+18     	; 0x2312 <__moddi3+0xcea>
    2300:	08 94       	sec
    2302:	61 08       	sbc	r6, r1
    2304:	71 08       	sbc	r7, r1
    2306:	81 08       	sbc	r8, r1
    2308:	91 08       	sbc	r9, r1
    230a:	a6 0e       	add	r10, r22
    230c:	b7 1e       	adc	r11, r23
    230e:	c8 1e       	adc	r12, r24
    2310:	d9 1e       	adc	r13, r25
    2312:	d6 01       	movw	r26, r12
    2314:	c5 01       	movw	r24, r10
    2316:	82 1b       	sub	r24, r18
    2318:	93 0b       	sbc	r25, r19
    231a:	a4 0b       	sbc	r26, r20
    231c:	b5 0b       	sbc	r27, r21
    231e:	89 ab       	std	Y+49, r24	; 0x31
    2320:	9a ab       	std	Y+50, r25	; 0x32
    2322:	ab ab       	std	Y+51, r26	; 0x33
    2324:	bc ab       	std	Y+52, r27	; 0x34
    2326:	d1 01       	movw	r26, r2
    2328:	99 27       	eor	r25, r25
    232a:	88 27       	eor	r24, r24
    232c:	84 01       	movw	r16, r8
    232e:	73 01       	movw	r14, r6
    2330:	e8 2a       	or	r14, r24
    2332:	f9 2a       	or	r15, r25
    2334:	0a 2b       	or	r16, r26
    2336:	1b 2b       	or	r17, r27
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	a8 2e       	mov	r10, r24
    233c:	8f ef       	ldi	r24, 0xFF	; 255
    233e:	b8 2e       	mov	r11, r24
    2340:	c1 2c       	mov	r12, r1
    2342:	d1 2c       	mov	r13, r1
    2344:	ae 20       	and	r10, r14
    2346:	bf 20       	and	r11, r15
    2348:	c0 22       	and	r12, r16
    234a:	d1 22       	and	r13, r17
    234c:	78 01       	movw	r14, r16
    234e:	00 27       	eor	r16, r16
    2350:	11 27       	eor	r17, r17
    2352:	21 96       	adiw	r28, 0x01	; 1
    2354:	6c ac       	ldd	r6, Y+60	; 0x3c
    2356:	7d ac       	ldd	r7, Y+61	; 0x3d
    2358:	8e ac       	ldd	r8, Y+62	; 0x3e
    235a:	9f ac       	ldd	r9, Y+63	; 0x3f
    235c:	21 97       	sbiw	r28, 0x01	; 1
    235e:	2f ef       	ldi	r18, 0xFF	; 255
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	62 22       	and	r6, r18
    2368:	73 22       	and	r7, r19
    236a:	84 22       	and	r8, r20
    236c:	95 22       	and	r9, r21
    236e:	21 96       	adiw	r28, 0x01	; 1
    2370:	6c ad       	ldd	r22, Y+60	; 0x3c
    2372:	7d ad       	ldd	r23, Y+61	; 0x3d
    2374:	8e ad       	ldd	r24, Y+62	; 0x3e
    2376:	9f ad       	ldd	r25, Y+63	; 0x3f
    2378:	21 97       	sbiw	r28, 0x01	; 1
    237a:	ac 01       	movw	r20, r24
    237c:	66 27       	eor	r22, r22
    237e:	77 27       	eor	r23, r23
    2380:	ad 96       	adiw	r28, 0x2d	; 45
    2382:	4c af       	std	Y+60, r20	; 0x3c
    2384:	5d af       	std	Y+61, r21	; 0x3d
    2386:	6e af       	std	Y+62, r22	; 0x3e
    2388:	7f af       	std	Y+63, r23	; 0x3f
    238a:	ad 97       	sbiw	r28, 0x2d	; 45
    238c:	c6 01       	movw	r24, r12
    238e:	b5 01       	movw	r22, r10
    2390:	a4 01       	movw	r20, r8
    2392:	93 01       	movw	r18, r6
    2394:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    2398:	a9 96       	adiw	r28, 0x29	; 41
    239a:	6c af       	std	Y+60, r22	; 0x3c
    239c:	7d af       	std	Y+61, r23	; 0x3d
    239e:	8e af       	std	Y+62, r24	; 0x3e
    23a0:	9f af       	std	Y+63, r25	; 0x3f
    23a2:	a9 97       	sbiw	r28, 0x29	; 41
    23a4:	c6 01       	movw	r24, r12
    23a6:	b5 01       	movw	r22, r10
    23a8:	ad 96       	adiw	r28, 0x2d	; 45
    23aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    23ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    23ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    23b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    23b2:	ad 97       	sbiw	r28, 0x2d	; 45
    23b4:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    23b8:	1b 01       	movw	r2, r22
    23ba:	2c 01       	movw	r4, r24
    23bc:	c8 01       	movw	r24, r16
    23be:	b7 01       	movw	r22, r14
    23c0:	a4 01       	movw	r20, r8
    23c2:	93 01       	movw	r18, r6
    23c4:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    23c8:	5b 01       	movw	r10, r22
    23ca:	6c 01       	movw	r12, r24
    23cc:	c8 01       	movw	r24, r16
    23ce:	b7 01       	movw	r22, r14
    23d0:	ad 96       	adiw	r28, 0x2d	; 45
    23d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    23d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    23d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    23d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    23da:	ad 97       	sbiw	r28, 0x2d	; 45
    23dc:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    23e0:	7b 01       	movw	r14, r22
    23e2:	8c 01       	movw	r16, r24
    23e4:	a6 01       	movw	r20, r12
    23e6:	95 01       	movw	r18, r10
    23e8:	22 0d       	add	r18, r2
    23ea:	33 1d       	adc	r19, r3
    23ec:	44 1d       	adc	r20, r4
    23ee:	55 1d       	adc	r21, r5
    23f0:	a9 96       	adiw	r28, 0x29	; 41
    23f2:	6c ac       	ldd	r6, Y+60	; 0x3c
    23f4:	7d ac       	ldd	r7, Y+61	; 0x3d
    23f6:	8e ac       	ldd	r8, Y+62	; 0x3e
    23f8:	9f ac       	ldd	r9, Y+63	; 0x3f
    23fa:	a9 97       	sbiw	r28, 0x29	; 41
    23fc:	c4 01       	movw	r24, r8
    23fe:	aa 27       	eor	r26, r26
    2400:	bb 27       	eor	r27, r27
    2402:	28 0f       	add	r18, r24
    2404:	39 1f       	adc	r19, r25
    2406:	4a 1f       	adc	r20, r26
    2408:	5b 1f       	adc	r21, r27
    240a:	2a 15       	cp	r18, r10
    240c:	3b 05       	cpc	r19, r11
    240e:	4c 05       	cpc	r20, r12
    2410:	5d 05       	cpc	r21, r13
    2412:	48 f4       	brcc	.+18     	; 0x2426 <__moddi3+0xdfe>
    2414:	81 2c       	mov	r8, r1
    2416:	91 2c       	mov	r9, r1
    2418:	e1 e0       	ldi	r30, 0x01	; 1
    241a:	ae 2e       	mov	r10, r30
    241c:	b1 2c       	mov	r11, r1
    241e:	e8 0c       	add	r14, r8
    2420:	f9 1c       	adc	r15, r9
    2422:	0a 1d       	adc	r16, r10
    2424:	1b 1d       	adc	r17, r11
    2426:	ca 01       	movw	r24, r20
    2428:	aa 27       	eor	r26, r26
    242a:	bb 27       	eor	r27, r27
    242c:	57 01       	movw	r10, r14
    242e:	68 01       	movw	r12, r16
    2430:	a8 0e       	add	r10, r24
    2432:	b9 1e       	adc	r11, r25
    2434:	ca 1e       	adc	r12, r26
    2436:	db 1e       	adc	r13, r27
    2438:	a9 01       	movw	r20, r18
    243a:	33 27       	eor	r19, r19
    243c:	22 27       	eor	r18, r18
    243e:	a9 96       	adiw	r28, 0x29	; 41
    2440:	8c ad       	ldd	r24, Y+60	; 0x3c
    2442:	9d ad       	ldd	r25, Y+61	; 0x3d
    2444:	ae ad       	ldd	r26, Y+62	; 0x3e
    2446:	bf ad       	ldd	r27, Y+63	; 0x3f
    2448:	a9 97       	sbiw	r28, 0x29	; 41
    244a:	a0 70       	andi	r26, 0x00	; 0
    244c:	b0 70       	andi	r27, 0x00	; 0
    244e:	28 0f       	add	r18, r24
    2450:	39 1f       	adc	r19, r25
    2452:	4a 1f       	adc	r20, r26
    2454:	5b 1f       	adc	r21, r27
    2456:	e9 a8       	ldd	r14, Y+49	; 0x31
    2458:	fa a8       	ldd	r15, Y+50	; 0x32
    245a:	0b a9       	ldd	r16, Y+51	; 0x33
    245c:	1c a9       	ldd	r17, Y+52	; 0x34
    245e:	ea 14       	cp	r14, r10
    2460:	fb 04       	cpc	r15, r11
    2462:	0c 05       	cpc	r16, r12
    2464:	1d 05       	cpc	r17, r13
    2466:	70 f0       	brcs	.+28     	; 0x2484 <__moddi3+0xe5c>
    2468:	ae 14       	cp	r10, r14
    246a:	bf 04       	cpc	r11, r15
    246c:	c0 06       	cpc	r12, r16
    246e:	d1 06       	cpc	r13, r17
    2470:	89 f5       	brne	.+98     	; 0x24d4 <__moddi3+0xeac>
    2472:	6d a9       	ldd	r22, Y+53	; 0x35
    2474:	7e a9       	ldd	r23, Y+54	; 0x36
    2476:	8f a9       	ldd	r24, Y+55	; 0x37
    2478:	98 ad       	ldd	r25, Y+56	; 0x38
    247a:	62 17       	cp	r22, r18
    247c:	73 07       	cpc	r23, r19
    247e:	84 07       	cpc	r24, r20
    2480:	95 07       	cpc	r25, r21
    2482:	40 f5       	brcc	.+80     	; 0x24d4 <__moddi3+0xeac>
    2484:	da 01       	movw	r26, r20
    2486:	c9 01       	movw	r24, r18
    2488:	21 96       	adiw	r28, 0x01	; 1
    248a:	6c ac       	ldd	r6, Y+60	; 0x3c
    248c:	7d ac       	ldd	r7, Y+61	; 0x3d
    248e:	8e ac       	ldd	r8, Y+62	; 0x3e
    2490:	9f ac       	ldd	r9, Y+63	; 0x3f
    2492:	21 97       	sbiw	r28, 0x01	; 1
    2494:	86 19       	sub	r24, r6
    2496:	97 09       	sbc	r25, r7
    2498:	a8 09       	sbc	r26, r8
    249a:	b9 09       	sbc	r27, r9
    249c:	25 96       	adiw	r28, 0x05	; 5
    249e:	ec ac       	ldd	r14, Y+60	; 0x3c
    24a0:	fd ac       	ldd	r15, Y+61	; 0x3d
    24a2:	0e ad       	ldd	r16, Y+62	; 0x3e
    24a4:	1f ad       	ldd	r17, Y+63	; 0x3f
    24a6:	25 97       	sbiw	r28, 0x05	; 5
    24a8:	ae 18       	sub	r10, r14
    24aa:	bf 08       	sbc	r11, r15
    24ac:	c0 0a       	sbc	r12, r16
    24ae:	d1 0a       	sbc	r13, r17
    24b0:	ee 24       	eor	r14, r14
    24b2:	ff 24       	eor	r15, r15
    24b4:	87 01       	movw	r16, r14
    24b6:	28 17       	cp	r18, r24
    24b8:	39 07       	cpc	r19, r25
    24ba:	4a 07       	cpc	r20, r26
    24bc:	5b 07       	cpc	r21, r27
    24be:	28 f4       	brcc	.+10     	; 0x24ca <__moddi3+0xea2>
    24c0:	21 e0       	ldi	r18, 0x01	; 1
    24c2:	e2 2e       	mov	r14, r18
    24c4:	f1 2c       	mov	r15, r1
    24c6:	01 2d       	mov	r16, r1
    24c8:	11 2d       	mov	r17, r1
    24ca:	ae 18       	sub	r10, r14
    24cc:	bf 08       	sbc	r11, r15
    24ce:	c0 0a       	sbc	r12, r16
    24d0:	d1 0a       	sbc	r13, r17
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <__moddi3+0xeb0>
    24d4:	da 01       	movw	r26, r20
    24d6:	c9 01       	movw	r24, r18
    24d8:	6d a8       	ldd	r6, Y+53	; 0x35
    24da:	7e a8       	ldd	r7, Y+54	; 0x36
    24dc:	8f a8       	ldd	r8, Y+55	; 0x37
    24de:	98 ac       	ldd	r9, Y+56	; 0x38
    24e0:	68 1a       	sub	r6, r24
    24e2:	79 0a       	sbc	r7, r25
    24e4:	8a 0a       	sbc	r8, r26
    24e6:	9b 0a       	sbc	r9, r27
    24e8:	09 a9       	ldd	r16, Y+49	; 0x31
    24ea:	1a a9       	ldd	r17, Y+50	; 0x32
    24ec:	2b a9       	ldd	r18, Y+51	; 0x33
    24ee:	3c a9       	ldd	r19, Y+52	; 0x34
    24f0:	0a 19       	sub	r16, r10
    24f2:	1b 09       	sbc	r17, r11
    24f4:	2c 09       	sbc	r18, r12
    24f6:	3d 09       	sbc	r19, r13
    24f8:	58 01       	movw	r10, r16
    24fa:	69 01       	movw	r12, r18
    24fc:	22 24       	eor	r2, r2
    24fe:	33 24       	eor	r3, r3
    2500:	21 01       	movw	r4, r2
    2502:	2d a9       	ldd	r18, Y+53	; 0x35
    2504:	3e a9       	ldd	r19, Y+54	; 0x36
    2506:	4f a9       	ldd	r20, Y+55	; 0x37
    2508:	58 ad       	ldd	r21, Y+56	; 0x38
    250a:	26 15       	cp	r18, r6
    250c:	37 05       	cpc	r19, r7
    250e:	48 05       	cpc	r20, r8
    2510:	59 05       	cpc	r21, r9
    2512:	28 f4       	brcc	.+10     	; 0x251e <__moddi3+0xef6>
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	28 2e       	mov	r2, r24
    2518:	31 2c       	mov	r3, r1
    251a:	41 2c       	mov	r4, r1
    251c:	51 2c       	mov	r5, r1
    251e:	86 01       	movw	r16, r12
    2520:	75 01       	movw	r14, r10
    2522:	e2 18       	sub	r14, r2
    2524:	f3 08       	sbc	r15, r3
    2526:	04 09       	sbc	r16, r4
    2528:	15 09       	sbc	r17, r5
    252a:	a8 01       	movw	r20, r16
    252c:	97 01       	movw	r18, r14
    252e:	e2 96       	adiw	r28, 0x32	; 50
    2530:	0f ac       	ldd	r0, Y+63	; 0x3f
    2532:	e2 97       	sbiw	r28, 0x32	; 50
    2534:	04 c0       	rjmp	.+8      	; 0x253e <__moddi3+0xf16>
    2536:	22 0f       	add	r18, r18
    2538:	33 1f       	adc	r19, r19
    253a:	44 1f       	adc	r20, r20
    253c:	55 1f       	adc	r21, r21
    253e:	0a 94       	dec	r0
    2540:	d2 f7       	brpl	.-12     	; 0x2536 <__moddi3+0xf0e>
    2542:	d4 01       	movw	r26, r8
    2544:	c3 01       	movw	r24, r6
    2546:	e3 96       	adiw	r28, 0x33	; 51
    2548:	0f ac       	ldd	r0, Y+63	; 0x3f
    254a:	e3 97       	sbiw	r28, 0x33	; 51
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <__moddi3+0xf2e>
    254e:	b6 95       	lsr	r27
    2550:	a7 95       	ror	r26
    2552:	97 95       	ror	r25
    2554:	87 95       	ror	r24
    2556:	0a 94       	dec	r0
    2558:	d2 f7       	brpl	.-12     	; 0x254e <__moddi3+0xf26>
    255a:	28 2b       	or	r18, r24
    255c:	39 2b       	or	r19, r25
    255e:	4a 2b       	or	r20, r26
    2560:	5b 2b       	or	r21, r27
    2562:	29 a7       	std	Y+41, r18	; 0x29
    2564:	3a a7       	std	Y+42, r19	; 0x2a
    2566:	4b a7       	std	Y+43, r20	; 0x2b
    2568:	5c a7       	std	Y+44, r21	; 0x2c
    256a:	e3 96       	adiw	r28, 0x33	; 51
    256c:	0f ac       	ldd	r0, Y+63	; 0x3f
    256e:	e3 97       	sbiw	r28, 0x33	; 51
    2570:	04 c0       	rjmp	.+8      	; 0x257a <__moddi3+0xf52>
    2572:	16 95       	lsr	r17
    2574:	07 95       	ror	r16
    2576:	f7 94       	ror	r15
    2578:	e7 94       	ror	r14
    257a:	0a 94       	dec	r0
    257c:	d2 f7       	brpl	.-12     	; 0x2572 <__moddi3+0xf4a>
    257e:	ed a6       	std	Y+45, r14	; 0x2d
    2580:	fe a6       	std	Y+46, r15	; 0x2e
    2582:	0f a7       	std	Y+47, r16	; 0x2f
    2584:	18 ab       	std	Y+48, r17	; 0x30
    2586:	29 8b       	std	Y+17, r18	; 0x11
    2588:	8a a5       	ldd	r24, Y+42	; 0x2a
    258a:	8a 8b       	std	Y+18, r24	; 0x12
    258c:	8b a5       	ldd	r24, Y+43	; 0x2b
    258e:	8b 8b       	std	Y+19, r24	; 0x13
    2590:	8c a5       	ldd	r24, Y+44	; 0x2c
    2592:	8c 8b       	std	Y+20, r24	; 0x14
    2594:	ed 8a       	std	Y+21, r14	; 0x15
    2596:	8e a5       	ldd	r24, Y+46	; 0x2e
    2598:	8e 8b       	std	Y+22, r24	; 0x16
    259a:	8f a5       	ldd	r24, Y+47	; 0x2f
    259c:	8f 8b       	std	Y+23, r24	; 0x17
    259e:	88 a9       	ldd	r24, Y+48	; 0x30
    25a0:	88 8f       	std	Y+24, r24	; 0x18
    25a2:	e1 96       	adiw	r28, 0x31	; 49
    25a4:	4c ad       	ldd	r20, Y+60	; 0x3c
    25a6:	5d ad       	ldd	r21, Y+61	; 0x3d
    25a8:	6e ad       	ldd	r22, Y+62	; 0x3e
    25aa:	7f ad       	ldd	r23, Y+63	; 0x3f
    25ac:	e1 97       	sbiw	r28, 0x31	; 49
    25ae:	41 15       	cp	r20, r1
    25b0:	51 05       	cpc	r21, r1
    25b2:	61 05       	cpc	r22, r1
    25b4:	71 05       	cpc	r23, r1
    25b6:	09 f4       	brne	.+2      	; 0x25ba <__moddi3+0xf92>
    25b8:	67 c0       	rjmp	.+206    	; 0x2688 <__moddi3+0x1060>
    25ba:	89 89       	ldd	r24, Y+17	; 0x11
    25bc:	2a 89       	ldd	r18, Y+18	; 0x12
    25be:	3b 89       	ldd	r19, Y+19	; 0x13
    25c0:	4c 89       	ldd	r20, Y+20	; 0x14
    25c2:	5d 89       	ldd	r21, Y+21	; 0x15
    25c4:	ae 89       	ldd	r26, Y+22	; 0x16
    25c6:	bf 89       	ldd	r27, Y+23	; 0x17
    25c8:	18 8d       	ldd	r17, Y+24	; 0x18
    25ca:	f8 2f       	mov	r31, r24
    25cc:	f1 95       	neg	r31
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	1f 16       	cp	r1, r31
    25d2:	08 f0       	brcs	.+2      	; 0x25d6 <__moddi3+0xfae>
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	82 2f       	mov	r24, r18
    25d8:	81 95       	neg	r24
    25da:	21 e0       	ldi	r18, 0x01	; 1
    25dc:	18 16       	cp	r1, r24
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <__moddi3+0xfba>
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	e8 2f       	mov	r30, r24
    25e4:	e9 1b       	sub	r30, r25
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	8e 17       	cp	r24, r30
    25ea:	08 f0       	brcs	.+2      	; 0x25ee <__moddi3+0xfc6>
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	29 2b       	or	r18, r25
    25f0:	83 2f       	mov	r24, r19
    25f2:	81 95       	neg	r24
    25f4:	31 e0       	ldi	r19, 0x01	; 1
    25f6:	18 16       	cp	r1, r24
    25f8:	08 f0       	brcs	.+2      	; 0x25fc <__moddi3+0xfd4>
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	78 2f       	mov	r23, r24
    25fe:	72 1b       	sub	r23, r18
    2600:	91 e0       	ldi	r25, 0x01	; 1
    2602:	87 17       	cp	r24, r23
    2604:	08 f0       	brcs	.+2      	; 0x2608 <__moddi3+0xfe0>
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	39 2b       	or	r19, r25
    260a:	84 2f       	mov	r24, r20
    260c:	81 95       	neg	r24
    260e:	21 e0       	ldi	r18, 0x01	; 1
    2610:	18 16       	cp	r1, r24
    2612:	08 f0       	brcs	.+2      	; 0x2616 <__moddi3+0xfee>
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	68 2f       	mov	r22, r24
    2618:	63 1b       	sub	r22, r19
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	86 17       	cp	r24, r22
    261e:	08 f0       	brcs	.+2      	; 0x2622 <__moddi3+0xffa>
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	29 2b       	or	r18, r25
    2624:	85 2f       	mov	r24, r21
    2626:	81 95       	neg	r24
    2628:	31 e0       	ldi	r19, 0x01	; 1
    262a:	18 16       	cp	r1, r24
    262c:	08 f0       	brcs	.+2      	; 0x2630 <__moddi3+0x1008>
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	58 2f       	mov	r21, r24
    2632:	52 1b       	sub	r21, r18
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	85 17       	cp	r24, r21
    2638:	08 f0       	brcs	.+2      	; 0x263c <__moddi3+0x1014>
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	39 2b       	or	r19, r25
    263e:	8a 2f       	mov	r24, r26
    2640:	81 95       	neg	r24
    2642:	21 e0       	ldi	r18, 0x01	; 1
    2644:	18 16       	cp	r1, r24
    2646:	08 f0       	brcs	.+2      	; 0x264a <__moddi3+0x1022>
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	48 2f       	mov	r20, r24
    264c:	43 1b       	sub	r20, r19
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	84 17       	cp	r24, r20
    2652:	08 f0       	brcs	.+2      	; 0x2656 <__moddi3+0x102e>
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	29 2b       	or	r18, r25
    2658:	8b 2f       	mov	r24, r27
    265a:	81 95       	neg	r24
    265c:	91 e0       	ldi	r25, 0x01	; 1
    265e:	18 16       	cp	r1, r24
    2660:	08 f0       	brcs	.+2      	; 0x2664 <__moddi3+0x103c>
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	38 2f       	mov	r19, r24
    2666:	32 1b       	sub	r19, r18
    2668:	21 e0       	ldi	r18, 0x01	; 1
    266a:	83 17       	cp	r24, r19
    266c:	08 f0       	brcs	.+2      	; 0x2670 <__moddi3+0x1048>
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	92 2b       	or	r25, r18
    2672:	81 2f       	mov	r24, r17
    2674:	81 95       	neg	r24
    2676:	89 1b       	sub	r24, r25
    2678:	f9 8b       	std	Y+17, r31	; 0x11
    267a:	ea 8b       	std	Y+18, r30	; 0x12
    267c:	7b 8b       	std	Y+19, r23	; 0x13
    267e:	6c 8b       	std	Y+20, r22	; 0x14
    2680:	5d 8b       	std	Y+21, r21	; 0x15
    2682:	4e 8b       	std	Y+22, r20	; 0x16
    2684:	3f 8b       	std	Y+23, r19	; 0x17
    2686:	88 8f       	std	Y+24, r24	; 0x18
    2688:	29 89       	ldd	r18, Y+17	; 0x11
    268a:	3a 89       	ldd	r19, Y+18	; 0x12
    268c:	4b 89       	ldd	r20, Y+19	; 0x13
    268e:	5c 89       	ldd	r21, Y+20	; 0x14
    2690:	6d 89       	ldd	r22, Y+21	; 0x15
    2692:	7e 89       	ldd	r23, Y+22	; 0x16
    2694:	8f 89       	ldd	r24, Y+23	; 0x17
    2696:	98 8d       	ldd	r25, Y+24	; 0x18
    2698:	c9 58       	subi	r28, 0x89	; 137
    269a:	df 4f       	sbci	r29, 0xFF	; 255
    269c:	e2 e1       	ldi	r30, 0x12	; 18
    269e:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <__epilogue_restores__>

000026a2 <_fpadd_parts>:
    26a2:	a0 e0       	ldi	r26, 0x00	; 0
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e7 e5       	ldi	r30, 0x57	; 87
    26a8:	f3 e1       	ldi	r31, 0x13	; 19
    26aa:	0c 94 f7 3a 	jmp	0x75ee	; 0x75ee <__prologue_saves__>
    26ae:	dc 01       	movw	r26, r24
    26b0:	2b 01       	movw	r4, r22
    26b2:	fa 01       	movw	r30, r20
    26b4:	9c 91       	ld	r25, X
    26b6:	92 30       	cpi	r25, 0x02	; 2
    26b8:	08 f4       	brcc	.+2      	; 0x26bc <_fpadd_parts+0x1a>
    26ba:	39 c1       	rjmp	.+626    	; 0x292e <_fpadd_parts+0x28c>
    26bc:	eb 01       	movw	r28, r22
    26be:	88 81       	ld	r24, Y
    26c0:	82 30       	cpi	r24, 0x02	; 2
    26c2:	08 f4       	brcc	.+2      	; 0x26c6 <_fpadd_parts+0x24>
    26c4:	33 c1       	rjmp	.+614    	; 0x292c <_fpadd_parts+0x28a>
    26c6:	94 30       	cpi	r25, 0x04	; 4
    26c8:	69 f4       	brne	.+26     	; 0x26e4 <_fpadd_parts+0x42>
    26ca:	84 30       	cpi	r24, 0x04	; 4
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <_fpadd_parts+0x2e>
    26ce:	2f c1       	rjmp	.+606    	; 0x292e <_fpadd_parts+0x28c>
    26d0:	11 96       	adiw	r26, 0x01	; 1
    26d2:	9c 91       	ld	r25, X
    26d4:	11 97       	sbiw	r26, 0x01	; 1
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	98 17       	cp	r25, r24
    26da:	09 f4       	brne	.+2      	; 0x26de <_fpadd_parts+0x3c>
    26dc:	28 c1       	rjmp	.+592    	; 0x292e <_fpadd_parts+0x28c>
    26de:	a6 e9       	ldi	r26, 0x96	; 150
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	25 c1       	rjmp	.+586    	; 0x292e <_fpadd_parts+0x28c>
    26e4:	84 30       	cpi	r24, 0x04	; 4
    26e6:	09 f4       	brne	.+2      	; 0x26ea <_fpadd_parts+0x48>
    26e8:	21 c1       	rjmp	.+578    	; 0x292c <_fpadd_parts+0x28a>
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	a9 f4       	brne	.+42     	; 0x2718 <_fpadd_parts+0x76>
    26ee:	92 30       	cpi	r25, 0x02	; 2
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <_fpadd_parts+0x52>
    26f2:	1d c1       	rjmp	.+570    	; 0x292e <_fpadd_parts+0x28c>
    26f4:	9a 01       	movw	r18, r20
    26f6:	ad 01       	movw	r20, r26
    26f8:	88 e0       	ldi	r24, 0x08	; 8
    26fa:	ea 01       	movw	r28, r20
    26fc:	09 90       	ld	r0, Y+
    26fe:	ae 01       	movw	r20, r28
    2700:	e9 01       	movw	r28, r18
    2702:	09 92       	st	Y+, r0
    2704:	9e 01       	movw	r18, r28
    2706:	81 50       	subi	r24, 0x01	; 1
    2708:	c1 f7       	brne	.-16     	; 0x26fa <_fpadd_parts+0x58>
    270a:	e2 01       	movw	r28, r4
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	11 96       	adiw	r26, 0x01	; 1
    2710:	9c 91       	ld	r25, X
    2712:	89 23       	and	r24, r25
    2714:	81 83       	std	Z+1, r24	; 0x01
    2716:	08 c1       	rjmp	.+528    	; 0x2928 <_fpadd_parts+0x286>
    2718:	92 30       	cpi	r25, 0x02	; 2
    271a:	09 f4       	brne	.+2      	; 0x271e <_fpadd_parts+0x7c>
    271c:	07 c1       	rjmp	.+526    	; 0x292c <_fpadd_parts+0x28a>
    271e:	12 96       	adiw	r26, 0x02	; 2
    2720:	2d 90       	ld	r2, X+
    2722:	3c 90       	ld	r3, X
    2724:	13 97       	sbiw	r26, 0x03	; 3
    2726:	eb 01       	movw	r28, r22
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	9b 81       	ldd	r25, Y+3	; 0x03
    272c:	14 96       	adiw	r26, 0x04	; 4
    272e:	ad 90       	ld	r10, X+
    2730:	bd 90       	ld	r11, X+
    2732:	cd 90       	ld	r12, X+
    2734:	dc 90       	ld	r13, X
    2736:	17 97       	sbiw	r26, 0x07	; 7
    2738:	ec 80       	ldd	r14, Y+4	; 0x04
    273a:	fd 80       	ldd	r15, Y+5	; 0x05
    273c:	0e 81       	ldd	r16, Y+6	; 0x06
    273e:	1f 81       	ldd	r17, Y+7	; 0x07
    2740:	91 01       	movw	r18, r2
    2742:	28 1b       	sub	r18, r24
    2744:	39 0b       	sbc	r19, r25
    2746:	b9 01       	movw	r22, r18
    2748:	37 ff       	sbrs	r19, 7
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <_fpadd_parts+0xb2>
    274c:	66 27       	eor	r22, r22
    274e:	77 27       	eor	r23, r23
    2750:	62 1b       	sub	r22, r18
    2752:	73 0b       	sbc	r23, r19
    2754:	60 32       	cpi	r22, 0x20	; 32
    2756:	71 05       	cpc	r23, r1
    2758:	0c f0       	brlt	.+2      	; 0x275c <_fpadd_parts+0xba>
    275a:	61 c0       	rjmp	.+194    	; 0x281e <_fpadd_parts+0x17c>
    275c:	12 16       	cp	r1, r18
    275e:	13 06       	cpc	r1, r19
    2760:	6c f5       	brge	.+90     	; 0x27bc <_fpadd_parts+0x11a>
    2762:	37 01       	movw	r6, r14
    2764:	48 01       	movw	r8, r16
    2766:	06 2e       	mov	r0, r22
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <_fpadd_parts+0xd0>
    276a:	96 94       	lsr	r9
    276c:	87 94       	ror	r8
    276e:	77 94       	ror	r7
    2770:	67 94       	ror	r6
    2772:	0a 94       	dec	r0
    2774:	d2 f7       	brpl	.-12     	; 0x276a <_fpadd_parts+0xc8>
    2776:	21 e0       	ldi	r18, 0x01	; 1
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	04 c0       	rjmp	.+8      	; 0x2788 <_fpadd_parts+0xe6>
    2780:	22 0f       	add	r18, r18
    2782:	33 1f       	adc	r19, r19
    2784:	44 1f       	adc	r20, r20
    2786:	55 1f       	adc	r21, r21
    2788:	6a 95       	dec	r22
    278a:	d2 f7       	brpl	.-12     	; 0x2780 <_fpadd_parts+0xde>
    278c:	21 50       	subi	r18, 0x01	; 1
    278e:	30 40       	sbci	r19, 0x00	; 0
    2790:	40 40       	sbci	r20, 0x00	; 0
    2792:	50 40       	sbci	r21, 0x00	; 0
    2794:	2e 21       	and	r18, r14
    2796:	3f 21       	and	r19, r15
    2798:	40 23       	and	r20, r16
    279a:	51 23       	and	r21, r17
    279c:	21 15       	cp	r18, r1
    279e:	31 05       	cpc	r19, r1
    27a0:	41 05       	cpc	r20, r1
    27a2:	51 05       	cpc	r21, r1
    27a4:	21 f0       	breq	.+8      	; 0x27ae <_fpadd_parts+0x10c>
    27a6:	21 e0       	ldi	r18, 0x01	; 1
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	79 01       	movw	r14, r18
    27b0:	8a 01       	movw	r16, r20
    27b2:	e6 28       	or	r14, r6
    27b4:	f7 28       	or	r15, r7
    27b6:	08 29       	or	r16, r8
    27b8:	19 29       	or	r17, r9
    27ba:	3c c0       	rjmp	.+120    	; 0x2834 <_fpadd_parts+0x192>
    27bc:	23 2b       	or	r18, r19
    27be:	d1 f1       	breq	.+116    	; 0x2834 <_fpadd_parts+0x192>
    27c0:	26 0e       	add	r2, r22
    27c2:	37 1e       	adc	r3, r23
    27c4:	35 01       	movw	r6, r10
    27c6:	46 01       	movw	r8, r12
    27c8:	06 2e       	mov	r0, r22
    27ca:	04 c0       	rjmp	.+8      	; 0x27d4 <_fpadd_parts+0x132>
    27cc:	96 94       	lsr	r9
    27ce:	87 94       	ror	r8
    27d0:	77 94       	ror	r7
    27d2:	67 94       	ror	r6
    27d4:	0a 94       	dec	r0
    27d6:	d2 f7       	brpl	.-12     	; 0x27cc <_fpadd_parts+0x12a>
    27d8:	21 e0       	ldi	r18, 0x01	; 1
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <_fpadd_parts+0x148>
    27e2:	22 0f       	add	r18, r18
    27e4:	33 1f       	adc	r19, r19
    27e6:	44 1f       	adc	r20, r20
    27e8:	55 1f       	adc	r21, r21
    27ea:	6a 95       	dec	r22
    27ec:	d2 f7       	brpl	.-12     	; 0x27e2 <_fpadd_parts+0x140>
    27ee:	21 50       	subi	r18, 0x01	; 1
    27f0:	30 40       	sbci	r19, 0x00	; 0
    27f2:	40 40       	sbci	r20, 0x00	; 0
    27f4:	50 40       	sbci	r21, 0x00	; 0
    27f6:	2a 21       	and	r18, r10
    27f8:	3b 21       	and	r19, r11
    27fa:	4c 21       	and	r20, r12
    27fc:	5d 21       	and	r21, r13
    27fe:	21 15       	cp	r18, r1
    2800:	31 05       	cpc	r19, r1
    2802:	41 05       	cpc	r20, r1
    2804:	51 05       	cpc	r21, r1
    2806:	21 f0       	breq	.+8      	; 0x2810 <_fpadd_parts+0x16e>
    2808:	21 e0       	ldi	r18, 0x01	; 1
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	59 01       	movw	r10, r18
    2812:	6a 01       	movw	r12, r20
    2814:	a6 28       	or	r10, r6
    2816:	b7 28       	or	r11, r7
    2818:	c8 28       	or	r12, r8
    281a:	d9 28       	or	r13, r9
    281c:	0b c0       	rjmp	.+22     	; 0x2834 <_fpadd_parts+0x192>
    281e:	82 15       	cp	r24, r2
    2820:	93 05       	cpc	r25, r3
    2822:	2c f0       	brlt	.+10     	; 0x282e <_fpadd_parts+0x18c>
    2824:	1c 01       	movw	r2, r24
    2826:	aa 24       	eor	r10, r10
    2828:	bb 24       	eor	r11, r11
    282a:	65 01       	movw	r12, r10
    282c:	03 c0       	rjmp	.+6      	; 0x2834 <_fpadd_parts+0x192>
    282e:	ee 24       	eor	r14, r14
    2830:	ff 24       	eor	r15, r15
    2832:	87 01       	movw	r16, r14
    2834:	11 96       	adiw	r26, 0x01	; 1
    2836:	9c 91       	ld	r25, X
    2838:	d2 01       	movw	r26, r4
    283a:	11 96       	adiw	r26, 0x01	; 1
    283c:	8c 91       	ld	r24, X
    283e:	98 17       	cp	r25, r24
    2840:	09 f4       	brne	.+2      	; 0x2844 <_fpadd_parts+0x1a2>
    2842:	45 c0       	rjmp	.+138    	; 0x28ce <_fpadd_parts+0x22c>
    2844:	99 23       	and	r25, r25
    2846:	39 f0       	breq	.+14     	; 0x2856 <_fpadd_parts+0x1b4>
    2848:	a8 01       	movw	r20, r16
    284a:	97 01       	movw	r18, r14
    284c:	2a 19       	sub	r18, r10
    284e:	3b 09       	sbc	r19, r11
    2850:	4c 09       	sbc	r20, r12
    2852:	5d 09       	sbc	r21, r13
    2854:	06 c0       	rjmp	.+12     	; 0x2862 <_fpadd_parts+0x1c0>
    2856:	a6 01       	movw	r20, r12
    2858:	95 01       	movw	r18, r10
    285a:	2e 19       	sub	r18, r14
    285c:	3f 09       	sbc	r19, r15
    285e:	40 0b       	sbc	r20, r16
    2860:	51 0b       	sbc	r21, r17
    2862:	57 fd       	sbrc	r21, 7
    2864:	08 c0       	rjmp	.+16     	; 0x2876 <_fpadd_parts+0x1d4>
    2866:	11 82       	std	Z+1, r1	; 0x01
    2868:	33 82       	std	Z+3, r3	; 0x03
    286a:	22 82       	std	Z+2, r2	; 0x02
    286c:	24 83       	std	Z+4, r18	; 0x04
    286e:	35 83       	std	Z+5, r19	; 0x05
    2870:	46 83       	std	Z+6, r20	; 0x06
    2872:	57 83       	std	Z+7, r21	; 0x07
    2874:	1d c0       	rjmp	.+58     	; 0x28b0 <_fpadd_parts+0x20e>
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	81 83       	std	Z+1, r24	; 0x01
    287a:	33 82       	std	Z+3, r3	; 0x03
    287c:	22 82       	std	Z+2, r2	; 0x02
    287e:	88 27       	eor	r24, r24
    2880:	99 27       	eor	r25, r25
    2882:	dc 01       	movw	r26, r24
    2884:	82 1b       	sub	r24, r18
    2886:	93 0b       	sbc	r25, r19
    2888:	a4 0b       	sbc	r26, r20
    288a:	b5 0b       	sbc	r27, r21
    288c:	84 83       	std	Z+4, r24	; 0x04
    288e:	95 83       	std	Z+5, r25	; 0x05
    2890:	a6 83       	std	Z+6, r26	; 0x06
    2892:	b7 83       	std	Z+7, r27	; 0x07
    2894:	0d c0       	rjmp	.+26     	; 0x28b0 <_fpadd_parts+0x20e>
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	44 1f       	adc	r20, r20
    289c:	55 1f       	adc	r21, r21
    289e:	24 83       	std	Z+4, r18	; 0x04
    28a0:	35 83       	std	Z+5, r19	; 0x05
    28a2:	46 83       	std	Z+6, r20	; 0x06
    28a4:	57 83       	std	Z+7, r21	; 0x07
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	93 83       	std	Z+3, r25	; 0x03
    28ae:	82 83       	std	Z+2, r24	; 0x02
    28b0:	24 81       	ldd	r18, Z+4	; 0x04
    28b2:	35 81       	ldd	r19, Z+5	; 0x05
    28b4:	46 81       	ldd	r20, Z+6	; 0x06
    28b6:	57 81       	ldd	r21, Z+7	; 0x07
    28b8:	da 01       	movw	r26, r20
    28ba:	c9 01       	movw	r24, r18
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	a1 09       	sbc	r26, r1
    28c0:	b1 09       	sbc	r27, r1
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	9f 4f       	sbci	r25, 0xFF	; 255
    28c6:	af 4f       	sbci	r26, 0xFF	; 255
    28c8:	bf 43       	sbci	r27, 0x3F	; 63
    28ca:	28 f3       	brcs	.-54     	; 0x2896 <_fpadd_parts+0x1f4>
    28cc:	0b c0       	rjmp	.+22     	; 0x28e4 <_fpadd_parts+0x242>
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	33 82       	std	Z+3, r3	; 0x03
    28d2:	22 82       	std	Z+2, r2	; 0x02
    28d4:	ea 0c       	add	r14, r10
    28d6:	fb 1c       	adc	r15, r11
    28d8:	0c 1d       	adc	r16, r12
    28da:	1d 1d       	adc	r17, r13
    28dc:	e4 82       	std	Z+4, r14	; 0x04
    28de:	f5 82       	std	Z+5, r15	; 0x05
    28e0:	06 83       	std	Z+6, r16	; 0x06
    28e2:	17 83       	std	Z+7, r17	; 0x07
    28e4:	83 e0       	ldi	r24, 0x03	; 3
    28e6:	80 83       	st	Z, r24
    28e8:	24 81       	ldd	r18, Z+4	; 0x04
    28ea:	35 81       	ldd	r19, Z+5	; 0x05
    28ec:	46 81       	ldd	r20, Z+6	; 0x06
    28ee:	57 81       	ldd	r21, Z+7	; 0x07
    28f0:	57 ff       	sbrs	r21, 7
    28f2:	1a c0       	rjmp	.+52     	; 0x2928 <_fpadd_parts+0x286>
    28f4:	c9 01       	movw	r24, r18
    28f6:	aa 27       	eor	r26, r26
    28f8:	97 fd       	sbrc	r25, 7
    28fa:	a0 95       	com	r26
    28fc:	ba 2f       	mov	r27, r26
    28fe:	81 70       	andi	r24, 0x01	; 1
    2900:	90 70       	andi	r25, 0x00	; 0
    2902:	a0 70       	andi	r26, 0x00	; 0
    2904:	b0 70       	andi	r27, 0x00	; 0
    2906:	56 95       	lsr	r21
    2908:	47 95       	ror	r20
    290a:	37 95       	ror	r19
    290c:	27 95       	ror	r18
    290e:	82 2b       	or	r24, r18
    2910:	93 2b       	or	r25, r19
    2912:	a4 2b       	or	r26, r20
    2914:	b5 2b       	or	r27, r21
    2916:	84 83       	std	Z+4, r24	; 0x04
    2918:	95 83       	std	Z+5, r25	; 0x05
    291a:	a6 83       	std	Z+6, r26	; 0x06
    291c:	b7 83       	std	Z+7, r27	; 0x07
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	93 83       	std	Z+3, r25	; 0x03
    2926:	82 83       	std	Z+2, r24	; 0x02
    2928:	df 01       	movw	r26, r30
    292a:	01 c0       	rjmp	.+2      	; 0x292e <_fpadd_parts+0x28c>
    292c:	d2 01       	movw	r26, r4
    292e:	cd 01       	movw	r24, r26
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	e2 e1       	ldi	r30, 0x12	; 18
    2936:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <__epilogue_restores__>

0000293a <__subsf3>:
    293a:	a0 e2       	ldi	r26, 0x20	; 32
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e3 ea       	ldi	r30, 0xA3	; 163
    2940:	f4 e1       	ldi	r31, 0x14	; 20
    2942:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__prologue_saves__+0x18>
    2946:	69 83       	std	Y+1, r22	; 0x01
    2948:	7a 83       	std	Y+2, r23	; 0x02
    294a:	8b 83       	std	Y+3, r24	; 0x03
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	2d 83       	std	Y+5, r18	; 0x05
    2950:	3e 83       	std	Y+6, r19	; 0x06
    2952:	4f 83       	std	Y+7, r20	; 0x07
    2954:	58 87       	std	Y+8, r21	; 0x08
    2956:	e9 e0       	ldi	r30, 0x09	; 9
    2958:	ee 2e       	mov	r14, r30
    295a:	f1 2c       	mov	r15, r1
    295c:	ec 0e       	add	r14, r28
    295e:	fd 1e       	adc	r15, r29
    2960:	ce 01       	movw	r24, r28
    2962:	01 96       	adiw	r24, 0x01	; 1
    2964:	b7 01       	movw	r22, r14
    2966:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    296a:	8e 01       	movw	r16, r28
    296c:	0f 5e       	subi	r16, 0xEF	; 239
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	ce 01       	movw	r24, r28
    2972:	05 96       	adiw	r24, 0x05	; 5
    2974:	b8 01       	movw	r22, r16
    2976:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    297a:	8a 89       	ldd	r24, Y+18	; 0x12
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	89 27       	eor	r24, r25
    2980:	8a 8b       	std	Y+18, r24	; 0x12
    2982:	c7 01       	movw	r24, r14
    2984:	b8 01       	movw	r22, r16
    2986:	ae 01       	movw	r20, r28
    2988:	47 5e       	subi	r20, 0xE7	; 231
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_fpadd_parts>
    2990:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__pack_f>
    2994:	a0 96       	adiw	r28, 0x20	; 32
    2996:	e6 e0       	ldi	r30, 0x06	; 6
    2998:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__epilogue_restores__+0x18>

0000299c <__addsf3>:
    299c:	a0 e2       	ldi	r26, 0x20	; 32
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e4 ed       	ldi	r30, 0xD4	; 212
    29a2:	f4 e1       	ldi	r31, 0x14	; 20
    29a4:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__prologue_saves__+0x18>
    29a8:	69 83       	std	Y+1, r22	; 0x01
    29aa:	7a 83       	std	Y+2, r23	; 0x02
    29ac:	8b 83       	std	Y+3, r24	; 0x03
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	2d 83       	std	Y+5, r18	; 0x05
    29b2:	3e 83       	std	Y+6, r19	; 0x06
    29b4:	4f 83       	std	Y+7, r20	; 0x07
    29b6:	58 87       	std	Y+8, r21	; 0x08
    29b8:	f9 e0       	ldi	r31, 0x09	; 9
    29ba:	ef 2e       	mov	r14, r31
    29bc:	f1 2c       	mov	r15, r1
    29be:	ec 0e       	add	r14, r28
    29c0:	fd 1e       	adc	r15, r29
    29c2:	ce 01       	movw	r24, r28
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	b7 01       	movw	r22, r14
    29c8:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    29cc:	8e 01       	movw	r16, r28
    29ce:	0f 5e       	subi	r16, 0xEF	; 239
    29d0:	1f 4f       	sbci	r17, 0xFF	; 255
    29d2:	ce 01       	movw	r24, r28
    29d4:	05 96       	adiw	r24, 0x05	; 5
    29d6:	b8 01       	movw	r22, r16
    29d8:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    29dc:	c7 01       	movw	r24, r14
    29de:	b8 01       	movw	r22, r16
    29e0:	ae 01       	movw	r20, r28
    29e2:	47 5e       	subi	r20, 0xE7	; 231
    29e4:	5f 4f       	sbci	r21, 0xFF	; 255
    29e6:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_fpadd_parts>
    29ea:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__pack_f>
    29ee:	a0 96       	adiw	r28, 0x20	; 32
    29f0:	e6 e0       	ldi	r30, 0x06	; 6
    29f2:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__epilogue_restores__+0x18>

000029f6 <__mulsf3>:
    29f6:	a0 e2       	ldi	r26, 0x20	; 32
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e1 e0       	ldi	r30, 0x01	; 1
    29fc:	f5 e1       	ldi	r31, 0x15	; 21
    29fe:	0c 94 f7 3a 	jmp	0x75ee	; 0x75ee <__prologue_saves__>
    2a02:	69 83       	std	Y+1, r22	; 0x01
    2a04:	7a 83       	std	Y+2, r23	; 0x02
    2a06:	8b 83       	std	Y+3, r24	; 0x03
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	2d 83       	std	Y+5, r18	; 0x05
    2a0c:	3e 83       	std	Y+6, r19	; 0x06
    2a0e:	4f 83       	std	Y+7, r20	; 0x07
    2a10:	58 87       	std	Y+8, r21	; 0x08
    2a12:	ce 01       	movw	r24, r28
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	be 01       	movw	r22, r28
    2a18:	67 5f       	subi	r22, 0xF7	; 247
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2a20:	ce 01       	movw	r24, r28
    2a22:	05 96       	adiw	r24, 0x05	; 5
    2a24:	be 01       	movw	r22, r28
    2a26:	6f 5e       	subi	r22, 0xEF	; 239
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2a2e:	99 85       	ldd	r25, Y+9	; 0x09
    2a30:	92 30       	cpi	r25, 0x02	; 2
    2a32:	88 f0       	brcs	.+34     	; 0x2a56 <__mulsf3+0x60>
    2a34:	89 89       	ldd	r24, Y+17	; 0x11
    2a36:	82 30       	cpi	r24, 0x02	; 2
    2a38:	c8 f0       	brcs	.+50     	; 0x2a6c <__mulsf3+0x76>
    2a3a:	94 30       	cpi	r25, 0x04	; 4
    2a3c:	19 f4       	brne	.+6      	; 0x2a44 <__mulsf3+0x4e>
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	51 f4       	brne	.+20     	; 0x2a56 <__mulsf3+0x60>
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <__mulsf3+0x56>
    2a44:	84 30       	cpi	r24, 0x04	; 4
    2a46:	29 f4       	brne	.+10     	; 0x2a52 <__mulsf3+0x5c>
    2a48:	92 30       	cpi	r25, 0x02	; 2
    2a4a:	81 f4       	brne	.+32     	; 0x2a6c <__mulsf3+0x76>
    2a4c:	86 e9       	ldi	r24, 0x96	; 150
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	c6 c0       	rjmp	.+396    	; 0x2bde <__mulsf3+0x1e8>
    2a52:	92 30       	cpi	r25, 0x02	; 2
    2a54:	49 f4       	brne	.+18     	; 0x2a68 <__mulsf3+0x72>
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a5c:	98 13       	cpse	r25, r24
    2a5e:	21 e0       	ldi	r18, 0x01	; 1
    2a60:	2a 87       	std	Y+10, r18	; 0x0a
    2a62:	ce 01       	movw	r24, r28
    2a64:	09 96       	adiw	r24, 0x09	; 9
    2a66:	bb c0       	rjmp	.+374    	; 0x2bde <__mulsf3+0x1e8>
    2a68:	82 30       	cpi	r24, 0x02	; 2
    2a6a:	49 f4       	brne	.+18     	; 0x2a7e <__mulsf3+0x88>
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	8a 89       	ldd	r24, Y+18	; 0x12
    2a72:	98 13       	cpse	r25, r24
    2a74:	21 e0       	ldi	r18, 0x01	; 1
    2a76:	2a 8b       	std	Y+18, r18	; 0x12
    2a78:	ce 01       	movw	r24, r28
    2a7a:	41 96       	adiw	r24, 0x11	; 17
    2a7c:	b0 c0       	rjmp	.+352    	; 0x2bde <__mulsf3+0x1e8>
    2a7e:	2d 84       	ldd	r2, Y+13	; 0x0d
    2a80:	3e 84       	ldd	r3, Y+14	; 0x0e
    2a82:	4f 84       	ldd	r4, Y+15	; 0x0f
    2a84:	58 88       	ldd	r5, Y+16	; 0x10
    2a86:	6d 88       	ldd	r6, Y+21	; 0x15
    2a88:	7e 88       	ldd	r7, Y+22	; 0x16
    2a8a:	8f 88       	ldd	r8, Y+23	; 0x17
    2a8c:	98 8c       	ldd	r9, Y+24	; 0x18
    2a8e:	ee 24       	eor	r14, r14
    2a90:	ff 24       	eor	r15, r15
    2a92:	87 01       	movw	r16, r14
    2a94:	aa 24       	eor	r10, r10
    2a96:	bb 24       	eor	r11, r11
    2a98:	65 01       	movw	r12, r10
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	e0 e0       	ldi	r30, 0x00	; 0
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	c1 01       	movw	r24, r2
    2aa8:	81 70       	andi	r24, 0x01	; 1
    2aaa:	90 70       	andi	r25, 0x00	; 0
    2aac:	89 2b       	or	r24, r25
    2aae:	e9 f0       	breq	.+58     	; 0x2aea <__mulsf3+0xf4>
    2ab0:	e6 0c       	add	r14, r6
    2ab2:	f7 1c       	adc	r15, r7
    2ab4:	08 1d       	adc	r16, r8
    2ab6:	19 1d       	adc	r17, r9
    2ab8:	9a 01       	movw	r18, r20
    2aba:	ab 01       	movw	r20, r22
    2abc:	2a 0d       	add	r18, r10
    2abe:	3b 1d       	adc	r19, r11
    2ac0:	4c 1d       	adc	r20, r12
    2ac2:	5d 1d       	adc	r21, r13
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e0       	ldi	r26, 0x00	; 0
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e6 14       	cp	r14, r6
    2ace:	f7 04       	cpc	r15, r7
    2ad0:	08 05       	cpc	r16, r8
    2ad2:	19 05       	cpc	r17, r9
    2ad4:	20 f4       	brcc	.+8      	; 0x2ade <__mulsf3+0xe8>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a0 e0       	ldi	r26, 0x00	; 0
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	ba 01       	movw	r22, r20
    2ae0:	a9 01       	movw	r20, r18
    2ae2:	48 0f       	add	r20, r24
    2ae4:	59 1f       	adc	r21, r25
    2ae6:	6a 1f       	adc	r22, r26
    2ae8:	7b 1f       	adc	r23, r27
    2aea:	aa 0c       	add	r10, r10
    2aec:	bb 1c       	adc	r11, r11
    2aee:	cc 1c       	adc	r12, r12
    2af0:	dd 1c       	adc	r13, r13
    2af2:	97 fe       	sbrs	r9, 7
    2af4:	08 c0       	rjmp	.+16     	; 0x2b06 <__mulsf3+0x110>
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	a8 2a       	or	r10, r24
    2b00:	b9 2a       	or	r11, r25
    2b02:	ca 2a       	or	r12, r26
    2b04:	db 2a       	or	r13, r27
    2b06:	31 96       	adiw	r30, 0x01	; 1
    2b08:	e0 32       	cpi	r30, 0x20	; 32
    2b0a:	f1 05       	cpc	r31, r1
    2b0c:	49 f0       	breq	.+18     	; 0x2b20 <__mulsf3+0x12a>
    2b0e:	66 0c       	add	r6, r6
    2b10:	77 1c       	adc	r7, r7
    2b12:	88 1c       	adc	r8, r8
    2b14:	99 1c       	adc	r9, r9
    2b16:	56 94       	lsr	r5
    2b18:	47 94       	ror	r4
    2b1a:	37 94       	ror	r3
    2b1c:	27 94       	ror	r2
    2b1e:	c3 cf       	rjmp	.-122    	; 0x2aa6 <__mulsf3+0xb0>
    2b20:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b22:	ea 89       	ldd	r30, Y+18	; 0x12
    2b24:	2b 89       	ldd	r18, Y+19	; 0x13
    2b26:	3c 89       	ldd	r19, Y+20	; 0x14
    2b28:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b2c:	28 0f       	add	r18, r24
    2b2e:	39 1f       	adc	r19, r25
    2b30:	2e 5f       	subi	r18, 0xFE	; 254
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	17 c0       	rjmp	.+46     	; 0x2b64 <__mulsf3+0x16e>
    2b36:	ca 01       	movw	r24, r20
    2b38:	81 70       	andi	r24, 0x01	; 1
    2b3a:	90 70       	andi	r25, 0x00	; 0
    2b3c:	89 2b       	or	r24, r25
    2b3e:	61 f0       	breq	.+24     	; 0x2b58 <__mulsf3+0x162>
    2b40:	16 95       	lsr	r17
    2b42:	07 95       	ror	r16
    2b44:	f7 94       	ror	r15
    2b46:	e7 94       	ror	r14
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e0       	ldi	r26, 0x00	; 0
    2b4e:	b0 e8       	ldi	r27, 0x80	; 128
    2b50:	e8 2a       	or	r14, r24
    2b52:	f9 2a       	or	r15, r25
    2b54:	0a 2b       	or	r16, r26
    2b56:	1b 2b       	or	r17, r27
    2b58:	76 95       	lsr	r23
    2b5a:	67 95       	ror	r22
    2b5c:	57 95       	ror	r21
    2b5e:	47 95       	ror	r20
    2b60:	2f 5f       	subi	r18, 0xFF	; 255
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	77 fd       	sbrc	r23, 7
    2b66:	e7 cf       	rjmp	.-50     	; 0x2b36 <__mulsf3+0x140>
    2b68:	0c c0       	rjmp	.+24     	; 0x2b82 <__mulsf3+0x18c>
    2b6a:	44 0f       	add	r20, r20
    2b6c:	55 1f       	adc	r21, r21
    2b6e:	66 1f       	adc	r22, r22
    2b70:	77 1f       	adc	r23, r23
    2b72:	17 fd       	sbrc	r17, 7
    2b74:	41 60       	ori	r20, 0x01	; 1
    2b76:	ee 0c       	add	r14, r14
    2b78:	ff 1c       	adc	r15, r15
    2b7a:	00 1f       	adc	r16, r16
    2b7c:	11 1f       	adc	r17, r17
    2b7e:	21 50       	subi	r18, 0x01	; 1
    2b80:	30 40       	sbci	r19, 0x00	; 0
    2b82:	40 30       	cpi	r20, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	59 07       	cpc	r21, r25
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	69 07       	cpc	r22, r25
    2b8c:	90 e4       	ldi	r25, 0x40	; 64
    2b8e:	79 07       	cpc	r23, r25
    2b90:	60 f3       	brcs	.-40     	; 0x2b6a <__mulsf3+0x174>
    2b92:	2b 8f       	std	Y+27, r18	; 0x1b
    2b94:	3c 8f       	std	Y+28, r19	; 0x1c
    2b96:	db 01       	movw	r26, r22
    2b98:	ca 01       	movw	r24, r20
    2b9a:	8f 77       	andi	r24, 0x7F	; 127
    2b9c:	90 70       	andi	r25, 0x00	; 0
    2b9e:	a0 70       	andi	r26, 0x00	; 0
    2ba0:	b0 70       	andi	r27, 0x00	; 0
    2ba2:	80 34       	cpi	r24, 0x40	; 64
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	a1 05       	cpc	r26, r1
    2ba8:	b1 05       	cpc	r27, r1
    2baa:	61 f4       	brne	.+24     	; 0x2bc4 <__mulsf3+0x1ce>
    2bac:	47 fd       	sbrc	r20, 7
    2bae:	0a c0       	rjmp	.+20     	; 0x2bc4 <__mulsf3+0x1ce>
    2bb0:	e1 14       	cp	r14, r1
    2bb2:	f1 04       	cpc	r15, r1
    2bb4:	01 05       	cpc	r16, r1
    2bb6:	11 05       	cpc	r17, r1
    2bb8:	29 f0       	breq	.+10     	; 0x2bc4 <__mulsf3+0x1ce>
    2bba:	40 5c       	subi	r20, 0xC0	; 192
    2bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbe:	6f 4f       	sbci	r22, 0xFF	; 255
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	40 78       	andi	r20, 0x80	; 128
    2bc4:	1a 8e       	std	Y+26, r1	; 0x1a
    2bc6:	fe 17       	cp	r31, r30
    2bc8:	11 f0       	breq	.+4      	; 0x2bce <__mulsf3+0x1d8>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	8a 8f       	std	Y+26, r24	; 0x1a
    2bce:	4d 8f       	std	Y+29, r20	; 0x1d
    2bd0:	5e 8f       	std	Y+30, r21	; 0x1e
    2bd2:	6f 8f       	std	Y+31, r22	; 0x1f
    2bd4:	78 a3       	std	Y+32, r23	; 0x20
    2bd6:	83 e0       	ldi	r24, 0x03	; 3
    2bd8:	89 8f       	std	Y+25, r24	; 0x19
    2bda:	ce 01       	movw	r24, r28
    2bdc:	49 96       	adiw	r24, 0x19	; 25
    2bde:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__pack_f>
    2be2:	a0 96       	adiw	r28, 0x20	; 32
    2be4:	e2 e1       	ldi	r30, 0x12	; 18
    2be6:	0c 94 13 3b 	jmp	0x7626	; 0x7626 <__epilogue_restores__>

00002bea <__divsf3>:
    2bea:	a8 e1       	ldi	r26, 0x18	; 24
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	eb ef       	ldi	r30, 0xFB	; 251
    2bf0:	f5 e1       	ldi	r31, 0x15	; 21
    2bf2:	0c 94 ff 3a 	jmp	0x75fe	; 0x75fe <__prologue_saves__+0x10>
    2bf6:	69 83       	std	Y+1, r22	; 0x01
    2bf8:	7a 83       	std	Y+2, r23	; 0x02
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	2d 83       	std	Y+5, r18	; 0x05
    2c00:	3e 83       	std	Y+6, r19	; 0x06
    2c02:	4f 83       	std	Y+7, r20	; 0x07
    2c04:	58 87       	std	Y+8, r21	; 0x08
    2c06:	b9 e0       	ldi	r27, 0x09	; 9
    2c08:	eb 2e       	mov	r14, r27
    2c0a:	f1 2c       	mov	r15, r1
    2c0c:	ec 0e       	add	r14, r28
    2c0e:	fd 1e       	adc	r15, r29
    2c10:	ce 01       	movw	r24, r28
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	b7 01       	movw	r22, r14
    2c16:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2c1a:	8e 01       	movw	r16, r28
    2c1c:	0f 5e       	subi	r16, 0xEF	; 239
    2c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c20:	ce 01       	movw	r24, r28
    2c22:	05 96       	adiw	r24, 0x05	; 5
    2c24:	b8 01       	movw	r22, r16
    2c26:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2c2a:	29 85       	ldd	r18, Y+9	; 0x09
    2c2c:	22 30       	cpi	r18, 0x02	; 2
    2c2e:	08 f4       	brcc	.+2      	; 0x2c32 <__divsf3+0x48>
    2c30:	7e c0       	rjmp	.+252    	; 0x2d2e <__divsf3+0x144>
    2c32:	39 89       	ldd	r19, Y+17	; 0x11
    2c34:	32 30       	cpi	r19, 0x02	; 2
    2c36:	10 f4       	brcc	.+4      	; 0x2c3c <__divsf3+0x52>
    2c38:	b8 01       	movw	r22, r16
    2c3a:	7c c0       	rjmp	.+248    	; 0x2d34 <__divsf3+0x14a>
    2c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c3e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c40:	89 27       	eor	r24, r25
    2c42:	8a 87       	std	Y+10, r24	; 0x0a
    2c44:	24 30       	cpi	r18, 0x04	; 4
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <__divsf3+0x62>
    2c48:	22 30       	cpi	r18, 0x02	; 2
    2c4a:	31 f4       	brne	.+12     	; 0x2c58 <__divsf3+0x6e>
    2c4c:	23 17       	cp	r18, r19
    2c4e:	09 f0       	breq	.+2      	; 0x2c52 <__divsf3+0x68>
    2c50:	6e c0       	rjmp	.+220    	; 0x2d2e <__divsf3+0x144>
    2c52:	66 e9       	ldi	r22, 0x96	; 150
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	6e c0       	rjmp	.+220    	; 0x2d34 <__divsf3+0x14a>
    2c58:	34 30       	cpi	r19, 0x04	; 4
    2c5a:	39 f4       	brne	.+14     	; 0x2c6a <__divsf3+0x80>
    2c5c:	1d 86       	std	Y+13, r1	; 0x0d
    2c5e:	1e 86       	std	Y+14, r1	; 0x0e
    2c60:	1f 86       	std	Y+15, r1	; 0x0f
    2c62:	18 8a       	std	Y+16, r1	; 0x10
    2c64:	1c 86       	std	Y+12, r1	; 0x0c
    2c66:	1b 86       	std	Y+11, r1	; 0x0b
    2c68:	04 c0       	rjmp	.+8      	; 0x2c72 <__divsf3+0x88>
    2c6a:	32 30       	cpi	r19, 0x02	; 2
    2c6c:	21 f4       	brne	.+8      	; 0x2c76 <__divsf3+0x8c>
    2c6e:	84 e0       	ldi	r24, 0x04	; 4
    2c70:	89 87       	std	Y+9, r24	; 0x09
    2c72:	b7 01       	movw	r22, r14
    2c74:	5f c0       	rjmp	.+190    	; 0x2d34 <__divsf3+0x14a>
    2c76:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c78:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7e:	28 1b       	sub	r18, r24
    2c80:	39 0b       	sbc	r19, r25
    2c82:	3c 87       	std	Y+12, r19	; 0x0c
    2c84:	2b 87       	std	Y+11, r18	; 0x0b
    2c86:	ed 84       	ldd	r14, Y+13	; 0x0d
    2c88:	fe 84       	ldd	r15, Y+14	; 0x0e
    2c8a:	0f 85       	ldd	r16, Y+15	; 0x0f
    2c8c:	18 89       	ldd	r17, Y+16	; 0x10
    2c8e:	ad 88       	ldd	r10, Y+21	; 0x15
    2c90:	be 88       	ldd	r11, Y+22	; 0x16
    2c92:	cf 88       	ldd	r12, Y+23	; 0x17
    2c94:	d8 8c       	ldd	r13, Y+24	; 0x18
    2c96:	ea 14       	cp	r14, r10
    2c98:	fb 04       	cpc	r15, r11
    2c9a:	0c 05       	cpc	r16, r12
    2c9c:	1d 05       	cpc	r17, r13
    2c9e:	40 f4       	brcc	.+16     	; 0x2cb0 <__divsf3+0xc6>
    2ca0:	ee 0c       	add	r14, r14
    2ca2:	ff 1c       	adc	r15, r15
    2ca4:	00 1f       	adc	r16, r16
    2ca6:	11 1f       	adc	r17, r17
    2ca8:	21 50       	subi	r18, 0x01	; 1
    2caa:	30 40       	sbci	r19, 0x00	; 0
    2cac:	3c 87       	std	Y+12, r19	; 0x0c
    2cae:	2b 87       	std	Y+11, r18	; 0x0b
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	a0 e0       	ldi	r26, 0x00	; 0
    2cbe:	b0 e4       	ldi	r27, 0x40	; 64
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	ea 14       	cp	r14, r10
    2cc6:	fb 04       	cpc	r15, r11
    2cc8:	0c 05       	cpc	r16, r12
    2cca:	1d 05       	cpc	r17, r13
    2ccc:	40 f0       	brcs	.+16     	; 0x2cde <__divsf3+0xf4>
    2cce:	28 2b       	or	r18, r24
    2cd0:	39 2b       	or	r19, r25
    2cd2:	4a 2b       	or	r20, r26
    2cd4:	5b 2b       	or	r21, r27
    2cd6:	ea 18       	sub	r14, r10
    2cd8:	fb 08       	sbc	r15, r11
    2cda:	0c 09       	sbc	r16, r12
    2cdc:	1d 09       	sbc	r17, r13
    2cde:	b6 95       	lsr	r27
    2ce0:	a7 95       	ror	r26
    2ce2:	97 95       	ror	r25
    2ce4:	87 95       	ror	r24
    2ce6:	ee 0c       	add	r14, r14
    2ce8:	ff 1c       	adc	r15, r15
    2cea:	00 1f       	adc	r16, r16
    2cec:	11 1f       	adc	r17, r17
    2cee:	6f 5f       	subi	r22, 0xFF	; 255
    2cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf2:	6f 31       	cpi	r22, 0x1F	; 31
    2cf4:	71 05       	cpc	r23, r1
    2cf6:	31 f7       	brne	.-52     	; 0x2cc4 <__divsf3+0xda>
    2cf8:	da 01       	movw	r26, r20
    2cfa:	c9 01       	movw	r24, r18
    2cfc:	8f 77       	andi	r24, 0x7F	; 127
    2cfe:	90 70       	andi	r25, 0x00	; 0
    2d00:	a0 70       	andi	r26, 0x00	; 0
    2d02:	b0 70       	andi	r27, 0x00	; 0
    2d04:	80 34       	cpi	r24, 0x40	; 64
    2d06:	91 05       	cpc	r25, r1
    2d08:	a1 05       	cpc	r26, r1
    2d0a:	b1 05       	cpc	r27, r1
    2d0c:	61 f4       	brne	.+24     	; 0x2d26 <__divsf3+0x13c>
    2d0e:	27 fd       	sbrc	r18, 7
    2d10:	0a c0       	rjmp	.+20     	; 0x2d26 <__divsf3+0x13c>
    2d12:	e1 14       	cp	r14, r1
    2d14:	f1 04       	cpc	r15, r1
    2d16:	01 05       	cpc	r16, r1
    2d18:	11 05       	cpc	r17, r1
    2d1a:	29 f0       	breq	.+10     	; 0x2d26 <__divsf3+0x13c>
    2d1c:	20 5c       	subi	r18, 0xC0	; 192
    2d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d20:	4f 4f       	sbci	r20, 0xFF	; 255
    2d22:	5f 4f       	sbci	r21, 0xFF	; 255
    2d24:	20 78       	andi	r18, 0x80	; 128
    2d26:	2d 87       	std	Y+13, r18	; 0x0d
    2d28:	3e 87       	std	Y+14, r19	; 0x0e
    2d2a:	4f 87       	std	Y+15, r20	; 0x0f
    2d2c:	58 8b       	std	Y+16, r21	; 0x10
    2d2e:	be 01       	movw	r22, r28
    2d30:	67 5f       	subi	r22, 0xF7	; 247
    2d32:	7f 4f       	sbci	r23, 0xFF	; 255
    2d34:	cb 01       	movw	r24, r22
    2d36:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__pack_f>
    2d3a:	68 96       	adiw	r28, 0x18	; 24
    2d3c:	ea e0       	ldi	r30, 0x0A	; 10
    2d3e:	0c 94 1b 3b 	jmp	0x7636	; 0x7636 <__epilogue_restores__+0x10>

00002d42 <__nesf2>:
    2d42:	a8 e1       	ldi	r26, 0x18	; 24
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e7 ea       	ldi	r30, 0xA7	; 167
    2d48:	f6 e1       	ldi	r31, 0x16	; 22
    2d4a:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__prologue_saves__+0x18>
    2d4e:	69 83       	std	Y+1, r22	; 0x01
    2d50:	7a 83       	std	Y+2, r23	; 0x02
    2d52:	8b 83       	std	Y+3, r24	; 0x03
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	2d 83       	std	Y+5, r18	; 0x05
    2d58:	3e 83       	std	Y+6, r19	; 0x06
    2d5a:	4f 83       	std	Y+7, r20	; 0x07
    2d5c:	58 87       	std	Y+8, r21	; 0x08
    2d5e:	89 e0       	ldi	r24, 0x09	; 9
    2d60:	e8 2e       	mov	r14, r24
    2d62:	f1 2c       	mov	r15, r1
    2d64:	ec 0e       	add	r14, r28
    2d66:	fd 1e       	adc	r15, r29
    2d68:	ce 01       	movw	r24, r28
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	b7 01       	movw	r22, r14
    2d6e:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2d72:	8e 01       	movw	r16, r28
    2d74:	0f 5e       	subi	r16, 0xEF	; 239
    2d76:	1f 4f       	sbci	r17, 0xFF	; 255
    2d78:	ce 01       	movw	r24, r28
    2d7a:	05 96       	adiw	r24, 0x05	; 5
    2d7c:	b8 01       	movw	r22, r16
    2d7e:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	82 30       	cpi	r24, 0x02	; 2
    2d86:	40 f0       	brcs	.+16     	; 0x2d98 <__nesf2+0x56>
    2d88:	89 89       	ldd	r24, Y+17	; 0x11
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	28 f0       	brcs	.+10     	; 0x2d98 <__nesf2+0x56>
    2d8e:	c7 01       	movw	r24, r14
    2d90:	b8 01       	movw	r22, r16
    2d92:	0e 94 a7 1a 	call	0x354e	; 0x354e <__fpcmp_parts_f>
    2d96:	01 c0       	rjmp	.+2      	; 0x2d9a <__nesf2+0x58>
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	68 96       	adiw	r28, 0x18	; 24
    2d9c:	e6 e0       	ldi	r30, 0x06	; 6
    2d9e:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__epilogue_restores__+0x18>

00002da2 <__gtsf2>:
    2da2:	a8 e1       	ldi	r26, 0x18	; 24
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e7 ed       	ldi	r30, 0xD7	; 215
    2da8:	f6 e1       	ldi	r31, 0x16	; 22
    2daa:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__prologue_saves__+0x18>
    2dae:	69 83       	std	Y+1, r22	; 0x01
    2db0:	7a 83       	std	Y+2, r23	; 0x02
    2db2:	8b 83       	std	Y+3, r24	; 0x03
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	2d 83       	std	Y+5, r18	; 0x05
    2db8:	3e 83       	std	Y+6, r19	; 0x06
    2dba:	4f 83       	std	Y+7, r20	; 0x07
    2dbc:	58 87       	std	Y+8, r21	; 0x08
    2dbe:	89 e0       	ldi	r24, 0x09	; 9
    2dc0:	e8 2e       	mov	r14, r24
    2dc2:	f1 2c       	mov	r15, r1
    2dc4:	ec 0e       	add	r14, r28
    2dc6:	fd 1e       	adc	r15, r29
    2dc8:	ce 01       	movw	r24, r28
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	b7 01       	movw	r22, r14
    2dce:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2dd2:	8e 01       	movw	r16, r28
    2dd4:	0f 5e       	subi	r16, 0xEF	; 239
    2dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd8:	ce 01       	movw	r24, r28
    2dda:	05 96       	adiw	r24, 0x05	; 5
    2ddc:	b8 01       	movw	r22, r16
    2dde:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2de2:	89 85       	ldd	r24, Y+9	; 0x09
    2de4:	82 30       	cpi	r24, 0x02	; 2
    2de6:	40 f0       	brcs	.+16     	; 0x2df8 <__gtsf2+0x56>
    2de8:	89 89       	ldd	r24, Y+17	; 0x11
    2dea:	82 30       	cpi	r24, 0x02	; 2
    2dec:	28 f0       	brcs	.+10     	; 0x2df8 <__gtsf2+0x56>
    2dee:	c7 01       	movw	r24, r14
    2df0:	b8 01       	movw	r22, r16
    2df2:	0e 94 a7 1a 	call	0x354e	; 0x354e <__fpcmp_parts_f>
    2df6:	01 c0       	rjmp	.+2      	; 0x2dfa <__gtsf2+0x58>
    2df8:	8f ef       	ldi	r24, 0xFF	; 255
    2dfa:	68 96       	adiw	r28, 0x18	; 24
    2dfc:	e6 e0       	ldi	r30, 0x06	; 6
    2dfe:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__epilogue_restores__+0x18>

00002e02 <__gesf2>:
    2e02:	a8 e1       	ldi	r26, 0x18	; 24
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e7 e0       	ldi	r30, 0x07	; 7
    2e08:	f7 e1       	ldi	r31, 0x17	; 23
    2e0a:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__prologue_saves__+0x18>
    2e0e:	69 83       	std	Y+1, r22	; 0x01
    2e10:	7a 83       	std	Y+2, r23	; 0x02
    2e12:	8b 83       	std	Y+3, r24	; 0x03
    2e14:	9c 83       	std	Y+4, r25	; 0x04
    2e16:	2d 83       	std	Y+5, r18	; 0x05
    2e18:	3e 83       	std	Y+6, r19	; 0x06
    2e1a:	4f 83       	std	Y+7, r20	; 0x07
    2e1c:	58 87       	std	Y+8, r21	; 0x08
    2e1e:	89 e0       	ldi	r24, 0x09	; 9
    2e20:	e8 2e       	mov	r14, r24
    2e22:	f1 2c       	mov	r15, r1
    2e24:	ec 0e       	add	r14, r28
    2e26:	fd 1e       	adc	r15, r29
    2e28:	ce 01       	movw	r24, r28
    2e2a:	01 96       	adiw	r24, 0x01	; 1
    2e2c:	b7 01       	movw	r22, r14
    2e2e:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2e32:	8e 01       	movw	r16, r28
    2e34:	0f 5e       	subi	r16, 0xEF	; 239
    2e36:	1f 4f       	sbci	r17, 0xFF	; 255
    2e38:	ce 01       	movw	r24, r28
    2e3a:	05 96       	adiw	r24, 0x05	; 5
    2e3c:	b8 01       	movw	r22, r16
    2e3e:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2e42:	89 85       	ldd	r24, Y+9	; 0x09
    2e44:	82 30       	cpi	r24, 0x02	; 2
    2e46:	40 f0       	brcs	.+16     	; 0x2e58 <__gesf2+0x56>
    2e48:	89 89       	ldd	r24, Y+17	; 0x11
    2e4a:	82 30       	cpi	r24, 0x02	; 2
    2e4c:	28 f0       	brcs	.+10     	; 0x2e58 <__gesf2+0x56>
    2e4e:	c7 01       	movw	r24, r14
    2e50:	b8 01       	movw	r22, r16
    2e52:	0e 94 a7 1a 	call	0x354e	; 0x354e <__fpcmp_parts_f>
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <__gesf2+0x58>
    2e58:	8f ef       	ldi	r24, 0xFF	; 255
    2e5a:	68 96       	adiw	r28, 0x18	; 24
    2e5c:	e6 e0       	ldi	r30, 0x06	; 6
    2e5e:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__epilogue_restores__+0x18>

00002e62 <__ltsf2>:
    2e62:	a8 e1       	ldi	r26, 0x18	; 24
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e7 e3       	ldi	r30, 0x37	; 55
    2e68:	f7 e1       	ldi	r31, 0x17	; 23
    2e6a:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__prologue_saves__+0x18>
    2e6e:	69 83       	std	Y+1, r22	; 0x01
    2e70:	7a 83       	std	Y+2, r23	; 0x02
    2e72:	8b 83       	std	Y+3, r24	; 0x03
    2e74:	9c 83       	std	Y+4, r25	; 0x04
    2e76:	2d 83       	std	Y+5, r18	; 0x05
    2e78:	3e 83       	std	Y+6, r19	; 0x06
    2e7a:	4f 83       	std	Y+7, r20	; 0x07
    2e7c:	58 87       	std	Y+8, r21	; 0x08
    2e7e:	89 e0       	ldi	r24, 0x09	; 9
    2e80:	e8 2e       	mov	r14, r24
    2e82:	f1 2c       	mov	r15, r1
    2e84:	ec 0e       	add	r14, r28
    2e86:	fd 1e       	adc	r15, r29
    2e88:	ce 01       	movw	r24, r28
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	b7 01       	movw	r22, r14
    2e8e:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2e92:	8e 01       	movw	r16, r28
    2e94:	0f 5e       	subi	r16, 0xEF	; 239
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	ce 01       	movw	r24, r28
    2e9a:	05 96       	adiw	r24, 0x05	; 5
    2e9c:	b8 01       	movw	r22, r16
    2e9e:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	40 f0       	brcs	.+16     	; 0x2eb8 <__ltsf2+0x56>
    2ea8:	89 89       	ldd	r24, Y+17	; 0x11
    2eaa:	82 30       	cpi	r24, 0x02	; 2
    2eac:	28 f0       	brcs	.+10     	; 0x2eb8 <__ltsf2+0x56>
    2eae:	c7 01       	movw	r24, r14
    2eb0:	b8 01       	movw	r22, r16
    2eb2:	0e 94 a7 1a 	call	0x354e	; 0x354e <__fpcmp_parts_f>
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <__ltsf2+0x58>
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	68 96       	adiw	r28, 0x18	; 24
    2ebc:	e6 e0       	ldi	r30, 0x06	; 6
    2ebe:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <__epilogue_restores__+0x18>

00002ec2 <__floatsisf>:
    2ec2:	a8 e0       	ldi	r26, 0x08	; 8
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e7 e6       	ldi	r30, 0x67	; 103
    2ec8:	f7 e1       	ldi	r31, 0x17	; 23
    2eca:	0c 94 00 3b 	jmp	0x7600	; 0x7600 <__prologue_saves__+0x12>
    2ece:	9b 01       	movw	r18, r22
    2ed0:	ac 01       	movw	r20, r24
    2ed2:	83 e0       	ldi	r24, 0x03	; 3
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	da 01       	movw	r26, r20
    2ed8:	c9 01       	movw	r24, r18
    2eda:	88 27       	eor	r24, r24
    2edc:	b7 fd       	sbrc	r27, 7
    2ede:	83 95       	inc	r24
    2ee0:	99 27       	eor	r25, r25
    2ee2:	aa 27       	eor	r26, r26
    2ee4:	bb 27       	eor	r27, r27
    2ee6:	b8 2e       	mov	r11, r24
    2ee8:	21 15       	cp	r18, r1
    2eea:	31 05       	cpc	r19, r1
    2eec:	41 05       	cpc	r20, r1
    2eee:	51 05       	cpc	r21, r1
    2ef0:	19 f4       	brne	.+6      	; 0x2ef8 <__floatsisf+0x36>
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	89 83       	std	Y+1, r24	; 0x01
    2ef6:	3a c0       	rjmp	.+116    	; 0x2f6c <__floatsisf+0xaa>
    2ef8:	88 23       	and	r24, r24
    2efa:	a9 f0       	breq	.+42     	; 0x2f26 <__floatsisf+0x64>
    2efc:	20 30       	cpi	r18, 0x00	; 0
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	38 07       	cpc	r19, r24
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	48 07       	cpc	r20, r24
    2f06:	80 e8       	ldi	r24, 0x80	; 128
    2f08:	58 07       	cpc	r21, r24
    2f0a:	29 f4       	brne	.+10     	; 0x2f16 <__floatsisf+0x54>
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	9f ec       	ldi	r25, 0xCF	; 207
    2f14:	30 c0       	rjmp	.+96     	; 0x2f76 <__floatsisf+0xb4>
    2f16:	ee 24       	eor	r14, r14
    2f18:	ff 24       	eor	r15, r15
    2f1a:	87 01       	movw	r16, r14
    2f1c:	e2 1a       	sub	r14, r18
    2f1e:	f3 0a       	sbc	r15, r19
    2f20:	04 0b       	sbc	r16, r20
    2f22:	15 0b       	sbc	r17, r21
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <__floatsisf+0x68>
    2f26:	79 01       	movw	r14, r18
    2f28:	8a 01       	movw	r16, r20
    2f2a:	8e e1       	ldi	r24, 0x1E	; 30
    2f2c:	c8 2e       	mov	r12, r24
    2f2e:	d1 2c       	mov	r13, r1
    2f30:	dc 82       	std	Y+4, r13	; 0x04
    2f32:	cb 82       	std	Y+3, r12	; 0x03
    2f34:	ed 82       	std	Y+5, r14	; 0x05
    2f36:	fe 82       	std	Y+6, r15	; 0x06
    2f38:	0f 83       	std	Y+7, r16	; 0x07
    2f3a:	18 87       	std	Y+8, r17	; 0x08
    2f3c:	c8 01       	movw	r24, r16
    2f3e:	b7 01       	movw	r22, r14
    2f40:	0e 94 0b 19 	call	0x3216	; 0x3216 <__clzsi2>
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	18 16       	cp	r1, r24
    2f48:	19 06       	cpc	r1, r25
    2f4a:	84 f4       	brge	.+32     	; 0x2f6c <__floatsisf+0xaa>
    2f4c:	08 2e       	mov	r0, r24
    2f4e:	04 c0       	rjmp	.+8      	; 0x2f58 <__floatsisf+0x96>
    2f50:	ee 0c       	add	r14, r14
    2f52:	ff 1c       	adc	r15, r15
    2f54:	00 1f       	adc	r16, r16
    2f56:	11 1f       	adc	r17, r17
    2f58:	0a 94       	dec	r0
    2f5a:	d2 f7       	brpl	.-12     	; 0x2f50 <__floatsisf+0x8e>
    2f5c:	ed 82       	std	Y+5, r14	; 0x05
    2f5e:	fe 82       	std	Y+6, r15	; 0x06
    2f60:	0f 83       	std	Y+7, r16	; 0x07
    2f62:	18 87       	std	Y+8, r17	; 0x08
    2f64:	c8 1a       	sub	r12, r24
    2f66:	d9 0a       	sbc	r13, r25
    2f68:	dc 82       	std	Y+4, r13	; 0x04
    2f6a:	cb 82       	std	Y+3, r12	; 0x03
    2f6c:	ba 82       	std	Y+2, r11	; 0x02
    2f6e:	ce 01       	movw	r24, r28
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__pack_f>
    2f76:	28 96       	adiw	r28, 0x08	; 8
    2f78:	e9 e0       	ldi	r30, 0x09	; 9
    2f7a:	0c 94 1c 3b 	jmp	0x7638	; 0x7638 <__epilogue_restores__+0x12>

00002f7e <__fixsfsi>:
    2f7e:	ac e0       	ldi	r26, 0x0C	; 12
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e5 ec       	ldi	r30, 0xC5	; 197
    2f84:	f7 e1       	ldi	r31, 0x17	; 23
    2f86:	0c 94 07 3b 	jmp	0x760e	; 0x760e <__prologue_saves__+0x20>
    2f8a:	69 83       	std	Y+1, r22	; 0x01
    2f8c:	7a 83       	std	Y+2, r23	; 0x02
    2f8e:	8b 83       	std	Y+3, r24	; 0x03
    2f90:	9c 83       	std	Y+4, r25	; 0x04
    2f92:	ce 01       	movw	r24, r28
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	be 01       	movw	r22, r28
    2f98:	6b 5f       	subi	r22, 0xFB	; 251
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9c:	0e 94 2f 1a 	call	0x345e	; 0x345e <__unpack_f>
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	82 30       	cpi	r24, 0x02	; 2
    2fa4:	61 f1       	breq	.+88     	; 0x2ffe <__fixsfsi+0x80>
    2fa6:	82 30       	cpi	r24, 0x02	; 2
    2fa8:	50 f1       	brcs	.+84     	; 0x2ffe <__fixsfsi+0x80>
    2faa:	84 30       	cpi	r24, 0x04	; 4
    2fac:	21 f4       	brne	.+8      	; 0x2fb6 <__fixsfsi+0x38>
    2fae:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb0:	88 23       	and	r24, r24
    2fb2:	51 f1       	breq	.+84     	; 0x3008 <__fixsfsi+0x8a>
    2fb4:	2e c0       	rjmp	.+92     	; 0x3012 <__fixsfsi+0x94>
    2fb6:	2f 81       	ldd	r18, Y+7	; 0x07
    2fb8:	38 85       	ldd	r19, Y+8	; 0x08
    2fba:	37 fd       	sbrc	r19, 7
    2fbc:	20 c0       	rjmp	.+64     	; 0x2ffe <__fixsfsi+0x80>
    2fbe:	6e 81       	ldd	r22, Y+6	; 0x06
    2fc0:	2f 31       	cpi	r18, 0x1F	; 31
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	1c f0       	brlt	.+6      	; 0x2fcc <__fixsfsi+0x4e>
    2fc6:	66 23       	and	r22, r22
    2fc8:	f9 f0       	breq	.+62     	; 0x3008 <__fixsfsi+0x8a>
    2fca:	23 c0       	rjmp	.+70     	; 0x3012 <__fixsfsi+0x94>
    2fcc:	8e e1       	ldi	r24, 0x1E	; 30
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	82 1b       	sub	r24, r18
    2fd2:	93 0b       	sbc	r25, r19
    2fd4:	29 85       	ldd	r18, Y+9	; 0x09
    2fd6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fd8:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fda:	5c 85       	ldd	r21, Y+12	; 0x0c
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <__fixsfsi+0x68>
    2fde:	56 95       	lsr	r21
    2fe0:	47 95       	ror	r20
    2fe2:	37 95       	ror	r19
    2fe4:	27 95       	ror	r18
    2fe6:	8a 95       	dec	r24
    2fe8:	d2 f7       	brpl	.-12     	; 0x2fde <__fixsfsi+0x60>
    2fea:	66 23       	and	r22, r22
    2fec:	b1 f0       	breq	.+44     	; 0x301a <__fixsfsi+0x9c>
    2fee:	50 95       	com	r21
    2ff0:	40 95       	com	r20
    2ff2:	30 95       	com	r19
    2ff4:	21 95       	neg	r18
    2ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff8:	4f 4f       	sbci	r20, 0xFF	; 255
    2ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    2ffc:	0e c0       	rjmp	.+28     	; 0x301a <__fixsfsi+0x9c>
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e0       	ldi	r20, 0x00	; 0
    3004:	50 e0       	ldi	r21, 0x00	; 0
    3006:	09 c0       	rjmp	.+18     	; 0x301a <__fixsfsi+0x9c>
    3008:	2f ef       	ldi	r18, 0xFF	; 255
    300a:	3f ef       	ldi	r19, 0xFF	; 255
    300c:	4f ef       	ldi	r20, 0xFF	; 255
    300e:	5f e7       	ldi	r21, 0x7F	; 127
    3010:	04 c0       	rjmp	.+8      	; 0x301a <__fixsfsi+0x9c>
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	50 e8       	ldi	r21, 0x80	; 128
    301a:	b9 01       	movw	r22, r18
    301c:	ca 01       	movw	r24, r20
    301e:	2c 96       	adiw	r28, 0x0c	; 12
    3020:	e2 e0       	ldi	r30, 0x02	; 2
    3022:	0c 94 23 3b 	jmp	0x7646	; 0x7646 <__epilogue_restores__+0x20>

00003026 <__floatunsisf>:
    3026:	a8 e0       	ldi	r26, 0x08	; 8
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e9 e1       	ldi	r30, 0x19	; 25
    302c:	f8 e1       	ldi	r31, 0x18	; 24
    302e:	0c 94 ff 3a 	jmp	0x75fe	; 0x75fe <__prologue_saves__+0x10>
    3032:	7b 01       	movw	r14, r22
    3034:	8c 01       	movw	r16, r24
    3036:	61 15       	cp	r22, r1
    3038:	71 05       	cpc	r23, r1
    303a:	81 05       	cpc	r24, r1
    303c:	91 05       	cpc	r25, r1
    303e:	19 f4       	brne	.+6      	; 0x3046 <__floatunsisf+0x20>
    3040:	82 e0       	ldi	r24, 0x02	; 2
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	60 c0       	rjmp	.+192    	; 0x3106 <__floatunsisf+0xe0>
    3046:	83 e0       	ldi	r24, 0x03	; 3
    3048:	89 83       	std	Y+1, r24	; 0x01
    304a:	8e e1       	ldi	r24, 0x1E	; 30
    304c:	c8 2e       	mov	r12, r24
    304e:	d1 2c       	mov	r13, r1
    3050:	dc 82       	std	Y+4, r13	; 0x04
    3052:	cb 82       	std	Y+3, r12	; 0x03
    3054:	ed 82       	std	Y+5, r14	; 0x05
    3056:	fe 82       	std	Y+6, r15	; 0x06
    3058:	0f 83       	std	Y+7, r16	; 0x07
    305a:	18 87       	std	Y+8, r17	; 0x08
    305c:	c8 01       	movw	r24, r16
    305e:	b7 01       	movw	r22, r14
    3060:	0e 94 0b 19 	call	0x3216	; 0x3216 <__clzsi2>
    3064:	fc 01       	movw	r30, r24
    3066:	31 97       	sbiw	r30, 0x01	; 1
    3068:	f7 ff       	sbrs	r31, 7
    306a:	3b c0       	rjmp	.+118    	; 0x30e2 <__floatunsisf+0xbc>
    306c:	22 27       	eor	r18, r18
    306e:	33 27       	eor	r19, r19
    3070:	2e 1b       	sub	r18, r30
    3072:	3f 0b       	sbc	r19, r31
    3074:	57 01       	movw	r10, r14
    3076:	68 01       	movw	r12, r16
    3078:	02 2e       	mov	r0, r18
    307a:	04 c0       	rjmp	.+8      	; 0x3084 <__floatunsisf+0x5e>
    307c:	d6 94       	lsr	r13
    307e:	c7 94       	ror	r12
    3080:	b7 94       	ror	r11
    3082:	a7 94       	ror	r10
    3084:	0a 94       	dec	r0
    3086:	d2 f7       	brpl	.-12     	; 0x307c <__floatunsisf+0x56>
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	50 e0       	ldi	r21, 0x00	; 0
    308c:	60 e0       	ldi	r22, 0x00	; 0
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	a0 e0       	ldi	r26, 0x00	; 0
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	04 c0       	rjmp	.+8      	; 0x30a2 <__floatunsisf+0x7c>
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	aa 1f       	adc	r26, r26
    30a0:	bb 1f       	adc	r27, r27
    30a2:	2a 95       	dec	r18
    30a4:	d2 f7       	brpl	.-12     	; 0x309a <__floatunsisf+0x74>
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	a1 09       	sbc	r26, r1
    30aa:	b1 09       	sbc	r27, r1
    30ac:	8e 21       	and	r24, r14
    30ae:	9f 21       	and	r25, r15
    30b0:	a0 23       	and	r26, r16
    30b2:	b1 23       	and	r27, r17
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	a1 05       	cpc	r26, r1
    30b8:	b1 05       	cpc	r27, r1
    30ba:	21 f0       	breq	.+8      	; 0x30c4 <__floatunsisf+0x9e>
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	50 e0       	ldi	r21, 0x00	; 0
    30c0:	60 e0       	ldi	r22, 0x00	; 0
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	4a 29       	or	r20, r10
    30c6:	5b 29       	or	r21, r11
    30c8:	6c 29       	or	r22, r12
    30ca:	7d 29       	or	r23, r13
    30cc:	4d 83       	std	Y+5, r20	; 0x05
    30ce:	5e 83       	std	Y+6, r21	; 0x06
    30d0:	6f 83       	std	Y+7, r22	; 0x07
    30d2:	78 87       	std	Y+8, r23	; 0x08
    30d4:	8e e1       	ldi	r24, 0x1E	; 30
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	8e 1b       	sub	r24, r30
    30da:	9f 0b       	sbc	r25, r31
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
    30e0:	12 c0       	rjmp	.+36     	; 0x3106 <__floatunsisf+0xe0>
    30e2:	30 97       	sbiw	r30, 0x00	; 0
    30e4:	81 f0       	breq	.+32     	; 0x3106 <__floatunsisf+0xe0>
    30e6:	0e 2e       	mov	r0, r30
    30e8:	04 c0       	rjmp	.+8      	; 0x30f2 <__floatunsisf+0xcc>
    30ea:	ee 0c       	add	r14, r14
    30ec:	ff 1c       	adc	r15, r15
    30ee:	00 1f       	adc	r16, r16
    30f0:	11 1f       	adc	r17, r17
    30f2:	0a 94       	dec	r0
    30f4:	d2 f7       	brpl	.-12     	; 0x30ea <__floatunsisf+0xc4>
    30f6:	ed 82       	std	Y+5, r14	; 0x05
    30f8:	fe 82       	std	Y+6, r15	; 0x06
    30fa:	0f 83       	std	Y+7, r16	; 0x07
    30fc:	18 87       	std	Y+8, r17	; 0x08
    30fe:	ce 1a       	sub	r12, r30
    3100:	df 0a       	sbc	r13, r31
    3102:	dc 82       	std	Y+4, r13	; 0x04
    3104:	cb 82       	std	Y+3, r12	; 0x03
    3106:	1a 82       	std	Y+2, r1	; 0x02
    3108:	ce 01       	movw	r24, r28
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__pack_f>
    3110:	28 96       	adiw	r28, 0x08	; 8
    3112:	ea e0       	ldi	r30, 0x0A	; 10
    3114:	0c 94 1b 3b 	jmp	0x7636	; 0x7636 <__epilogue_restores__+0x10>

00003118 <__lshrdi3>:
    3118:	ef 92       	push	r14
    311a:	ff 92       	push	r15
    311c:	0f 93       	push	r16
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	60 97       	sbiw	r28, 0x10	; 16
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	a8 2f       	mov	r26, r24
    3134:	00 23       	and	r16, r16
    3136:	09 f4       	brne	.+2      	; 0x313a <__lshrdi3+0x22>
    3138:	61 c0       	rjmp	.+194    	; 0x31fc <__lshrdi3+0xe4>
    313a:	7e 01       	movw	r14, r28
    313c:	08 94       	sec
    313e:	e1 1c       	adc	r14, r1
    3140:	f1 1c       	adc	r15, r1
    3142:	88 e0       	ldi	r24, 0x08	; 8
    3144:	f7 01       	movw	r30, r14
    3146:	11 92       	st	Z+, r1
    3148:	8a 95       	dec	r24
    314a:	e9 f7       	brne	.-6      	; 0x3146 <__lshrdi3+0x2e>
    314c:	29 83       	std	Y+1, r18	; 0x01
    314e:	3a 83       	std	Y+2, r19	; 0x02
    3150:	4b 83       	std	Y+3, r20	; 0x03
    3152:	5c 83       	std	Y+4, r21	; 0x04
    3154:	6d 83       	std	Y+5, r22	; 0x05
    3156:	7e 83       	std	Y+6, r23	; 0x06
    3158:	af 83       	std	Y+7, r26	; 0x07
    315a:	98 87       	std	Y+8, r25	; 0x08
    315c:	80 e2       	ldi	r24, 0x20	; 32
    315e:	80 1b       	sub	r24, r16
    3160:	e8 2f       	mov	r30, r24
    3162:	ff 27       	eor	r31, r31
    3164:	e7 fd       	sbrc	r30, 7
    3166:	f0 95       	com	r31
    3168:	4d 81       	ldd	r20, Y+5	; 0x05
    316a:	5e 81       	ldd	r21, Y+6	; 0x06
    316c:	6f 81       	ldd	r22, Y+7	; 0x07
    316e:	78 85       	ldd	r23, Y+8	; 0x08
    3170:	18 16       	cp	r1, r24
    3172:	84 f0       	brlt	.+32     	; 0x3194 <__lshrdi3+0x7c>
    3174:	1d 86       	std	Y+13, r1	; 0x0d
    3176:	1e 86       	std	Y+14, r1	; 0x0e
    3178:	1f 86       	std	Y+15, r1	; 0x0f
    317a:	18 8a       	std	Y+16, r1	; 0x10
    317c:	88 27       	eor	r24, r24
    317e:	99 27       	eor	r25, r25
    3180:	8e 1b       	sub	r24, r30
    3182:	9f 0b       	sbc	r25, r31
    3184:	04 c0       	rjmp	.+8      	; 0x318e <__lshrdi3+0x76>
    3186:	76 95       	lsr	r23
    3188:	67 95       	ror	r22
    318a:	57 95       	ror	r21
    318c:	47 95       	ror	r20
    318e:	8a 95       	dec	r24
    3190:	d2 f7       	brpl	.-12     	; 0x3186 <__lshrdi3+0x6e>
    3192:	28 c0       	rjmp	.+80     	; 0x31e4 <__lshrdi3+0xcc>
    3194:	20 2f       	mov	r18, r16
    3196:	33 27       	eor	r19, r19
    3198:	27 fd       	sbrc	r18, 7
    319a:	30 95       	com	r19
    319c:	db 01       	movw	r26, r22
    319e:	ca 01       	movw	r24, r20
    31a0:	02 2e       	mov	r0, r18
    31a2:	04 c0       	rjmp	.+8      	; 0x31ac <__lshrdi3+0x94>
    31a4:	b6 95       	lsr	r27
    31a6:	a7 95       	ror	r26
    31a8:	97 95       	ror	r25
    31aa:	87 95       	ror	r24
    31ac:	0a 94       	dec	r0
    31ae:	d2 f7       	brpl	.-12     	; 0x31a4 <__lshrdi3+0x8c>
    31b0:	8d 87       	std	Y+13, r24	; 0x0d
    31b2:	9e 87       	std	Y+14, r25	; 0x0e
    31b4:	af 87       	std	Y+15, r26	; 0x0f
    31b6:	b8 8b       	std	Y+16, r27	; 0x10
    31b8:	04 c0       	rjmp	.+8      	; 0x31c2 <__lshrdi3+0xaa>
    31ba:	44 0f       	add	r20, r20
    31bc:	55 1f       	adc	r21, r21
    31be:	66 1f       	adc	r22, r22
    31c0:	77 1f       	adc	r23, r23
    31c2:	ea 95       	dec	r30
    31c4:	d2 f7       	brpl	.-12     	; 0x31ba <__lshrdi3+0xa2>
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	ab 81       	ldd	r26, Y+3	; 0x03
    31cc:	bc 81       	ldd	r27, Y+4	; 0x04
    31ce:	04 c0       	rjmp	.+8      	; 0x31d8 <__lshrdi3+0xc0>
    31d0:	b6 95       	lsr	r27
    31d2:	a7 95       	ror	r26
    31d4:	97 95       	ror	r25
    31d6:	87 95       	ror	r24
    31d8:	2a 95       	dec	r18
    31da:	d2 f7       	brpl	.-12     	; 0x31d0 <__lshrdi3+0xb8>
    31dc:	48 2b       	or	r20, r24
    31de:	59 2b       	or	r21, r25
    31e0:	6a 2b       	or	r22, r26
    31e2:	7b 2b       	or	r23, r27
    31e4:	49 87       	std	Y+9, r20	; 0x09
    31e6:	5a 87       	std	Y+10, r21	; 0x0a
    31e8:	6b 87       	std	Y+11, r22	; 0x0b
    31ea:	7c 87       	std	Y+12, r23	; 0x0c
    31ec:	29 85       	ldd	r18, Y+9	; 0x09
    31ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    31f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    31f2:	5c 85       	ldd	r21, Y+12	; 0x0c
    31f4:	6d 85       	ldd	r22, Y+13	; 0x0d
    31f6:	7e 85       	ldd	r23, Y+14	; 0x0e
    31f8:	af 85       	ldd	r26, Y+15	; 0x0f
    31fa:	98 89       	ldd	r25, Y+16	; 0x10
    31fc:	8a 2f       	mov	r24, r26
    31fe:	60 96       	adiw	r28, 0x10	; 16
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	0f 91       	pop	r16
    3210:	ff 90       	pop	r15
    3212:	ef 90       	pop	r14
    3214:	08 95       	ret

00003216 <__clzsi2>:
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	7b 01       	movw	r14, r22
    3220:	8c 01       	movw	r16, r24
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	e8 16       	cp	r14, r24
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	f8 06       	cpc	r15, r24
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	08 07       	cpc	r16, r24
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	18 07       	cpc	r17, r24
    3232:	88 f4       	brcc	.+34     	; 0x3256 <__clzsi2+0x40>
    3234:	8f ef       	ldi	r24, 0xFF	; 255
    3236:	e8 16       	cp	r14, r24
    3238:	f1 04       	cpc	r15, r1
    323a:	01 05       	cpc	r16, r1
    323c:	11 05       	cpc	r17, r1
    323e:	31 f0       	breq	.+12     	; 0x324c <__clzsi2+0x36>
    3240:	28 f0       	brcs	.+10     	; 0x324c <__clzsi2+0x36>
    3242:	88 e0       	ldi	r24, 0x08	; 8
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a0 e0       	ldi	r26, 0x00	; 0
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	17 c0       	rjmp	.+46     	; 0x327a <__clzsi2+0x64>
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	a0 e0       	ldi	r26, 0x00	; 0
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	12 c0       	rjmp	.+36     	; 0x327a <__clzsi2+0x64>
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	e8 16       	cp	r14, r24
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	f8 06       	cpc	r15, r24
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	08 07       	cpc	r16, r24
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	18 07       	cpc	r17, r24
    3266:	28 f0       	brcs	.+10     	; 0x3272 <__clzsi2+0x5c>
    3268:	88 e1       	ldi	r24, 0x18	; 24
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	a0 e0       	ldi	r26, 0x00	; 0
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	04 c0       	rjmp	.+8      	; 0x327a <__clzsi2+0x64>
    3272:	80 e1       	ldi	r24, 0x10	; 16
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	a0 e0       	ldi	r26, 0x00	; 0
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	20 e2       	ldi	r18, 0x20	; 32
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e0       	ldi	r20, 0x00	; 0
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	28 1b       	sub	r18, r24
    3284:	39 0b       	sbc	r19, r25
    3286:	4a 0b       	sbc	r20, r26
    3288:	5b 0b       	sbc	r21, r27
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <__clzsi2+0x7e>
    328c:	16 95       	lsr	r17
    328e:	07 95       	ror	r16
    3290:	f7 94       	ror	r15
    3292:	e7 94       	ror	r14
    3294:	8a 95       	dec	r24
    3296:	d2 f7       	brpl	.-12     	; 0x328c <__clzsi2+0x76>
    3298:	f7 01       	movw	r30, r14
    329a:	e2 56       	subi	r30, 0x62	; 98
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	80 81       	ld	r24, Z
    32a0:	28 1b       	sub	r18, r24
    32a2:	31 09       	sbc	r19, r1
    32a4:	41 09       	sbc	r20, r1
    32a6:	51 09       	sbc	r21, r1
    32a8:	c9 01       	movw	r24, r18
    32aa:	1f 91       	pop	r17
    32ac:	0f 91       	pop	r16
    32ae:	ff 90       	pop	r15
    32b0:	ef 90       	pop	r14
    32b2:	08 95       	ret

000032b4 <__pack_f>:
    32b4:	df 92       	push	r13
    32b6:	ef 92       	push	r14
    32b8:	ff 92       	push	r15
    32ba:	0f 93       	push	r16
    32bc:	1f 93       	push	r17
    32be:	fc 01       	movw	r30, r24
    32c0:	e4 80       	ldd	r14, Z+4	; 0x04
    32c2:	f5 80       	ldd	r15, Z+5	; 0x05
    32c4:	06 81       	ldd	r16, Z+6	; 0x06
    32c6:	17 81       	ldd	r17, Z+7	; 0x07
    32c8:	d1 80       	ldd	r13, Z+1	; 0x01
    32ca:	80 81       	ld	r24, Z
    32cc:	82 30       	cpi	r24, 0x02	; 2
    32ce:	48 f4       	brcc	.+18     	; 0x32e2 <__pack_f+0x2e>
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	a0 e1       	ldi	r26, 0x10	; 16
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	e8 2a       	or	r14, r24
    32da:	f9 2a       	or	r15, r25
    32dc:	0a 2b       	or	r16, r26
    32de:	1b 2b       	or	r17, r27
    32e0:	a5 c0       	rjmp	.+330    	; 0x342c <__pack_f+0x178>
    32e2:	84 30       	cpi	r24, 0x04	; 4
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <__pack_f+0x34>
    32e6:	9f c0       	rjmp	.+318    	; 0x3426 <__pack_f+0x172>
    32e8:	82 30       	cpi	r24, 0x02	; 2
    32ea:	21 f4       	brne	.+8      	; 0x32f4 <__pack_f+0x40>
    32ec:	ee 24       	eor	r14, r14
    32ee:	ff 24       	eor	r15, r15
    32f0:	87 01       	movw	r16, r14
    32f2:	05 c0       	rjmp	.+10     	; 0x32fe <__pack_f+0x4a>
    32f4:	e1 14       	cp	r14, r1
    32f6:	f1 04       	cpc	r15, r1
    32f8:	01 05       	cpc	r16, r1
    32fa:	11 05       	cpc	r17, r1
    32fc:	19 f4       	brne	.+6      	; 0x3304 <__pack_f+0x50>
    32fe:	e0 e0       	ldi	r30, 0x00	; 0
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	96 c0       	rjmp	.+300    	; 0x3430 <__pack_f+0x17c>
    3304:	62 81       	ldd	r22, Z+2	; 0x02
    3306:	73 81       	ldd	r23, Z+3	; 0x03
    3308:	9f ef       	ldi	r25, 0xFF	; 255
    330a:	62 38       	cpi	r22, 0x82	; 130
    330c:	79 07       	cpc	r23, r25
    330e:	0c f0       	brlt	.+2      	; 0x3312 <__pack_f+0x5e>
    3310:	5b c0       	rjmp	.+182    	; 0x33c8 <__pack_f+0x114>
    3312:	22 e8       	ldi	r18, 0x82	; 130
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	26 1b       	sub	r18, r22
    3318:	37 0b       	sbc	r19, r23
    331a:	2a 31       	cpi	r18, 0x1A	; 26
    331c:	31 05       	cpc	r19, r1
    331e:	2c f0       	brlt	.+10     	; 0x332a <__pack_f+0x76>
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	2a c0       	rjmp	.+84     	; 0x337e <__pack_f+0xca>
    332a:	b8 01       	movw	r22, r16
    332c:	a7 01       	movw	r20, r14
    332e:	02 2e       	mov	r0, r18
    3330:	04 c0       	rjmp	.+8      	; 0x333a <__pack_f+0x86>
    3332:	76 95       	lsr	r23
    3334:	67 95       	ror	r22
    3336:	57 95       	ror	r21
    3338:	47 95       	ror	r20
    333a:	0a 94       	dec	r0
    333c:	d2 f7       	brpl	.-12     	; 0x3332 <__pack_f+0x7e>
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	a0 e0       	ldi	r26, 0x00	; 0
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	04 c0       	rjmp	.+8      	; 0x3350 <__pack_f+0x9c>
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	aa 1f       	adc	r26, r26
    334e:	bb 1f       	adc	r27, r27
    3350:	2a 95       	dec	r18
    3352:	d2 f7       	brpl	.-12     	; 0x3348 <__pack_f+0x94>
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	a1 09       	sbc	r26, r1
    3358:	b1 09       	sbc	r27, r1
    335a:	8e 21       	and	r24, r14
    335c:	9f 21       	and	r25, r15
    335e:	a0 23       	and	r26, r16
    3360:	b1 23       	and	r27, r17
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	a1 05       	cpc	r26, r1
    3366:	b1 05       	cpc	r27, r1
    3368:	21 f0       	breq	.+8      	; 0x3372 <__pack_f+0xbe>
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	a0 e0       	ldi	r26, 0x00	; 0
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	9a 01       	movw	r18, r20
    3374:	ab 01       	movw	r20, r22
    3376:	28 2b       	or	r18, r24
    3378:	39 2b       	or	r19, r25
    337a:	4a 2b       	or	r20, r26
    337c:	5b 2b       	or	r21, r27
    337e:	da 01       	movw	r26, r20
    3380:	c9 01       	movw	r24, r18
    3382:	8f 77       	andi	r24, 0x7F	; 127
    3384:	90 70       	andi	r25, 0x00	; 0
    3386:	a0 70       	andi	r26, 0x00	; 0
    3388:	b0 70       	andi	r27, 0x00	; 0
    338a:	80 34       	cpi	r24, 0x40	; 64
    338c:	91 05       	cpc	r25, r1
    338e:	a1 05       	cpc	r26, r1
    3390:	b1 05       	cpc	r27, r1
    3392:	39 f4       	brne	.+14     	; 0x33a2 <__pack_f+0xee>
    3394:	27 ff       	sbrs	r18, 7
    3396:	09 c0       	rjmp	.+18     	; 0x33aa <__pack_f+0xf6>
    3398:	20 5c       	subi	r18, 0xC0	; 192
    339a:	3f 4f       	sbci	r19, 0xFF	; 255
    339c:	4f 4f       	sbci	r20, 0xFF	; 255
    339e:	5f 4f       	sbci	r21, 0xFF	; 255
    33a0:	04 c0       	rjmp	.+8      	; 0x33aa <__pack_f+0xf6>
    33a2:	21 5c       	subi	r18, 0xC1	; 193
    33a4:	3f 4f       	sbci	r19, 0xFF	; 255
    33a6:	4f 4f       	sbci	r20, 0xFF	; 255
    33a8:	5f 4f       	sbci	r21, 0xFF	; 255
    33aa:	e0 e0       	ldi	r30, 0x00	; 0
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	20 30       	cpi	r18, 0x00	; 0
    33b0:	a0 e0       	ldi	r26, 0x00	; 0
    33b2:	3a 07       	cpc	r19, r26
    33b4:	a0 e0       	ldi	r26, 0x00	; 0
    33b6:	4a 07       	cpc	r20, r26
    33b8:	a0 e4       	ldi	r26, 0x40	; 64
    33ba:	5a 07       	cpc	r21, r26
    33bc:	10 f0       	brcs	.+4      	; 0x33c2 <__pack_f+0x10e>
    33be:	e1 e0       	ldi	r30, 0x01	; 1
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	79 01       	movw	r14, r18
    33c4:	8a 01       	movw	r16, r20
    33c6:	27 c0       	rjmp	.+78     	; 0x3416 <__pack_f+0x162>
    33c8:	60 38       	cpi	r22, 0x80	; 128
    33ca:	71 05       	cpc	r23, r1
    33cc:	64 f5       	brge	.+88     	; 0x3426 <__pack_f+0x172>
    33ce:	fb 01       	movw	r30, r22
    33d0:	e1 58       	subi	r30, 0x81	; 129
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	d8 01       	movw	r26, r16
    33d6:	c7 01       	movw	r24, r14
    33d8:	8f 77       	andi	r24, 0x7F	; 127
    33da:	90 70       	andi	r25, 0x00	; 0
    33dc:	a0 70       	andi	r26, 0x00	; 0
    33de:	b0 70       	andi	r27, 0x00	; 0
    33e0:	80 34       	cpi	r24, 0x40	; 64
    33e2:	91 05       	cpc	r25, r1
    33e4:	a1 05       	cpc	r26, r1
    33e6:	b1 05       	cpc	r27, r1
    33e8:	39 f4       	brne	.+14     	; 0x33f8 <__pack_f+0x144>
    33ea:	e7 fe       	sbrs	r14, 7
    33ec:	0d c0       	rjmp	.+26     	; 0x3408 <__pack_f+0x154>
    33ee:	80 e4       	ldi	r24, 0x40	; 64
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	a0 e0       	ldi	r26, 0x00	; 0
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	04 c0       	rjmp	.+8      	; 0x3400 <__pack_f+0x14c>
    33f8:	8f e3       	ldi	r24, 0x3F	; 63
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	a0 e0       	ldi	r26, 0x00	; 0
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	e8 0e       	add	r14, r24
    3402:	f9 1e       	adc	r15, r25
    3404:	0a 1f       	adc	r16, r26
    3406:	1b 1f       	adc	r17, r27
    3408:	17 ff       	sbrs	r17, 7
    340a:	05 c0       	rjmp	.+10     	; 0x3416 <__pack_f+0x162>
    340c:	16 95       	lsr	r17
    340e:	07 95       	ror	r16
    3410:	f7 94       	ror	r15
    3412:	e7 94       	ror	r14
    3414:	31 96       	adiw	r30, 0x01	; 1
    3416:	87 e0       	ldi	r24, 0x07	; 7
    3418:	16 95       	lsr	r17
    341a:	07 95       	ror	r16
    341c:	f7 94       	ror	r15
    341e:	e7 94       	ror	r14
    3420:	8a 95       	dec	r24
    3422:	d1 f7       	brne	.-12     	; 0x3418 <__pack_f+0x164>
    3424:	05 c0       	rjmp	.+10     	; 0x3430 <__pack_f+0x17c>
    3426:	ee 24       	eor	r14, r14
    3428:	ff 24       	eor	r15, r15
    342a:	87 01       	movw	r16, r14
    342c:	ef ef       	ldi	r30, 0xFF	; 255
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	6e 2f       	mov	r22, r30
    3432:	67 95       	ror	r22
    3434:	66 27       	eor	r22, r22
    3436:	67 95       	ror	r22
    3438:	90 2f       	mov	r25, r16
    343a:	9f 77       	andi	r25, 0x7F	; 127
    343c:	d7 94       	ror	r13
    343e:	dd 24       	eor	r13, r13
    3440:	d7 94       	ror	r13
    3442:	8e 2f       	mov	r24, r30
    3444:	86 95       	lsr	r24
    3446:	49 2f       	mov	r20, r25
    3448:	46 2b       	or	r20, r22
    344a:	58 2f       	mov	r21, r24
    344c:	5d 29       	or	r21, r13
    344e:	b7 01       	movw	r22, r14
    3450:	ca 01       	movw	r24, r20
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	df 90       	pop	r13
    345c:	08 95       	ret

0000345e <__unpack_f>:
    345e:	fc 01       	movw	r30, r24
    3460:	db 01       	movw	r26, r22
    3462:	40 81       	ld	r20, Z
    3464:	51 81       	ldd	r21, Z+1	; 0x01
    3466:	22 81       	ldd	r18, Z+2	; 0x02
    3468:	62 2f       	mov	r22, r18
    346a:	6f 77       	andi	r22, 0x7F	; 127
    346c:	70 e0       	ldi	r23, 0x00	; 0
    346e:	22 1f       	adc	r18, r18
    3470:	22 27       	eor	r18, r18
    3472:	22 1f       	adc	r18, r18
    3474:	93 81       	ldd	r25, Z+3	; 0x03
    3476:	89 2f       	mov	r24, r25
    3478:	88 0f       	add	r24, r24
    347a:	82 2b       	or	r24, r18
    347c:	28 2f       	mov	r18, r24
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	99 1f       	adc	r25, r25
    3482:	99 27       	eor	r25, r25
    3484:	99 1f       	adc	r25, r25
    3486:	11 96       	adiw	r26, 0x01	; 1
    3488:	9c 93       	st	X, r25
    348a:	11 97       	sbiw	r26, 0x01	; 1
    348c:	21 15       	cp	r18, r1
    348e:	31 05       	cpc	r19, r1
    3490:	a9 f5       	brne	.+106    	; 0x34fc <__unpack_f+0x9e>
    3492:	41 15       	cp	r20, r1
    3494:	51 05       	cpc	r21, r1
    3496:	61 05       	cpc	r22, r1
    3498:	71 05       	cpc	r23, r1
    349a:	11 f4       	brne	.+4      	; 0x34a0 <__unpack_f+0x42>
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	37 c0       	rjmp	.+110    	; 0x350e <__unpack_f+0xb0>
    34a0:	82 e8       	ldi	r24, 0x82	; 130
    34a2:	9f ef       	ldi	r25, 0xFF	; 255
    34a4:	13 96       	adiw	r26, 0x03	; 3
    34a6:	9c 93       	st	X, r25
    34a8:	8e 93       	st	-X, r24
    34aa:	12 97       	sbiw	r26, 0x02	; 2
    34ac:	9a 01       	movw	r18, r20
    34ae:	ab 01       	movw	r20, r22
    34b0:	67 e0       	ldi	r22, 0x07	; 7
    34b2:	22 0f       	add	r18, r18
    34b4:	33 1f       	adc	r19, r19
    34b6:	44 1f       	adc	r20, r20
    34b8:	55 1f       	adc	r21, r21
    34ba:	6a 95       	dec	r22
    34bc:	d1 f7       	brne	.-12     	; 0x34b2 <__unpack_f+0x54>
    34be:	83 e0       	ldi	r24, 0x03	; 3
    34c0:	8c 93       	st	X, r24
    34c2:	0d c0       	rjmp	.+26     	; 0x34de <__unpack_f+0x80>
    34c4:	22 0f       	add	r18, r18
    34c6:	33 1f       	adc	r19, r19
    34c8:	44 1f       	adc	r20, r20
    34ca:	55 1f       	adc	r21, r21
    34cc:	12 96       	adiw	r26, 0x02	; 2
    34ce:	8d 91       	ld	r24, X+
    34d0:	9c 91       	ld	r25, X
    34d2:	13 97       	sbiw	r26, 0x03	; 3
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	13 96       	adiw	r26, 0x03	; 3
    34d8:	9c 93       	st	X, r25
    34da:	8e 93       	st	-X, r24
    34dc:	12 97       	sbiw	r26, 0x02	; 2
    34de:	20 30       	cpi	r18, 0x00	; 0
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	38 07       	cpc	r19, r24
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	48 07       	cpc	r20, r24
    34e8:	80 e4       	ldi	r24, 0x40	; 64
    34ea:	58 07       	cpc	r21, r24
    34ec:	58 f3       	brcs	.-42     	; 0x34c4 <__unpack_f+0x66>
    34ee:	14 96       	adiw	r26, 0x04	; 4
    34f0:	2d 93       	st	X+, r18
    34f2:	3d 93       	st	X+, r19
    34f4:	4d 93       	st	X+, r20
    34f6:	5c 93       	st	X, r21
    34f8:	17 97       	sbiw	r26, 0x07	; 7
    34fa:	08 95       	ret
    34fc:	2f 3f       	cpi	r18, 0xFF	; 255
    34fe:	31 05       	cpc	r19, r1
    3500:	79 f4       	brne	.+30     	; 0x3520 <__unpack_f+0xc2>
    3502:	41 15       	cp	r20, r1
    3504:	51 05       	cpc	r21, r1
    3506:	61 05       	cpc	r22, r1
    3508:	71 05       	cpc	r23, r1
    350a:	19 f4       	brne	.+6      	; 0x3512 <__unpack_f+0xb4>
    350c:	84 e0       	ldi	r24, 0x04	; 4
    350e:	8c 93       	st	X, r24
    3510:	08 95       	ret
    3512:	64 ff       	sbrs	r22, 4
    3514:	03 c0       	rjmp	.+6      	; 0x351c <__unpack_f+0xbe>
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	8c 93       	st	X, r24
    351a:	12 c0       	rjmp	.+36     	; 0x3540 <__unpack_f+0xe2>
    351c:	1c 92       	st	X, r1
    351e:	10 c0       	rjmp	.+32     	; 0x3540 <__unpack_f+0xe2>
    3520:	2f 57       	subi	r18, 0x7F	; 127
    3522:	30 40       	sbci	r19, 0x00	; 0
    3524:	13 96       	adiw	r26, 0x03	; 3
    3526:	3c 93       	st	X, r19
    3528:	2e 93       	st	-X, r18
    352a:	12 97       	sbiw	r26, 0x02	; 2
    352c:	83 e0       	ldi	r24, 0x03	; 3
    352e:	8c 93       	st	X, r24
    3530:	87 e0       	ldi	r24, 0x07	; 7
    3532:	44 0f       	add	r20, r20
    3534:	55 1f       	adc	r21, r21
    3536:	66 1f       	adc	r22, r22
    3538:	77 1f       	adc	r23, r23
    353a:	8a 95       	dec	r24
    353c:	d1 f7       	brne	.-12     	; 0x3532 <__unpack_f+0xd4>
    353e:	70 64       	ori	r23, 0x40	; 64
    3540:	14 96       	adiw	r26, 0x04	; 4
    3542:	4d 93       	st	X+, r20
    3544:	5d 93       	st	X+, r21
    3546:	6d 93       	st	X+, r22
    3548:	7c 93       	st	X, r23
    354a:	17 97       	sbiw	r26, 0x07	; 7
    354c:	08 95       	ret

0000354e <__fpcmp_parts_f>:
    354e:	1f 93       	push	r17
    3550:	dc 01       	movw	r26, r24
    3552:	fb 01       	movw	r30, r22
    3554:	9c 91       	ld	r25, X
    3556:	92 30       	cpi	r25, 0x02	; 2
    3558:	08 f4       	brcc	.+2      	; 0x355c <__fpcmp_parts_f+0xe>
    355a:	47 c0       	rjmp	.+142    	; 0x35ea <__fpcmp_parts_f+0x9c>
    355c:	80 81       	ld	r24, Z
    355e:	82 30       	cpi	r24, 0x02	; 2
    3560:	08 f4       	brcc	.+2      	; 0x3564 <__fpcmp_parts_f+0x16>
    3562:	43 c0       	rjmp	.+134    	; 0x35ea <__fpcmp_parts_f+0x9c>
    3564:	94 30       	cpi	r25, 0x04	; 4
    3566:	51 f4       	brne	.+20     	; 0x357c <__fpcmp_parts_f+0x2e>
    3568:	11 96       	adiw	r26, 0x01	; 1
    356a:	1c 91       	ld	r17, X
    356c:	84 30       	cpi	r24, 0x04	; 4
    356e:	99 f5       	brne	.+102    	; 0x35d6 <__fpcmp_parts_f+0x88>
    3570:	81 81       	ldd	r24, Z+1	; 0x01
    3572:	68 2f       	mov	r22, r24
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	61 1b       	sub	r22, r17
    3578:	71 09       	sbc	r23, r1
    357a:	3f c0       	rjmp	.+126    	; 0x35fa <__fpcmp_parts_f+0xac>
    357c:	84 30       	cpi	r24, 0x04	; 4
    357e:	21 f0       	breq	.+8      	; 0x3588 <__fpcmp_parts_f+0x3a>
    3580:	92 30       	cpi	r25, 0x02	; 2
    3582:	31 f4       	brne	.+12     	; 0x3590 <__fpcmp_parts_f+0x42>
    3584:	82 30       	cpi	r24, 0x02	; 2
    3586:	b9 f1       	breq	.+110    	; 0x35f6 <__fpcmp_parts_f+0xa8>
    3588:	81 81       	ldd	r24, Z+1	; 0x01
    358a:	88 23       	and	r24, r24
    358c:	89 f1       	breq	.+98     	; 0x35f0 <__fpcmp_parts_f+0xa2>
    358e:	2d c0       	rjmp	.+90     	; 0x35ea <__fpcmp_parts_f+0x9c>
    3590:	11 96       	adiw	r26, 0x01	; 1
    3592:	1c 91       	ld	r17, X
    3594:	11 97       	sbiw	r26, 0x01	; 1
    3596:	82 30       	cpi	r24, 0x02	; 2
    3598:	f1 f0       	breq	.+60     	; 0x35d6 <__fpcmp_parts_f+0x88>
    359a:	81 81       	ldd	r24, Z+1	; 0x01
    359c:	18 17       	cp	r17, r24
    359e:	d9 f4       	brne	.+54     	; 0x35d6 <__fpcmp_parts_f+0x88>
    35a0:	12 96       	adiw	r26, 0x02	; 2
    35a2:	2d 91       	ld	r18, X+
    35a4:	3c 91       	ld	r19, X
    35a6:	13 97       	sbiw	r26, 0x03	; 3
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	82 17       	cp	r24, r18
    35ae:	93 07       	cpc	r25, r19
    35b0:	94 f0       	brlt	.+36     	; 0x35d6 <__fpcmp_parts_f+0x88>
    35b2:	28 17       	cp	r18, r24
    35b4:	39 07       	cpc	r19, r25
    35b6:	bc f0       	brlt	.+46     	; 0x35e6 <__fpcmp_parts_f+0x98>
    35b8:	14 96       	adiw	r26, 0x04	; 4
    35ba:	8d 91       	ld	r24, X+
    35bc:	9d 91       	ld	r25, X+
    35be:	0d 90       	ld	r0, X+
    35c0:	bc 91       	ld	r27, X
    35c2:	a0 2d       	mov	r26, r0
    35c4:	24 81       	ldd	r18, Z+4	; 0x04
    35c6:	35 81       	ldd	r19, Z+5	; 0x05
    35c8:	46 81       	ldd	r20, Z+6	; 0x06
    35ca:	57 81       	ldd	r21, Z+7	; 0x07
    35cc:	28 17       	cp	r18, r24
    35ce:	39 07       	cpc	r19, r25
    35d0:	4a 07       	cpc	r20, r26
    35d2:	5b 07       	cpc	r21, r27
    35d4:	18 f4       	brcc	.+6      	; 0x35dc <__fpcmp_parts_f+0x8e>
    35d6:	11 23       	and	r17, r17
    35d8:	41 f0       	breq	.+16     	; 0x35ea <__fpcmp_parts_f+0x9c>
    35da:	0a c0       	rjmp	.+20     	; 0x35f0 <__fpcmp_parts_f+0xa2>
    35dc:	82 17       	cp	r24, r18
    35de:	93 07       	cpc	r25, r19
    35e0:	a4 07       	cpc	r26, r20
    35e2:	b5 07       	cpc	r27, r21
    35e4:	40 f4       	brcc	.+16     	; 0x35f6 <__fpcmp_parts_f+0xa8>
    35e6:	11 23       	and	r17, r17
    35e8:	19 f0       	breq	.+6      	; 0x35f0 <__fpcmp_parts_f+0xa2>
    35ea:	61 e0       	ldi	r22, 0x01	; 1
    35ec:	70 e0       	ldi	r23, 0x00	; 0
    35ee:	05 c0       	rjmp	.+10     	; 0x35fa <__fpcmp_parts_f+0xac>
    35f0:	6f ef       	ldi	r22, 0xFF	; 255
    35f2:	7f ef       	ldi	r23, 0xFF	; 255
    35f4:	02 c0       	rjmp	.+4      	; 0x35fa <__fpcmp_parts_f+0xac>
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	cb 01       	movw	r24, r22
    35fc:	1f 91       	pop	r17
    35fe:	08 95       	ret

00003600 <UART_enuInit>:
#include "UART_config.h"

static void (*UART_pfCalledFunc[UART_INTERRUPTS]) (void*) = {NULL, NULL, NULL};
static void *UART_pParameter[UART_INTERRUPTS] = {NULL, NULL, NULL};

ES_t UART_enuInit(void){
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	00 d0       	rcall	.+0      	; 0x3606 <UART_enuInit+0x6>
    3606:	0f 92       	push	r0
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	8b 83       	std	Y+3, r24	; 0x03
	/*Enable receiver and transmitter*/
	UCSRA = (BIT_MASK1 << U2X_BIT);
    3610:	eb e2       	ldi	r30, 0x2B	; 43
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	82 e0       	ldi	r24, 0x02	; 2
    3616:	80 83       	st	Z, r24
	UCSRB = (BIT_MASK1 << TXEN_BIT)|(BIT_MASK1 << RXEN_BIT);
    3618:	ea e2       	ldi	r30, 0x2A	; 42
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	88 e1       	ldi	r24, 0x18	; 24
    361e:	80 83       	st	Z, r24
	/*Set the Baud Rate Value*/
	uint_16 Local_uint16UBRRValue = UBRR_CALC(BAUD_RATE_VALUE);
    3620:	8f ec       	ldi	r24, 0xCF	; 207
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	9a 83       	std	Y+2, r25	; 0x02
    3626:	89 83       	std	Y+1, r24	; 0x01
	Local_uint16UBRRValue &= ~(BIT_MASK1 << 15);
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	9a 81       	ldd	r25, Y+2	; 0x02
    362c:	9f 77       	andi	r25, 0x7F	; 127
    362e:	9a 83       	std	Y+2, r25	; 0x02
    3630:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (uint_8) Local_uint16UBRRValue;
    3632:	e9 e2       	ldi	r30, 0x29	; 41
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	80 83       	st	Z, r24
	UBRRH = (uint_8)(Local_uint16UBRRValue >> 8);
    363a:	e0 e4       	ldi	r30, 0x40	; 64
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	89 2f       	mov	r24, r25
    3644:	99 27       	eor	r25, r25
    3646:	80 83       	st	Z, r24
	/*Set the frame format: 8 bit data, 1 stop bit*/
	UCSRC = (BIT_MASK1 << URSEL_BIT)|(BIT_MASK2 << UCSZ0_BIT);
    3648:	e0 e4       	ldi	r30, 0x40	; 64
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	86 e8       	ldi	r24, 0x86	; 134
    364e:	80 83       	st	Z, r24
	UCSRB |= (BIT_MASK1 << UCSZ2_BIT);
    3650:	aa e2       	ldi	r26, 0x2A	; 42
    3652:	b0 e0       	ldi	r27, 0x00	; 0
    3654:	ea e2       	ldi	r30, 0x2A	; 42
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	80 81       	ld	r24, Z
    365a:	84 60       	ori	r24, 0x04	; 4
    365c:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    365e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <UART_enuTransmitChar>:

ES_t UART_enuTransmitChar(uint_8 Copy_uint8Data){
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	00 d0       	rcall	.+0      	; 0x3672 <UART_enuTransmitChar+0x6>
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
    3676:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	89 83       	std	Y+1, r24	; 0x01
	while(!((UCSRA >> UDRE_BIT) & BIT_MASK1))
    367c:	eb e2       	ldi	r30, 0x2B	; 43
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	82 95       	swap	r24
    3684:	86 95       	lsr	r24
    3686:	87 70       	andi	r24, 0x07	; 7
    3688:	88 2f       	mov	r24, r24
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	81 70       	andi	r24, 0x01	; 1
    368e:	90 70       	andi	r25, 0x00	; 0
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	a1 f3       	breq	.-24     	; 0x367c <UART_enuTransmitChar+0x10>
		;
	UDR = Copy_uint8Data;
    3694:	ec e2       	ldi	r30, 0x2C	; 44
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	8a 81       	ldd	r24, Y+2	; 0x02
    369a:	80 83       	st	Z, r24
	return Local_enuErrorStates;
    369c:	89 81       	ldd	r24, Y+1	; 0x01
}
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	08 95       	ret

000036a8 <UART_enuReceiveChar>:

ES_t UART_enuReceiveChar(uint_8 *Copy_uint8Data){
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	00 d0       	rcall	.+0      	; 0x36ae <UART_enuReceiveChar+0x6>
    36ae:	0f 92       	push	r0
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	9b 83       	std	Y+3, r25	; 0x03
    36b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	89 83       	std	Y+1, r24	; 0x01
	while(!((UCSRA >> RXC_BIT) & BIT_MASK1))
    36bc:	eb e2       	ldi	r30, 0x2B	; 43
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	88 23       	and	r24, r24
    36c4:	dc f7       	brge	.-10     	; 0x36bc <UART_enuReceiveChar+0x14>
		;
	*Copy_uint8Data = UDR;
    36c6:	ec e2       	ldi	r30, 0x2C	; 44
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	80 81       	ld	r24, Z
    36cc:	ea 81       	ldd	r30, Y+2	; 0x02
    36ce:	fb 81       	ldd	r31, Y+3	; 0x03
    36d0:	80 83       	st	Z, r24
	return Local_enuErrorStates;
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	08 95       	ret

000036e0 <UART_enuTransmitString>:

ES_t UART_enuTransmitString(uint_8 *Copy_uint8Data){
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <UART_enuTransmitString+0x6>
    36e6:	0f 92       	push	r0
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	9b 83       	std	Y+3, r25	; 0x03
    36ee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_uint8Data != NULL){
    36f4:	8a 81       	ldd	r24, Y+2	; 0x02
    36f6:	9b 81       	ldd	r25, Y+3	; 0x03
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	31 f0       	breq	.+12     	; 0x3708 <UART_enuTransmitString+0x28>

		UART_voidTransmitString(Copy_uint8Data);
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3700:	0e 94 c2 21 	call	0x4384	; 0x4384 <UART_voidTransmitString>

		Local_enuErrorStates = ES_OK;
    3704:	19 82       	std	Y+1, r1	; 0x01
    3706:	02 c0       	rjmp	.+4      	; 0x370c <UART_enuTransmitString+0x2c>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3708:	82 e0       	ldi	r24, 0x02	; 2
    370a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    370c:	89 81       	ldd	r24, Y+1	; 0x01
}
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	08 95       	ret

0000371a <UART_enuReceiveString>:

ES_t UART_enuReceiveString(uint_8 *Copy_uint8Data){
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	00 d0       	rcall	.+0      	; 0x3720 <UART_enuReceiveString+0x6>
    3720:	0f 92       	push	r0
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	9b 83       	std	Y+3, r25	; 0x03
    3728:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_uint8Data != NULL){
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	9b 81       	ldd	r25, Y+3	; 0x03
    3732:	00 97       	sbiw	r24, 0x00	; 0
    3734:	31 f0       	breq	.+12     	; 0x3742 <UART_enuReceiveString+0x28>

		UART_voidRecieveString(Copy_uint8Data);
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	9b 81       	ldd	r25, Y+3	; 0x03
    373a:	0e 94 86 21 	call	0x430c	; 0x430c <UART_voidRecieveString>
		Local_enuErrorStates = ES_OK;
    373e:	19 82       	std	Y+1, r1	; 0x01
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <UART_enuReceiveString+0x2c>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStates;
    3746:	89 81       	ldd	r24, Y+1	; 0x01
}
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	08 95       	ret

00003754 <UART_enuReceiveNumber>:

ES_t UART_enuReceiveNumber(f32 *Copy_f32Number){
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	00 d0       	rcall	.+0      	; 0x375a <UART_enuReceiveNumber+0x6>
    375a:	00 d0       	rcall	.+0      	; 0x375c <UART_enuReceiveNumber+0x8>
    375c:	0f 92       	push	r0
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	9d 83       	std	Y+5, r25	; 0x05
    3764:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_f32Number != NULL){
    376a:	8c 81       	ldd	r24, Y+4	; 0x04
    376c:	9d 81       	ldd	r25, Y+5	; 0x05
    376e:	00 97       	sbiw	r24, 0x00	; 0
    3770:	89 f0       	breq	.+34     	; 0x3794 <UART_enuReceiveNumber+0x40>
		uint_8* Local_puintData = "\0";
    3772:	80 e6       	ldi	r24, 0x60	; 96
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	9a 83       	std	Y+2, r25	; 0x02
    3778:	89 83       	std	Y+1, r24	; 0x01

		UART_voidRecieveString(Local_puintData);
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	9a 81       	ldd	r25, Y+2	; 0x02
    377e:	0e 94 86 21 	call	0x430c	; 0x430c <UART_voidRecieveString>

		UART_voidConvert_to_Number(Local_puintData, Copy_f32Number);
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	2c 81       	ldd	r18, Y+4	; 0x04
    3788:	3d 81       	ldd	r19, Y+5	; 0x05
    378a:	b9 01       	movw	r22, r18
    378c:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <UART_voidConvert_to_Number>
		Local_enuErrorStates = ES_OK;
    3790:	1b 82       	std	Y+3, r1	; 0x03
    3792:	02 c0       	rjmp	.+4      	; 0x3798 <UART_enuReceiveNumber+0x44>
	}
	else {
		Local_enuErrorStates = ES_NULL_POINTER;
    3794:	82 e0       	ldi	r24, 0x02	; 2
    3796:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_enuErrorStates;
    3798:	8b 81       	ldd	r24, Y+3	; 0x03
}
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <UART_enuTransmitNumber>:

ES_t UART_enuTransmitNumber(f32 Copy_f32Number){
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	27 97       	sbiw	r28, 0x07	; 7
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	6c 83       	std	Y+4, r22	; 0x04
    37c0:	7d 83       	std	Y+5, r23	; 0x05
    37c2:	8e 83       	std	Y+6, r24	; 0x06
    37c4:	9f 83       	std	Y+7, r25	; 0x07
	ES_t Local_enuErrorStates = ES_NOK;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	8b 83       	std	Y+3, r24	; 0x03
	uint_8* Local_puintData = "\0";
    37ca:	80 e6       	ldi	r24, 0x60	; 96
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01

	UART_voidStringify_Number(Copy_f32Number, Local_puintData);
    37d2:	8c 81       	ldd	r24, Y+4	; 0x04
    37d4:	9d 81       	ldd	r25, Y+5	; 0x05
    37d6:	ae 81       	ldd	r26, Y+6	; 0x06
    37d8:	bf 81       	ldd	r27, Y+7	; 0x07
    37da:	29 81       	ldd	r18, Y+1	; 0x01
    37dc:	3a 81       	ldd	r19, Y+2	; 0x02
    37de:	bc 01       	movw	r22, r24
    37e0:	cd 01       	movw	r24, r26
    37e2:	a9 01       	movw	r20, r18
    37e4:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <UART_voidStringify_Number>

	UART_voidTransmitString(Local_puintData);
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	9a 81       	ldd	r25, Y+2	; 0x02
    37ec:	0e 94 c2 21 	call	0x4384	; 0x4384 <UART_voidTransmitString>
	return Local_enuErrorStates;
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    37f2:	27 96       	adiw	r28, 0x07	; 7
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	f8 94       	cli
    37f8:	de bf       	out	0x3e, r29	; 62
    37fa:	0f be       	out	0x3f, r0	; 63
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	08 95       	ret

00003804 <UART_enuEnableTransmitter>:

ES_t UART_enuEnableTransmitter(void){
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	0f 92       	push	r0
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	89 83       	std	Y+1, r24	; 0x01
	UCSRB |= (BIT_MASK1 << TXEN_BIT);
    3812:	aa e2       	ldi	r26, 0x2A	; 42
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	ea e2       	ldi	r30, 0x2A	; 42
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	88 60       	ori	r24, 0x08	; 8
    381e:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3820:	19 82       	std	Y+1, r1	; 0x01
    3822:	89 81       	ldd	r24, Y+1	; 0x01
}
    3824:	0f 90       	pop	r0
    3826:	cf 91       	pop	r28
    3828:	df 91       	pop	r29
    382a:	08 95       	ret

0000382c <UART_enuDisableTransmitter>:

ES_t UART_enuDisableTransmitter(void){
    382c:	df 93       	push	r29
    382e:	cf 93       	push	r28
    3830:	0f 92       	push	r0
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	89 83       	std	Y+1, r24	; 0x01
	UCSRB &= ~(BIT_MASK1 << TXEN_BIT);
    383a:	aa e2       	ldi	r26, 0x2A	; 42
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	ea e2       	ldi	r30, 0x2A	; 42
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	80 81       	ld	r24, Z
    3844:	87 7f       	andi	r24, 0xF7	; 247
    3846:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3848:	19 82       	std	Y+1, r1	; 0x01
    384a:	89 81       	ldd	r24, Y+1	; 0x01
}
    384c:	0f 90       	pop	r0
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <UART_enuEnableReceiver>:

ES_t UART_enuEnableReceiver(void){
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	0f 92       	push	r0
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	89 83       	std	Y+1, r24	; 0x01
	UCSRB |= (BIT_MASK1 << RXEN_BIT);
    3862:	aa e2       	ldi	r26, 0x2A	; 42
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	ea e2       	ldi	r30, 0x2A	; 42
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	80 61       	ori	r24, 0x10	; 16
    386e:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3870:	19 82       	std	Y+1, r1	; 0x01
    3872:	89 81       	ldd	r24, Y+1	; 0x01
}
    3874:	0f 90       	pop	r0
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <UART_enuDisableReceiver>:

ES_t UART_enuDisableReceiver(void){
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	0f 92       	push	r0
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	89 83       	std	Y+1, r24	; 0x01
	UCSRB &= ~(BIT_MASK1 << RXEN_BIT);
    388a:	aa e2       	ldi	r26, 0x2A	; 42
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	ea e2       	ldi	r30, 0x2A	; 42
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	8f 7e       	andi	r24, 0xEF	; 239
    3896:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3898:	19 82       	std	Y+1, r1	; 0x01
    389a:	89 81       	ldd	r24, Y+1	; 0x01
}
    389c:	0f 90       	pop	r0
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	08 95       	ret

000038a4 <UART_enuSetBaudRate>:

ES_t UART_enuSetBaudRate(uint_16 Copy_uint8Value){
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	00 d0       	rcall	.+0      	; 0x38aa <UART_enuSetBaudRate+0x6>
    38aa:	00 d0       	rcall	.+0      	; 0x38ac <UART_enuSetBaudRate+0x8>
    38ac:	0f 92       	push	r0
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    38b2:	9d 83       	std	Y+5, r25	; 0x05
    38b4:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	8b 83       	std	Y+3, r24	; 0x03
	uint_16 Local_uint16UBRRValue = UBRR_CALC(Copy_uint8Value);
    38ba:	8c 81       	ldd	r24, Y+4	; 0x04
    38bc:	9d 81       	ldd	r25, Y+5	; 0x05
    38be:	88 0f       	add	r24, r24
    38c0:	99 1f       	adc	r25, r25
    38c2:	88 0f       	add	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	88 0f       	add	r24, r24
    38c8:	99 1f       	adc	r25, r25
    38ca:	9c 01       	movw	r18, r24
    38cc:	40 e0       	ldi	r20, 0x00	; 0
    38ce:	50 e0       	ldi	r21, 0x00	; 0
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	92 e1       	ldi	r25, 0x12	; 18
    38d4:	aa e7       	ldi	r26, 0x7A	; 122
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	bc 01       	movw	r22, r24
    38da:	cd 01       	movw	r24, r26
    38dc:	0e 94 b6 3a 	call	0x756c	; 0x756c <__udivmodsi4>
    38e0:	da 01       	movw	r26, r20
    38e2:	c9 01       	movw	r24, r18
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	9a 83       	std	Y+2, r25	; 0x02
    38e8:	89 83       	std	Y+1, r24	; 0x01
	Local_uint16UBRRValue &= ~(BIT_MASK1 << 15); // clear the ursel bit
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	9a 81       	ldd	r25, Y+2	; 0x02
    38ee:	9f 77       	andi	r25, 0x7F	; 127
    38f0:	9a 83       	std	Y+2, r25	; 0x02
    38f2:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (uint_8) Local_uint16UBRRValue;
    38f4:	e9 e2       	ldi	r30, 0x29	; 41
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	80 83       	st	Z, r24
	UBRRH = (uint_8)(Local_uint16UBRRValue >> 8);
    38fc:	e0 e4       	ldi	r30, 0x40	; 64
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	9a 81       	ldd	r25, Y+2	; 0x02
    3904:	89 2f       	mov	r24, r25
    3906:	99 27       	eor	r25, r25
    3908:	80 83       	st	Z, r24
	return Local_enuErrorStates = ES_OK;
    390a:	1b 82       	std	Y+3, r1	; 0x03
    390c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	08 95       	ret

0000391e <UART_enuResetCharacterSize>:

ES_t UART_enuResetCharacterSize(uint_8 Copy_uint8Value){
    391e:	df 93       	push	r29
    3920:	cf 93       	push	r28
    3922:	00 d0       	rcall	.+0      	; 0x3924 <UART_enuResetCharacterSize+0x6>
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	89 83       	std	Y+1, r24	; 0x01
	UART_voidResetCharacterSize(Copy_uint8Value);
    392e:	8a 81       	ldd	r24, Y+2	; 0x02
    3930:	0e 94 0d 22 	call	0x441a	; 0x441a <UART_voidResetCharacterSize>
	return Local_enuErrorStates = ES_OK;
    3934:	19 82       	std	Y+1, r1	; 0x01
    3936:	89 81       	ldd	r24, Y+1	; 0x01
}
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <UART_enuEnableMultiProcessorMode>:

ES_t UART_enuEnableMultiProcessorMode(void){
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	0f 92       	push	r0
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	89 83       	std	Y+1, r24	; 0x01
	UCSRA |= (BIT_MASK1 << MPCM_BIT);
    3950:	ab e2       	ldi	r26, 0x2B	; 43
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	eb e2       	ldi	r30, 0x2B	; 43
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	80 81       	ld	r24, Z
    395a:	81 60       	ori	r24, 0x01	; 1
    395c:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    395e:	19 82       	std	Y+1, r1	; 0x01
    3960:	89 81       	ldd	r24, Y+1	; 0x01
}
    3962:	0f 90       	pop	r0
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <UART_enuDisableMultiProcessorMode>:

ES_t UART_enuDisableMultiProcessorMode(void){
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	0f 92       	push	r0
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	89 83       	std	Y+1, r24	; 0x01
	UCSRA &= ~(BIT_MASK1 << MPCM_BIT);
    3978:	ab e2       	ldi	r26, 0x2B	; 43
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	eb e2       	ldi	r30, 0x2B	; 43
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	8e 7f       	andi	r24, 0xFE	; 254
    3984:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    3986:	89 81       	ldd	r24, Y+1	; 0x01
}
    3988:	0f 90       	pop	r0
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	08 95       	ret

00003990 <UART_enuSendMCUAddress>:

ES_t UART_enuSendMCUAddress(const uint_8 *Copy_puintAddress){
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	00 d0       	rcall	.+0      	; 0x3996 <UART_enuSendMCUAddress+0x6>
    3996:	0f 92       	push	r0
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    399c:	9b 83       	std	Y+3, r25	; 0x03
    399e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_puintAddress != NULL){
    39a4:	8a 81       	ldd	r24, Y+2	; 0x02
    39a6:	9b 81       	ldd	r25, Y+3	; 0x03
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	39 f0       	breq	.+14     	; 0x39ba <UART_enuSendMCUAddress+0x2a>
		UART_voidTransmit9BitData(Copy_puintAddress, TYPE_ADDRESS);
    39ac:	8a 81       	ldd	r24, Y+2	; 0x02
    39ae:	9b 81       	ldd	r25, Y+3	; 0x03
    39b0:	6b e2       	ldi	r22, 0x2B	; 43
    39b2:	0e 94 9b 22 	call	0x4536	; 0x4536 <UART_voidTransmit9BitData>
		Local_enuErrorStates = ES_OK;
    39b6:	19 82       	std	Y+1, r1	; 0x01
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <UART_enuSendMCUAddress+0x2e>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    39ba:	82 e0       	ldi	r24, 0x02	; 2
    39bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    39be:	89 81       	ldd	r24, Y+1	; 0x01
}
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <UART_enuSendDataToMCU>:

ES_t UART_enuSendDataToMCU(const uint_8 *Copy_puint8Data){
    39cc:	df 93       	push	r29
    39ce:	cf 93       	push	r28
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <UART_enuSendDataToMCU+0x6>
    39d2:	0f 92       	push	r0
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	9b 83       	std	Y+3, r25	; 0x03
    39da:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_puint8Data != NULL){
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	9b 81       	ldd	r25, Y+3	; 0x03
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	39 f0       	breq	.+14     	; 0x39f6 <UART_enuSendDataToMCU+0x2a>
		UART_voidTransmit9BitData(Copy_puint8Data, TYPE_DATA);
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	9b 81       	ldd	r25, Y+3	; 0x03
    39ec:	62 e3       	ldi	r22, 0x32	; 50
    39ee:	0e 94 9b 22 	call	0x4536	; 0x4536 <UART_voidTransmit9BitData>
		Local_enuErrorStates = ES_OK;
    39f2:	19 82       	std	Y+1, r1	; 0x01
    39f4:	02 c0       	rjmp	.+4      	; 0x39fa <UART_enuSendDataToMCU+0x2e>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    39f6:	82 e0       	ldi	r24, 0x02	; 2
    39f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	08 95       	ret

00003a08 <UART_enuGetMCUAddress>:

ES_t UART_enuGetMCUAddress(uint_8 *Copy_puintAddress){
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <UART_enuGetMCUAddress+0x6>
    3a0e:	0f 92       	push	r0
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
    3a14:	9b 83       	std	Y+3, r25	; 0x03
    3a16:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_puintAddress != NULL){
    3a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	81 f0       	breq	.+32     	; 0x3a44 <UART_enuGetMCUAddress+0x3c>
		if((UCSRB >> RXB8_BIT) & BIT_MASK1){
    3a24:	ea e2       	ldi	r30, 0x2A	; 42
    3a26:	f0 e0       	ldi	r31, 0x00	; 0
    3a28:	80 81       	ld	r24, Z
    3a2a:	86 95       	lsr	r24
    3a2c:	88 2f       	mov	r24, r24
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	81 70       	andi	r24, 0x01	; 1
    3a32:	90 70       	andi	r25, 0x00	; 0
    3a34:	88 23       	and	r24, r24
    3a36:	21 f0       	breq	.+8      	; 0x3a40 <UART_enuGetMCUAddress+0x38>
			UART_voidReceive9BitData(Copy_puintAddress);
    3a38:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3c:	0e 94 de 22 	call	0x45bc	; 0x45bc <UART_voidReceive9BitData>
		}
		Local_enuErrorStates = ES_OK;
    3a40:	19 82       	std	Y+1, r1	; 0x01
    3a42:	02 c0       	rjmp	.+4      	; 0x3a48 <UART_enuGetMCUAddress+0x40>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3a44:	82 e0       	ldi	r24, 0x02	; 2
    3a46:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	08 95       	ret

00003a56 <UART_enuCheckAddress>:

ES_t UART_enuCheckAddress(const uint_8 *Copy_puintAddress){
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	00 d0       	rcall	.+0      	; 0x3a5c <UART_enuCheckAddress+0x6>
    3a5c:	0f 92       	push	r0
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	9b 83       	std	Y+3, r25	; 0x03
    3a64:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_puintAddress != NULL){
    3a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a6e:	00 97       	sbiw	r24, 0x00	; 0
    3a70:	21 f1       	breq	.+72     	; 0x3aba <UART_enuCheckAddress+0x64>
		if((UCSRB >> RXB8_BIT) & BIT_MASK1){
    3a72:	ea e2       	ldi	r30, 0x2A	; 42
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	80 81       	ld	r24, Z
    3a78:	86 95       	lsr	r24
    3a7a:	88 2f       	mov	r24, r24
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	81 70       	andi	r24, 0x01	; 1
    3a80:	90 70       	andi	r25, 0x00	; 0
    3a82:	88 23       	and	r24, r24
    3a84:	c1 f0       	breq	.+48     	; 0x3ab6 <UART_enuCheckAddress+0x60>
			if(UART_uint8String_Compare(Copy_puintAddress, MCU_ADDRESS)){
    3a86:	8a 81       	ldd	r24, Y+2	; 0x02
    3a88:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8a:	22 e6       	ldi	r18, 0x62	; 98
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	b9 01       	movw	r22, r18
    3a90:	0e 94 48 22 	call	0x4490	; 0x4490 <UART_uint8String_Compare>
    3a94:	88 23       	and	r24, r24
    3a96:	41 f0       	breq	.+16     	; 0x3aa8 <UART_enuCheckAddress+0x52>
				UCSRA &= ~(BIT_MASK1 << MPCM_BIT);
    3a98:	ab e2       	ldi	r26, 0x2B	; 43
    3a9a:	b0 e0       	ldi	r27, 0x00	; 0
    3a9c:	eb e2       	ldi	r30, 0x2B	; 43
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	80 81       	ld	r24, Z
    3aa2:	8e 7f       	andi	r24, 0xFE	; 254
    3aa4:	8c 93       	st	X, r24
    3aa6:	07 c0       	rjmp	.+14     	; 0x3ab6 <UART_enuCheckAddress+0x60>
			}
			else{
				UCSRA |= (BIT_MASK1 << MPCM_BIT);
    3aa8:	ab e2       	ldi	r26, 0x2B	; 43
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	eb e2       	ldi	r30, 0x2B	; 43
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	81 60       	ori	r24, 0x01	; 1
    3ab4:	8c 93       	st	X, r24
			}
		}
		Local_enuErrorStates = ES_OK;
    3ab6:	19 82       	std	Y+1, r1	; 0x01
    3ab8:	02 c0       	rjmp	.+4      	; 0x3abe <UART_enuCheckAddress+0x68>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3aba:	82 e0       	ldi	r24, 0x02	; 2
    3abc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	cf 91       	pop	r28
    3ac8:	df 91       	pop	r29
    3aca:	08 95       	ret

00003acc <UART_enuGetDataFromMaster>:


ES_t UART_enuGetDataFromMaster(uint_8 *Copy_puint8Data){
    3acc:	df 93       	push	r29
    3ace:	cf 93       	push	r28
    3ad0:	00 d0       	rcall	.+0      	; 0x3ad2 <UART_enuGetDataFromMaster+0x6>
    3ad2:	0f 92       	push	r0
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	9b 83       	std	Y+3, r25	; 0x03
    3ada:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_puint8Data != NULL){
    3ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae4:	00 97       	sbiw	r24, 0x00	; 0
    3ae6:	c9 f0       	breq	.+50     	; 0x3b1a <UART_enuGetDataFromMaster+0x4e>
		if(!((UCSRB >> RXB8_BIT) & BIT_MASK1) && !(UCSRA & BIT_MASK1)){
    3ae8:	ea e2       	ldi	r30, 0x2A	; 42
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	80 81       	ld	r24, Z
    3aee:	86 95       	lsr	r24
    3af0:	88 2f       	mov	r24, r24
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	81 70       	andi	r24, 0x01	; 1
    3af6:	90 70       	andi	r25, 0x00	; 0
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	69 f4       	brne	.+26     	; 0x3b16 <UART_enuGetDataFromMaster+0x4a>
    3afc:	eb e2       	ldi	r30, 0x2B	; 43
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	80 81       	ld	r24, Z
    3b02:	88 2f       	mov	r24, r24
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	81 70       	andi	r24, 0x01	; 1
    3b08:	90 70       	andi	r25, 0x00	; 0
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	21 f4       	brne	.+8      	; 0x3b16 <UART_enuGetDataFromMaster+0x4a>
			UART_voidReceive9BitData(Copy_puint8Data);
    3b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b10:	9b 81       	ldd	r25, Y+3	; 0x03
    3b12:	0e 94 de 22 	call	0x45bc	; 0x45bc <UART_voidReceive9BitData>
		}
		Local_enuErrorStates = ES_OK;
    3b16:	19 82       	std	Y+1, r1	; 0x01
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <UART_enuGetDataFromMaster+0x52>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3b1a:	82 e0       	ldi	r24, 0x02	; 2
    3b1c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	08 95       	ret

00003b2c <UART_enuToSendAddress>:


 ES_t UART_enuToSendAddress(void){
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	00 d0       	rcall	.+0      	; 0x3b32 <UART_enuToSendAddress+0x6>
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState = ES_NOK;
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	8a 83       	std	Y+2, r24	; 0x02
	 uint_8 Local_uint8UCSRC = UBRRH;
    3b3a:	e0 e4       	ldi	r30, 0x40	; 64
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	80 81       	ld	r24, Z
    3b40:	89 83       	std	Y+1, r24	; 0x01
	 Local_uint8UCSRC = UCSRC;
    3b42:	e0 e4       	ldi	r30, 0x40	; 64
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	89 83       	std	Y+1, r24	; 0x01
	 Local_uint8UCSRC |= (BIT_MASK1 << USBS_BIT);
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	88 60       	ori	r24, 0x08	; 8
    3b4e:	89 83       	std	Y+1, r24	; 0x01
	 Local_uint8UCSRC |= (BIT_MASK1 << URSEL_BIT)|(BIT_MASK1 << USBS_BIT);
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	88 68       	ori	r24, 0x88	; 136
    3b54:	89 83       	std	Y+1, r24	; 0x01
	 UCSRC = Local_uint8UCSRC;
    3b56:	e0 e4       	ldi	r30, 0x40	; 64
    3b58:	f0 e0       	ldi	r31, 0x00	; 0
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	80 83       	st	Z, r24
	 return Local_enuErrorState;
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
 }
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <UART_enuToSendData>:

 ES_t UART_enuToSendData(void){
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <UART_enuToSendData+0x6>
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState = ES_NOK;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	8a 83       	std	Y+2, r24	; 0x02
	 uint_8 Local_uint8UCSRC = UBRRH;
    3b78:	e0 e4       	ldi	r30, 0x40	; 64
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	80 81       	ld	r24, Z
    3b7e:	89 83       	std	Y+1, r24	; 0x01
	 Local_uint8UCSRC = UCSRC;
    3b80:	e0 e4       	ldi	r30, 0x40	; 64
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	89 83       	std	Y+1, r24	; 0x01
	 Local_uint8UCSRC = (Local_uint8UCSRC | (BIT_MASK1 << URSEL_BIT)) & ~(BIT_MASK1 << USBS_BIT);
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	87 77       	andi	r24, 0x77	; 119
    3b8c:	80 68       	ori	r24, 0x80	; 128
    3b8e:	89 83       	std	Y+1, r24	; 0x01
	 UCSRC = Local_uint8UCSRC;
    3b90:	e0 e4       	ldi	r30, 0x40	; 64
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	80 83       	st	Z, r24
	 return Local_enuErrorState;
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
 }
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	08 95       	ret

00003ba4 <UART_enuEnableRXCInterrupt>:


ES_t UART_enuEnableRXCInterrupt(void){
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	0f 92       	push	r0
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	89 83       	std	Y+1, r24	; 0x01
	UCSRB |= (BIT_MASK1 << RXCIE_BIT);
    3bb2:	aa e2       	ldi	r26, 0x2A	; 42
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	ea e2       	ldi	r30, 0x2A	; 42
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	80 68       	ori	r24, 0x80	; 128
    3bbe:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3bc0:	19 82       	std	Y+1, r1	; 0x01
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bc4:	0f 90       	pop	r0
    3bc6:	cf 91       	pop	r28
    3bc8:	df 91       	pop	r29
    3bca:	08 95       	ret

00003bcc <UART_enuDisableRXCInterrupt>:

ES_t UART_enuDisableRXCInterrupt(void){
    3bcc:	df 93       	push	r29
    3bce:	cf 93       	push	r28
    3bd0:	0f 92       	push	r0
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	89 83       	std	Y+1, r24	; 0x01
	UCSRB &= ~(BIT_MASK1 << RXCIE_BIT);
    3bda:	aa e2       	ldi	r26, 0x2A	; 42
    3bdc:	b0 e0       	ldi	r27, 0x00	; 0
    3bde:	ea e2       	ldi	r30, 0x2A	; 42
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	80 81       	ld	r24, Z
    3be4:	8f 77       	andi	r24, 0x7F	; 127
    3be6:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3be8:	19 82       	std	Y+1, r1	; 0x01
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bec:	0f 90       	pop	r0
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	08 95       	ret

00003bf4 <UART_enuEnableTXCInterrupt>:

ES_t UART_enuEnableTXCInterrupt(void){
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	0f 92       	push	r0
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	89 83       	std	Y+1, r24	; 0x01
	UCSRB |= (BIT_MASK1 << TXCIE_BIT);
    3c02:	aa e2       	ldi	r26, 0x2A	; 42
    3c04:	b0 e0       	ldi	r27, 0x00	; 0
    3c06:	ea e2       	ldi	r30, 0x2A	; 42
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	80 81       	ld	r24, Z
    3c0c:	80 64       	ori	r24, 0x40	; 64
    3c0e:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3c10:	19 82       	std	Y+1, r1	; 0x01
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c14:	0f 90       	pop	r0
    3c16:	cf 91       	pop	r28
    3c18:	df 91       	pop	r29
    3c1a:	08 95       	ret

00003c1c <UART_enuDisableTXCInterrupt>:

ES_t UART_enuDisableTXCInterrupt(void){
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	0f 92       	push	r0
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	89 83       	std	Y+1, r24	; 0x01
	UCSRB &= ~(BIT_MASK1 << TXCIE_BIT);
    3c2a:	aa e2       	ldi	r26, 0x2A	; 42
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	ea e2       	ldi	r30, 0x2A	; 42
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	80 81       	ld	r24, Z
    3c34:	8f 7b       	andi	r24, 0xBF	; 191
    3c36:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3c38:	19 82       	std	Y+1, r1	; 0x01
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c3c:	0f 90       	pop	r0
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	08 95       	ret

00003c44 <UART_enuEnableUDREInterrupt>:

ES_t UART_enuEnableUDREInterrupt(void){
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	0f 92       	push	r0
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	89 83       	std	Y+1, r24	; 0x01
	UCSRB |= (BIT_MASK1 << UDRIE_BIT);
    3c52:	aa e2       	ldi	r26, 0x2A	; 42
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	ea e2       	ldi	r30, 0x2A	; 42
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	80 62       	ori	r24, 0x20	; 32
    3c5e:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3c60:	19 82       	std	Y+1, r1	; 0x01
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c64:	0f 90       	pop	r0
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <UART_enuDisableUDREnterrupt>:

ES_t UART_enuDisableUDREnterrupt(void){
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	0f 92       	push	r0
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	89 83       	std	Y+1, r24	; 0x01
	UCSRB &= ~(BIT_MASK1 << UDRIE_BIT);
    3c7a:	aa e2       	ldi	r26, 0x2A	; 42
    3c7c:	b0 e0       	ldi	r27, 0x00	; 0
    3c7e:	ea e2       	ldi	r30, 0x2A	; 42
    3c80:	f0 e0       	ldi	r31, 0x00	; 0
    3c82:	80 81       	ld	r24, Z
    3c84:	8f 7d       	andi	r24, 0xDF	; 223
    3c86:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    3c88:	19 82       	std	Y+1, r1	; 0x01
    3c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c8c:	0f 90       	pop	r0
    3c8e:	cf 91       	pop	r28
    3c90:	df 91       	pop	r29
    3c92:	08 95       	ret

00003c94 <UART_enuCallBack>:

ES_t UART_enuCallBack(void (*Copy_pFuncConfig)(void*), void* Copy_pParameter, uint_8 Copy_Interrupt_Type){
    3c94:	df 93       	push	r29
    3c96:	cf 93       	push	r28
    3c98:	00 d0       	rcall	.+0      	; 0x3c9a <UART_enuCallBack+0x6>
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <UART_enuCallBack+0x8>
    3c9c:	00 d0       	rcall	.+0      	; 0x3c9e <UART_enuCallBack+0xa>
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
    3ca2:	9b 83       	std	Y+3, r25	; 0x03
    3ca4:	8a 83       	std	Y+2, r24	; 0x02
    3ca6:	7d 83       	std	Y+5, r23	; 0x05
    3ca8:	6c 83       	std	Y+4, r22	; 0x04
    3caa:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorStates = ES_OK;
    3cac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pFuncConfig != NULL){
    3cae:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	99 f1       	breq	.+102    	; 0x3d1c <UART_enuCallBack+0x88>
		if(Copy_Interrupt_Type == UART_INT_RXC){
    3cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb8:	81 30       	cpi	r24, 0x01	; 1
    3cba:	71 f4       	brne	.+28     	; 0x3cd8 <UART_enuCallBack+0x44>
			UART_pfCalledFunc[UART_INT_RXC] = *Copy_pFuncConfig;
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc0:	90 93 a1 01 	sts	0x01A1, r25
    3cc4:	80 93 a0 01 	sts	0x01A0, r24
			UART_pParameter[UART_INT_RXC] = Copy_pParameter;
    3cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cca:	9d 81       	ldd	r25, Y+5	; 0x05
    3ccc:	90 93 a7 01 	sts	0x01A7, r25
    3cd0:	80 93 a6 01 	sts	0x01A6, r24
			Local_enuErrorStates = ES_OK;
    3cd4:	19 82       	std	Y+1, r1	; 0x01
    3cd6:	24 c0       	rjmp	.+72     	; 0x3d20 <UART_enuCallBack+0x8c>
		}
		else if(Copy_Interrupt_Type == UART_INT_TXC) {
    3cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    3cda:	88 23       	and	r24, r24
    3cdc:	71 f4       	brne	.+28     	; 0x3cfa <UART_enuCallBack+0x66>
			UART_pfCalledFunc[UART_INT_TXC] = *Copy_pFuncConfig;
    3cde:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce2:	90 93 9f 01 	sts	0x019F, r25
    3ce6:	80 93 9e 01 	sts	0x019E, r24
			UART_pParameter[UART_INT_TXC] = Copy_pParameter;
    3cea:	8c 81       	ldd	r24, Y+4	; 0x04
    3cec:	9d 81       	ldd	r25, Y+5	; 0x05
    3cee:	90 93 a5 01 	sts	0x01A5, r25
    3cf2:	80 93 a4 01 	sts	0x01A4, r24
			Local_enuErrorStates = ES_OK;
    3cf6:	19 82       	std	Y+1, r1	; 0x01
    3cf8:	13 c0       	rjmp	.+38     	; 0x3d20 <UART_enuCallBack+0x8c>
		}
		else if(Copy_Interrupt_Type == UART_INT_UDRE) {
    3cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    3cfc:	82 30       	cpi	r24, 0x02	; 2
    3cfe:	81 f4       	brne	.+32     	; 0x3d20 <UART_enuCallBack+0x8c>
			UART_pfCalledFunc[UART_INT_UDRE] = *Copy_pFuncConfig;
    3d00:	8a 81       	ldd	r24, Y+2	; 0x02
    3d02:	9b 81       	ldd	r25, Y+3	; 0x03
    3d04:	90 93 a3 01 	sts	0x01A3, r25
    3d08:	80 93 a2 01 	sts	0x01A2, r24
			UART_pParameter[UART_INT_UDRE] = Copy_pParameter;
    3d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d10:	90 93 a9 01 	sts	0x01A9, r25
    3d14:	80 93 a8 01 	sts	0x01A8, r24
			Local_enuErrorStates = ES_OK;
    3d18:	19 82       	std	Y+1, r1	; 0x01
    3d1a:	02 c0       	rjmp	.+4      	; 0x3d20 <UART_enuCallBack+0x8c>
		else{
#warning "Selection Of UART Interrupt type is not going right!"
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3d1c:	82 e0       	ldi	r24, 0x02	; 2
    3d1e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d22:	26 96       	adiw	r28, 0x06	; 6
    3d24:	0f b6       	in	r0, 0x3f	; 63
    3d26:	f8 94       	cli
    3d28:	de bf       	out	0x3e, r29	; 62
    3d2a:	0f be       	out	0x3f, r0	; 63
    3d2c:	cd bf       	out	0x3d, r28	; 61
    3d2e:	cf 91       	pop	r28
    3d30:	df 91       	pop	r29
    3d32:	08 95       	ret

00003d34 <UART_voidStringify_Number>:

static inline void UART_voidStringify_Number(f32 number, uint_8 *data) {
    3d34:	ef 92       	push	r14
    3d36:	ff 92       	push	r15
    3d38:	0f 93       	push	r16
    3d3a:	1f 93       	push	r17
    3d3c:	df 93       	push	r29
    3d3e:	cf 93       	push	r28
    3d40:	cd b7       	in	r28, 0x3d	; 61
    3d42:	de b7       	in	r29, 0x3e	; 62
    3d44:	a0 97       	sbiw	r28, 0x20	; 32
    3d46:	0f b6       	in	r0, 0x3f	; 63
    3d48:	f8 94       	cli
    3d4a:	de bf       	out	0x3e, r29	; 62
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	cd bf       	out	0x3d, r28	; 61
    3d50:	6a 8f       	std	Y+26, r22	; 0x1a
    3d52:	7b 8f       	std	Y+27, r23	; 0x1b
    3d54:	8c 8f       	std	Y+28, r24	; 0x1c
    3d56:	9d 8f       	std	Y+29, r25	; 0x1d
    3d58:	5f 8f       	std	Y+31, r21	; 0x1f
    3d5a:	4e 8f       	std	Y+30, r20	; 0x1e
    if(number != 0){
    3d5c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d5e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3d60:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d62:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e0       	ldi	r20, 0x00	; 0
    3d6a:	50 e0       	ldi	r21, 0x00	; 0
    3d6c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__nesf2>
    3d70:	88 23       	and	r24, r24
    3d72:	09 f4       	brne	.+2      	; 0x3d76 <UART_voidStringify_Number+0x42>
    3d74:	0e c1       	rjmp	.+540    	; 0x3f92 <UART_voidStringify_Number+0x25e>
		uint_32 number_int = (uint_32) number, Max_fract = MAX_TRANSMITTED_FRACTION;
    3d76:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d78:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3d7a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d7c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d7e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	9a 87       	std	Y+10, r25	; 0x0a
    3d88:	89 87       	std	Y+9, r24	; 0x09
    3d8a:	84 e0       	ldi	r24, 0x04	; 4
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	98 87       	std	Y+8, r25	; 0x08
    3d90:	8f 83       	std	Y+7, r24	; 0x07
		f32 fract = number - number_int;
    3d92:	89 85       	ldd	r24, Y+9	; 0x09
    3d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d96:	cc 01       	movw	r24, r24
    3d98:	a0 e0       	ldi	r26, 0x00	; 0
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    3da4:	9b 01       	movw	r18, r22
    3da6:	ac 01       	movw	r20, r24
    3da8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3daa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3dac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3dae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3db0:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	8b 83       	std	Y+3, r24	; 0x03
    3dba:	9c 83       	std	Y+4, r25	; 0x04
    3dbc:	ad 83       	std	Y+5, r26	; 0x05
    3dbe:	be 83       	std	Y+6, r27	; 0x06

		uint_8 Get_number[15] = "\0";
    3dc0:	80 91 6e 00 	lds	r24, 0x006E
    3dc4:	90 91 6f 00 	lds	r25, 0x006F
    3dc8:	9c 87       	std	Y+12, r25	; 0x0c
    3dca:	8b 87       	std	Y+11, r24	; 0x0b
    3dcc:	8d e0       	ldi	r24, 0x0D	; 13
    3dce:	fe 01       	movw	r30, r28
    3dd0:	3d 96       	adiw	r30, 0x0d	; 13
    3dd2:	df 01       	movw	r26, r30
    3dd4:	98 2f       	mov	r25, r24
    3dd6:	1d 92       	st	X+, r1
    3dd8:	9a 95       	dec	r25
    3dda:	e9 f7       	brne	.-6      	; 0x3dd6 <UART_voidStringify_Number+0xa2>
		sint_8 index = 0, index_rev = 0;
    3ddc:	1a 82       	std	Y+2, r1	; 0x02
    3dde:	19 82       	std	Y+1, r1	; 0x01
    3de0:	20 c0       	rjmp	.+64     	; 0x3e22 <UART_voidStringify_Number+0xee>

		while(number_int) {
			Get_number[index] = ('0' + number_int % 10);
    3de2:	8a 81       	ldd	r24, Y+2	; 0x02
    3de4:	e8 2f       	mov	r30, r24
    3de6:	ff 27       	eor	r31, r31
    3de8:	e7 fd       	sbrc	r30, 7
    3dea:	f0 95       	com	r31
    3dec:	89 85       	ldd	r24, Y+9	; 0x09
    3dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df0:	2a e0       	ldi	r18, 0x0A	; 10
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	b9 01       	movw	r22, r18
    3df6:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__udivmodhi4>
    3dfa:	28 2f       	mov	r18, r24
    3dfc:	20 5d       	subi	r18, 0xD0	; 208
    3dfe:	ce 01       	movw	r24, r28
    3e00:	0b 96       	adiw	r24, 0x0b	; 11
    3e02:	e8 0f       	add	r30, r24
    3e04:	f9 1f       	adc	r31, r25
    3e06:	20 83       	st	Z, r18
			number_int /= 10;
    3e08:	89 85       	ldd	r24, Y+9	; 0x09
    3e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e0c:	2a e0       	ldi	r18, 0x0A	; 10
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	b9 01       	movw	r22, r18
    3e12:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__udivmodhi4>
    3e16:	cb 01       	movw	r24, r22
    3e18:	9a 87       	std	Y+10, r25	; 0x0a
    3e1a:	89 87       	std	Y+9, r24	; 0x09
			index++;
    3e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1e:	8f 5f       	subi	r24, 0xFF	; 255
    3e20:	8a 83       	std	Y+2, r24	; 0x02
		f32 fract = number - number_int;

		uint_8 Get_number[15] = "\0";
		sint_8 index = 0, index_rev = 0;

		while(number_int) {
    3e22:	89 85       	ldd	r24, Y+9	; 0x09
    3e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	e1 f6       	brne	.-72     	; 0x3de2 <UART_voidStringify_Number+0xae>
			Get_number[index] = ('0' + number_int % 10);
			number_int /= 10;
			index++;
		}
		index -= 1;
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2c:	81 50       	subi	r24, 0x01	; 1
    3e2e:	8a 83       	std	Y+2, r24	; 0x02
    3e30:	1c c0       	rjmp	.+56     	; 0x3e6a <UART_voidStringify_Number+0x136>
		while(index >= 0) {
			data[index_rev++] = Get_number[index--];
    3e32:	89 81       	ldd	r24, Y+1	; 0x01
    3e34:	28 2f       	mov	r18, r24
    3e36:	33 27       	eor	r19, r19
    3e38:	27 fd       	sbrc	r18, 7
    3e3a:	30 95       	com	r19
    3e3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e40:	dc 01       	movw	r26, r24
    3e42:	a2 0f       	add	r26, r18
    3e44:	b3 1f       	adc	r27, r19
    3e46:	8a 81       	ldd	r24, Y+2	; 0x02
    3e48:	28 2f       	mov	r18, r24
    3e4a:	33 27       	eor	r19, r19
    3e4c:	27 fd       	sbrc	r18, 7
    3e4e:	30 95       	com	r19
    3e50:	ce 01       	movw	r24, r28
    3e52:	0b 96       	adiw	r24, 0x0b	; 11
    3e54:	fc 01       	movw	r30, r24
    3e56:	e2 0f       	add	r30, r18
    3e58:	f3 1f       	adc	r31, r19
    3e5a:	80 81       	ld	r24, Z
    3e5c:	8c 93       	st	X, r24
    3e5e:	89 81       	ldd	r24, Y+1	; 0x01
    3e60:	8f 5f       	subi	r24, 0xFF	; 255
    3e62:	89 83       	std	Y+1, r24	; 0x01
    3e64:	8a 81       	ldd	r24, Y+2	; 0x02
    3e66:	81 50       	subi	r24, 0x01	; 1
    3e68:	8a 83       	std	Y+2, r24	; 0x02
			Get_number[index] = ('0' + number_int % 10);
			number_int /= 10;
			index++;
		}
		index -= 1;
		while(index >= 0) {
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	88 23       	and	r24, r24
    3e6e:	0c f7       	brge	.-62     	; 0x3e32 <UART_voidStringify_Number+0xfe>
			data[index_rev++] = Get_number[index--];
		}
		if(fract != 0) {
    3e70:	6b 81       	ldd	r22, Y+3	; 0x03
    3e72:	7c 81       	ldd	r23, Y+4	; 0x04
    3e74:	8d 81       	ldd	r24, Y+5	; 0x05
    3e76:	9e 81       	ldd	r25, Y+6	; 0x06
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	40 e0       	ldi	r20, 0x00	; 0
    3e7e:	50 e0       	ldi	r21, 0x00	; 0
    3e80:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__nesf2>
    3e84:	88 23       	and	r24, r24
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <UART_voidStringify_Number+0x156>
    3e88:	88 c0       	rjmp	.+272    	; 0x3f9a <UART_voidStringify_Number+0x266>
			data[index_rev++] = '.';
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	28 2f       	mov	r18, r24
    3e8e:	33 27       	eor	r19, r19
    3e90:	27 fd       	sbrc	r18, 7
    3e92:	30 95       	com	r19
    3e94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e96:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e98:	fc 01       	movw	r30, r24
    3e9a:	e2 0f       	add	r30, r18
    3e9c:	f3 1f       	adc	r31, r19
    3e9e:	8e e2       	ldi	r24, 0x2E	; 46
    3ea0:	80 83       	st	Z, r24
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	8f 5f       	subi	r24, 0xFF	; 255
    3ea6:	89 83       	std	Y+1, r24	; 0x01
    3ea8:	5a c0       	rjmp	.+180    	; 0x3f5e <UART_voidStringify_Number+0x22a>

			while(fract && Max_fract) {
				data[index_rev++] = ((uint_32) (fract * 10) + '0');
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	28 2f       	mov	r18, r24
    3eae:	33 27       	eor	r19, r19
    3eb0:	27 fd       	sbrc	r18, 7
    3eb2:	30 95       	com	r19
    3eb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3eb6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3eb8:	8c 01       	movw	r16, r24
    3eba:	02 0f       	add	r16, r18
    3ebc:	13 1f       	adc	r17, r19
    3ebe:	6b 81       	ldd	r22, Y+3	; 0x03
    3ec0:	7c 81       	ldd	r23, Y+4	; 0x04
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e2       	ldi	r20, 0x20	; 32
    3ecc:	51 e4       	ldi	r21, 0x41	; 65
    3ece:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	bc 01       	movw	r22, r24
    3ed8:	cd 01       	movw	r24, r26
    3eda:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	80 5d       	subi	r24, 0xD0	; 208
    3ee4:	d8 01       	movw	r26, r16
    3ee6:	8c 93       	st	X, r24
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	8f 5f       	subi	r24, 0xFF	; 255
    3eec:	89 83       	std	Y+1, r24	; 0x01
				fract = (fract * 10) - (uint_32) (fract * 10);
    3eee:	6b 81       	ldd	r22, Y+3	; 0x03
    3ef0:	7c 81       	ldd	r23, Y+4	; 0x04
    3ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	40 e2       	ldi	r20, 0x20	; 32
    3efc:	51 e4       	ldi	r21, 0x41	; 65
    3efe:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	7c 01       	movw	r14, r24
    3f08:	8d 01       	movw	r16, r26
    3f0a:	6b 81       	ldd	r22, Y+3	; 0x03
    3f0c:	7c 81       	ldd	r23, Y+4	; 0x04
    3f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f10:	9e 81       	ldd	r25, Y+6	; 0x06
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	40 e2       	ldi	r20, 0x20	; 32
    3f18:	51 e4       	ldi	r21, 0x41	; 65
    3f1a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	bc 01       	movw	r22, r24
    3f24:	cd 01       	movw	r24, r26
    3f26:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	cc 01       	movw	r24, r24
    3f30:	a0 e0       	ldi	r26, 0x00	; 0
    3f32:	b0 e0       	ldi	r27, 0x00	; 0
    3f34:	bc 01       	movw	r22, r24
    3f36:	cd 01       	movw	r24, r26
    3f38:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    3f3c:	9b 01       	movw	r18, r22
    3f3e:	ac 01       	movw	r20, r24
    3f40:	c8 01       	movw	r24, r16
    3f42:	b7 01       	movw	r22, r14
    3f44:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	8b 83       	std	Y+3, r24	; 0x03
    3f4e:	9c 83       	std	Y+4, r25	; 0x04
    3f50:	ad 83       	std	Y+5, r26	; 0x05
    3f52:	be 83       	std	Y+6, r27	; 0x06
				Max_fract-=1;
    3f54:	8f 81       	ldd	r24, Y+7	; 0x07
    3f56:	98 85       	ldd	r25, Y+8	; 0x08
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	98 87       	std	Y+8, r25	; 0x08
    3f5c:	8f 83       	std	Y+7, r24	; 0x07
			data[index_rev++] = Get_number[index--];
		}
		if(fract != 0) {
			data[index_rev++] = '.';

			while(fract && Max_fract) {
    3f5e:	18 a2       	std	Y+32, r1	; 0x20
    3f60:	6b 81       	ldd	r22, Y+3	; 0x03
    3f62:	7c 81       	ldd	r23, Y+4	; 0x04
    3f64:	8d 81       	ldd	r24, Y+5	; 0x05
    3f66:	9e 81       	ldd	r25, Y+6	; 0x06
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e0       	ldi	r20, 0x00	; 0
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__nesf2>
    3f74:	88 23       	and	r24, r24
    3f76:	11 f0       	breq	.+4      	; 0x3f7c <UART_voidStringify_Number+0x248>
    3f78:	b1 e0       	ldi	r27, 0x01	; 1
    3f7a:	b8 a3       	std	Y+32, r27	; 0x20
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f80:	8e 27       	eor	r24, r30
    3f82:	88 23       	and	r24, r24
    3f84:	51 f4       	brne	.+20     	; 0x3f9a <UART_voidStringify_Number+0x266>
    3f86:	8f 81       	ldd	r24, Y+7	; 0x07
    3f88:	98 85       	ldd	r25, Y+8	; 0x08
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	09 f0       	breq	.+2      	; 0x3f90 <UART_voidStringify_Number+0x25c>
    3f8e:	8d cf       	rjmp	.-230    	; 0x3eaa <UART_voidStringify_Number+0x176>
    3f90:	04 c0       	rjmp	.+8      	; 0x3f9a <UART_voidStringify_Number+0x266>
				Max_fract-=1;
			}
		}
    }
    else{
    	*data = '0';
    3f92:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f94:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f96:	80 e3       	ldi	r24, 0x30	; 48
    3f98:	80 83       	st	Z, r24
    }
}
    3f9a:	a0 96       	adiw	r28, 0x20	; 32
    3f9c:	0f b6       	in	r0, 0x3f	; 63
    3f9e:	f8 94       	cli
    3fa0:	de bf       	out	0x3e, r29	; 62
    3fa2:	0f be       	out	0x3f, r0	; 63
    3fa4:	cd bf       	out	0x3d, r28	; 61
    3fa6:	cf 91       	pop	r28
    3fa8:	df 91       	pop	r29
    3faa:	1f 91       	pop	r17
    3fac:	0f 91       	pop	r16
    3fae:	ff 90       	pop	r15
    3fb0:	ef 90       	pop	r14
    3fb2:	08 95       	ret

00003fb4 <UART_voidConvert_to_Number>:

static inline void UART_voidConvert_to_Number(const uint_8 *data, f32 *Number) {
    3fb4:	ef 92       	push	r14
    3fb6:	ff 92       	push	r15
    3fb8:	0f 93       	push	r16
    3fba:	1f 93       	push	r17
    3fbc:	df 93       	push	r29
    3fbe:	cf 93       	push	r28
    3fc0:	cd b7       	in	r28, 0x3d	; 61
    3fc2:	de b7       	in	r29, 0x3e	; 62
    3fc4:	e4 97       	sbiw	r28, 0x34	; 52
    3fc6:	0f b6       	in	r0, 0x3f	; 63
    3fc8:	f8 94       	cli
    3fca:	de bf       	out	0x3e, r29	; 62
    3fcc:	0f be       	out	0x3f, r0	; 63
    3fce:	cd bf       	out	0x3d, r28	; 61
    3fd0:	9a ab       	std	Y+50, r25	; 0x32
    3fd2:	89 ab       	std	Y+49, r24	; 0x31
    3fd4:	7c ab       	std	Y+52, r23	; 0x34
    3fd6:	6b ab       	std	Y+51, r22	; 0x33
	uint_8  Integer_string[15] = "\0";
    3fd8:	80 91 6e 00 	lds	r24, 0x006E
    3fdc:	90 91 6f 00 	lds	r25, 0x006F
    3fe0:	9c 8b       	std	Y+20, r25	; 0x14
    3fe2:	8b 8b       	std	Y+19, r24	; 0x13
    3fe4:	8d e0       	ldi	r24, 0x0D	; 13
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	75 96       	adiw	r30, 0x15	; 21
    3fea:	df 01       	movw	r26, r30
    3fec:	98 2f       	mov	r25, r24
    3fee:	1d 92       	st	X+, r1
    3ff0:	9a 95       	dec	r25
    3ff2:	e9 f7       	brne	.-6      	; 0x3fee <UART_voidConvert_to_Number+0x3a>
	uint_8 	Fraction_string[15] = "\0";
    3ff4:	80 91 6e 00 	lds	r24, 0x006E
    3ff8:	90 91 6f 00 	lds	r25, 0x006F
    3ffc:	9b a3       	std	Y+35, r25	; 0x23
    3ffe:	8a a3       	std	Y+34, r24	; 0x22
    4000:	8d e0       	ldi	r24, 0x0D	; 13
    4002:	fe 01       	movw	r30, r28
    4004:	b4 96       	adiw	r30, 0x24	; 36
    4006:	df 01       	movw	r26, r30
    4008:	98 2f       	mov	r25, r24
    400a:	1d 92       	st	X+, r1
    400c:	9a 95       	dec	r25
    400e:	e9 f7       	brne	.-6      	; 0x400a <UART_voidConvert_to_Number+0x56>

    uint_8 flag = 1, i_num = 0, i_int = 0, i_fract = 0;
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	8a 8b       	std	Y+18, r24	; 0x12
    4014:	19 8a       	std	Y+17, r1	; 0x11
    4016:	18 8a       	std	Y+16, r1	; 0x10
    4018:	1f 86       	std	Y+15, r1	; 0x0f
    uint_32 number_int = 0;
    401a:	1e 86       	std	Y+14, r1	; 0x0e
    401c:	1d 86       	std	Y+13, r1	; 0x0d

    f32 int_factor = 0.1, fract_factor = 10, number_float = 0;
    401e:	8d ec       	ldi	r24, 0xCD	; 205
    4020:	9c ec       	ldi	r25, 0xCC	; 204
    4022:	ac ec       	ldi	r26, 0xCC	; 204
    4024:	bd e3       	ldi	r27, 0x3D	; 61
    4026:	89 87       	std	Y+9, r24	; 0x09
    4028:	9a 87       	std	Y+10, r25	; 0x0a
    402a:	ab 87       	std	Y+11, r26	; 0x0b
    402c:	bc 87       	std	Y+12, r27	; 0x0c
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	a0 e2       	ldi	r26, 0x20	; 32
    4034:	b1 e4       	ldi	r27, 0x41	; 65
    4036:	8d 83       	std	Y+5, r24	; 0x05
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	af 83       	std	Y+7, r26	; 0x07
    403c:	b8 87       	std	Y+8, r27	; 0x08
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	a0 e0       	ldi	r26, 0x00	; 0
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	89 83       	std	Y+1, r24	; 0x01
    4048:	9a 83       	std	Y+2, r25	; 0x02
    404a:	ab 83       	std	Y+3, r26	; 0x03
    404c:	bc 83       	std	Y+4, r27	; 0x04
    404e:	4e c0       	rjmp	.+156    	; 0x40ec <UART_voidConvert_to_Number+0x138>

    while(data[i_num] != '\0') {
        if(flag) {
    4050:	8a 89       	ldd	r24, Y+18	; 0x12
    4052:	88 23       	and	r24, r24
    4054:	99 f1       	breq	.+102    	; 0x40bc <UART_voidConvert_to_Number+0x108>
            if(data[i_num] == '.') {
    4056:	89 89       	ldd	r24, Y+17	; 0x11
    4058:	28 2f       	mov	r18, r24
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	89 a9       	ldd	r24, Y+49	; 0x31
    405e:	9a a9       	ldd	r25, Y+50	; 0x32
    4060:	fc 01       	movw	r30, r24
    4062:	e2 0f       	add	r30, r18
    4064:	f3 1f       	adc	r31, r19
    4066:	80 81       	ld	r24, Z
    4068:	8e 32       	cpi	r24, 0x2E	; 46
    406a:	11 f4       	brne	.+4      	; 0x4070 <UART_voidConvert_to_Number+0xbc>
                flag = 0;
    406c:	1a 8a       	std	Y+18, r1	; 0x12
    406e:	3b c0       	rjmp	.+118    	; 0x40e6 <UART_voidConvert_to_Number+0x132>
            }
            else {
                Integer_string[i_int] = data[i_num];
    4070:	88 89       	ldd	r24, Y+16	; 0x10
    4072:	48 2f       	mov	r20, r24
    4074:	50 e0       	ldi	r21, 0x00	; 0
    4076:	89 89       	ldd	r24, Y+17	; 0x11
    4078:	28 2f       	mov	r18, r24
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	89 a9       	ldd	r24, Y+49	; 0x31
    407e:	9a a9       	ldd	r25, Y+50	; 0x32
    4080:	fc 01       	movw	r30, r24
    4082:	e2 0f       	add	r30, r18
    4084:	f3 1f       	adc	r31, r19
    4086:	20 81       	ld	r18, Z
    4088:	ce 01       	movw	r24, r28
    408a:	43 96       	adiw	r24, 0x13	; 19
    408c:	fc 01       	movw	r30, r24
    408e:	e4 0f       	add	r30, r20
    4090:	f5 1f       	adc	r31, r21
    4092:	20 83       	st	Z, r18
                i_int++;
    4094:	88 89       	ldd	r24, Y+16	; 0x10
    4096:	8f 5f       	subi	r24, 0xFF	; 255
    4098:	88 8b       	std	Y+16, r24	; 0x10
                int_factor *= 10;
    409a:	69 85       	ldd	r22, Y+9	; 0x09
    409c:	7a 85       	ldd	r23, Y+10	; 0x0a
    409e:	8b 85       	ldd	r24, Y+11	; 0x0b
    40a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e2       	ldi	r20, 0x20	; 32
    40a8:	51 e4       	ldi	r21, 0x41	; 65
    40aa:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	89 87       	std	Y+9, r24	; 0x09
    40b4:	9a 87       	std	Y+10, r25	; 0x0a
    40b6:	ab 87       	std	Y+11, r26	; 0x0b
    40b8:	bc 87       	std	Y+12, r27	; 0x0c
    40ba:	15 c0       	rjmp	.+42     	; 0x40e6 <UART_voidConvert_to_Number+0x132>
            }
        }
        else {
            Fraction_string[i_fract] = data[i_num];
    40bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40be:	48 2f       	mov	r20, r24
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	89 89       	ldd	r24, Y+17	; 0x11
    40c4:	28 2f       	mov	r18, r24
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	89 a9       	ldd	r24, Y+49	; 0x31
    40ca:	9a a9       	ldd	r25, Y+50	; 0x32
    40cc:	fc 01       	movw	r30, r24
    40ce:	e2 0f       	add	r30, r18
    40d0:	f3 1f       	adc	r31, r19
    40d2:	20 81       	ld	r18, Z
    40d4:	ce 01       	movw	r24, r28
    40d6:	82 96       	adiw	r24, 0x22	; 34
    40d8:	fc 01       	movw	r30, r24
    40da:	e4 0f       	add	r30, r20
    40dc:	f5 1f       	adc	r31, r21
    40de:	20 83       	st	Z, r18
            i_fract++;
    40e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e2:	8f 5f       	subi	r24, 0xFF	; 255
    40e4:	8f 87       	std	Y+15, r24	; 0x0f
        }
        i_num++;
    40e6:	89 89       	ldd	r24, Y+17	; 0x11
    40e8:	8f 5f       	subi	r24, 0xFF	; 255
    40ea:	89 8b       	std	Y+17, r24	; 0x11
    uint_8 flag = 1, i_num = 0, i_int = 0, i_fract = 0;
    uint_32 number_int = 0;

    f32 int_factor = 0.1, fract_factor = 10, number_float = 0;

    while(data[i_num] != '\0') {
    40ec:	89 89       	ldd	r24, Y+17	; 0x11
    40ee:	28 2f       	mov	r18, r24
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	89 a9       	ldd	r24, Y+49	; 0x31
    40f4:	9a a9       	ldd	r25, Y+50	; 0x32
    40f6:	fc 01       	movw	r30, r24
    40f8:	e2 0f       	add	r30, r18
    40fa:	f3 1f       	adc	r31, r19
    40fc:	80 81       	ld	r24, Z
    40fe:	88 23       	and	r24, r24
    4100:	09 f0       	breq	.+2      	; 0x4104 <UART_voidConvert_to_Number+0x150>
    4102:	a6 cf       	rjmp	.-180    	; 0x4050 <UART_voidConvert_to_Number+0x9c>
            i_fract++;
        }
        i_num++;
    }

    Integer_string[i_int] = '\0', Fraction_string[i_fract] = '\0';
    4104:	88 89       	ldd	r24, Y+16	; 0x10
    4106:	28 2f       	mov	r18, r24
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	ce 01       	movw	r24, r28
    410c:	43 96       	adiw	r24, 0x13	; 19
    410e:	fc 01       	movw	r30, r24
    4110:	e2 0f       	add	r30, r18
    4112:	f3 1f       	adc	r31, r19
    4114:	10 82       	st	Z, r1
    4116:	8f 85       	ldd	r24, Y+15	; 0x0f
    4118:	28 2f       	mov	r18, r24
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	ce 01       	movw	r24, r28
    411e:	82 96       	adiw	r24, 0x22	; 34
    4120:	fc 01       	movw	r30, r24
    4122:	e2 0f       	add	r30, r18
    4124:	f3 1f       	adc	r31, r19
    4126:	10 82       	st	Z, r1

    i_int = 0, i_fract = 0;
    4128:	18 8a       	std	Y+16, r1	; 0x10
    412a:	1f 86       	std	Y+15, r1	; 0x0f
    412c:	4e c0       	rjmp	.+156    	; 0x41ca <UART_voidConvert_to_Number+0x216>
    while(Integer_string[i_int] != '\0') {
        number_int += int_factor * (Integer_string[i_int] - '0');
    412e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4130:	9e 85       	ldd	r25, Y+14	; 0x0e
    4132:	cc 01       	movw	r24, r24
    4134:	a0 e0       	ldi	r26, 0x00	; 0
    4136:	b0 e0       	ldi	r27, 0x00	; 0
    4138:	bc 01       	movw	r22, r24
    413a:	cd 01       	movw	r24, r26
    413c:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    4140:	7b 01       	movw	r14, r22
    4142:	8c 01       	movw	r16, r24
    4144:	88 89       	ldd	r24, Y+16	; 0x10
    4146:	28 2f       	mov	r18, r24
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	ce 01       	movw	r24, r28
    414c:	43 96       	adiw	r24, 0x13	; 19
    414e:	fc 01       	movw	r30, r24
    4150:	e2 0f       	add	r30, r18
    4152:	f3 1f       	adc	r31, r19
    4154:	80 81       	ld	r24, Z
    4156:	88 2f       	mov	r24, r24
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	c0 97       	sbiw	r24, 0x30	; 48
    415c:	aa 27       	eor	r26, r26
    415e:	97 fd       	sbrc	r25, 7
    4160:	a0 95       	com	r26
    4162:	ba 2f       	mov	r27, r26
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__floatsisf>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	bc 01       	movw	r22, r24
    4172:	cd 01       	movw	r24, r26
    4174:	29 85       	ldd	r18, Y+9	; 0x09
    4176:	3a 85       	ldd	r19, Y+10	; 0x0a
    4178:	4b 85       	ldd	r20, Y+11	; 0x0b
    417a:	5c 85       	ldd	r21, Y+12	; 0x0c
    417c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4180:	dc 01       	movw	r26, r24
    4182:	cb 01       	movw	r24, r22
    4184:	9c 01       	movw	r18, r24
    4186:	ad 01       	movw	r20, r26
    4188:	c8 01       	movw	r24, r16
    418a:	b7 01       	movw	r22, r14
    418c:	0e 94 ce 14 	call	0x299c	; 0x299c <__addsf3>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	bc 01       	movw	r22, r24
    4196:	cd 01       	movw	r24, r26
    4198:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	9e 87       	std	Y+14, r25	; 0x0e
    41a2:	8d 87       	std	Y+13, r24	; 0x0d
        int_factor /= 10;
    41a4:	69 85       	ldd	r22, Y+9	; 0x09
    41a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    41a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    41aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	40 e2       	ldi	r20, 0x20	; 32
    41b2:	51 e4       	ldi	r21, 0x41	; 65
    41b4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__divsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	89 87       	std	Y+9, r24	; 0x09
    41be:	9a 87       	std	Y+10, r25	; 0x0a
    41c0:	ab 87       	std	Y+11, r26	; 0x0b
    41c2:	bc 87       	std	Y+12, r27	; 0x0c
        i_int++;
    41c4:	88 89       	ldd	r24, Y+16	; 0x10
    41c6:	8f 5f       	subi	r24, 0xFF	; 255
    41c8:	88 8b       	std	Y+16, r24	; 0x10
    }

    Integer_string[i_int] = '\0', Fraction_string[i_fract] = '\0';

    i_int = 0, i_fract = 0;
    while(Integer_string[i_int] != '\0') {
    41ca:	88 89       	ldd	r24, Y+16	; 0x10
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	ce 01       	movw	r24, r28
    41d2:	43 96       	adiw	r24, 0x13	; 19
    41d4:	fc 01       	movw	r30, r24
    41d6:	e2 0f       	add	r30, r18
    41d8:	f3 1f       	adc	r31, r19
    41da:	80 81       	ld	r24, Z
    41dc:	88 23       	and	r24, r24
    41de:	09 f0       	breq	.+2      	; 0x41e2 <UART_voidConvert_to_Number+0x22e>
    41e0:	a6 cf       	rjmp	.-180    	; 0x412e <UART_voidConvert_to_Number+0x17a>
    41e2:	41 c0       	rjmp	.+130    	; 0x4266 <UART_voidConvert_to_Number+0x2b2>
        int_factor /= 10;
        i_int++;
    }

    while(Fraction_string[i_fract] != '\0') {
        number_float += (float) (Fraction_string[i_fract] - '0') / fract_factor;
    41e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	ce 01       	movw	r24, r28
    41ec:	82 96       	adiw	r24, 0x22	; 34
    41ee:	fc 01       	movw	r30, r24
    41f0:	e2 0f       	add	r30, r18
    41f2:	f3 1f       	adc	r31, r19
    41f4:	80 81       	ld	r24, Z
    41f6:	88 2f       	mov	r24, r24
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	c0 97       	sbiw	r24, 0x30	; 48
    41fc:	aa 27       	eor	r26, r26
    41fe:	97 fd       	sbrc	r25, 7
    4200:	a0 95       	com	r26
    4202:	ba 2f       	mov	r27, r26
    4204:	bc 01       	movw	r22, r24
    4206:	cd 01       	movw	r24, r26
    4208:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__floatsisf>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	2d 81       	ldd	r18, Y+5	; 0x05
    4216:	3e 81       	ldd	r19, Y+6	; 0x06
    4218:	4f 81       	ldd	r20, Y+7	; 0x07
    421a:	58 85       	ldd	r21, Y+8	; 0x08
    421c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__divsf3>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	9c 01       	movw	r18, r24
    4226:	ad 01       	movw	r20, r26
    4228:	69 81       	ldd	r22, Y+1	; 0x01
    422a:	7a 81       	ldd	r23, Y+2	; 0x02
    422c:	8b 81       	ldd	r24, Y+3	; 0x03
    422e:	9c 81       	ldd	r25, Y+4	; 0x04
    4230:	0e 94 ce 14 	call	0x299c	; 0x299c <__addsf3>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	89 83       	std	Y+1, r24	; 0x01
    423a:	9a 83       	std	Y+2, r25	; 0x02
    423c:	ab 83       	std	Y+3, r26	; 0x03
    423e:	bc 83       	std	Y+4, r27	; 0x04
        fract_factor *= 10;
    4240:	6d 81       	ldd	r22, Y+5	; 0x05
    4242:	7e 81       	ldd	r23, Y+6	; 0x06
    4244:	8f 81       	ldd	r24, Y+7	; 0x07
    4246:	98 85       	ldd	r25, Y+8	; 0x08
    4248:	20 e0       	ldi	r18, 0x00	; 0
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	40 e2       	ldi	r20, 0x20	; 32
    424e:	51 e4       	ldi	r21, 0x41	; 65
    4250:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	9e 83       	std	Y+6, r25	; 0x06
    425c:	af 83       	std	Y+7, r26	; 0x07
    425e:	b8 87       	std	Y+8, r27	; 0x08
        i_fract++;
    4260:	8f 85       	ldd	r24, Y+15	; 0x0f
    4262:	8f 5f       	subi	r24, 0xFF	; 255
    4264:	8f 87       	std	Y+15, r24	; 0x0f
        number_int += int_factor * (Integer_string[i_int] - '0');
        int_factor /= 10;
        i_int++;
    }

    while(Fraction_string[i_fract] != '\0') {
    4266:	8f 85       	ldd	r24, Y+15	; 0x0f
    4268:	28 2f       	mov	r18, r24
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	ce 01       	movw	r24, r28
    426e:	82 96       	adiw	r24, 0x22	; 34
    4270:	fc 01       	movw	r30, r24
    4272:	e2 0f       	add	r30, r18
    4274:	f3 1f       	adc	r31, r19
    4276:	80 81       	ld	r24, Z
    4278:	88 23       	and	r24, r24
    427a:	09 f0       	breq	.+2      	; 0x427e <UART_voidConvert_to_Number+0x2ca>
    427c:	b3 cf       	rjmp	.-154    	; 0x41e4 <UART_voidConvert_to_Number+0x230>
        number_float += (float) (Fraction_string[i_fract] - '0') / fract_factor;
        fract_factor *= 10;
        i_fract++;
    }
    if((number_int + number_float) != 0.0){
    427e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4280:	9e 85       	ldd	r25, Y+14	; 0x0e
    4282:	cc 01       	movw	r24, r24
    4284:	a0 e0       	ldi	r26, 0x00	; 0
    4286:	b0 e0       	ldi	r27, 0x00	; 0
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	bc 01       	movw	r22, r24
    4296:	cd 01       	movw	r24, r26
    4298:	29 81       	ldd	r18, Y+1	; 0x01
    429a:	3a 81       	ldd	r19, Y+2	; 0x02
    429c:	4b 81       	ldd	r20, Y+3	; 0x03
    429e:	5c 81       	ldd	r21, Y+4	; 0x04
    42a0:	0e 94 ce 14 	call	0x299c	; 0x299c <__addsf3>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	bc 01       	movw	r22, r24
    42aa:	cd 01       	movw	r24, r26
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	40 e0       	ldi	r20, 0x00	; 0
    42b2:	50 e0       	ldi	r21, 0x00	; 0
    42b4:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__nesf2>
    42b8:	88 23       	and	r24, r24
    42ba:	d9 f0       	breq	.+54     	; 0x42f2 <UART_voidConvert_to_Number+0x33e>
		*Number = number_int + number_float;
    42bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    42be:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c0:	cc 01       	movw	r24, r24
    42c2:	a0 e0       	ldi	r26, 0x00	; 0
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	bc 01       	movw	r22, r24
    42c8:	cd 01       	movw	r24, r26
    42ca:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	bc 01       	movw	r22, r24
    42d4:	cd 01       	movw	r24, r26
    42d6:	29 81       	ldd	r18, Y+1	; 0x01
    42d8:	3a 81       	ldd	r19, Y+2	; 0x02
    42da:	4b 81       	ldd	r20, Y+3	; 0x03
    42dc:	5c 81       	ldd	r21, Y+4	; 0x04
    42de:	0e 94 ce 14 	call	0x299c	; 0x299c <__addsf3>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	eb a9       	ldd	r30, Y+51	; 0x33
    42e8:	fc a9       	ldd	r31, Y+52	; 0x34
    42ea:	80 83       	st	Z, r24
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	a2 83       	std	Z+2, r26	; 0x02
    42f0:	b3 83       	std	Z+3, r27	; 0x03
    }
}
    42f2:	e4 96       	adiw	r28, 0x34	; 52
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
    42fe:	cf 91       	pop	r28
    4300:	df 91       	pop	r29
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	ff 90       	pop	r15
    4308:	ef 90       	pop	r14
    430a:	08 95       	ret

0000430c <UART_voidRecieveString>:

static inline void UART_voidRecieveString(uint_8* Copy_puint8Data){
    430c:	df 93       	push	r29
    430e:	cf 93       	push	r28
    4310:	00 d0       	rcall	.+0      	; 0x4312 <UART_voidRecieveString+0x6>
    4312:	00 d0       	rcall	.+0      	; 0x4314 <UART_voidRecieveString+0x8>
    4314:	cd b7       	in	r28, 0x3d	; 61
    4316:	de b7       	in	r29, 0x3e	; 62
    4318:	9c 83       	std	Y+4, r25	; 0x04
    431a:	8b 83       	std	Y+3, r24	; 0x03

	uint_8 Local_uint8Iterator = 0, Local_uint8Data;
    431c:	1a 82       	std	Y+2, r1	; 0x02

	while(1){
			UART_voidWaitOnRXC();
    431e:	0e 94 ee 21 	call	0x43dc	; 0x43dc <UART_voidWaitOnRXC>
			Local_uint8Data = UDR;
    4322:	ec e2       	ldi	r30, 0x2C	; 44
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	80 81       	ld	r24, Z
    4328:	89 83       	std	Y+1, r24	; 0x01
			if(Local_uint8Data != '\0' && !(Local_uint8Data == '\r' || Local_uint8Data == '\n')){
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	88 23       	and	r24, r24
    432e:	81 f0       	breq	.+32     	; 0x4350 <UART_voidRecieveString+0x44>
    4330:	89 81       	ldd	r24, Y+1	; 0x01
    4332:	8d 30       	cpi	r24, 0x0D	; 13
    4334:	69 f0       	breq	.+26     	; 0x4350 <UART_voidRecieveString+0x44>
    4336:	89 81       	ldd	r24, Y+1	; 0x01
    4338:	8a 30       	cpi	r24, 0x0A	; 10
    433a:	51 f0       	breq	.+20     	; 0x4350 <UART_voidRecieveString+0x44>
				Copy_puint8Data[Local_uint8Iterator] = Local_uint8Data;
    433c:	8a 81       	ldd	r24, Y+2	; 0x02
    433e:	28 2f       	mov	r18, r24
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	8b 81       	ldd	r24, Y+3	; 0x03
    4344:	9c 81       	ldd	r25, Y+4	; 0x04
    4346:	fc 01       	movw	r30, r24
    4348:	e2 0f       	add	r30, r18
    434a:	f3 1f       	adc	r31, r19
    434c:	89 81       	ldd	r24, Y+1	; 0x01
    434e:	80 83       	st	Z, r24
			}

			if(Local_uint8Data == '\r' || Local_uint8Data == '\n'){
    4350:	89 81       	ldd	r24, Y+1	; 0x01
    4352:	8d 30       	cpi	r24, 0x0D	; 13
    4354:	19 f0       	breq	.+6      	; 0x435c <UART_voidRecieveString+0x50>
    4356:	89 81       	ldd	r24, Y+1	; 0x01
    4358:	8a 30       	cpi	r24, 0x0A	; 10
    435a:	81 f4       	brne	.+32     	; 0x437c <UART_voidRecieveString+0x70>
				Copy_puint8Data[Local_uint8Iterator] = '\0';
    435c:	8a 81       	ldd	r24, Y+2	; 0x02
    435e:	28 2f       	mov	r18, r24
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	8b 81       	ldd	r24, Y+3	; 0x03
    4364:	9c 81       	ldd	r25, Y+4	; 0x04
    4366:	fc 01       	movw	r30, r24
    4368:	e2 0f       	add	r30, r18
    436a:	f3 1f       	adc	r31, r19
    436c:	10 82       	st	Z, r1
				break;
			}
			Local_uint8Iterator++;
	}
}
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	08 95       	ret

			if(Local_uint8Data == '\r' || Local_uint8Data == '\n'){
				Copy_puint8Data[Local_uint8Iterator] = '\0';
				break;
			}
			Local_uint8Iterator++;
    437c:	8a 81       	ldd	r24, Y+2	; 0x02
    437e:	8f 5f       	subi	r24, 0xFF	; 255
    4380:	8a 83       	std	Y+2, r24	; 0x02
    4382:	cd cf       	rjmp	.-102    	; 0x431e <UART_voidRecieveString+0x12>

00004384 <UART_voidTransmitString>:
	}
}

static inline void UART_voidTransmitString(uint_8* Copy_puint8Data){
    4384:	df 93       	push	r29
    4386:	cf 93       	push	r28
    4388:	00 d0       	rcall	.+0      	; 0x438a <UART_voidTransmitString+0x6>
    438a:	0f 92       	push	r0
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	9b 83       	std	Y+3, r25	; 0x03
    4392:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Local_uint8Iterator = 0;
    4394:	19 82       	std	Y+1, r1	; 0x01
    4396:	11 c0       	rjmp	.+34     	; 0x43ba <UART_voidTransmitString+0x36>
		while(Copy_puint8Data[Local_uint8Iterator] != '\0'){
			UART_voidWaitOnUDRE();
    4398:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <UART_voidWaitOnUDRE>

			UDR = Copy_puint8Data[Local_uint8Iterator];
    439c:	ac e2       	ldi	r26, 0x2C	; 44
    439e:	b0 e0       	ldi	r27, 0x00	; 0
    43a0:	89 81       	ldd	r24, Y+1	; 0x01
    43a2:	28 2f       	mov	r18, r24
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	8a 81       	ldd	r24, Y+2	; 0x02
    43a8:	9b 81       	ldd	r25, Y+3	; 0x03
    43aa:	fc 01       	movw	r30, r24
    43ac:	e2 0f       	add	r30, r18
    43ae:	f3 1f       	adc	r31, r19
    43b0:	80 81       	ld	r24, Z
    43b2:	8c 93       	st	X, r24
			Local_uint8Iterator++;
    43b4:	89 81       	ldd	r24, Y+1	; 0x01
    43b6:	8f 5f       	subi	r24, 0xFF	; 255
    43b8:	89 83       	std	Y+1, r24	; 0x01
	}
}

static inline void UART_voidTransmitString(uint_8* Copy_puint8Data){
	uint_8 Local_uint8Iterator = 0;
		while(Copy_puint8Data[Local_uint8Iterator] != '\0'){
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
    43bc:	28 2f       	mov	r18, r24
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	8a 81       	ldd	r24, Y+2	; 0x02
    43c2:	9b 81       	ldd	r25, Y+3	; 0x03
    43c4:	fc 01       	movw	r30, r24
    43c6:	e2 0f       	add	r30, r18
    43c8:	f3 1f       	adc	r31, r19
    43ca:	80 81       	ld	r24, Z
    43cc:	88 23       	and	r24, r24
    43ce:	21 f7       	brne	.-56     	; 0x4398 <UART_voidTransmitString+0x14>

			UDR = Copy_puint8Data[Local_uint8Iterator];
			Local_uint8Iterator++;

		}
}
    43d0:	0f 90       	pop	r0
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	cf 91       	pop	r28
    43d8:	df 91       	pop	r29
    43da:	08 95       	ret

000043dc <UART_voidWaitOnRXC>:
static inline void UART_voidWaitOnTXC(void){
	while(!((UCSRA >> TXC_BIT) & BIT_MASK1))
		;
}

static inline void UART_voidWaitOnRXC(void){
    43dc:	df 93       	push	r29
    43de:	cf 93       	push	r28
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
	while(!((UCSRA >> RXC_BIT) & BIT_MASK1))
    43e4:	eb e2       	ldi	r30, 0x2B	; 43
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	80 81       	ld	r24, Z
    43ea:	88 23       	and	r24, r24
    43ec:	dc f7       	brge	.-10     	; 0x43e4 <UART_voidWaitOnRXC+0x8>
			;
}
    43ee:	cf 91       	pop	r28
    43f0:	df 91       	pop	r29
    43f2:	08 95       	ret

000043f4 <UART_voidWaitOnUDRE>:

static inline void UART_voidWaitOnUDRE(void){
    43f4:	df 93       	push	r29
    43f6:	cf 93       	push	r28
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
	while(!((UCSRA >> UDRE_BIT) & BIT_MASK1))
    43fc:	eb e2       	ldi	r30, 0x2B	; 43
    43fe:	f0 e0       	ldi	r31, 0x00	; 0
    4400:	80 81       	ld	r24, Z
    4402:	82 95       	swap	r24
    4404:	86 95       	lsr	r24
    4406:	87 70       	andi	r24, 0x07	; 7
    4408:	88 2f       	mov	r24, r24
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	81 70       	andi	r24, 0x01	; 1
    440e:	90 70       	andi	r25, 0x00	; 0
    4410:	00 97       	sbiw	r24, 0x00	; 0
    4412:	a1 f3       	breq	.-24     	; 0x43fc <UART_voidWaitOnUDRE+0x8>
			;
}
    4414:	cf 91       	pop	r28
    4416:	df 91       	pop	r29
    4418:	08 95       	ret

0000441a <UART_voidResetCharacterSize>:

static inline void UART_voidResetCharacterSize(uint_8 Copy_uint8Value){
    441a:	df 93       	push	r29
    441c:	cf 93       	push	r28
    441e:	00 d0       	rcall	.+0      	; 0x4420 <UART_voidResetCharacterSize+0x6>
    4420:	cd b7       	in	r28, 0x3d	; 61
    4422:	de b7       	in	r29, 0x3e	; 62
    4424:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Local_uint8ucsrc = UBRRH;
    4426:	e0 e4       	ldi	r30, 0x40	; 64
    4428:	f0 e0       	ldi	r31, 0x00	; 0
    442a:	80 81       	ld	r24, Z
    442c:	89 83       	std	Y+1, r24	; 0x01
	Local_uint8ucsrc = UCSRC;
    442e:	e0 e4       	ldi	r30, 0x40	; 64
    4430:	f0 e0       	ldi	r31, 0x00	; 0
    4432:	80 81       	ld	r24, Z
    4434:	89 83       	std	Y+1, r24	; 0x01
	Local_uint8ucsrc |= (BIT_MASK1 << URSEL_BIT); // select the register ucsra
    4436:	89 81       	ldd	r24, Y+1	; 0x01
    4438:	80 68       	ori	r24, 0x80	; 128
    443a:	89 83       	std	Y+1, r24	; 0x01
	Local_uint8ucsrc &= ~(BIT_MASK2 << UCSZ0_BIT);
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	89 7f       	andi	r24, 0xF9	; 249
    4440:	89 83       	std	Y+1, r24	; 0x01
	Local_uint8ucsrc = ((Copy_uint8Value & BIT_MASK2) << UCSZ0_BIT);
    4442:	8a 81       	ldd	r24, Y+2	; 0x02
    4444:	83 70       	andi	r24, 0x03	; 3
    4446:	88 0f       	add	r24, r24
    4448:	89 83       	std	Y+1, r24	; 0x01

	UCSRB &= ~(BIT_MASK1 << UCSZ2_BIT);
    444a:	aa e2       	ldi	r26, 0x2A	; 42
    444c:	b0 e0       	ldi	r27, 0x00	; 0
    444e:	ea e2       	ldi	r30, 0x2A	; 42
    4450:	f0 e0       	ldi	r31, 0x00	; 0
    4452:	80 81       	ld	r24, Z
    4454:	8b 7f       	andi	r24, 0xFB	; 251
    4456:	8c 93       	st	X, r24
	UCSRB |= (((Copy_uint8Value >> UCSZ2_BIT) & BIT_MASK1) << UCSZ2_BIT);
    4458:	aa e2       	ldi	r26, 0x2A	; 42
    445a:	b0 e0       	ldi	r27, 0x00	; 0
    445c:	ea e2       	ldi	r30, 0x2A	; 42
    445e:	f0 e0       	ldi	r31, 0x00	; 0
    4460:	80 81       	ld	r24, Z
    4462:	28 2f       	mov	r18, r24
    4464:	8a 81       	ldd	r24, Y+2	; 0x02
    4466:	86 95       	lsr	r24
    4468:	86 95       	lsr	r24
    446a:	88 2f       	mov	r24, r24
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	81 70       	andi	r24, 0x01	; 1
    4470:	90 70       	andi	r25, 0x00	; 0
    4472:	88 0f       	add	r24, r24
    4474:	99 1f       	adc	r25, r25
    4476:	88 0f       	add	r24, r24
    4478:	99 1f       	adc	r25, r25
    447a:	82 2b       	or	r24, r18
    447c:	8c 93       	st	X, r24
	UCSRC = Local_uint8ucsrc;
    447e:	e0 e4       	ldi	r30, 0x40	; 64
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	89 81       	ldd	r24, Y+1	; 0x01
    4484:	80 83       	st	Z, r24
}
    4486:	0f 90       	pop	r0
    4488:	0f 90       	pop	r0
    448a:	cf 91       	pop	r28
    448c:	df 91       	pop	r29
    448e:	08 95       	ret

00004490 <UART_uint8String_Compare>:

static uint_8 UART_uint8String_Compare(const uint_8* Data, const uint_8* String){
    4490:	df 93       	push	r29
    4492:	cf 93       	push	r28
    4494:	00 d0       	rcall	.+0      	; 0x4496 <UART_uint8String_Compare+0x6>
    4496:	00 d0       	rcall	.+0      	; 0x4498 <UART_uint8String_Compare+0x8>
    4498:	00 d0       	rcall	.+0      	; 0x449a <UART_uint8String_Compare+0xa>
    449a:	cd b7       	in	r28, 0x3d	; 61
    449c:	de b7       	in	r29, 0x3e	; 62
    449e:	9b 83       	std	Y+3, r25	; 0x03
    44a0:	8a 83       	std	Y+2, r24	; 0x02
    44a2:	7d 83       	std	Y+5, r23	; 0x05
    44a4:	6c 83       	std	Y+4, r22	; 0x04
	uint_8 Local_uint8Iterator = 0;
    44a6:	19 82       	std	Y+1, r1	; 0x01
    44a8:	19 c0       	rjmp	.+50     	; 0x44dc <UART_uint8String_Compare+0x4c>
	while(String[Local_uint8Iterator] != '\0'){
		if(Data[Local_uint8Iterator] != String[Local_uint8Iterator]){
    44aa:	89 81       	ldd	r24, Y+1	; 0x01
    44ac:	28 2f       	mov	r18, r24
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	8a 81       	ldd	r24, Y+2	; 0x02
    44b2:	9b 81       	ldd	r25, Y+3	; 0x03
    44b4:	fc 01       	movw	r30, r24
    44b6:	e2 0f       	add	r30, r18
    44b8:	f3 1f       	adc	r31, r19
    44ba:	40 81       	ld	r20, Z
    44bc:	89 81       	ldd	r24, Y+1	; 0x01
    44be:	28 2f       	mov	r18, r24
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	8c 81       	ldd	r24, Y+4	; 0x04
    44c4:	9d 81       	ldd	r25, Y+5	; 0x05
    44c6:	fc 01       	movw	r30, r24
    44c8:	e2 0f       	add	r30, r18
    44ca:	f3 1f       	adc	r31, r19
    44cc:	80 81       	ld	r24, Z
    44ce:	48 17       	cp	r20, r24
    44d0:	11 f0       	breq	.+4      	; 0x44d6 <UART_uint8String_Compare+0x46>
			return 0;
    44d2:	1e 82       	std	Y+6, r1	; 0x06
    44d4:	26 c0       	rjmp	.+76     	; 0x4522 <UART_uint8String_Compare+0x92>
		}
		Local_uint8Iterator++;
    44d6:	89 81       	ldd	r24, Y+1	; 0x01
    44d8:	8f 5f       	subi	r24, 0xFF	; 255
    44da:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = Local_uint8ucsrc;
}

static uint_8 UART_uint8String_Compare(const uint_8* Data, const uint_8* String){
	uint_8 Local_uint8Iterator = 0;
	while(String[Local_uint8Iterator] != '\0'){
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
    44de:	28 2f       	mov	r18, r24
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	8c 81       	ldd	r24, Y+4	; 0x04
    44e4:	9d 81       	ldd	r25, Y+5	; 0x05
    44e6:	fc 01       	movw	r30, r24
    44e8:	e2 0f       	add	r30, r18
    44ea:	f3 1f       	adc	r31, r19
    44ec:	80 81       	ld	r24, Z
    44ee:	88 23       	and	r24, r24
    44f0:	e1 f6       	brne	.-72     	; 0x44aa <UART_uint8String_Compare+0x1a>
		if(Data[Local_uint8Iterator] != String[Local_uint8Iterator]){
			return 0;
		}
		Local_uint8Iterator++;
	}
	if(Data[Local_uint8Iterator] != String[Local_uint8Iterator]){
    44f2:	89 81       	ldd	r24, Y+1	; 0x01
    44f4:	28 2f       	mov	r18, r24
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	8a 81       	ldd	r24, Y+2	; 0x02
    44fa:	9b 81       	ldd	r25, Y+3	; 0x03
    44fc:	fc 01       	movw	r30, r24
    44fe:	e2 0f       	add	r30, r18
    4500:	f3 1f       	adc	r31, r19
    4502:	40 81       	ld	r20, Z
    4504:	89 81       	ldd	r24, Y+1	; 0x01
    4506:	28 2f       	mov	r18, r24
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	8c 81       	ldd	r24, Y+4	; 0x04
    450c:	9d 81       	ldd	r25, Y+5	; 0x05
    450e:	fc 01       	movw	r30, r24
    4510:	e2 0f       	add	r30, r18
    4512:	f3 1f       	adc	r31, r19
    4514:	80 81       	ld	r24, Z
    4516:	48 17       	cp	r20, r24
    4518:	11 f0       	breq	.+4      	; 0x451e <UART_uint8String_Compare+0x8e>
		return 0;
    451a:	1e 82       	std	Y+6, r1	; 0x06
    451c:	02 c0       	rjmp	.+4      	; 0x4522 <UART_uint8String_Compare+0x92>
	}
	return 1;
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	8e 83       	std	Y+6, r24	; 0x06
    4522:	8e 81       	ldd	r24, Y+6	; 0x06
}
    4524:	26 96       	adiw	r28, 0x06	; 6
    4526:	0f b6       	in	r0, 0x3f	; 63
    4528:	f8 94       	cli
    452a:	de bf       	out	0x3e, r29	; 62
    452c:	0f be       	out	0x3f, r0	; 63
    452e:	cd bf       	out	0x3d, r28	; 61
    4530:	cf 91       	pop	r28
    4532:	df 91       	pop	r29
    4534:	08 95       	ret

00004536 <UART_voidTransmit9BitData>:

static inline void UART_voidTransmit9BitData(const uint_8* Copy_puint8Data, const uint_8 Copy_uint8Type){
    4536:	df 93       	push	r29
    4538:	cf 93       	push	r28
    453a:	00 d0       	rcall	.+0      	; 0x453c <UART_voidTransmit9BitData+0x6>
    453c:	00 d0       	rcall	.+0      	; 0x453e <UART_voidTransmit9BitData+0x8>
    453e:	cd b7       	in	r28, 0x3d	; 61
    4540:	de b7       	in	r29, 0x3e	; 62
    4542:	9b 83       	std	Y+3, r25	; 0x03
    4544:	8a 83       	std	Y+2, r24	; 0x02
    4546:	6c 83       	std	Y+4, r22	; 0x04
	if(Copy_puint8Data != NULL){
    4548:	8a 81       	ldd	r24, Y+2	; 0x02
    454a:	9b 81       	ldd	r25, Y+3	; 0x03
    454c:	00 97       	sbiw	r24, 0x00	; 0
    454e:	79 f1       	breq	.+94     	; 0x45ae <UART_voidTransmit9BitData+0x78>
		uint_8 Local_uint8Iterator = 0;
    4550:	19 82       	std	Y+1, r1	; 0x01
    4552:	22 c0       	rjmp	.+68     	; 0x4598 <UART_voidTransmit9BitData+0x62>
		while(Copy_puint8Data[Local_uint8Iterator] != '\0'){
			UART_voidWaitOnUDRE();
    4554:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <UART_voidWaitOnUDRE>

			UCSRB &= ~(BIT_MASK1 << TXB8_BIT);
    4558:	aa e2       	ldi	r26, 0x2A	; 42
    455a:	b0 e0       	ldi	r27, 0x00	; 0
    455c:	ea e2       	ldi	r30, 0x2A	; 42
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	8e 7f       	andi	r24, 0xFE	; 254
    4564:	8c 93       	st	X, r24
			if(Copy_uint8Type == TYPE_ADDRESS)
    4566:	8c 81       	ldd	r24, Y+4	; 0x04
    4568:	8b 32       	cpi	r24, 0x2B	; 43
    456a:	39 f4       	brne	.+14     	; 0x457a <UART_voidTransmit9BitData+0x44>
				UCSRB |= (BIT_MASK1 << TXB8_BIT);
    456c:	aa e2       	ldi	r26, 0x2A	; 42
    456e:	b0 e0       	ldi	r27, 0x00	; 0
    4570:	ea e2       	ldi	r30, 0x2A	; 42
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	81 60       	ori	r24, 0x01	; 1
    4578:	8c 93       	st	X, r24

			UDR = Copy_puint8Data[Local_uint8Iterator];
    457a:	ac e2       	ldi	r26, 0x2C	; 44
    457c:	b0 e0       	ldi	r27, 0x00	; 0
    457e:	89 81       	ldd	r24, Y+1	; 0x01
    4580:	28 2f       	mov	r18, r24
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	8a 81       	ldd	r24, Y+2	; 0x02
    4586:	9b 81       	ldd	r25, Y+3	; 0x03
    4588:	fc 01       	movw	r30, r24
    458a:	e2 0f       	add	r30, r18
    458c:	f3 1f       	adc	r31, r19
    458e:	80 81       	ld	r24, Z
    4590:	8c 93       	st	X, r24
			Local_uint8Iterator++;
    4592:	89 81       	ldd	r24, Y+1	; 0x01
    4594:	8f 5f       	subi	r24, 0xFF	; 255
    4596:	89 83       	std	Y+1, r24	; 0x01
}

static inline void UART_voidTransmit9BitData(const uint_8* Copy_puint8Data, const uint_8 Copy_uint8Type){
	if(Copy_puint8Data != NULL){
		uint_8 Local_uint8Iterator = 0;
		while(Copy_puint8Data[Local_uint8Iterator] != '\0'){
    4598:	89 81       	ldd	r24, Y+1	; 0x01
    459a:	28 2f       	mov	r18, r24
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	8a 81       	ldd	r24, Y+2	; 0x02
    45a0:	9b 81       	ldd	r25, Y+3	; 0x03
    45a2:	fc 01       	movw	r30, r24
    45a4:	e2 0f       	add	r30, r18
    45a6:	f3 1f       	adc	r31, r19
    45a8:	80 81       	ld	r24, Z
    45aa:	88 23       	and	r24, r24
    45ac:	99 f6       	brne	.-90     	; 0x4554 <UART_voidTransmit9BitData+0x1e>

			UDR = Copy_puint8Data[Local_uint8Iterator];
			Local_uint8Iterator++;
		}
	}
}
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	cf 91       	pop	r28
    45b8:	df 91       	pop	r29
    45ba:	08 95       	ret

000045bc <UART_voidReceive9BitData>:

static inline void UART_voidReceive9BitData(uint_8* Copy_puint8Data){
    45bc:	df 93       	push	r29
    45be:	cf 93       	push	r28
    45c0:	00 d0       	rcall	.+0      	; 0x45c2 <UART_voidReceive9BitData+0x6>
    45c2:	00 d0       	rcall	.+0      	; 0x45c4 <UART_voidReceive9BitData+0x8>
    45c4:	cd b7       	in	r28, 0x3d	; 61
    45c6:	de b7       	in	r29, 0x3e	; 62
    45c8:	9c 83       	std	Y+4, r25	; 0x04
    45ca:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_puint8Data != NULL){
    45cc:	8b 81       	ldd	r24, Y+3	; 0x03
    45ce:	9c 81       	ldd	r25, Y+4	; 0x04
    45d0:	00 97       	sbiw	r24, 0x00	; 0
    45d2:	d1 f1       	breq	.+116    	; 0x4648 <UART_voidReceive9BitData+0x8c>
		uint_8 Local_uint8Iterator = 0, Local_uint8RXB8 = 0;
    45d4:	1a 82       	std	Y+2, r1	; 0x02
    45d6:	19 82       	std	Y+1, r1	; 0x01
		while(1){
			UART_voidWaitOnRXC();
    45d8:	0e 94 ee 21 	call	0x43dc	; 0x43dc <UART_voidWaitOnRXC>

			Local_uint8RXB8 = ((UCSRB >> RXB8_BIT) & BIT_MASK1);
    45dc:	ea e2       	ldi	r30, 0x2A	; 42
    45de:	f0 e0       	ldi	r31, 0x00	; 0
    45e0:	80 81       	ld	r24, Z
    45e2:	86 95       	lsr	r24
    45e4:	81 70       	andi	r24, 0x01	; 1
    45e6:	89 83       	std	Y+1, r24	; 0x01
			Copy_puint8Data[Local_uint8Iterator] = UDR;
    45e8:	8a 81       	ldd	r24, Y+2	; 0x02
    45ea:	28 2f       	mov	r18, r24
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	8b 81       	ldd	r24, Y+3	; 0x03
    45f0:	9c 81       	ldd	r25, Y+4	; 0x04
    45f2:	dc 01       	movw	r26, r24
    45f4:	a2 0f       	add	r26, r18
    45f6:	b3 1f       	adc	r27, r19
    45f8:	ec e2       	ldi	r30, 0x2C	; 44
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	80 81       	ld	r24, Z
    45fe:	8c 93       	st	X, r24

			if(Copy_puint8Data[Local_uint8Iterator] == '\r' || Copy_puint8Data[Local_uint8Iterator] == '\n'){
    4600:	8a 81       	ldd	r24, Y+2	; 0x02
    4602:	28 2f       	mov	r18, r24
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	8b 81       	ldd	r24, Y+3	; 0x03
    4608:	9c 81       	ldd	r25, Y+4	; 0x04
    460a:	fc 01       	movw	r30, r24
    460c:	e2 0f       	add	r30, r18
    460e:	f3 1f       	adc	r31, r19
    4610:	80 81       	ld	r24, Z
    4612:	8d 30       	cpi	r24, 0x0D	; 13
    4614:	59 f0       	breq	.+22     	; 0x462c <UART_voidReceive9BitData+0x70>
    4616:	8a 81       	ldd	r24, Y+2	; 0x02
    4618:	28 2f       	mov	r18, r24
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	8b 81       	ldd	r24, Y+3	; 0x03
    461e:	9c 81       	ldd	r25, Y+4	; 0x04
    4620:	fc 01       	movw	r30, r24
    4622:	e2 0f       	add	r30, r18
    4624:	f3 1f       	adc	r31, r19
    4626:	80 81       	ld	r24, Z
    4628:	8a 30       	cpi	r24, 0x0A	; 10
    462a:	51 f4       	brne	.+20     	; 0x4640 <UART_voidReceive9BitData+0x84>
				Copy_puint8Data[Local_uint8Iterator] = '\0';
    462c:	8a 81       	ldd	r24, Y+2	; 0x02
    462e:	28 2f       	mov	r18, r24
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	8b 81       	ldd	r24, Y+3	; 0x03
    4634:	9c 81       	ldd	r25, Y+4	; 0x04
    4636:	fc 01       	movw	r30, r24
    4638:	e2 0f       	add	r30, r18
    463a:	f3 1f       	adc	r31, r19
    463c:	10 82       	st	Z, r1
    463e:	04 c0       	rjmp	.+8      	; 0x4648 <UART_voidReceive9BitData+0x8c>
				break;
			}
			Local_uint8Iterator++;
    4640:	8a 81       	ldd	r24, Y+2	; 0x02
    4642:	8f 5f       	subi	r24, 0xFF	; 255
    4644:	8a 83       	std	Y+2, r24	; 0x02
    4646:	c8 cf       	rjmp	.-112    	; 0x45d8 <UART_voidReceive9BitData+0x1c>
		}
	}
}
    4648:	0f 90       	pop	r0
    464a:	0f 90       	pop	r0
    464c:	0f 90       	pop	r0
    464e:	0f 90       	pop	r0
    4650:	cf 91       	pop	r28
    4652:	df 91       	pop	r29
    4654:	08 95       	ret

00004656 <__vector_13>:

ISR(UART_RXC_VECT){
    4656:	1f 92       	push	r1
    4658:	0f 92       	push	r0
    465a:	0f b6       	in	r0, 0x3f	; 63
    465c:	0f 92       	push	r0
    465e:	11 24       	eor	r1, r1
    4660:	2f 93       	push	r18
    4662:	3f 93       	push	r19
    4664:	4f 93       	push	r20
    4666:	5f 93       	push	r21
    4668:	6f 93       	push	r22
    466a:	7f 93       	push	r23
    466c:	8f 93       	push	r24
    466e:	9f 93       	push	r25
    4670:	af 93       	push	r26
    4672:	bf 93       	push	r27
    4674:	ef 93       	push	r30
    4676:	ff 93       	push	r31
    4678:	df 93       	push	r29
    467a:	cf 93       	push	r28
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
	if(UART_pfCalledFunc[UART_INT_RXC] != NULL){
    4680:	80 91 a0 01 	lds	r24, 0x01A0
    4684:	90 91 a1 01 	lds	r25, 0x01A1
    4688:	00 97       	sbiw	r24, 0x00	; 0
    468a:	49 f0       	breq	.+18     	; 0x469e <__vector_13+0x48>
		UART_pfCalledFunc[UART_INT_RXC](UART_pParameter[UART_INT_RXC]);
    468c:	e0 91 a0 01 	lds	r30, 0x01A0
    4690:	f0 91 a1 01 	lds	r31, 0x01A1
    4694:	80 91 a6 01 	lds	r24, 0x01A6
    4698:	90 91 a7 01 	lds	r25, 0x01A7
    469c:	09 95       	icall
	}
}
    469e:	cf 91       	pop	r28
    46a0:	df 91       	pop	r29
    46a2:	ff 91       	pop	r31
    46a4:	ef 91       	pop	r30
    46a6:	bf 91       	pop	r27
    46a8:	af 91       	pop	r26
    46aa:	9f 91       	pop	r25
    46ac:	8f 91       	pop	r24
    46ae:	7f 91       	pop	r23
    46b0:	6f 91       	pop	r22
    46b2:	5f 91       	pop	r21
    46b4:	4f 91       	pop	r20
    46b6:	3f 91       	pop	r19
    46b8:	2f 91       	pop	r18
    46ba:	0f 90       	pop	r0
    46bc:	0f be       	out	0x3f, r0	; 63
    46be:	0f 90       	pop	r0
    46c0:	1f 90       	pop	r1
    46c2:	18 95       	reti

000046c4 <__vector_15>:

ISR(UART_TXC_VECT){
    46c4:	1f 92       	push	r1
    46c6:	0f 92       	push	r0
    46c8:	0f b6       	in	r0, 0x3f	; 63
    46ca:	0f 92       	push	r0
    46cc:	11 24       	eor	r1, r1
    46ce:	2f 93       	push	r18
    46d0:	3f 93       	push	r19
    46d2:	4f 93       	push	r20
    46d4:	5f 93       	push	r21
    46d6:	6f 93       	push	r22
    46d8:	7f 93       	push	r23
    46da:	8f 93       	push	r24
    46dc:	9f 93       	push	r25
    46de:	af 93       	push	r26
    46e0:	bf 93       	push	r27
    46e2:	ef 93       	push	r30
    46e4:	ff 93       	push	r31
    46e6:	df 93       	push	r29
    46e8:	cf 93       	push	r28
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
	if(UART_pfCalledFunc[UART_INT_TXC] != NULL){
    46ee:	80 91 9e 01 	lds	r24, 0x019E
    46f2:	90 91 9f 01 	lds	r25, 0x019F
    46f6:	00 97       	sbiw	r24, 0x00	; 0
    46f8:	49 f0       	breq	.+18     	; 0x470c <__vector_15+0x48>
			UART_pfCalledFunc[UART_INT_TXC](UART_pParameter[UART_INT_TXC]);
    46fa:	e0 91 9e 01 	lds	r30, 0x019E
    46fe:	f0 91 9f 01 	lds	r31, 0x019F
    4702:	80 91 a4 01 	lds	r24, 0x01A4
    4706:	90 91 a5 01 	lds	r25, 0x01A5
    470a:	09 95       	icall
	}
}
    470c:	cf 91       	pop	r28
    470e:	df 91       	pop	r29
    4710:	ff 91       	pop	r31
    4712:	ef 91       	pop	r30
    4714:	bf 91       	pop	r27
    4716:	af 91       	pop	r26
    4718:	9f 91       	pop	r25
    471a:	8f 91       	pop	r24
    471c:	7f 91       	pop	r23
    471e:	6f 91       	pop	r22
    4720:	5f 91       	pop	r21
    4722:	4f 91       	pop	r20
    4724:	3f 91       	pop	r19
    4726:	2f 91       	pop	r18
    4728:	0f 90       	pop	r0
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	0f 90       	pop	r0
    472e:	1f 90       	pop	r1
    4730:	18 95       	reti

00004732 <__vector_14>:

ISR(UART_UDRE_VECT){
    4732:	1f 92       	push	r1
    4734:	0f 92       	push	r0
    4736:	0f b6       	in	r0, 0x3f	; 63
    4738:	0f 92       	push	r0
    473a:	11 24       	eor	r1, r1
    473c:	2f 93       	push	r18
    473e:	3f 93       	push	r19
    4740:	4f 93       	push	r20
    4742:	5f 93       	push	r21
    4744:	6f 93       	push	r22
    4746:	7f 93       	push	r23
    4748:	8f 93       	push	r24
    474a:	9f 93       	push	r25
    474c:	af 93       	push	r26
    474e:	bf 93       	push	r27
    4750:	ef 93       	push	r30
    4752:	ff 93       	push	r31
    4754:	df 93       	push	r29
    4756:	cf 93       	push	r28
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
	if(UART_pfCalledFunc[UART_INT_UDRE] != NULL){
    475c:	80 91 a2 01 	lds	r24, 0x01A2
    4760:	90 91 a3 01 	lds	r25, 0x01A3
    4764:	00 97       	sbiw	r24, 0x00	; 0
    4766:	49 f0       	breq	.+18     	; 0x477a <__vector_14+0x48>
			UART_pfCalledFunc[UART_INT_UDRE](UART_pParameter[UART_INT_UDRE]);
    4768:	e0 91 a2 01 	lds	r30, 0x01A2
    476c:	f0 91 a3 01 	lds	r31, 0x01A3
    4770:	80 91 a8 01 	lds	r24, 0x01A8
    4774:	90 91 a9 01 	lds	r25, 0x01A9
    4778:	09 95       	icall
	}
}
    477a:	cf 91       	pop	r28
    477c:	df 91       	pop	r29
    477e:	ff 91       	pop	r31
    4780:	ef 91       	pop	r30
    4782:	bf 91       	pop	r27
    4784:	af 91       	pop	r26
    4786:	9f 91       	pop	r25
    4788:	8f 91       	pop	r24
    478a:	7f 91       	pop	r23
    478c:	6f 91       	pop	r22
    478e:	5f 91       	pop	r21
    4790:	4f 91       	pop	r20
    4792:	3f 91       	pop	r19
    4794:	2f 91       	pop	r18
    4796:	0f 90       	pop	r0
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	0f 90       	pop	r0
    479c:	1f 90       	pop	r1
    479e:	18 95       	reti

000047a0 <TIMER2_enuInit>:
static volatile uint_8 TIMER2_uint32Preload;

static volatile void (*TIMER2_PfInterruptConfig[TIMER2_INTERRUPTS]) (void*) = {NULL, NULL};
static volatile void *TIMER2_PParameters[TIMER2_INTERRUPTS]= {NULL, NULL};

ES_t TIMER2_enuInit(void){
    47a0:	df 93       	push	r29
    47a2:	cf 93       	push	r28
    47a4:	0f 92       	push	r0
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates= ES_NOK;
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	89 83       	std	Y+1, r24	; 0x01

	/* Set Prescaler */
	TCCR2 &= ~(BIT_MASK3 << CS20_BIT);
    47ae:	a5 e4       	ldi	r26, 0x45	; 69
    47b0:	b0 e0       	ldi	r27, 0x00	; 0
    47b2:	e5 e4       	ldi	r30, 0x45	; 69
    47b4:	f0 e0       	ldi	r31, 0x00	; 0
    47b6:	80 81       	ld	r24, Z
    47b8:	88 7f       	andi	r24, 0xF8	; 248
    47ba:	8c 93       	st	X, r24
	TCCR2 |= (TIMER2_PRESCALER << CS20_BIT);
    47bc:	a5 e4       	ldi	r26, 0x45	; 69
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	e5 e4       	ldi	r30, 0x45	; 69
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	80 81       	ld	r24, Z
    47c6:	82 60       	ori	r24, 0x02	; 2
    47c8:	8c 93       	st	X, r24

	/* Set Wave Generation Mode */
	TCCR2 &= ~(BIT_MASK1 << WGM20_BIT);
    47ca:	a5 e4       	ldi	r26, 0x45	; 69
    47cc:	b0 e0       	ldi	r27, 0x00	; 0
    47ce:	e5 e4       	ldi	r30, 0x45	; 69
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	80 81       	ld	r24, Z
    47d4:	8f 7b       	andi	r24, 0xBF	; 191
    47d6:	8c 93       	st	X, r24
	TCCR2 &= ~(BIT_MASK1 << WGM21_BIT);
    47d8:	a5 e4       	ldi	r26, 0x45	; 69
    47da:	b0 e0       	ldi	r27, 0x00	; 0
    47dc:	e5 e4       	ldi	r30, 0x45	; 69
    47de:	f0 e0       	ldi	r31, 0x00	; 0
    47e0:	80 81       	ld	r24, Z
    47e2:	87 7f       	andi	r24, 0xF7	; 247
    47e4:	8c 93       	st	X, r24
	TCCR2 |= ((TIMER2_WAVE_GENERATON_MODE & BIT_MASK1) << WGM20_BIT);
    47e6:	a5 e4       	ldi	r26, 0x45	; 69
    47e8:	b0 e0       	ldi	r27, 0x00	; 0
    47ea:	e5 e4       	ldi	r30, 0x45	; 69
    47ec:	f0 e0       	ldi	r31, 0x00	; 0
    47ee:	80 81       	ld	r24, Z
    47f0:	8c 93       	st	X, r24
	TCCR2 |= (((TIMER2_WAVE_GENERATON_MODE >> BIT_MASK1) & BIT_MASK1) << WGM21_BIT);
    47f2:	a5 e4       	ldi	r26, 0x45	; 69
    47f4:	b0 e0       	ldi	r27, 0x00	; 0
    47f6:	e5 e4       	ldi	r30, 0x45	; 69
    47f8:	f0 e0       	ldi	r31, 0x00	; 0
    47fa:	80 81       	ld	r24, Z
    47fc:	8c 93       	st	X, r24

	/*Set Compare Output Mode*/
	TCCR2 &= ~(BIT_MASK2 << COM20_BIT);
    47fe:	a5 e4       	ldi	r26, 0x45	; 69
    4800:	b0 e0       	ldi	r27, 0x00	; 0
    4802:	e5 e4       	ldi	r30, 0x45	; 69
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	80 81       	ld	r24, Z
    4808:	8f 7c       	andi	r24, 0xCF	; 207
    480a:	8c 93       	st	X, r24
	TCCR2 |= (TIMER2_COMPARE_OUTPUT_MODE << COM20_BIT);
    480c:	a5 e4       	ldi	r26, 0x45	; 69
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	e5 e4       	ldi	r30, 0x45	; 69
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	80 81       	ld	r24, Z
    4816:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    4818:	89 81       	ldd	r24, Y+1	; 0x01
}
    481a:	0f 90       	pop	r0
    481c:	cf 91       	pop	r28
    481e:	df 91       	pop	r29
    4820:	08 95       	ret

00004822 <TIMER2_enuSyncDelay>:

ES_t TIMER2_enuSyncDelay(uint_32 Copy_uint32TimeMs){
    4822:	df 93       	push	r29
    4824:	cf 93       	push	r28
    4826:	cd b7       	in	r28, 0x3d	; 61
    4828:	de b7       	in	r29, 0x3e	; 62
    482a:	2e 97       	sbiw	r28, 0x0e	; 14
    482c:	0f b6       	in	r0, 0x3f	; 63
    482e:	f8 94       	cli
    4830:	de bf       	out	0x3e, r29	; 62
    4832:	0f be       	out	0x3f, r0	; 63
    4834:	cd bf       	out	0x3d, r28	; 61
    4836:	9e 87       	std	Y+14, r25	; 0x0e
    4838:	8d 87       	std	Y+13, r24	; 0x0d
	ES_t Local_enuErrorStates= ES_NOK;
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	8c 87       	std	Y+12, r24	; 0x0c
	f32 Local_f32OVFTime = 256.0 * ((f32)TIMER2_PRESCALER_VALUE / TIMER2_CLOCK_FREQUANCY); // time for single overflow
    483e:	8f e6       	ldi	r24, 0x6F	; 111
    4840:	92 e1       	ldi	r25, 0x12	; 18
    4842:	a3 e8       	ldi	r26, 0x83	; 131
    4844:	be e3       	ldi	r27, 0x3E	; 62
    4846:	88 87       	std	Y+8, r24	; 0x08
    4848:	99 87       	std	Y+9, r25	; 0x09
    484a:	aa 87       	std	Y+10, r26	; 0x0a
    484c:	bb 87       	std	Y+11, r27	; 0x0b
	f32 Local_f32NumOVF = Copy_uint32TimeMs / Local_f32OVFTime; // NUM of overflows required
    484e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4850:	9e 85       	ldd	r25, Y+14	; 0x0e
    4852:	cc 01       	movw	r24, r24
    4854:	a0 e0       	ldi	r26, 0x00	; 0
    4856:	b0 e0       	ldi	r27, 0x00	; 0
    4858:	bc 01       	movw	r22, r24
    485a:	cd 01       	movw	r24, r26
    485c:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    4860:	dc 01       	movw	r26, r24
    4862:	cb 01       	movw	r24, r22
    4864:	bc 01       	movw	r22, r24
    4866:	cd 01       	movw	r24, r26
    4868:	28 85       	ldd	r18, Y+8	; 0x08
    486a:	39 85       	ldd	r19, Y+9	; 0x09
    486c:	4a 85       	ldd	r20, Y+10	; 0x0a
    486e:	5b 85       	ldd	r21, Y+11	; 0x0b
    4870:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__divsf3>
    4874:	dc 01       	movw	r26, r24
    4876:	cb 01       	movw	r24, r22
    4878:	8c 83       	std	Y+4, r24	; 0x04
    487a:	9d 83       	std	Y+5, r25	; 0x05
    487c:	ae 83       	std	Y+6, r26	; 0x06
    487e:	bf 83       	std	Y+7, r27	; 0x07

	uint_32 Local_uint32NumOvf_int = (uint_32) Local_f32NumOVF + 1;
    4880:	6c 81       	ldd	r22, Y+4	; 0x04
    4882:	7d 81       	ldd	r23, Y+5	; 0x05
    4884:	8e 81       	ldd	r24, Y+6	; 0x06
    4886:	9f 81       	ldd	r25, Y+7	; 0x07
    4888:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	9b 83       	std	Y+3, r25	; 0x03
    4894:	8a 83       	std	Y+2, r24	; 0x02
	if(Local_f32NumOVF - (uint_32)Local_f32NumOVF != 0){
    4896:	6c 81       	ldd	r22, Y+4	; 0x04
    4898:	7d 81       	ldd	r23, Y+5	; 0x05
    489a:	8e 81       	ldd	r24, Y+6	; 0x06
    489c:	9f 81       	ldd	r25, Y+7	; 0x07
    489e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    48a2:	dc 01       	movw	r26, r24
    48a4:	cb 01       	movw	r24, r22
    48a6:	cc 01       	movw	r24, r24
    48a8:	a0 e0       	ldi	r26, 0x00	; 0
    48aa:	b0 e0       	ldi	r27, 0x00	; 0
    48ac:	bc 01       	movw	r22, r24
    48ae:	cd 01       	movw	r24, r26
    48b0:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    48b4:	9b 01       	movw	r18, r22
    48b6:	ac 01       	movw	r20, r24
    48b8:	6c 81       	ldd	r22, Y+4	; 0x04
    48ba:	7d 81       	ldd	r23, Y+5	; 0x05
    48bc:	8e 81       	ldd	r24, Y+6	; 0x06
    48be:	9f 81       	ldd	r25, Y+7	; 0x07
    48c0:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	bc 01       	movw	r22, r24
    48ca:	cd 01       	movw	r24, r26
    48cc:	20 e0       	ldi	r18, 0x00	; 0
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	40 e0       	ldi	r20, 0x00	; 0
    48d2:	50 e0       	ldi	r21, 0x00	; 0
    48d4:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__nesf2>
    48d8:	88 23       	and	r24, r24
    48da:	09 f4       	brne	.+2      	; 0x48de <TIMER2_enuSyncDelay+0xbc>
    48dc:	52 c0       	rjmp	.+164    	; 0x4982 <TIMER2_enuSyncDelay+0x160>
		uint_8 Local_uint8Preload = 256.0 - (256.0 * (Local_f32NumOVF - (uint_32)Local_f32NumOVF));
    48de:	6c 81       	ldd	r22, Y+4	; 0x04
    48e0:	7d 81       	ldd	r23, Y+5	; 0x05
    48e2:	8e 81       	ldd	r24, Y+6	; 0x06
    48e4:	9f 81       	ldd	r25, Y+7	; 0x07
    48e6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	cc 01       	movw	r24, r24
    48f0:	a0 e0       	ldi	r26, 0x00	; 0
    48f2:	b0 e0       	ldi	r27, 0x00	; 0
    48f4:	bc 01       	movw	r22, r24
    48f6:	cd 01       	movw	r24, r26
    48f8:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    48fc:	9b 01       	movw	r18, r22
    48fe:	ac 01       	movw	r20, r24
    4900:	6c 81       	ldd	r22, Y+4	; 0x04
    4902:	7d 81       	ldd	r23, Y+5	; 0x05
    4904:	8e 81       	ldd	r24, Y+6	; 0x06
    4906:	9f 81       	ldd	r25, Y+7	; 0x07
    4908:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	bc 01       	movw	r22, r24
    4912:	cd 01       	movw	r24, r26
    4914:	20 e0       	ldi	r18, 0x00	; 0
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	40 e8       	ldi	r20, 0x80	; 128
    491a:	53 ec       	ldi	r21, 0xC3	; 195
    491c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4920:	dc 01       	movw	r26, r24
    4922:	cb 01       	movw	r24, r22
    4924:	bc 01       	movw	r22, r24
    4926:	cd 01       	movw	r24, r26
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	40 e8       	ldi	r20, 0x80	; 128
    492e:	53 e4       	ldi	r21, 0x43	; 67
    4930:	0e 94 ce 14 	call	0x299c	; 0x299c <__addsf3>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	bc 01       	movw	r22, r24
    493a:	cd 01       	movw	r24, r26
    493c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4940:	dc 01       	movw	r26, r24
    4942:	cb 01       	movw	r24, r22
    4944:	89 83       	std	Y+1, r24	; 0x01
		TCNT2 = (uint_8)Local_uint8Preload;
    4946:	e4 e4       	ldi	r30, 0x44	; 68
    4948:	f0 e0       	ldi	r31, 0x00	; 0
    494a:	89 81       	ldd	r24, Y+1	; 0x01
    494c:	80 83       	st	Z, r24
    494e:	19 c0       	rjmp	.+50     	; 0x4982 <TIMER2_enuSyncDelay+0x160>
	}

	while(Local_uint32NumOvf_int){
		while(!((TIFR >> TOV2_BIT) & BIT_MASK1));
    4950:	e8 e5       	ldi	r30, 0x58	; 88
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	82 95       	swap	r24
    4958:	86 95       	lsr	r24
    495a:	86 95       	lsr	r24
    495c:	83 70       	andi	r24, 0x03	; 3
    495e:	88 2f       	mov	r24, r24
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	81 70       	andi	r24, 0x01	; 1
    4964:	90 70       	andi	r25, 0x00	; 0
    4966:	00 97       	sbiw	r24, 0x00	; 0
    4968:	99 f3       	breq	.-26     	; 0x4950 <TIMER2_enuSyncDelay+0x12e>
		TIFR |= (BIT_MASK1 << TOV2_BIT);
    496a:	a8 e5       	ldi	r26, 0x58	; 88
    496c:	b0 e0       	ldi	r27, 0x00	; 0
    496e:	e8 e5       	ldi	r30, 0x58	; 88
    4970:	f0 e0       	ldi	r31, 0x00	; 0
    4972:	80 81       	ld	r24, Z
    4974:	80 64       	ori	r24, 0x40	; 64
    4976:	8c 93       	st	X, r24
		Local_uint32NumOvf_int--;
    4978:	8a 81       	ldd	r24, Y+2	; 0x02
    497a:	9b 81       	ldd	r25, Y+3	; 0x03
    497c:	01 97       	sbiw	r24, 0x01	; 1
    497e:	9b 83       	std	Y+3, r25	; 0x03
    4980:	8a 83       	std	Y+2, r24	; 0x02
	if(Local_f32NumOVF - (uint_32)Local_f32NumOVF != 0){
		uint_8 Local_uint8Preload = 256.0 - (256.0 * (Local_f32NumOVF - (uint_32)Local_f32NumOVF));
		TCNT2 = (uint_8)Local_uint8Preload;
	}

	while(Local_uint32NumOvf_int){
    4982:	8a 81       	ldd	r24, Y+2	; 0x02
    4984:	9b 81       	ldd	r25, Y+3	; 0x03
    4986:	00 97       	sbiw	r24, 0x00	; 0
    4988:	19 f7       	brne	.-58     	; 0x4950 <TIMER2_enuSyncDelay+0x12e>
		while(!((TIFR >> TOV2_BIT) & BIT_MASK1));
		TIFR |= (BIT_MASK1 << TOV2_BIT);
		Local_uint32NumOvf_int--;
	}
	return Local_enuErrorStates = ES_OK;
    498a:	1c 86       	std	Y+12, r1	; 0x0c
    498c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    498e:	2e 96       	adiw	r28, 0x0e	; 14
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	f8 94       	cli
    4994:	de bf       	out	0x3e, r29	; 62
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	cd bf       	out	0x3d, r28	; 61
    499a:	cf 91       	pop	r28
    499c:	df 91       	pop	r29
    499e:	08 95       	ret

000049a0 <TIMER2_enuAsyncDelay>:

ES_t TIMER2_enuAsyncDelay(uint_32 Copy_uint32TimeMs, void (*Copy_pfConfig)(void*), void* Copy_pParameter){
    49a0:	df 93       	push	r29
    49a2:	cf 93       	push	r28
    49a4:	cd b7       	in	r28, 0x3d	; 61
    49a6:	de b7       	in	r29, 0x3e	; 62
    49a8:	62 97       	sbiw	r28, 0x12	; 18
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	f8 94       	cli
    49ae:	de bf       	out	0x3e, r29	; 62
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	cd bf       	out	0x3d, r28	; 61
    49b4:	9e 87       	std	Y+14, r25	; 0x0e
    49b6:	8d 87       	std	Y+13, r24	; 0x0d
    49b8:	78 8b       	std	Y+16, r23	; 0x10
    49ba:	6f 87       	std	Y+15, r22	; 0x0f
    49bc:	5a 8b       	std	Y+18, r21	; 0x12
    49be:	49 8b       	std	Y+17, r20	; 0x11
	ES_t Local_enuErrorStates= ES_NOK;
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	8c 87       	std	Y+12, r24	; 0x0c

	f32 Local_f32OVFTime = 256.0 * ((f32)TIMER2_PRESCALER_VALUE / TIMER2_CLOCK_FREQUANCY); // time for single overflow
    49c4:	8f e6       	ldi	r24, 0x6F	; 111
    49c6:	92 e1       	ldi	r25, 0x12	; 18
    49c8:	a3 e8       	ldi	r26, 0x83	; 131
    49ca:	be e3       	ldi	r27, 0x3E	; 62
    49cc:	88 87       	std	Y+8, r24	; 0x08
    49ce:	99 87       	std	Y+9, r25	; 0x09
    49d0:	aa 87       	std	Y+10, r26	; 0x0a
    49d2:	bb 87       	std	Y+11, r27	; 0x0b
	f32 Local_f32NumOVF = Copy_uint32TimeMs / Local_f32OVFTime; // NUM of overflows required
    49d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49d8:	cc 01       	movw	r24, r24
    49da:	a0 e0       	ldi	r26, 0x00	; 0
    49dc:	b0 e0       	ldi	r27, 0x00	; 0
    49de:	bc 01       	movw	r22, r24
    49e0:	cd 01       	movw	r24, r26
    49e2:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    49e6:	dc 01       	movw	r26, r24
    49e8:	cb 01       	movw	r24, r22
    49ea:	bc 01       	movw	r22, r24
    49ec:	cd 01       	movw	r24, r26
    49ee:	28 85       	ldd	r18, Y+8	; 0x08
    49f0:	39 85       	ldd	r19, Y+9	; 0x09
    49f2:	4a 85       	ldd	r20, Y+10	; 0x0a
    49f4:	5b 85       	ldd	r21, Y+11	; 0x0b
    49f6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__divsf3>
    49fa:	dc 01       	movw	r26, r24
    49fc:	cb 01       	movw	r24, r22
    49fe:	8c 83       	std	Y+4, r24	; 0x04
    4a00:	9d 83       	std	Y+5, r25	; 0x05
    4a02:	ae 83       	std	Y+6, r26	; 0x06
    4a04:	bf 83       	std	Y+7, r27	; 0x07

	uint_32 Local_uint32NumOvf_int = (uint_32) Local_f32NumOVF + 1;
    4a06:	6c 81       	ldd	r22, Y+4	; 0x04
    4a08:	7d 81       	ldd	r23, Y+5	; 0x05
    4a0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a0c:	9f 81       	ldd	r25, Y+7	; 0x07
    4a0e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a12:	dc 01       	movw	r26, r24
    4a14:	cb 01       	movw	r24, r22
    4a16:	01 96       	adiw	r24, 0x01	; 1
    4a18:	9b 83       	std	Y+3, r25	; 0x03
    4a1a:	8a 83       	std	Y+2, r24	; 0x02

	if(Local_f32NumOVF - (uint_32)Local_f32NumOVF != 0){
    4a1c:	6c 81       	ldd	r22, Y+4	; 0x04
    4a1e:	7d 81       	ldd	r23, Y+5	; 0x05
    4a20:	8e 81       	ldd	r24, Y+6	; 0x06
    4a22:	9f 81       	ldd	r25, Y+7	; 0x07
    4a24:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	cc 01       	movw	r24, r24
    4a2e:	a0 e0       	ldi	r26, 0x00	; 0
    4a30:	b0 e0       	ldi	r27, 0x00	; 0
    4a32:	bc 01       	movw	r22, r24
    4a34:	cd 01       	movw	r24, r26
    4a36:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    4a3a:	9b 01       	movw	r18, r22
    4a3c:	ac 01       	movw	r20, r24
    4a3e:	6c 81       	ldd	r22, Y+4	; 0x04
    4a40:	7d 81       	ldd	r23, Y+5	; 0x05
    4a42:	8e 81       	ldd	r24, Y+6	; 0x06
    4a44:	9f 81       	ldd	r25, Y+7	; 0x07
    4a46:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	bc 01       	movw	r22, r24
    4a50:	cd 01       	movw	r24, r26
    4a52:	20 e0       	ldi	r18, 0x00	; 0
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	40 e0       	ldi	r20, 0x00	; 0
    4a58:	50 e0       	ldi	r21, 0x00	; 0
    4a5a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__nesf2>
    4a5e:	88 23       	and	r24, r24
    4a60:	09 f4       	brne	.+2      	; 0x4a64 <TIMER2_enuAsyncDelay+0xc4>
    4a62:	41 c0       	rjmp	.+130    	; 0x4ae6 <TIMER2_enuAsyncDelay+0x146>
		uint_8 Local_uint8Preload = 256.0 - (256.0 * (Local_f32NumOVF - (uint_32)Local_f32NumOVF));
    4a64:	6c 81       	ldd	r22, Y+4	; 0x04
    4a66:	7d 81       	ldd	r23, Y+5	; 0x05
    4a68:	8e 81       	ldd	r24, Y+6	; 0x06
    4a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    4a6c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a70:	dc 01       	movw	r26, r24
    4a72:	cb 01       	movw	r24, r22
    4a74:	cc 01       	movw	r24, r24
    4a76:	a0 e0       	ldi	r26, 0x00	; 0
    4a78:	b0 e0       	ldi	r27, 0x00	; 0
    4a7a:	bc 01       	movw	r22, r24
    4a7c:	cd 01       	movw	r24, r26
    4a7e:	0e 94 13 18 	call	0x3026	; 0x3026 <__floatunsisf>
    4a82:	9b 01       	movw	r18, r22
    4a84:	ac 01       	movw	r20, r24
    4a86:	6c 81       	ldd	r22, Y+4	; 0x04
    4a88:	7d 81       	ldd	r23, Y+5	; 0x05
    4a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a8c:	9f 81       	ldd	r25, Y+7	; 0x07
    4a8e:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	bc 01       	movw	r22, r24
    4a98:	cd 01       	movw	r24, r26
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	30 e0       	ldi	r19, 0x00	; 0
    4a9e:	40 e8       	ldi	r20, 0x80	; 128
    4aa0:	53 ec       	ldi	r21, 0xC3	; 195
    4aa2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4aa6:	dc 01       	movw	r26, r24
    4aa8:	cb 01       	movw	r24, r22
    4aaa:	bc 01       	movw	r22, r24
    4aac:	cd 01       	movw	r24, r26
    4aae:	20 e0       	ldi	r18, 0x00	; 0
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	40 e8       	ldi	r20, 0x80	; 128
    4ab4:	53 e4       	ldi	r21, 0x43	; 67
    4ab6:	0e 94 ce 14 	call	0x299c	; 0x299c <__addsf3>
    4aba:	dc 01       	movw	r26, r24
    4abc:	cb 01       	movw	r24, r22
    4abe:	bc 01       	movw	r22, r24
    4ac0:	cd 01       	movw	r24, r26
    4ac2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	cb 01       	movw	r24, r22
    4aca:	89 83       	std	Y+1, r24	; 0x01
		TCNT2 = TIMER2_uint32Preload = Local_uint8Preload;
    4acc:	e4 e4       	ldi	r30, 0x44	; 68
    4ace:	f0 e0       	ldi	r31, 0x00	; 0
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	80 93 b6 01 	sts	0x01B6, r24
    4ad6:	80 91 b6 01 	lds	r24, 0x01B6
    4ada:	80 83       	st	Z, r24
		OCR2 = TIMER2_uint32Preload;
    4adc:	e3 e4       	ldi	r30, 0x43	; 67
    4ade:	f0 e0       	ldi	r31, 0x00	; 0
    4ae0:	80 91 b6 01 	lds	r24, 0x01B6
    4ae4:	80 83       	st	Z, r24
	}

	TIMER2_uint32NumOVF = Local_uint32NumOvf_int;
    4ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    4aea:	90 93 b5 01 	sts	0x01B5, r25
    4aee:	80 93 b4 01 	sts	0x01B4, r24

	if(Copy_pfConfig != NULL){
    4af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4af4:	98 89       	ldd	r25, Y+16	; 0x10
    4af6:	00 97       	sbiw	r24, 0x00	; 0
    4af8:	b9 f0       	breq	.+46     	; 0x4b28 <TIMER2_enuAsyncDelay+0x188>
		TIMER2_PfInterruptConfig[TIMER2_OVF_INT] = Copy_pfConfig;
    4afa:	8f 85       	ldd	r24, Y+15	; 0x0f
    4afc:	98 89       	ldd	r25, Y+16	; 0x10
    4afe:	90 93 ab 01 	sts	0x01AB, r25
    4b02:	80 93 aa 01 	sts	0x01AA, r24
		TIMER2_PParameters[TIMER2_OVF_INT] = Copy_pParameter;
    4b06:	89 89       	ldd	r24, Y+17	; 0x11
    4b08:	9a 89       	ldd	r25, Y+18	; 0x12
    4b0a:	90 93 af 01 	sts	0x01AF, r25
    4b0e:	80 93 ae 01 	sts	0x01AE, r24
		GPIO_enuGlobalInterruptEnable();
    4b12:	0e 94 04 27 	call	0x4e08	; 0x4e08 <GPIO_enuGlobalInterruptEnable>
		TIMSK |= (BIT_MASK1 << TOIE2_BIT);
    4b16:	a9 e5       	ldi	r26, 0x59	; 89
    4b18:	b0 e0       	ldi	r27, 0x00	; 0
    4b1a:	e9 e5       	ldi	r30, 0x59	; 89
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	80 81       	ld	r24, Z
    4b20:	80 64       	ori	r24, 0x40	; 64
    4b22:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    4b24:	1c 86       	std	Y+12, r1	; 0x0c
    4b26:	02 c0       	rjmp	.+4      	; 0x4b2c <TIMER2_enuAsyncDelay+0x18c>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    4b28:	82 e0       	ldi	r24, 0x02	; 2
    4b2a:	8c 87       	std	Y+12, r24	; 0x0c
	}

	return Local_enuErrorStates;
    4b2c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    4b2e:	62 96       	adiw	r28, 0x12	; 18
    4b30:	0f b6       	in	r0, 0x3f	; 63
    4b32:	f8 94       	cli
    4b34:	de bf       	out	0x3e, r29	; 62
    4b36:	0f be       	out	0x3f, r0	; 63
    4b38:	cd bf       	out	0x3d, r28	; 61
    4b3a:	cf 91       	pop	r28
    4b3c:	df 91       	pop	r29
    4b3e:	08 95       	ret

00004b40 <TIMER2_enuOutputCompare>:

ES_t TIMER2_enuOutputCompare(uint_8 Copy_uint8OCRCounts, uint_8 Copy_uint8OCMode){
    4b40:	df 93       	push	r29
    4b42:	cf 93       	push	r28
    4b44:	00 d0       	rcall	.+0      	; 0x4b46 <TIMER2_enuOutputCompare+0x6>
    4b46:	0f 92       	push	r0
    4b48:	cd b7       	in	r28, 0x3d	; 61
    4b4a:	de b7       	in	r29, 0x3e	; 62
    4b4c:	8a 83       	std	Y+2, r24	; 0x02
    4b4e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates= ES_NOK;
    4b50:	81 e0       	ldi	r24, 0x01	; 1
    4b52:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN7, OUTPUT);
    4b54:	83 e0       	ldi	r24, 0x03	; 3
    4b56:	67 e0       	ldi	r22, 0x07	; 7
    4b58:	41 e0       	ldi	r20, 0x01	; 1
    4b5a:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    4b5e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_uint8OCRCounts;
    4b60:	e3 e4       	ldi	r30, 0x43	; 67
    4b62:	f0 e0       	ldi	r31, 0x00	; 0
    4b64:	8a 81       	ldd	r24, Y+2	; 0x02
    4b66:	80 83       	st	Z, r24
	TCCR2 &= ~(BIT_MASK2 << COM20_BIT);
    4b68:	a5 e4       	ldi	r26, 0x45	; 69
    4b6a:	b0 e0       	ldi	r27, 0x00	; 0
    4b6c:	e5 e4       	ldi	r30, 0x45	; 69
    4b6e:	f0 e0       	ldi	r31, 0x00	; 0
    4b70:	80 81       	ld	r24, Z
    4b72:	8f 7c       	andi	r24, 0xCF	; 207
    4b74:	8c 93       	st	X, r24
	TCCR2 |= (Copy_uint8OCMode << COM20_BIT);
    4b76:	a5 e4       	ldi	r26, 0x45	; 69
    4b78:	b0 e0       	ldi	r27, 0x00	; 0
    4b7a:	e5 e4       	ldi	r30, 0x45	; 69
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	80 81       	ld	r24, Z
    4b80:	28 2f       	mov	r18, r24
    4b82:	8b 81       	ldd	r24, Y+3	; 0x03
    4b84:	88 2f       	mov	r24, r24
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	82 95       	swap	r24
    4b8a:	92 95       	swap	r25
    4b8c:	90 7f       	andi	r25, 0xF0	; 240
    4b8e:	98 27       	eor	r25, r24
    4b90:	80 7f       	andi	r24, 0xF0	; 240
    4b92:	98 27       	eor	r25, r24
    4b94:	82 2b       	or	r24, r18
    4b96:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b9a:	0f 90       	pop	r0
    4b9c:	0f 90       	pop	r0
    4b9e:	0f 90       	pop	r0
    4ba0:	cf 91       	pop	r28
    4ba2:	df 91       	pop	r29
    4ba4:	08 95       	ret

00004ba6 <TIMER2_enuSetWaveGenMode>:

ES_t TIMER2_enuSetWaveGenMode(uint_8 Copy_uint8WaveMode){
    4ba6:	df 93       	push	r29
    4ba8:	cf 93       	push	r28
    4baa:	00 d0       	rcall	.+0      	; 0x4bac <TIMER2_enuSetWaveGenMode+0x6>
    4bac:	cd b7       	in	r28, 0x3d	; 61
    4bae:	de b7       	in	r29, 0x3e	; 62
    4bb0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 &= ~(BIT_MASK1 << WGM20_BIT);
    4bb6:	a5 e4       	ldi	r26, 0x45	; 69
    4bb8:	b0 e0       	ldi	r27, 0x00	; 0
    4bba:	e5 e4       	ldi	r30, 0x45	; 69
    4bbc:	f0 e0       	ldi	r31, 0x00	; 0
    4bbe:	80 81       	ld	r24, Z
    4bc0:	8f 7b       	andi	r24, 0xBF	; 191
    4bc2:	8c 93       	st	X, r24
	TCCR2 &= ~(BIT_MASK1 << WGM21_BIT);
    4bc4:	a5 e4       	ldi	r26, 0x45	; 69
    4bc6:	b0 e0       	ldi	r27, 0x00	; 0
    4bc8:	e5 e4       	ldi	r30, 0x45	; 69
    4bca:	f0 e0       	ldi	r31, 0x00	; 0
    4bcc:	80 81       	ld	r24, Z
    4bce:	87 7f       	andi	r24, 0xF7	; 247
    4bd0:	8c 93       	st	X, r24
	TCCR2 |= ((Copy_uint8WaveMode & BIT_MASK1) << WGM20_BIT);
    4bd2:	a5 e4       	ldi	r26, 0x45	; 69
    4bd4:	b0 e0       	ldi	r27, 0x00	; 0
    4bd6:	e5 e4       	ldi	r30, 0x45	; 69
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	80 81       	ld	r24, Z
    4bdc:	28 2f       	mov	r18, r24
    4bde:	8a 81       	ldd	r24, Y+2	; 0x02
    4be0:	88 2f       	mov	r24, r24
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	81 70       	andi	r24, 0x01	; 1
    4be6:	90 70       	andi	r25, 0x00	; 0
    4be8:	00 24       	eor	r0, r0
    4bea:	96 95       	lsr	r25
    4bec:	87 95       	ror	r24
    4bee:	07 94       	ror	r0
    4bf0:	96 95       	lsr	r25
    4bf2:	87 95       	ror	r24
    4bf4:	07 94       	ror	r0
    4bf6:	98 2f       	mov	r25, r24
    4bf8:	80 2d       	mov	r24, r0
    4bfa:	82 2b       	or	r24, r18
    4bfc:	8c 93       	st	X, r24
	TCCR2 |= (((Copy_uint8WaveMode >> BIT_MASK1) & BIT_MASK1) << WGM21_BIT);
    4bfe:	a5 e4       	ldi	r26, 0x45	; 69
    4c00:	b0 e0       	ldi	r27, 0x00	; 0
    4c02:	e5 e4       	ldi	r30, 0x45	; 69
    4c04:	f0 e0       	ldi	r31, 0x00	; 0
    4c06:	80 81       	ld	r24, Z
    4c08:	28 2f       	mov	r18, r24
    4c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c0c:	86 95       	lsr	r24
    4c0e:	88 2f       	mov	r24, r24
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	81 70       	andi	r24, 0x01	; 1
    4c14:	90 70       	andi	r25, 0x00	; 0
    4c16:	88 0f       	add	r24, r24
    4c18:	99 1f       	adc	r25, r25
    4c1a:	88 0f       	add	r24, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	82 2b       	or	r24, r18
    4c24:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    4c26:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c28:	0f 90       	pop	r0
    4c2a:	0f 90       	pop	r0
    4c2c:	cf 91       	pop	r28
    4c2e:	df 91       	pop	r29
    4c30:	08 95       	ret

00004c32 <TIMER2_enuGeneratePWM>:

ES_t TIMER2_enuGeneratePWM(uint_8 Copy_uint8OCMode, uint_8 Copy_uint8OCRcounts){
    4c32:	df 93       	push	r29
    4c34:	cf 93       	push	r28
    4c36:	00 d0       	rcall	.+0      	; 0x4c38 <TIMER2_enuGeneratePWM+0x6>
    4c38:	0f 92       	push	r0
    4c3a:	cd b7       	in	r28, 0x3d	; 61
    4c3c:	de b7       	in	r29, 0x3e	; 62
    4c3e:	8a 83       	std	Y+2, r24	; 0x02
    4c40:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates= ES_NOK;
    4c42:	81 e0       	ldi	r24, 0x01	; 1
    4c44:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN7, OUTPUT);
    4c46:	83 e0       	ldi	r24, 0x03	; 3
    4c48:	67 e0       	ldi	r22, 0x07	; 7
    4c4a:	41 e0       	ldi	r20, 0x01	; 1
    4c4c:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    4c50:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_uint8OCRcounts;
    4c52:	e3 e4       	ldi	r30, 0x43	; 67
    4c54:	f0 e0       	ldi	r31, 0x00	; 0
    4c56:	8b 81       	ldd	r24, Y+3	; 0x03
    4c58:	80 83       	st	Z, r24
	TCCR2 &= ~(BIT_MASK2 << COM20_BIT);
    4c5a:	a5 e4       	ldi	r26, 0x45	; 69
    4c5c:	b0 e0       	ldi	r27, 0x00	; 0
    4c5e:	e5 e4       	ldi	r30, 0x45	; 69
    4c60:	f0 e0       	ldi	r31, 0x00	; 0
    4c62:	80 81       	ld	r24, Z
    4c64:	8f 7c       	andi	r24, 0xCF	; 207
    4c66:	8c 93       	st	X, r24
	TCCR2 |= (Copy_uint8OCMode << COM20_BIT);
    4c68:	a5 e4       	ldi	r26, 0x45	; 69
    4c6a:	b0 e0       	ldi	r27, 0x00	; 0
    4c6c:	e5 e4       	ldi	r30, 0x45	; 69
    4c6e:	f0 e0       	ldi	r31, 0x00	; 0
    4c70:	80 81       	ld	r24, Z
    4c72:	28 2f       	mov	r18, r24
    4c74:	8a 81       	ldd	r24, Y+2	; 0x02
    4c76:	88 2f       	mov	r24, r24
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	82 95       	swap	r24
    4c7c:	92 95       	swap	r25
    4c7e:	90 7f       	andi	r25, 0xF0	; 240
    4c80:	98 27       	eor	r25, r24
    4c82:	80 7f       	andi	r24, 0xF0	; 240
    4c84:	98 27       	eor	r25, r24
    4c86:	82 2b       	or	r24, r18
    4c88:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c8c:	0f 90       	pop	r0
    4c8e:	0f 90       	pop	r0
    4c90:	0f 90       	pop	r0
    4c92:	cf 91       	pop	r28
    4c94:	df 91       	pop	r29
    4c96:	08 95       	ret

00004c98 <TIMER2_enuCallBack>:

ES_t TIMER2_enuCallBack(void (*Copy_pfConfig)(void*), void* Copy_pParameter){
    4c98:	df 93       	push	r29
    4c9a:	cf 93       	push	r28
    4c9c:	00 d0       	rcall	.+0      	; 0x4c9e <TIMER2_enuCallBack+0x6>
    4c9e:	00 d0       	rcall	.+0      	; 0x4ca0 <TIMER2_enuCallBack+0x8>
    4ca0:	0f 92       	push	r0
    4ca2:	cd b7       	in	r28, 0x3d	; 61
    4ca4:	de b7       	in	r29, 0x3e	; 62
    4ca6:	9b 83       	std	Y+3, r25	; 0x03
    4ca8:	8a 83       	std	Y+2, r24	; 0x02
    4caa:	7d 83       	std	Y+5, r23	; 0x05
    4cac:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorStates= ES_NOK;
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pfConfig != NULL){
    4cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    4cb6:	00 97       	sbiw	r24, 0x00	; 0
    4cb8:	b9 f0       	breq	.+46     	; 0x4ce8 <TIMER2_enuCallBack+0x50>
		TIMER2_PfInterruptConfig[TIMER2_COMP_INT] = Copy_pfConfig;
    4cba:	8a 81       	ldd	r24, Y+2	; 0x02
    4cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4cbe:	90 93 ad 01 	sts	0x01AD, r25
    4cc2:	80 93 ac 01 	sts	0x01AC, r24
		TIMER2_PParameters[TIMER2_COMP_INT] = Copy_pParameter;
    4cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    4cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    4cca:	90 93 b1 01 	sts	0x01B1, r25
    4cce:	80 93 b0 01 	sts	0x01B0, r24
		GPIO_enuGlobalInterruptEnable();
    4cd2:	0e 94 04 27 	call	0x4e08	; 0x4e08 <GPIO_enuGlobalInterruptEnable>
		TIMSK |= (BIT_MASK1 << OCIE2_BIT);
    4cd6:	a9 e5       	ldi	r26, 0x59	; 89
    4cd8:	b0 e0       	ldi	r27, 0x00	; 0
    4cda:	e9 e5       	ldi	r30, 0x59	; 89
    4cdc:	f0 e0       	ldi	r31, 0x00	; 0
    4cde:	80 81       	ld	r24, Z
    4ce0:	80 68       	ori	r24, 0x80	; 128
    4ce2:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    4ce4:	19 82       	std	Y+1, r1	; 0x01
    4ce6:	02 c0       	rjmp	.+4      	; 0x4cec <TIMER2_enuCallBack+0x54>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    4ce8:	82 e0       	ldi	r24, 0x02	; 2
    4cea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    4cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cee:	0f 90       	pop	r0
    4cf0:	0f 90       	pop	r0
    4cf2:	0f 90       	pop	r0
    4cf4:	0f 90       	pop	r0
    4cf6:	0f 90       	pop	r0
    4cf8:	cf 91       	pop	r28
    4cfa:	df 91       	pop	r29
    4cfc:	08 95       	ret

00004cfe <__vector_5>:

ISR(TIMER2_OVF_VECT){
    4cfe:	1f 92       	push	r1
    4d00:	0f 92       	push	r0
    4d02:	0f b6       	in	r0, 0x3f	; 63
    4d04:	0f 92       	push	r0
    4d06:	11 24       	eor	r1, r1
    4d08:	2f 93       	push	r18
    4d0a:	3f 93       	push	r19
    4d0c:	4f 93       	push	r20
    4d0e:	5f 93       	push	r21
    4d10:	6f 93       	push	r22
    4d12:	7f 93       	push	r23
    4d14:	8f 93       	push	r24
    4d16:	9f 93       	push	r25
    4d18:	af 93       	push	r26
    4d1a:	bf 93       	push	r27
    4d1c:	ef 93       	push	r30
    4d1e:	ff 93       	push	r31
    4d20:	df 93       	push	r29
    4d22:	cf 93       	push	r28
    4d24:	cd b7       	in	r28, 0x3d	; 61
    4d26:	de b7       	in	r29, 0x3e	; 62
	static uint_32 Local_uint32Counts = 0;
	if(TIMER2_PfInterruptConfig[TIMER2_OVF_INT] != NULL){
    4d28:	80 91 aa 01 	lds	r24, 0x01AA
    4d2c:	90 91 ab 01 	lds	r25, 0x01AB
    4d30:	00 97       	sbiw	r24, 0x00	; 0
    4d32:	31 f1       	breq	.+76     	; 0x4d80 <__vector_5+0x82>
		Local_uint32Counts+=1;
    4d34:	80 91 b2 01 	lds	r24, 0x01B2
    4d38:	90 91 b3 01 	lds	r25, 0x01B3
    4d3c:	01 96       	adiw	r24, 0x01	; 1
    4d3e:	90 93 b3 01 	sts	0x01B3, r25
    4d42:	80 93 b2 01 	sts	0x01B2, r24
		if(Local_uint32Counts == TIMER2_uint32NumOVF){
    4d46:	20 91 b2 01 	lds	r18, 0x01B2
    4d4a:	30 91 b3 01 	lds	r19, 0x01B3
    4d4e:	80 91 b4 01 	lds	r24, 0x01B4
    4d52:	90 91 b5 01 	lds	r25, 0x01B5
    4d56:	28 17       	cp	r18, r24
    4d58:	39 07       	cpc	r19, r25
    4d5a:	91 f4       	brne	.+36     	; 0x4d80 <__vector_5+0x82>
			Local_uint32Counts = 0;
    4d5c:	10 92 b3 01 	sts	0x01B3, r1
    4d60:	10 92 b2 01 	sts	0x01B2, r1
			TCNT2 = TIMER2_uint32Preload;
    4d64:	e4 e4       	ldi	r30, 0x44	; 68
    4d66:	f0 e0       	ldi	r31, 0x00	; 0
    4d68:	80 91 b6 01 	lds	r24, 0x01B6
    4d6c:	80 83       	st	Z, r24
			TIMER2_PfInterruptConfig[TIMER2_OVF_INT](TIMER2_PParameters[TIMER2_OVF_INT]);
    4d6e:	e0 91 aa 01 	lds	r30, 0x01AA
    4d72:	f0 91 ab 01 	lds	r31, 0x01AB
    4d76:	80 91 ae 01 	lds	r24, 0x01AE
    4d7a:	90 91 af 01 	lds	r25, 0x01AF
    4d7e:	09 95       	icall
		}

	}
}
    4d80:	cf 91       	pop	r28
    4d82:	df 91       	pop	r29
    4d84:	ff 91       	pop	r31
    4d86:	ef 91       	pop	r30
    4d88:	bf 91       	pop	r27
    4d8a:	af 91       	pop	r26
    4d8c:	9f 91       	pop	r25
    4d8e:	8f 91       	pop	r24
    4d90:	7f 91       	pop	r23
    4d92:	6f 91       	pop	r22
    4d94:	5f 91       	pop	r21
    4d96:	4f 91       	pop	r20
    4d98:	3f 91       	pop	r19
    4d9a:	2f 91       	pop	r18
    4d9c:	0f 90       	pop	r0
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	0f 90       	pop	r0
    4da2:	1f 90       	pop	r1
    4da4:	18 95       	reti

00004da6 <__vector_4>:

ISR(TIMER2_COMP_VECT){
    4da6:	1f 92       	push	r1
    4da8:	0f 92       	push	r0
    4daa:	0f b6       	in	r0, 0x3f	; 63
    4dac:	0f 92       	push	r0
    4dae:	11 24       	eor	r1, r1
    4db0:	2f 93       	push	r18
    4db2:	3f 93       	push	r19
    4db4:	4f 93       	push	r20
    4db6:	5f 93       	push	r21
    4db8:	6f 93       	push	r22
    4dba:	7f 93       	push	r23
    4dbc:	8f 93       	push	r24
    4dbe:	9f 93       	push	r25
    4dc0:	af 93       	push	r26
    4dc2:	bf 93       	push	r27
    4dc4:	ef 93       	push	r30
    4dc6:	ff 93       	push	r31
    4dc8:	df 93       	push	r29
    4dca:	cf 93       	push	r28
    4dcc:	cd b7       	in	r28, 0x3d	; 61
    4dce:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_PfInterruptConfig != NULL){
		TIMER2_PfInterruptConfig[TIMER2_COMP_INT](TIMER2_PParameters[TIMER2_COMP_INT]);
    4dd0:	e0 91 ac 01 	lds	r30, 0x01AC
    4dd4:	f0 91 ad 01 	lds	r31, 0x01AD
    4dd8:	80 91 b0 01 	lds	r24, 0x01B0
    4ddc:	90 91 b1 01 	lds	r25, 0x01B1
    4de0:	09 95       	icall
	}
}
    4de2:	cf 91       	pop	r28
    4de4:	df 91       	pop	r29
    4de6:	ff 91       	pop	r31
    4de8:	ef 91       	pop	r30
    4dea:	bf 91       	pop	r27
    4dec:	af 91       	pop	r26
    4dee:	9f 91       	pop	r25
    4df0:	8f 91       	pop	r24
    4df2:	7f 91       	pop	r23
    4df4:	6f 91       	pop	r22
    4df6:	5f 91       	pop	r21
    4df8:	4f 91       	pop	r20
    4dfa:	3f 91       	pop	r19
    4dfc:	2f 91       	pop	r18
    4dfe:	0f 90       	pop	r0
    4e00:	0f be       	out	0x3f, r0	; 63
    4e02:	0f 90       	pop	r0
    4e04:	1f 90       	pop	r1
    4e06:	18 95       	reti

00004e08 <GPIO_enuGlobalInterruptEnable>:
#include "../../LIB/Bit_Level.h"

#include "GPIO_priv.h"


ES_t GPIO_enuGlobalInterruptEnable(void){
    4e08:	df 93       	push	r29
    4e0a:	cf 93       	push	r28
    4e0c:	0f 92       	push	r0
    4e0e:	cd b7       	in	r28, 0x3d	; 61
    4e10:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (BIT_MASK1 << I_BIT);
    4e16:	af e5       	ldi	r26, 0x5F	; 95
    4e18:	b0 e0       	ldi	r27, 0x00	; 0
    4e1a:	ef e5       	ldi	r30, 0x5F	; 95
    4e1c:	f0 e0       	ldi	r31, 0x00	; 0
    4e1e:	80 81       	ld	r24, Z
    4e20:	80 68       	ori	r24, 0x80	; 128
    4e22:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    4e24:	19 82       	std	Y+1, r1	; 0x01
    4e26:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e28:	0f 90       	pop	r0
    4e2a:	cf 91       	pop	r28
    4e2c:	df 91       	pop	r29
    4e2e:	08 95       	ret

00004e30 <GPIO_enuGlobalInterruptDisable>:

ES_t GPIO_enuGlobalInterruptDisable(void){
    4e30:	df 93       	push	r29
    4e32:	cf 93       	push	r28
    4e34:	0f 92       	push	r0
    4e36:	cd b7       	in	r28, 0x3d	; 61
    4e38:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	89 83       	std	Y+1, r24	; 0x01
	SREG &= ~(BIT_MASK1 << I_BIT);
    4e3e:	af e5       	ldi	r26, 0x5F	; 95
    4e40:	b0 e0       	ldi	r27, 0x00	; 0
    4e42:	ef e5       	ldi	r30, 0x5F	; 95
    4e44:	f0 e0       	ldi	r31, 0x00	; 0
    4e46:	80 81       	ld	r24, Z
    4e48:	8f 77       	andi	r24, 0x7F	; 127
    4e4a:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    4e4c:	19 82       	std	Y+1, r1	; 0x01
    4e4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e50:	0f 90       	pop	r0
    4e52:	cf 91       	pop	r28
    4e54:	df 91       	pop	r29
    4e56:	08 95       	ret

00004e58 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"



ES_t DIO_enuInit(void){
    4e58:	df 93       	push	r29
    4e5a:	cf 93       	push	r28
    4e5c:	0f 92       	push	r0
    4e5e:	cd b7       	in	r28, 0x3d	; 61
    4e60:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4e62:	81 e0       	ldi	r24, 0x01	; 1
    4e64:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(DIO_PA_PIN0_DIR, DIO_PA_PIN1_DIR, DIO_PA_PIN2_DIR, DIO_PA_PIN3_DIR, DIO_PA_PIN4_DIR, DIO_PA_PIN5_DIR, DIO_PA_PIN6_DIR, DIO_PA_PIN7_DIR);
    4e66:	ea e3       	ldi	r30, 0x3A	; 58
    4e68:	f0 e0       	ldi	r31, 0x00	; 0
    4e6a:	89 ed       	ldi	r24, 0xD9	; 217
    4e6c:	80 83       	st	Z, r24
	DDRB = CONC(DIO_PB_PIN0_DIR, DIO_PB_PIN1_DIR, DIO_PB_PIN2_DIR, DIO_PB_PIN3_DIR, DIO_PB_PIN4_DIR, DIO_PB_PIN5_DIR, DIO_PB_PIN6_DIR, DIO_PB_PIN7_DIR);
    4e6e:	e7 e3       	ldi	r30, 0x37	; 55
    4e70:	f0 e0       	ldi	r31, 0x00	; 0
    4e72:	89 ed       	ldi	r24, 0xD9	; 217
    4e74:	80 83       	st	Z, r24
	DDRC = CONC(DIO_PC_PIN0_DIR, DIO_PC_PIN1_DIR, DIO_PC_PIN2_DIR, DIO_PC_PIN3_DIR, DIO_PC_PIN4_DIR, DIO_PC_PIN5_DIR, DIO_PC_PIN6_DIR, DIO_PC_PIN7_DIR);
    4e76:	e4 e3       	ldi	r30, 0x34	; 52
    4e78:	f0 e0       	ldi	r31, 0x00	; 0
    4e7a:	89 ed       	ldi	r24, 0xD9	; 217
    4e7c:	80 83       	st	Z, r24
	DDRD = CONC(DIO_PD_PIN0_DIR, DIO_PD_PIN1_DIR, DIO_PD_PIN2_DIR, DIO_PD_PIN3_DIR, DIO_PD_PIN4_DIR, DIO_PD_PIN5_DIR, DIO_PD_PIN6_DIR, DIO_PD_PIN7_DIR);
    4e7e:	e1 e3       	ldi	r30, 0x31	; 49
    4e80:	f0 e0       	ldi	r31, 0x00	; 0
    4e82:	89 ed       	ldi	r24, 0xD9	; 217
    4e84:	80 83       	st	Z, r24

	PORTA = CONC(DIO_PA_PIN0_VAL, DIO_PA_PIN1_VAL, DIO_PA_PIN2_VAL, DIO_PA_PIN3_VAL, DIO_PA_PIN4_VAL, DIO_PA_PIN5_VAL, DIO_PA_PIN6_VAL, DIO_PA_PIN7_VAL);
    4e86:	eb e3       	ldi	r30, 0x3B	; 59
    4e88:	f0 e0       	ldi	r31, 0x00	; 0
    4e8a:	8f e4       	ldi	r24, 0x4F	; 79
    4e8c:	80 83       	st	Z, r24
	PORTB = CONC(DIO_PB_PIN0_VAL, DIO_PB_PIN1_VAL, DIO_PB_PIN2_VAL, DIO_PB_PIN3_VAL, DIO_PB_PIN4_VAL, DIO_PB_PIN5_VAL, DIO_PB_PIN6_VAL, DIO_PB_PIN7_VAL);
    4e8e:	e8 e3       	ldi	r30, 0x38	; 56
    4e90:	f0 e0       	ldi	r31, 0x00	; 0
    4e92:	8f e9       	ldi	r24, 0x9F	; 159
    4e94:	80 83       	st	Z, r24
	PORTC = CONC(DIO_PC_PIN0_VAL, DIO_PC_PIN1_VAL, DIO_PC_PIN2_VAL, DIO_PC_PIN3_VAL, DIO_PC_PIN4_VAL, DIO_PC_PIN5_VAL, DIO_PC_PIN6_VAL, DIO_PC_PIN7_VAL);
    4e96:	e5 e3       	ldi	r30, 0x35	; 53
    4e98:	f0 e0       	ldi	r31, 0x00	; 0
    4e9a:	8f e9       	ldi	r24, 0x9F	; 159
    4e9c:	80 83       	st	Z, r24
	PORTD = CONC(DIO_PD_PIN0_VAL, DIO_PD_PIN1_VAL, DIO_PD_PIN2_VAL, DIO_PD_PIN3_VAL, DIO_PD_PIN4_VAL, DIO_PD_PIN5_VAL, DIO_PD_PIN6_VAL, DIO_PD_PIN7_VAL);
    4e9e:	e2 e3       	ldi	r30, 0x32	; 50
    4ea0:	f0 e0       	ldi	r31, 0x00	; 0
    4ea2:	8f e9       	ldi	r24, 0x9F	; 159
    4ea4:	80 83       	st	Z, r24

	return Local_enuErrorState = ES_OK;
    4ea6:	19 82       	std	Y+1, r1	; 0x01
    4ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    4eaa:	0f 90       	pop	r0
    4eac:	cf 91       	pop	r28
    4eae:	df 91       	pop	r29
    4eb0:	08 95       	ret

00004eb2 <DIO_enuSetPortDir>:

ES_t DIO_enuSetPortDir(uint_8 Copy_uint8PortID, uint_8 Copy_uint8Value){
    4eb2:	df 93       	push	r29
    4eb4:	cf 93       	push	r28
    4eb6:	00 d0       	rcall	.+0      	; 0x4eb8 <DIO_enuSetPortDir+0x6>
    4eb8:	00 d0       	rcall	.+0      	; 0x4eba <DIO_enuSetPortDir+0x8>
    4eba:	0f 92       	push	r0
    4ebc:	cd b7       	in	r28, 0x3d	; 61
    4ebe:	de b7       	in	r29, 0x3e	; 62
    4ec0:	8a 83       	std	Y+2, r24	; 0x02
    4ec2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    4ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eca:	84 30       	cpi	r24, 0x04	; 4
    4ecc:	a0 f5       	brcc	.+104    	; 0x4f36 <DIO_enuSetPortDir+0x84>

		switch(Copy_uint8PortID){
    4ece:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed0:	28 2f       	mov	r18, r24
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	3d 83       	std	Y+5, r19	; 0x05
    4ed6:	2c 83       	std	Y+4, r18	; 0x04
    4ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eda:	9d 81       	ldd	r25, Y+5	; 0x05
    4edc:	81 30       	cpi	r24, 0x01	; 1
    4ede:	91 05       	cpc	r25, r1
    4ee0:	d1 f0       	breq	.+52     	; 0x4f16 <DIO_enuSetPortDir+0x64>
    4ee2:	2c 81       	ldd	r18, Y+4	; 0x04
    4ee4:	3d 81       	ldd	r19, Y+5	; 0x05
    4ee6:	22 30       	cpi	r18, 0x02	; 2
    4ee8:	31 05       	cpc	r19, r1
    4eea:	2c f4       	brge	.+10     	; 0x4ef6 <DIO_enuSetPortDir+0x44>
    4eec:	8c 81       	ldd	r24, Y+4	; 0x04
    4eee:	9d 81       	ldd	r25, Y+5	; 0x05
    4ef0:	00 97       	sbiw	r24, 0x00	; 0
    4ef2:	61 f0       	breq	.+24     	; 0x4f0c <DIO_enuSetPortDir+0x5a>
    4ef4:	1e c0       	rjmp	.+60     	; 0x4f32 <DIO_enuSetPortDir+0x80>
    4ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    4ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    4efa:	22 30       	cpi	r18, 0x02	; 2
    4efc:	31 05       	cpc	r19, r1
    4efe:	81 f0       	breq	.+32     	; 0x4f20 <DIO_enuSetPortDir+0x6e>
    4f00:	8c 81       	ldd	r24, Y+4	; 0x04
    4f02:	9d 81       	ldd	r25, Y+5	; 0x05
    4f04:	83 30       	cpi	r24, 0x03	; 3
    4f06:	91 05       	cpc	r25, r1
    4f08:	81 f0       	breq	.+32     	; 0x4f2a <DIO_enuSetPortDir+0x78>
    4f0a:	13 c0       	rjmp	.+38     	; 0x4f32 <DIO_enuSetPortDir+0x80>
			case DIO_PORTA:
				DDRA =  Copy_uint8Value;
    4f0c:	ea e3       	ldi	r30, 0x3A	; 58
    4f0e:	f0 e0       	ldi	r31, 0x00	; 0
    4f10:	8b 81       	ldd	r24, Y+3	; 0x03
    4f12:	80 83       	st	Z, r24
    4f14:	0e c0       	rjmp	.+28     	; 0x4f32 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTB:
				DDRB =  Copy_uint8Value;
    4f16:	e7 e3       	ldi	r30, 0x37	; 55
    4f18:	f0 e0       	ldi	r31, 0x00	; 0
    4f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1c:	80 83       	st	Z, r24
    4f1e:	09 c0       	rjmp	.+18     	; 0x4f32 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTC:
				DDRC =  Copy_uint8Value;
    4f20:	e4 e3       	ldi	r30, 0x34	; 52
    4f22:	f0 e0       	ldi	r31, 0x00	; 0
    4f24:	8b 81       	ldd	r24, Y+3	; 0x03
    4f26:	80 83       	st	Z, r24
    4f28:	04 c0       	rjmp	.+8      	; 0x4f32 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTD:
				DDRD =  Copy_uint8Value;
    4f2a:	e1 e3       	ldi	r30, 0x31	; 49
    4f2c:	f0 e0       	ldi	r31, 0x00	; 0
    4f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f30:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    4f32:	19 82       	std	Y+1, r1	; 0x01
    4f34:	02 c0       	rjmp	.+4      	; 0x4f3a <DIO_enuSetPortDir+0x88>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    4f36:	83 e0       	ldi	r24, 0x03	; 3
    4f38:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f3c:	0f 90       	pop	r0
    4f3e:	0f 90       	pop	r0
    4f40:	0f 90       	pop	r0
    4f42:	0f 90       	pop	r0
    4f44:	0f 90       	pop	r0
    4f46:	cf 91       	pop	r28
    4f48:	df 91       	pop	r29
    4f4a:	08 95       	ret

00004f4c <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8Value){
    4f4c:	df 93       	push	r29
    4f4e:	cf 93       	push	r28
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <DIO_enuSetPortValue+0x6>
    4f52:	00 d0       	rcall	.+0      	; 0x4f54 <DIO_enuSetPortValue+0x8>
    4f54:	0f 92       	push	r0
    4f56:	cd b7       	in	r28, 0x3d	; 61
    4f58:	de b7       	in	r29, 0x3e	; 62
    4f5a:	8a 83       	std	Y+2, r24	; 0x02
    4f5c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    4f62:	8a 81       	ldd	r24, Y+2	; 0x02
    4f64:	84 30       	cpi	r24, 0x04	; 4
    4f66:	a0 f5       	brcc	.+104    	; 0x4fd0 <DIO_enuSetPortValue+0x84>

		switch(Copy_uint8PortID){
    4f68:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6a:	28 2f       	mov	r18, r24
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	3d 83       	std	Y+5, r19	; 0x05
    4f70:	2c 83       	std	Y+4, r18	; 0x04
    4f72:	8c 81       	ldd	r24, Y+4	; 0x04
    4f74:	9d 81       	ldd	r25, Y+5	; 0x05
    4f76:	81 30       	cpi	r24, 0x01	; 1
    4f78:	91 05       	cpc	r25, r1
    4f7a:	d1 f0       	breq	.+52     	; 0x4fb0 <DIO_enuSetPortValue+0x64>
    4f7c:	2c 81       	ldd	r18, Y+4	; 0x04
    4f7e:	3d 81       	ldd	r19, Y+5	; 0x05
    4f80:	22 30       	cpi	r18, 0x02	; 2
    4f82:	31 05       	cpc	r19, r1
    4f84:	2c f4       	brge	.+10     	; 0x4f90 <DIO_enuSetPortValue+0x44>
    4f86:	8c 81       	ldd	r24, Y+4	; 0x04
    4f88:	9d 81       	ldd	r25, Y+5	; 0x05
    4f8a:	00 97       	sbiw	r24, 0x00	; 0
    4f8c:	61 f0       	breq	.+24     	; 0x4fa6 <DIO_enuSetPortValue+0x5a>
    4f8e:	1e c0       	rjmp	.+60     	; 0x4fcc <DIO_enuSetPortValue+0x80>
    4f90:	2c 81       	ldd	r18, Y+4	; 0x04
    4f92:	3d 81       	ldd	r19, Y+5	; 0x05
    4f94:	22 30       	cpi	r18, 0x02	; 2
    4f96:	31 05       	cpc	r19, r1
    4f98:	81 f0       	breq	.+32     	; 0x4fba <DIO_enuSetPortValue+0x6e>
    4f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    4f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    4f9e:	83 30       	cpi	r24, 0x03	; 3
    4fa0:	91 05       	cpc	r25, r1
    4fa2:	81 f0       	breq	.+32     	; 0x4fc4 <DIO_enuSetPortValue+0x78>
    4fa4:	13 c0       	rjmp	.+38     	; 0x4fcc <DIO_enuSetPortValue+0x80>
			case DIO_PORTA:
				PORTA =  Copy_uint8Value;
    4fa6:	eb e3       	ldi	r30, 0x3B	; 59
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	8b 81       	ldd	r24, Y+3	; 0x03
    4fac:	80 83       	st	Z, r24
    4fae:	0e c0       	rjmp	.+28     	; 0x4fcc <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTB:
				PORTB =  Copy_uint8Value;
    4fb0:	e8 e3       	ldi	r30, 0x38	; 56
    4fb2:	f0 e0       	ldi	r31, 0x00	; 0
    4fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fb6:	80 83       	st	Z, r24
    4fb8:	09 c0       	rjmp	.+18     	; 0x4fcc <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTC:
				PORTC =  Copy_uint8Value;
    4fba:	e5 e3       	ldi	r30, 0x35	; 53
    4fbc:	f0 e0       	ldi	r31, 0x00	; 0
    4fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc0:	80 83       	st	Z, r24
    4fc2:	04 c0       	rjmp	.+8      	; 0x4fcc <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTD:
				PORTD =  Copy_uint8Value;
    4fc4:	e2 e3       	ldi	r30, 0x32	; 50
    4fc6:	f0 e0       	ldi	r31, 0x00	; 0
    4fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fca:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    4fcc:	19 82       	std	Y+1, r1	; 0x01
    4fce:	02 c0       	rjmp	.+4      	; 0x4fd4 <DIO_enuSetPortValue+0x88>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    4fd0:	83 e0       	ldi	r24, 0x03	; 3
    4fd2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fd6:	0f 90       	pop	r0
    4fd8:	0f 90       	pop	r0
    4fda:	0f 90       	pop	r0
    4fdc:	0f 90       	pop	r0
    4fde:	0f 90       	pop	r0
    4fe0:	cf 91       	pop	r28
    4fe2:	df 91       	pop	r29
    4fe4:	08 95       	ret

00004fe6 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(uint_8 Copy_uint8PortID){
    4fe6:	df 93       	push	r29
    4fe8:	cf 93       	push	r28
    4fea:	00 d0       	rcall	.+0      	; 0x4fec <DIO_enuTogPortValue+0x6>
    4fec:	00 d0       	rcall	.+0      	; 0x4fee <DIO_enuTogPortValue+0x8>
    4fee:	cd b7       	in	r28, 0x3d	; 61
    4ff0:	de b7       	in	r29, 0x3e	; 62
    4ff2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    4ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffa:	84 30       	cpi	r24, 0x04	; 4
    4ffc:	08 f0       	brcs	.+2      	; 0x5000 <DIO_enuTogPortValue+0x1a>
    4ffe:	40 c0       	rjmp	.+128    	; 0x5080 <DIO_enuTogPortValue+0x9a>

		switch(Copy_uint8PortID){
    5000:	8a 81       	ldd	r24, Y+2	; 0x02
    5002:	28 2f       	mov	r18, r24
    5004:	30 e0       	ldi	r19, 0x00	; 0
    5006:	3c 83       	std	Y+4, r19	; 0x04
    5008:	2b 83       	std	Y+3, r18	; 0x03
    500a:	8b 81       	ldd	r24, Y+3	; 0x03
    500c:	9c 81       	ldd	r25, Y+4	; 0x04
    500e:	81 30       	cpi	r24, 0x01	; 1
    5010:	91 05       	cpc	r25, r1
    5012:	e9 f0       	breq	.+58     	; 0x504e <DIO_enuTogPortValue+0x68>
    5014:	2b 81       	ldd	r18, Y+3	; 0x03
    5016:	3c 81       	ldd	r19, Y+4	; 0x04
    5018:	22 30       	cpi	r18, 0x02	; 2
    501a:	31 05       	cpc	r19, r1
    501c:	2c f4       	brge	.+10     	; 0x5028 <DIO_enuTogPortValue+0x42>
    501e:	8b 81       	ldd	r24, Y+3	; 0x03
    5020:	9c 81       	ldd	r25, Y+4	; 0x04
    5022:	00 97       	sbiw	r24, 0x00	; 0
    5024:	61 f0       	breq	.+24     	; 0x503e <DIO_enuTogPortValue+0x58>
    5026:	2a c0       	rjmp	.+84     	; 0x507c <DIO_enuTogPortValue+0x96>
    5028:	2b 81       	ldd	r18, Y+3	; 0x03
    502a:	3c 81       	ldd	r19, Y+4	; 0x04
    502c:	22 30       	cpi	r18, 0x02	; 2
    502e:	31 05       	cpc	r19, r1
    5030:	b1 f0       	breq	.+44     	; 0x505e <DIO_enuTogPortValue+0x78>
    5032:	8b 81       	ldd	r24, Y+3	; 0x03
    5034:	9c 81       	ldd	r25, Y+4	; 0x04
    5036:	83 30       	cpi	r24, 0x03	; 3
    5038:	91 05       	cpc	r25, r1
    503a:	c9 f0       	breq	.+50     	; 0x506e <DIO_enuTogPortValue+0x88>
    503c:	1f c0       	rjmp	.+62     	; 0x507c <DIO_enuTogPortValue+0x96>
			case DIO_PORTA:
				PORTA = ~PORTA ;
    503e:	ab e3       	ldi	r26, 0x3B	; 59
    5040:	b0 e0       	ldi	r27, 0x00	; 0
    5042:	eb e3       	ldi	r30, 0x3B	; 59
    5044:	f0 e0       	ldi	r31, 0x00	; 0
    5046:	80 81       	ld	r24, Z
    5048:	80 95       	com	r24
    504a:	8c 93       	st	X, r24
    504c:	17 c0       	rjmp	.+46     	; 0x507c <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTB:
				PORTB =  ~PORTB;
    504e:	a8 e3       	ldi	r26, 0x38	; 56
    5050:	b0 e0       	ldi	r27, 0x00	; 0
    5052:	e8 e3       	ldi	r30, 0x38	; 56
    5054:	f0 e0       	ldi	r31, 0x00	; 0
    5056:	80 81       	ld	r24, Z
    5058:	80 95       	com	r24
    505a:	8c 93       	st	X, r24
    505c:	0f c0       	rjmp	.+30     	; 0x507c <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTC:
				PORTC =  ~PORTC;
    505e:	a5 e3       	ldi	r26, 0x35	; 53
    5060:	b0 e0       	ldi	r27, 0x00	; 0
    5062:	e5 e3       	ldi	r30, 0x35	; 53
    5064:	f0 e0       	ldi	r31, 0x00	; 0
    5066:	80 81       	ld	r24, Z
    5068:	80 95       	com	r24
    506a:	8c 93       	st	X, r24
    506c:	07 c0       	rjmp	.+14     	; 0x507c <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTD:
				PORTD =  ~PORTD;
    506e:	a2 e3       	ldi	r26, 0x32	; 50
    5070:	b0 e0       	ldi	r27, 0x00	; 0
    5072:	e2 e3       	ldi	r30, 0x32	; 50
    5074:	f0 e0       	ldi	r31, 0x00	; 0
    5076:	80 81       	ld	r24, Z
    5078:	80 95       	com	r24
    507a:	8c 93       	st	X, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    507c:	19 82       	std	Y+1, r1	; 0x01
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <DIO_enuTogPortValue+0x9e>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    5080:	83 e0       	ldi	r24, 0x03	; 3
    5082:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    5084:	89 81       	ldd	r24, Y+1	; 0x01
}
    5086:	0f 90       	pop	r0
    5088:	0f 90       	pop	r0
    508a:	0f 90       	pop	r0
    508c:	0f 90       	pop	r0
    508e:	cf 91       	pop	r28
    5090:	df 91       	pop	r29
    5092:	08 95       	ret

00005094 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(uint_8 Copy_uint8PortID, uint_8 *Copy_uint8Value){
    5094:	df 93       	push	r29
    5096:	cf 93       	push	r28
    5098:	00 d0       	rcall	.+0      	; 0x509a <DIO_enuGetPortValue+0x6>
    509a:	00 d0       	rcall	.+0      	; 0x509c <DIO_enuGetPortValue+0x8>
    509c:	00 d0       	rcall	.+0      	; 0x509e <DIO_enuGetPortValue+0xa>
    509e:	cd b7       	in	r28, 0x3d	; 61
    50a0:	de b7       	in	r29, 0x3e	; 62
    50a2:	8a 83       	std	Y+2, r24	; 0x02
    50a4:	7c 83       	std	Y+4, r23	; 0x04
    50a6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    50a8:	81 e0       	ldi	r24, 0x01	; 1
    50aa:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    50ac:	8a 81       	ldd	r24, Y+2	; 0x02
    50ae:	84 30       	cpi	r24, 0x04	; 4
    50b0:	e0 f5       	brcc	.+120    	; 0x512a <DIO_enuGetPortValue+0x96>

		switch(Copy_uint8PortID){
    50b2:	8a 81       	ldd	r24, Y+2	; 0x02
    50b4:	28 2f       	mov	r18, r24
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	3e 83       	std	Y+6, r19	; 0x06
    50ba:	2d 83       	std	Y+5, r18	; 0x05
    50bc:	8d 81       	ldd	r24, Y+5	; 0x05
    50be:	9e 81       	ldd	r25, Y+6	; 0x06
    50c0:	81 30       	cpi	r24, 0x01	; 1
    50c2:	91 05       	cpc	r25, r1
    50c4:	e1 f0       	breq	.+56     	; 0x50fe <DIO_enuGetPortValue+0x6a>
    50c6:	2d 81       	ldd	r18, Y+5	; 0x05
    50c8:	3e 81       	ldd	r19, Y+6	; 0x06
    50ca:	22 30       	cpi	r18, 0x02	; 2
    50cc:	31 05       	cpc	r19, r1
    50ce:	2c f4       	brge	.+10     	; 0x50da <DIO_enuGetPortValue+0x46>
    50d0:	8d 81       	ldd	r24, Y+5	; 0x05
    50d2:	9e 81       	ldd	r25, Y+6	; 0x06
    50d4:	00 97       	sbiw	r24, 0x00	; 0
    50d6:	61 f0       	breq	.+24     	; 0x50f0 <DIO_enuGetPortValue+0x5c>
    50d8:	26 c0       	rjmp	.+76     	; 0x5126 <DIO_enuGetPortValue+0x92>
    50da:	2d 81       	ldd	r18, Y+5	; 0x05
    50dc:	3e 81       	ldd	r19, Y+6	; 0x06
    50de:	22 30       	cpi	r18, 0x02	; 2
    50e0:	31 05       	cpc	r19, r1
    50e2:	a1 f0       	breq	.+40     	; 0x510c <DIO_enuGetPortValue+0x78>
    50e4:	8d 81       	ldd	r24, Y+5	; 0x05
    50e6:	9e 81       	ldd	r25, Y+6	; 0x06
    50e8:	83 30       	cpi	r24, 0x03	; 3
    50ea:	91 05       	cpc	r25, r1
    50ec:	b1 f0       	breq	.+44     	; 0x511a <DIO_enuGetPortValue+0x86>
    50ee:	1b c0       	rjmp	.+54     	; 0x5126 <DIO_enuGetPortValue+0x92>
			case DIO_PORTA:
				*Copy_uint8Value = PINA;
    50f0:	e9 e3       	ldi	r30, 0x39	; 57
    50f2:	f0 e0       	ldi	r31, 0x00	; 0
    50f4:	80 81       	ld	r24, Z
    50f6:	eb 81       	ldd	r30, Y+3	; 0x03
    50f8:	fc 81       	ldd	r31, Y+4	; 0x04
    50fa:	80 83       	st	Z, r24
    50fc:	14 c0       	rjmp	.+40     	; 0x5126 <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTB:
				*Copy_uint8Value = PINB;
    50fe:	e6 e3       	ldi	r30, 0x36	; 54
    5100:	f0 e0       	ldi	r31, 0x00	; 0
    5102:	80 81       	ld	r24, Z
    5104:	eb 81       	ldd	r30, Y+3	; 0x03
    5106:	fc 81       	ldd	r31, Y+4	; 0x04
    5108:	80 83       	st	Z, r24
    510a:	0d c0       	rjmp	.+26     	; 0x5126 <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTC:
				*Copy_uint8Value = PINC;
    510c:	e3 e3       	ldi	r30, 0x33	; 51
    510e:	f0 e0       	ldi	r31, 0x00	; 0
    5110:	80 81       	ld	r24, Z
    5112:	eb 81       	ldd	r30, Y+3	; 0x03
    5114:	fc 81       	ldd	r31, Y+4	; 0x04
    5116:	80 83       	st	Z, r24
    5118:	06 c0       	rjmp	.+12     	; 0x5126 <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTD:
				*Copy_uint8Value = PIND;
    511a:	e0 e3       	ldi	r30, 0x30	; 48
    511c:	f0 e0       	ldi	r31, 0x00	; 0
    511e:	80 81       	ld	r24, Z
    5120:	eb 81       	ldd	r30, Y+3	; 0x03
    5122:	fc 81       	ldd	r31, Y+4	; 0x04
    5124:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    5126:	19 82       	std	Y+1, r1	; 0x01
    5128:	02 c0       	rjmp	.+4      	; 0x512e <DIO_enuGetPortValue+0x9a>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    512a:	83 e0       	ldi	r24, 0x03	; 3
    512c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    512e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5130:	26 96       	adiw	r28, 0x06	; 6
    5132:	0f b6       	in	r0, 0x3f	; 63
    5134:	f8 94       	cli
    5136:	de bf       	out	0x3e, r29	; 62
    5138:	0f be       	out	0x3f, r0	; 63
    513a:	cd bf       	out	0x3d, r28	; 61
    513c:	cf 91       	pop	r28
    513e:	df 91       	pop	r29
    5140:	08 95       	ret

00005142 <DIO_enuSetPinDir>:

ES_t DIO_enuSetPinDir(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 Copy_uint8Value){
    5142:	df 93       	push	r29
    5144:	cf 93       	push	r28
    5146:	00 d0       	rcall	.+0      	; 0x5148 <DIO_enuSetPinDir+0x6>
    5148:	00 d0       	rcall	.+0      	; 0x514a <DIO_enuSetPinDir+0x8>
    514a:	00 d0       	rcall	.+0      	; 0x514c <DIO_enuSetPinDir+0xa>
    514c:	cd b7       	in	r28, 0x3d	; 61
    514e:	de b7       	in	r29, 0x3e	; 62
    5150:	8a 83       	std	Y+2, r24	; 0x02
    5152:	6b 83       	std	Y+3, r22	; 0x03
    5154:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    5156:	81 e0       	ldi	r24, 0x01	; 1
    5158:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    515a:	8a 81       	ldd	r24, Y+2	; 0x02
    515c:	84 30       	cpi	r24, 0x04	; 4
    515e:	08 f0       	brcs	.+2      	; 0x5162 <DIO_enuSetPinDir+0x20>
    5160:	cf c0       	rjmp	.+414    	; 0x5300 <DIO_enuSetPinDir+0x1be>
		if(Copy_uint8PinID <= DIO_PIN7){
    5162:	8b 81       	ldd	r24, Y+3	; 0x03
    5164:	88 30       	cpi	r24, 0x08	; 8
    5166:	08 f0       	brcs	.+2      	; 0x516a <DIO_enuSetPinDir+0x28>
    5168:	c8 c0       	rjmp	.+400    	; 0x52fa <DIO_enuSetPinDir+0x1b8>
			switch(Copy_uint8PortID){
    516a:	8a 81       	ldd	r24, Y+2	; 0x02
    516c:	28 2f       	mov	r18, r24
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	3e 83       	std	Y+6, r19	; 0x06
    5172:	2d 83       	std	Y+5, r18	; 0x05
    5174:	6d 81       	ldd	r22, Y+5	; 0x05
    5176:	7e 81       	ldd	r23, Y+6	; 0x06
    5178:	61 30       	cpi	r22, 0x01	; 1
    517a:	71 05       	cpc	r23, r1
    517c:	09 f4       	brne	.+2      	; 0x5180 <DIO_enuSetPinDir+0x3e>
    517e:	41 c0       	rjmp	.+130    	; 0x5202 <DIO_enuSetPinDir+0xc0>
    5180:	8d 81       	ldd	r24, Y+5	; 0x05
    5182:	9e 81       	ldd	r25, Y+6	; 0x06
    5184:	82 30       	cpi	r24, 0x02	; 2
    5186:	91 05       	cpc	r25, r1
    5188:	34 f4       	brge	.+12     	; 0x5196 <DIO_enuSetPinDir+0x54>
    518a:	2d 81       	ldd	r18, Y+5	; 0x05
    518c:	3e 81       	ldd	r19, Y+6	; 0x06
    518e:	21 15       	cp	r18, r1
    5190:	31 05       	cpc	r19, r1
    5192:	71 f0       	breq	.+28     	; 0x51b0 <DIO_enuSetPinDir+0x6e>
    5194:	b0 c0       	rjmp	.+352    	; 0x52f6 <DIO_enuSetPinDir+0x1b4>
    5196:	6d 81       	ldd	r22, Y+5	; 0x05
    5198:	7e 81       	ldd	r23, Y+6	; 0x06
    519a:	62 30       	cpi	r22, 0x02	; 2
    519c:	71 05       	cpc	r23, r1
    519e:	09 f4       	brne	.+2      	; 0x51a2 <DIO_enuSetPinDir+0x60>
    51a0:	59 c0       	rjmp	.+178    	; 0x5254 <DIO_enuSetPinDir+0x112>
    51a2:	8d 81       	ldd	r24, Y+5	; 0x05
    51a4:	9e 81       	ldd	r25, Y+6	; 0x06
    51a6:	83 30       	cpi	r24, 0x03	; 3
    51a8:	91 05       	cpc	r25, r1
    51aa:	09 f4       	brne	.+2      	; 0x51ae <DIO_enuSetPinDir+0x6c>
    51ac:	7c c0       	rjmp	.+248    	; 0x52a6 <DIO_enuSetPinDir+0x164>
    51ae:	a3 c0       	rjmp	.+326    	; 0x52f6 <DIO_enuSetPinDir+0x1b4>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK1 << Copy_uint8PinID);
    51b0:	aa e3       	ldi	r26, 0x3A	; 58
    51b2:	b0 e0       	ldi	r27, 0x00	; 0
    51b4:	ea e3       	ldi	r30, 0x3A	; 58
    51b6:	f0 e0       	ldi	r31, 0x00	; 0
    51b8:	80 81       	ld	r24, Z
    51ba:	48 2f       	mov	r20, r24
    51bc:	8b 81       	ldd	r24, Y+3	; 0x03
    51be:	28 2f       	mov	r18, r24
    51c0:	30 e0       	ldi	r19, 0x00	; 0
    51c2:	81 e0       	ldi	r24, 0x01	; 1
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	02 c0       	rjmp	.+4      	; 0x51cc <DIO_enuSetPinDir+0x8a>
    51c8:	88 0f       	add	r24, r24
    51ca:	99 1f       	adc	r25, r25
    51cc:	2a 95       	dec	r18
    51ce:	e2 f7       	brpl	.-8      	; 0x51c8 <DIO_enuSetPinDir+0x86>
    51d0:	80 95       	com	r24
    51d2:	84 23       	and	r24, r20
    51d4:	8c 93       	st	X, r24
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
    51d6:	aa e3       	ldi	r26, 0x3A	; 58
    51d8:	b0 e0       	ldi	r27, 0x00	; 0
    51da:	ea e3       	ldi	r30, 0x3A	; 58
    51dc:	f0 e0       	ldi	r31, 0x00	; 0
    51de:	80 81       	ld	r24, Z
    51e0:	48 2f       	mov	r20, r24
    51e2:	8c 81       	ldd	r24, Y+4	; 0x04
    51e4:	28 2f       	mov	r18, r24
    51e6:	30 e0       	ldi	r19, 0x00	; 0
    51e8:	8b 81       	ldd	r24, Y+3	; 0x03
    51ea:	88 2f       	mov	r24, r24
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	b9 01       	movw	r22, r18
    51f0:	02 c0       	rjmp	.+4      	; 0x51f6 <DIO_enuSetPinDir+0xb4>
    51f2:	66 0f       	add	r22, r22
    51f4:	77 1f       	adc	r23, r23
    51f6:	8a 95       	dec	r24
    51f8:	e2 f7       	brpl	.-8      	; 0x51f2 <DIO_enuSetPinDir+0xb0>
    51fa:	cb 01       	movw	r24, r22
    51fc:	84 2b       	or	r24, r20
    51fe:	8c 93       	st	X, r24
    5200:	7a c0       	rjmp	.+244    	; 0x52f6 <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK1 << Copy_uint8PinID);
    5202:	a7 e3       	ldi	r26, 0x37	; 55
    5204:	b0 e0       	ldi	r27, 0x00	; 0
    5206:	e7 e3       	ldi	r30, 0x37	; 55
    5208:	f0 e0       	ldi	r31, 0x00	; 0
    520a:	80 81       	ld	r24, Z
    520c:	48 2f       	mov	r20, r24
    520e:	8b 81       	ldd	r24, Y+3	; 0x03
    5210:	28 2f       	mov	r18, r24
    5212:	30 e0       	ldi	r19, 0x00	; 0
    5214:	81 e0       	ldi	r24, 0x01	; 1
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	02 c0       	rjmp	.+4      	; 0x521e <DIO_enuSetPinDir+0xdc>
    521a:	88 0f       	add	r24, r24
    521c:	99 1f       	adc	r25, r25
    521e:	2a 95       	dec	r18
    5220:	e2 f7       	brpl	.-8      	; 0x521a <DIO_enuSetPinDir+0xd8>
    5222:	80 95       	com	r24
    5224:	84 23       	and	r24, r20
    5226:	8c 93       	st	X, r24
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
    5228:	a7 e3       	ldi	r26, 0x37	; 55
    522a:	b0 e0       	ldi	r27, 0x00	; 0
    522c:	e7 e3       	ldi	r30, 0x37	; 55
    522e:	f0 e0       	ldi	r31, 0x00	; 0
    5230:	80 81       	ld	r24, Z
    5232:	48 2f       	mov	r20, r24
    5234:	8c 81       	ldd	r24, Y+4	; 0x04
    5236:	28 2f       	mov	r18, r24
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	8b 81       	ldd	r24, Y+3	; 0x03
    523c:	88 2f       	mov	r24, r24
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	b9 01       	movw	r22, r18
    5242:	02 c0       	rjmp	.+4      	; 0x5248 <DIO_enuSetPinDir+0x106>
    5244:	66 0f       	add	r22, r22
    5246:	77 1f       	adc	r23, r23
    5248:	8a 95       	dec	r24
    524a:	e2 f7       	brpl	.-8      	; 0x5244 <DIO_enuSetPinDir+0x102>
    524c:	cb 01       	movw	r24, r22
    524e:	84 2b       	or	r24, r20
    5250:	8c 93       	st	X, r24
    5252:	51 c0       	rjmp	.+162    	; 0x52f6 <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK1 << Copy_uint8PinID);
    5254:	a4 e3       	ldi	r26, 0x34	; 52
    5256:	b0 e0       	ldi	r27, 0x00	; 0
    5258:	e4 e3       	ldi	r30, 0x34	; 52
    525a:	f0 e0       	ldi	r31, 0x00	; 0
    525c:	80 81       	ld	r24, Z
    525e:	48 2f       	mov	r20, r24
    5260:	8b 81       	ldd	r24, Y+3	; 0x03
    5262:	28 2f       	mov	r18, r24
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	81 e0       	ldi	r24, 0x01	; 1
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	02 c0       	rjmp	.+4      	; 0x5270 <DIO_enuSetPinDir+0x12e>
    526c:	88 0f       	add	r24, r24
    526e:	99 1f       	adc	r25, r25
    5270:	2a 95       	dec	r18
    5272:	e2 f7       	brpl	.-8      	; 0x526c <DIO_enuSetPinDir+0x12a>
    5274:	80 95       	com	r24
    5276:	84 23       	and	r24, r20
    5278:	8c 93       	st	X, r24
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
    527a:	a4 e3       	ldi	r26, 0x34	; 52
    527c:	b0 e0       	ldi	r27, 0x00	; 0
    527e:	e4 e3       	ldi	r30, 0x34	; 52
    5280:	f0 e0       	ldi	r31, 0x00	; 0
    5282:	80 81       	ld	r24, Z
    5284:	48 2f       	mov	r20, r24
    5286:	8c 81       	ldd	r24, Y+4	; 0x04
    5288:	28 2f       	mov	r18, r24
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	88 2f       	mov	r24, r24
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	b9 01       	movw	r22, r18
    5294:	02 c0       	rjmp	.+4      	; 0x529a <DIO_enuSetPinDir+0x158>
    5296:	66 0f       	add	r22, r22
    5298:	77 1f       	adc	r23, r23
    529a:	8a 95       	dec	r24
    529c:	e2 f7       	brpl	.-8      	; 0x5296 <DIO_enuSetPinDir+0x154>
    529e:	cb 01       	movw	r24, r22
    52a0:	84 2b       	or	r24, r20
    52a2:	8c 93       	st	X, r24
    52a4:	28 c0       	rjmp	.+80     	; 0x52f6 <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK1 << Copy_uint8PinID);
    52a6:	a1 e3       	ldi	r26, 0x31	; 49
    52a8:	b0 e0       	ldi	r27, 0x00	; 0
    52aa:	e1 e3       	ldi	r30, 0x31	; 49
    52ac:	f0 e0       	ldi	r31, 0x00	; 0
    52ae:	80 81       	ld	r24, Z
    52b0:	48 2f       	mov	r20, r24
    52b2:	8b 81       	ldd	r24, Y+3	; 0x03
    52b4:	28 2f       	mov	r18, r24
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	02 c0       	rjmp	.+4      	; 0x52c2 <DIO_enuSetPinDir+0x180>
    52be:	88 0f       	add	r24, r24
    52c0:	99 1f       	adc	r25, r25
    52c2:	2a 95       	dec	r18
    52c4:	e2 f7       	brpl	.-8      	; 0x52be <DIO_enuSetPinDir+0x17c>
    52c6:	80 95       	com	r24
    52c8:	84 23       	and	r24, r20
    52ca:	8c 93       	st	X, r24
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
    52cc:	a1 e3       	ldi	r26, 0x31	; 49
    52ce:	b0 e0       	ldi	r27, 0x00	; 0
    52d0:	e1 e3       	ldi	r30, 0x31	; 49
    52d2:	f0 e0       	ldi	r31, 0x00	; 0
    52d4:	80 81       	ld	r24, Z
    52d6:	48 2f       	mov	r20, r24
    52d8:	8c 81       	ldd	r24, Y+4	; 0x04
    52da:	28 2f       	mov	r18, r24
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	8b 81       	ldd	r24, Y+3	; 0x03
    52e0:	88 2f       	mov	r24, r24
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	b9 01       	movw	r22, r18
    52e6:	02 c0       	rjmp	.+4      	; 0x52ec <DIO_enuSetPinDir+0x1aa>
    52e8:	66 0f       	add	r22, r22
    52ea:	77 1f       	adc	r23, r23
    52ec:	8a 95       	dec	r24
    52ee:	e2 f7       	brpl	.-8      	; 0x52e8 <DIO_enuSetPinDir+0x1a6>
    52f0:	cb 01       	movw	r24, r22
    52f2:	84 2b       	or	r24, r20
    52f4:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    52f6:	19 82       	std	Y+1, r1	; 0x01
    52f8:	05 c0       	rjmp	.+10     	; 0x5304 <DIO_enuSetPinDir+0x1c2>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    52fa:	84 e0       	ldi	r24, 0x04	; 4
    52fc:	89 83       	std	Y+1, r24	; 0x01
    52fe:	02 c0       	rjmp	.+4      	; 0x5304 <DIO_enuSetPinDir+0x1c2>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    5300:	83 e0       	ldi	r24, 0x03	; 3
    5302:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    5304:	89 81       	ldd	r24, Y+1	; 0x01
}
    5306:	26 96       	adiw	r28, 0x06	; 6
    5308:	0f b6       	in	r0, 0x3f	; 63
    530a:	f8 94       	cli
    530c:	de bf       	out	0x3e, r29	; 62
    530e:	0f be       	out	0x3f, r0	; 63
    5310:	cd bf       	out	0x3d, r28	; 61
    5312:	cf 91       	pop	r28
    5314:	df 91       	pop	r29
    5316:	08 95       	ret

00005318 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 Copy_uint8Value){
    5318:	df 93       	push	r29
    531a:	cf 93       	push	r28
    531c:	00 d0       	rcall	.+0      	; 0x531e <DIO_enuSetPinValue+0x6>
    531e:	00 d0       	rcall	.+0      	; 0x5320 <DIO_enuSetPinValue+0x8>
    5320:	00 d0       	rcall	.+0      	; 0x5322 <DIO_enuSetPinValue+0xa>
    5322:	cd b7       	in	r28, 0x3d	; 61
    5324:	de b7       	in	r29, 0x3e	; 62
    5326:	8a 83       	std	Y+2, r24	; 0x02
    5328:	6b 83       	std	Y+3, r22	; 0x03
    532a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    5330:	8a 81       	ldd	r24, Y+2	; 0x02
    5332:	84 30       	cpi	r24, 0x04	; 4
    5334:	08 f0       	brcs	.+2      	; 0x5338 <DIO_enuSetPinValue+0x20>
    5336:	cf c0       	rjmp	.+414    	; 0x54d6 <DIO_enuSetPinValue+0x1be>
		if(Copy_uint8PinID <= DIO_PIN7){
    5338:	8b 81       	ldd	r24, Y+3	; 0x03
    533a:	88 30       	cpi	r24, 0x08	; 8
    533c:	08 f0       	brcs	.+2      	; 0x5340 <DIO_enuSetPinValue+0x28>
    533e:	c8 c0       	rjmp	.+400    	; 0x54d0 <DIO_enuSetPinValue+0x1b8>
			switch(Copy_uint8PortID){
    5340:	8a 81       	ldd	r24, Y+2	; 0x02
    5342:	28 2f       	mov	r18, r24
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	3e 83       	std	Y+6, r19	; 0x06
    5348:	2d 83       	std	Y+5, r18	; 0x05
    534a:	6d 81       	ldd	r22, Y+5	; 0x05
    534c:	7e 81       	ldd	r23, Y+6	; 0x06
    534e:	61 30       	cpi	r22, 0x01	; 1
    5350:	71 05       	cpc	r23, r1
    5352:	09 f4       	brne	.+2      	; 0x5356 <DIO_enuSetPinValue+0x3e>
    5354:	41 c0       	rjmp	.+130    	; 0x53d8 <DIO_enuSetPinValue+0xc0>
    5356:	8d 81       	ldd	r24, Y+5	; 0x05
    5358:	9e 81       	ldd	r25, Y+6	; 0x06
    535a:	82 30       	cpi	r24, 0x02	; 2
    535c:	91 05       	cpc	r25, r1
    535e:	34 f4       	brge	.+12     	; 0x536c <DIO_enuSetPinValue+0x54>
    5360:	2d 81       	ldd	r18, Y+5	; 0x05
    5362:	3e 81       	ldd	r19, Y+6	; 0x06
    5364:	21 15       	cp	r18, r1
    5366:	31 05       	cpc	r19, r1
    5368:	71 f0       	breq	.+28     	; 0x5386 <DIO_enuSetPinValue+0x6e>
    536a:	b0 c0       	rjmp	.+352    	; 0x54cc <DIO_enuSetPinValue+0x1b4>
    536c:	6d 81       	ldd	r22, Y+5	; 0x05
    536e:	7e 81       	ldd	r23, Y+6	; 0x06
    5370:	62 30       	cpi	r22, 0x02	; 2
    5372:	71 05       	cpc	r23, r1
    5374:	09 f4       	brne	.+2      	; 0x5378 <DIO_enuSetPinValue+0x60>
    5376:	59 c0       	rjmp	.+178    	; 0x542a <DIO_enuSetPinValue+0x112>
    5378:	8d 81       	ldd	r24, Y+5	; 0x05
    537a:	9e 81       	ldd	r25, Y+6	; 0x06
    537c:	83 30       	cpi	r24, 0x03	; 3
    537e:	91 05       	cpc	r25, r1
    5380:	09 f4       	brne	.+2      	; 0x5384 <DIO_enuSetPinValue+0x6c>
    5382:	7c c0       	rjmp	.+248    	; 0x547c <DIO_enuSetPinValue+0x164>
    5384:	a3 c0       	rjmp	.+326    	; 0x54cc <DIO_enuSetPinValue+0x1b4>
				case DIO_PORTA:
					PORTA &= ~(BIT_MASK1 << Copy_uint8PinID);
    5386:	ab e3       	ldi	r26, 0x3B	; 59
    5388:	b0 e0       	ldi	r27, 0x00	; 0
    538a:	eb e3       	ldi	r30, 0x3B	; 59
    538c:	f0 e0       	ldi	r31, 0x00	; 0
    538e:	80 81       	ld	r24, Z
    5390:	48 2f       	mov	r20, r24
    5392:	8b 81       	ldd	r24, Y+3	; 0x03
    5394:	28 2f       	mov	r18, r24
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	81 e0       	ldi	r24, 0x01	; 1
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	02 c0       	rjmp	.+4      	; 0x53a2 <DIO_enuSetPinValue+0x8a>
    539e:	88 0f       	add	r24, r24
    53a0:	99 1f       	adc	r25, r25
    53a2:	2a 95       	dec	r18
    53a4:	e2 f7       	brpl	.-8      	; 0x539e <DIO_enuSetPinValue+0x86>
    53a6:	80 95       	com	r24
    53a8:	84 23       	and	r24, r20
    53aa:	8c 93       	st	X, r24
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
    53ac:	ab e3       	ldi	r26, 0x3B	; 59
    53ae:	b0 e0       	ldi	r27, 0x00	; 0
    53b0:	eb e3       	ldi	r30, 0x3B	; 59
    53b2:	f0 e0       	ldi	r31, 0x00	; 0
    53b4:	80 81       	ld	r24, Z
    53b6:	48 2f       	mov	r20, r24
    53b8:	8c 81       	ldd	r24, Y+4	; 0x04
    53ba:	28 2f       	mov	r18, r24
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	8b 81       	ldd	r24, Y+3	; 0x03
    53c0:	88 2f       	mov	r24, r24
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	b9 01       	movw	r22, r18
    53c6:	02 c0       	rjmp	.+4      	; 0x53cc <DIO_enuSetPinValue+0xb4>
    53c8:	66 0f       	add	r22, r22
    53ca:	77 1f       	adc	r23, r23
    53cc:	8a 95       	dec	r24
    53ce:	e2 f7       	brpl	.-8      	; 0x53c8 <DIO_enuSetPinValue+0xb0>
    53d0:	cb 01       	movw	r24, r22
    53d2:	84 2b       	or	r24, r20
    53d4:	8c 93       	st	X, r24
    53d6:	7a c0       	rjmp	.+244    	; 0x54cc <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTB:
					PORTB &= ~(BIT_MASK1 << Copy_uint8PinID);
    53d8:	a8 e3       	ldi	r26, 0x38	; 56
    53da:	b0 e0       	ldi	r27, 0x00	; 0
    53dc:	e8 e3       	ldi	r30, 0x38	; 56
    53de:	f0 e0       	ldi	r31, 0x00	; 0
    53e0:	80 81       	ld	r24, Z
    53e2:	48 2f       	mov	r20, r24
    53e4:	8b 81       	ldd	r24, Y+3	; 0x03
    53e6:	28 2f       	mov	r18, r24
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	02 c0       	rjmp	.+4      	; 0x53f4 <DIO_enuSetPinValue+0xdc>
    53f0:	88 0f       	add	r24, r24
    53f2:	99 1f       	adc	r25, r25
    53f4:	2a 95       	dec	r18
    53f6:	e2 f7       	brpl	.-8      	; 0x53f0 <DIO_enuSetPinValue+0xd8>
    53f8:	80 95       	com	r24
    53fa:	84 23       	and	r24, r20
    53fc:	8c 93       	st	X, r24
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
    53fe:	a8 e3       	ldi	r26, 0x38	; 56
    5400:	b0 e0       	ldi	r27, 0x00	; 0
    5402:	e8 e3       	ldi	r30, 0x38	; 56
    5404:	f0 e0       	ldi	r31, 0x00	; 0
    5406:	80 81       	ld	r24, Z
    5408:	48 2f       	mov	r20, r24
    540a:	8c 81       	ldd	r24, Y+4	; 0x04
    540c:	28 2f       	mov	r18, r24
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	8b 81       	ldd	r24, Y+3	; 0x03
    5412:	88 2f       	mov	r24, r24
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	b9 01       	movw	r22, r18
    5418:	02 c0       	rjmp	.+4      	; 0x541e <DIO_enuSetPinValue+0x106>
    541a:	66 0f       	add	r22, r22
    541c:	77 1f       	adc	r23, r23
    541e:	8a 95       	dec	r24
    5420:	e2 f7       	brpl	.-8      	; 0x541a <DIO_enuSetPinValue+0x102>
    5422:	cb 01       	movw	r24, r22
    5424:	84 2b       	or	r24, r20
    5426:	8c 93       	st	X, r24
    5428:	51 c0       	rjmp	.+162    	; 0x54cc <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTC:
					PORTC &= ~(BIT_MASK1 << Copy_uint8PinID);
    542a:	a5 e3       	ldi	r26, 0x35	; 53
    542c:	b0 e0       	ldi	r27, 0x00	; 0
    542e:	e5 e3       	ldi	r30, 0x35	; 53
    5430:	f0 e0       	ldi	r31, 0x00	; 0
    5432:	80 81       	ld	r24, Z
    5434:	48 2f       	mov	r20, r24
    5436:	8b 81       	ldd	r24, Y+3	; 0x03
    5438:	28 2f       	mov	r18, r24
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	02 c0       	rjmp	.+4      	; 0x5446 <DIO_enuSetPinValue+0x12e>
    5442:	88 0f       	add	r24, r24
    5444:	99 1f       	adc	r25, r25
    5446:	2a 95       	dec	r18
    5448:	e2 f7       	brpl	.-8      	; 0x5442 <DIO_enuSetPinValue+0x12a>
    544a:	80 95       	com	r24
    544c:	84 23       	and	r24, r20
    544e:	8c 93       	st	X, r24
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
    5450:	a5 e3       	ldi	r26, 0x35	; 53
    5452:	b0 e0       	ldi	r27, 0x00	; 0
    5454:	e5 e3       	ldi	r30, 0x35	; 53
    5456:	f0 e0       	ldi	r31, 0x00	; 0
    5458:	80 81       	ld	r24, Z
    545a:	48 2f       	mov	r20, r24
    545c:	8c 81       	ldd	r24, Y+4	; 0x04
    545e:	28 2f       	mov	r18, r24
    5460:	30 e0       	ldi	r19, 0x00	; 0
    5462:	8b 81       	ldd	r24, Y+3	; 0x03
    5464:	88 2f       	mov	r24, r24
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	b9 01       	movw	r22, r18
    546a:	02 c0       	rjmp	.+4      	; 0x5470 <DIO_enuSetPinValue+0x158>
    546c:	66 0f       	add	r22, r22
    546e:	77 1f       	adc	r23, r23
    5470:	8a 95       	dec	r24
    5472:	e2 f7       	brpl	.-8      	; 0x546c <DIO_enuSetPinValue+0x154>
    5474:	cb 01       	movw	r24, r22
    5476:	84 2b       	or	r24, r20
    5478:	8c 93       	st	X, r24
    547a:	28 c0       	rjmp	.+80     	; 0x54cc <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK1 << Copy_uint8PinID);
    547c:	a2 e3       	ldi	r26, 0x32	; 50
    547e:	b0 e0       	ldi	r27, 0x00	; 0
    5480:	e2 e3       	ldi	r30, 0x32	; 50
    5482:	f0 e0       	ldi	r31, 0x00	; 0
    5484:	80 81       	ld	r24, Z
    5486:	48 2f       	mov	r20, r24
    5488:	8b 81       	ldd	r24, Y+3	; 0x03
    548a:	28 2f       	mov	r18, r24
    548c:	30 e0       	ldi	r19, 0x00	; 0
    548e:	81 e0       	ldi	r24, 0x01	; 1
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	02 c0       	rjmp	.+4      	; 0x5498 <DIO_enuSetPinValue+0x180>
    5494:	88 0f       	add	r24, r24
    5496:	99 1f       	adc	r25, r25
    5498:	2a 95       	dec	r18
    549a:	e2 f7       	brpl	.-8      	; 0x5494 <DIO_enuSetPinValue+0x17c>
    549c:	80 95       	com	r24
    549e:	84 23       	and	r24, r20
    54a0:	8c 93       	st	X, r24
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
    54a2:	a2 e3       	ldi	r26, 0x32	; 50
    54a4:	b0 e0       	ldi	r27, 0x00	; 0
    54a6:	e2 e3       	ldi	r30, 0x32	; 50
    54a8:	f0 e0       	ldi	r31, 0x00	; 0
    54aa:	80 81       	ld	r24, Z
    54ac:	48 2f       	mov	r20, r24
    54ae:	8c 81       	ldd	r24, Y+4	; 0x04
    54b0:	28 2f       	mov	r18, r24
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	8b 81       	ldd	r24, Y+3	; 0x03
    54b6:	88 2f       	mov	r24, r24
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	b9 01       	movw	r22, r18
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <DIO_enuSetPinValue+0x1aa>
    54be:	66 0f       	add	r22, r22
    54c0:	77 1f       	adc	r23, r23
    54c2:	8a 95       	dec	r24
    54c4:	e2 f7       	brpl	.-8      	; 0x54be <DIO_enuSetPinValue+0x1a6>
    54c6:	cb 01       	movw	r24, r22
    54c8:	84 2b       	or	r24, r20
    54ca:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    54cc:	19 82       	std	Y+1, r1	; 0x01
    54ce:	05 c0       	rjmp	.+10     	; 0x54da <DIO_enuSetPinValue+0x1c2>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    54d0:	84 e0       	ldi	r24, 0x04	; 4
    54d2:	89 83       	std	Y+1, r24	; 0x01
    54d4:	02 c0       	rjmp	.+4      	; 0x54da <DIO_enuSetPinValue+0x1c2>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    54d6:	83 e0       	ldi	r24, 0x03	; 3
    54d8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    54da:	89 81       	ldd	r24, Y+1	; 0x01
}
    54dc:	26 96       	adiw	r28, 0x06	; 6
    54de:	0f b6       	in	r0, 0x3f	; 63
    54e0:	f8 94       	cli
    54e2:	de bf       	out	0x3e, r29	; 62
    54e4:	0f be       	out	0x3f, r0	; 63
    54e6:	cd bf       	out	0x3d, r28	; 61
    54e8:	cf 91       	pop	r28
    54ea:	df 91       	pop	r29
    54ec:	08 95       	ret

000054ee <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID){
    54ee:	df 93       	push	r29
    54f0:	cf 93       	push	r28
    54f2:	00 d0       	rcall	.+0      	; 0x54f4 <DIO_enuTogPinValue+0x6>
    54f4:	00 d0       	rcall	.+0      	; 0x54f6 <DIO_enuTogPinValue+0x8>
    54f6:	0f 92       	push	r0
    54f8:	cd b7       	in	r28, 0x3d	; 61
    54fa:	de b7       	in	r29, 0x3e	; 62
    54fc:	8a 83       	std	Y+2, r24	; 0x02
    54fe:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    5500:	81 e0       	ldi	r24, 0x01	; 1
    5502:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    5504:	8a 81       	ldd	r24, Y+2	; 0x02
    5506:	84 30       	cpi	r24, 0x04	; 4
    5508:	08 f0       	brcs	.+2      	; 0x550c <DIO_enuTogPinValue+0x1e>
    550a:	77 c0       	rjmp	.+238    	; 0x55fa <DIO_enuTogPinValue+0x10c>
		if(Copy_uint8PinID <= DIO_PIN7){
    550c:	8b 81       	ldd	r24, Y+3	; 0x03
    550e:	88 30       	cpi	r24, 0x08	; 8
    5510:	08 f0       	brcs	.+2      	; 0x5514 <DIO_enuTogPinValue+0x26>
    5512:	70 c0       	rjmp	.+224    	; 0x55f4 <DIO_enuTogPinValue+0x106>
			switch(Copy_uint8PortID){
    5514:	8a 81       	ldd	r24, Y+2	; 0x02
    5516:	28 2f       	mov	r18, r24
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	3d 83       	std	Y+5, r19	; 0x05
    551c:	2c 83       	std	Y+4, r18	; 0x04
    551e:	8c 81       	ldd	r24, Y+4	; 0x04
    5520:	9d 81       	ldd	r25, Y+5	; 0x05
    5522:	81 30       	cpi	r24, 0x01	; 1
    5524:	91 05       	cpc	r25, r1
    5526:	49 f1       	breq	.+82     	; 0x557a <DIO_enuTogPinValue+0x8c>
    5528:	2c 81       	ldd	r18, Y+4	; 0x04
    552a:	3d 81       	ldd	r19, Y+5	; 0x05
    552c:	22 30       	cpi	r18, 0x02	; 2
    552e:	31 05       	cpc	r19, r1
    5530:	2c f4       	brge	.+10     	; 0x553c <DIO_enuTogPinValue+0x4e>
    5532:	8c 81       	ldd	r24, Y+4	; 0x04
    5534:	9d 81       	ldd	r25, Y+5	; 0x05
    5536:	00 97       	sbiw	r24, 0x00	; 0
    5538:	61 f0       	breq	.+24     	; 0x5552 <DIO_enuTogPinValue+0x64>
    553a:	5a c0       	rjmp	.+180    	; 0x55f0 <DIO_enuTogPinValue+0x102>
    553c:	2c 81       	ldd	r18, Y+4	; 0x04
    553e:	3d 81       	ldd	r19, Y+5	; 0x05
    5540:	22 30       	cpi	r18, 0x02	; 2
    5542:	31 05       	cpc	r19, r1
    5544:	71 f1       	breq	.+92     	; 0x55a2 <DIO_enuTogPinValue+0xb4>
    5546:	8c 81       	ldd	r24, Y+4	; 0x04
    5548:	9d 81       	ldd	r25, Y+5	; 0x05
    554a:	83 30       	cpi	r24, 0x03	; 3
    554c:	91 05       	cpc	r25, r1
    554e:	e9 f1       	breq	.+122    	; 0x55ca <DIO_enuTogPinValue+0xdc>
    5550:	4f c0       	rjmp	.+158    	; 0x55f0 <DIO_enuTogPinValue+0x102>
				case DIO_PORTA:
					PORTA ^= (BIT_MASK1 << Copy_uint8PinID);
    5552:	ab e3       	ldi	r26, 0x3B	; 59
    5554:	b0 e0       	ldi	r27, 0x00	; 0
    5556:	eb e3       	ldi	r30, 0x3B	; 59
    5558:	f0 e0       	ldi	r31, 0x00	; 0
    555a:	80 81       	ld	r24, Z
    555c:	48 2f       	mov	r20, r24
    555e:	8b 81       	ldd	r24, Y+3	; 0x03
    5560:	28 2f       	mov	r18, r24
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	81 e0       	ldi	r24, 0x01	; 1
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	02 2e       	mov	r0, r18
    556a:	02 c0       	rjmp	.+4      	; 0x5570 <DIO_enuTogPinValue+0x82>
    556c:	88 0f       	add	r24, r24
    556e:	99 1f       	adc	r25, r25
    5570:	0a 94       	dec	r0
    5572:	e2 f7       	brpl	.-8      	; 0x556c <DIO_enuTogPinValue+0x7e>
    5574:	84 27       	eor	r24, r20
    5576:	8c 93       	st	X, r24
    5578:	3b c0       	rjmp	.+118    	; 0x55f0 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTB:
					PORTB ^= (BIT_MASK1 << Copy_uint8PinID);
    557a:	a8 e3       	ldi	r26, 0x38	; 56
    557c:	b0 e0       	ldi	r27, 0x00	; 0
    557e:	e8 e3       	ldi	r30, 0x38	; 56
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	80 81       	ld	r24, Z
    5584:	48 2f       	mov	r20, r24
    5586:	8b 81       	ldd	r24, Y+3	; 0x03
    5588:	28 2f       	mov	r18, r24
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	02 2e       	mov	r0, r18
    5592:	02 c0       	rjmp	.+4      	; 0x5598 <DIO_enuTogPinValue+0xaa>
    5594:	88 0f       	add	r24, r24
    5596:	99 1f       	adc	r25, r25
    5598:	0a 94       	dec	r0
    559a:	e2 f7       	brpl	.-8      	; 0x5594 <DIO_enuTogPinValue+0xa6>
    559c:	84 27       	eor	r24, r20
    559e:	8c 93       	st	X, r24
    55a0:	27 c0       	rjmp	.+78     	; 0x55f0 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTC:
					PORTC ^= (BIT_MASK1 << Copy_uint8PinID);
    55a2:	a5 e3       	ldi	r26, 0x35	; 53
    55a4:	b0 e0       	ldi	r27, 0x00	; 0
    55a6:	e5 e3       	ldi	r30, 0x35	; 53
    55a8:	f0 e0       	ldi	r31, 0x00	; 0
    55aa:	80 81       	ld	r24, Z
    55ac:	48 2f       	mov	r20, r24
    55ae:	8b 81       	ldd	r24, Y+3	; 0x03
    55b0:	28 2f       	mov	r18, r24
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	02 2e       	mov	r0, r18
    55ba:	02 c0       	rjmp	.+4      	; 0x55c0 <DIO_enuTogPinValue+0xd2>
    55bc:	88 0f       	add	r24, r24
    55be:	99 1f       	adc	r25, r25
    55c0:	0a 94       	dec	r0
    55c2:	e2 f7       	brpl	.-8      	; 0x55bc <DIO_enuTogPinValue+0xce>
    55c4:	84 27       	eor	r24, r20
    55c6:	8c 93       	st	X, r24
    55c8:	13 c0       	rjmp	.+38     	; 0x55f0 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK1 << Copy_uint8PinID);
    55ca:	a2 e3       	ldi	r26, 0x32	; 50
    55cc:	b0 e0       	ldi	r27, 0x00	; 0
    55ce:	e2 e3       	ldi	r30, 0x32	; 50
    55d0:	f0 e0       	ldi	r31, 0x00	; 0
    55d2:	80 81       	ld	r24, Z
    55d4:	48 2f       	mov	r20, r24
    55d6:	8b 81       	ldd	r24, Y+3	; 0x03
    55d8:	28 2f       	mov	r18, r24
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	81 e0       	ldi	r24, 0x01	; 1
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	02 2e       	mov	r0, r18
    55e2:	02 c0       	rjmp	.+4      	; 0x55e8 <DIO_enuTogPinValue+0xfa>
    55e4:	88 0f       	add	r24, r24
    55e6:	99 1f       	adc	r25, r25
    55e8:	0a 94       	dec	r0
    55ea:	e2 f7       	brpl	.-8      	; 0x55e4 <DIO_enuTogPinValue+0xf6>
    55ec:	84 27       	eor	r24, r20
    55ee:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    55f0:	19 82       	std	Y+1, r1	; 0x01
    55f2:	05 c0       	rjmp	.+10     	; 0x55fe <DIO_enuTogPinValue+0x110>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    55f4:	84 e0       	ldi	r24, 0x04	; 4
    55f6:	89 83       	std	Y+1, r24	; 0x01
    55f8:	02 c0       	rjmp	.+4      	; 0x55fe <DIO_enuTogPinValue+0x110>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    55fa:	83 e0       	ldi	r24, 0x03	; 3
    55fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    55fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    5600:	0f 90       	pop	r0
    5602:	0f 90       	pop	r0
    5604:	0f 90       	pop	r0
    5606:	0f 90       	pop	r0
    5608:	0f 90       	pop	r0
    560a:	cf 91       	pop	r28
    560c:	df 91       	pop	r29
    560e:	08 95       	ret

00005610 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 *Copy_uint8Value){
    5610:	df 93       	push	r29
    5612:	cf 93       	push	r28
    5614:	cd b7       	in	r28, 0x3d	; 61
    5616:	de b7       	in	r29, 0x3e	; 62
    5618:	27 97       	sbiw	r28, 0x07	; 7
    561a:	0f b6       	in	r0, 0x3f	; 63
    561c:	f8 94       	cli
    561e:	de bf       	out	0x3e, r29	; 62
    5620:	0f be       	out	0x3f, r0	; 63
    5622:	cd bf       	out	0x3d, r28	; 61
    5624:	8a 83       	std	Y+2, r24	; 0x02
    5626:	6b 83       	std	Y+3, r22	; 0x03
    5628:	5d 83       	std	Y+5, r21	; 0x05
    562a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    562c:	81 e0       	ldi	r24, 0x01	; 1
    562e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    5630:	8a 81       	ldd	r24, Y+2	; 0x02
    5632:	84 30       	cpi	r24, 0x04	; 4
    5634:	08 f0       	brcs	.+2      	; 0x5638 <DIO_enuGetPinValue+0x28>
    5636:	81 c0       	rjmp	.+258    	; 0x573a <DIO_enuGetPinValue+0x12a>
			if(Copy_uint8PinID <= DIO_PIN7){
    5638:	8b 81       	ldd	r24, Y+3	; 0x03
    563a:	88 30       	cpi	r24, 0x08	; 8
    563c:	08 f0       	brcs	.+2      	; 0x5640 <DIO_enuGetPinValue+0x30>
    563e:	7a c0       	rjmp	.+244    	; 0x5734 <DIO_enuGetPinValue+0x124>
				if(Copy_uint8Value != NULL){
    5640:	8c 81       	ldd	r24, Y+4	; 0x04
    5642:	9d 81       	ldd	r25, Y+5	; 0x05
    5644:	00 97       	sbiw	r24, 0x00	; 0
    5646:	09 f4       	brne	.+2      	; 0x564a <DIO_enuGetPinValue+0x3a>
    5648:	72 c0       	rjmp	.+228    	; 0x572e <DIO_enuGetPinValue+0x11e>
					switch(Copy_uint8PortID){
    564a:	8a 81       	ldd	r24, Y+2	; 0x02
    564c:	28 2f       	mov	r18, r24
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	3f 83       	std	Y+7, r19	; 0x07
    5652:	2e 83       	std	Y+6, r18	; 0x06
    5654:	4e 81       	ldd	r20, Y+6	; 0x06
    5656:	5f 81       	ldd	r21, Y+7	; 0x07
    5658:	41 30       	cpi	r20, 0x01	; 1
    565a:	51 05       	cpc	r21, r1
    565c:	59 f1       	breq	.+86     	; 0x56b4 <DIO_enuGetPinValue+0xa4>
    565e:	8e 81       	ldd	r24, Y+6	; 0x06
    5660:	9f 81       	ldd	r25, Y+7	; 0x07
    5662:	82 30       	cpi	r24, 0x02	; 2
    5664:	91 05       	cpc	r25, r1
    5666:	34 f4       	brge	.+12     	; 0x5674 <DIO_enuGetPinValue+0x64>
    5668:	2e 81       	ldd	r18, Y+6	; 0x06
    566a:	3f 81       	ldd	r19, Y+7	; 0x07
    566c:	21 15       	cp	r18, r1
    566e:	31 05       	cpc	r19, r1
    5670:	69 f0       	breq	.+26     	; 0x568c <DIO_enuGetPinValue+0x7c>
    5672:	5b c0       	rjmp	.+182    	; 0x572a <DIO_enuGetPinValue+0x11a>
    5674:	4e 81       	ldd	r20, Y+6	; 0x06
    5676:	5f 81       	ldd	r21, Y+7	; 0x07
    5678:	42 30       	cpi	r20, 0x02	; 2
    567a:	51 05       	cpc	r21, r1
    567c:	79 f1       	breq	.+94     	; 0x56dc <DIO_enuGetPinValue+0xcc>
    567e:	8e 81       	ldd	r24, Y+6	; 0x06
    5680:	9f 81       	ldd	r25, Y+7	; 0x07
    5682:	83 30       	cpi	r24, 0x03	; 3
    5684:	91 05       	cpc	r25, r1
    5686:	09 f4       	brne	.+2      	; 0x568a <DIO_enuGetPinValue+0x7a>
    5688:	3d c0       	rjmp	.+122    	; 0x5704 <DIO_enuGetPinValue+0xf4>
    568a:	4f c0       	rjmp	.+158    	; 0x572a <DIO_enuGetPinValue+0x11a>
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK1 & (PINA >> Copy_uint8PinID);
    568c:	e9 e3       	ldi	r30, 0x39	; 57
    568e:	f0 e0       	ldi	r31, 0x00	; 0
    5690:	80 81       	ld	r24, Z
    5692:	28 2f       	mov	r18, r24
    5694:	30 e0       	ldi	r19, 0x00	; 0
    5696:	8b 81       	ldd	r24, Y+3	; 0x03
    5698:	88 2f       	mov	r24, r24
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	a9 01       	movw	r20, r18
    569e:	02 c0       	rjmp	.+4      	; 0x56a4 <DIO_enuGetPinValue+0x94>
    56a0:	55 95       	asr	r21
    56a2:	47 95       	ror	r20
    56a4:	8a 95       	dec	r24
    56a6:	e2 f7       	brpl	.-8      	; 0x56a0 <DIO_enuGetPinValue+0x90>
    56a8:	ca 01       	movw	r24, r20
    56aa:	81 70       	andi	r24, 0x01	; 1
    56ac:	ec 81       	ldd	r30, Y+4	; 0x04
    56ae:	fd 81       	ldd	r31, Y+5	; 0x05
    56b0:	80 83       	st	Z, r24
    56b2:	3b c0       	rjmp	.+118    	; 0x572a <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK1 & (PINB >> Copy_uint8PinID);
    56b4:	e6 e3       	ldi	r30, 0x36	; 54
    56b6:	f0 e0       	ldi	r31, 0x00	; 0
    56b8:	80 81       	ld	r24, Z
    56ba:	28 2f       	mov	r18, r24
    56bc:	30 e0       	ldi	r19, 0x00	; 0
    56be:	8b 81       	ldd	r24, Y+3	; 0x03
    56c0:	88 2f       	mov	r24, r24
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	a9 01       	movw	r20, r18
    56c6:	02 c0       	rjmp	.+4      	; 0x56cc <DIO_enuGetPinValue+0xbc>
    56c8:	55 95       	asr	r21
    56ca:	47 95       	ror	r20
    56cc:	8a 95       	dec	r24
    56ce:	e2 f7       	brpl	.-8      	; 0x56c8 <DIO_enuGetPinValue+0xb8>
    56d0:	ca 01       	movw	r24, r20
    56d2:	81 70       	andi	r24, 0x01	; 1
    56d4:	ec 81       	ldd	r30, Y+4	; 0x04
    56d6:	fd 81       	ldd	r31, Y+5	; 0x05
    56d8:	80 83       	st	Z, r24
    56da:	27 c0       	rjmp	.+78     	; 0x572a <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK1 & (PINC >> Copy_uint8PinID);
    56dc:	e3 e3       	ldi	r30, 0x33	; 51
    56de:	f0 e0       	ldi	r31, 0x00	; 0
    56e0:	80 81       	ld	r24, Z
    56e2:	28 2f       	mov	r18, r24
    56e4:	30 e0       	ldi	r19, 0x00	; 0
    56e6:	8b 81       	ldd	r24, Y+3	; 0x03
    56e8:	88 2f       	mov	r24, r24
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	a9 01       	movw	r20, r18
    56ee:	02 c0       	rjmp	.+4      	; 0x56f4 <DIO_enuGetPinValue+0xe4>
    56f0:	55 95       	asr	r21
    56f2:	47 95       	ror	r20
    56f4:	8a 95       	dec	r24
    56f6:	e2 f7       	brpl	.-8      	; 0x56f0 <DIO_enuGetPinValue+0xe0>
    56f8:	ca 01       	movw	r24, r20
    56fa:	81 70       	andi	r24, 0x01	; 1
    56fc:	ec 81       	ldd	r30, Y+4	; 0x04
    56fe:	fd 81       	ldd	r31, Y+5	; 0x05
    5700:	80 83       	st	Z, r24
    5702:	13 c0       	rjmp	.+38     	; 0x572a <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK1 & (PIND >> Copy_uint8PinID);
    5704:	e0 e3       	ldi	r30, 0x30	; 48
    5706:	f0 e0       	ldi	r31, 0x00	; 0
    5708:	80 81       	ld	r24, Z
    570a:	28 2f       	mov	r18, r24
    570c:	30 e0       	ldi	r19, 0x00	; 0
    570e:	8b 81       	ldd	r24, Y+3	; 0x03
    5710:	88 2f       	mov	r24, r24
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	a9 01       	movw	r20, r18
    5716:	02 c0       	rjmp	.+4      	; 0x571c <DIO_enuGetPinValue+0x10c>
    5718:	55 95       	asr	r21
    571a:	47 95       	ror	r20
    571c:	8a 95       	dec	r24
    571e:	e2 f7       	brpl	.-8      	; 0x5718 <DIO_enuGetPinValue+0x108>
    5720:	ca 01       	movw	r24, r20
    5722:	81 70       	andi	r24, 0x01	; 1
    5724:	ec 81       	ldd	r30, Y+4	; 0x04
    5726:	fd 81       	ldd	r31, Y+5	; 0x05
    5728:	80 83       	st	Z, r24
							break;
					}
					Local_enuErrorState = ES_OK;
    572a:	19 82       	std	Y+1, r1	; 0x01
    572c:	08 c0       	rjmp	.+16     	; 0x573e <DIO_enuGetPinValue+0x12e>
				}
				else{
					Local_enuErrorState = ES_NULL_POINTER;
    572e:	82 e0       	ldi	r24, 0x02	; 2
    5730:	89 83       	std	Y+1, r24	; 0x01
    5732:	05 c0       	rjmp	.+10     	; 0x573e <DIO_enuGetPinValue+0x12e>
				}
			}
			else{
				Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    5734:	84 e0       	ldi	r24, 0x04	; 4
    5736:	89 83       	std	Y+1, r24	; 0x01
    5738:	02 c0       	rjmp	.+4      	; 0x573e <DIO_enuGetPinValue+0x12e>
			}
		}
		else{
			Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    573a:	83 e0       	ldi	r24, 0x03	; 3
    573c:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorState;
    573e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5740:	27 96       	adiw	r28, 0x07	; 7
    5742:	0f b6       	in	r0, 0x3f	; 63
    5744:	f8 94       	cli
    5746:	de bf       	out	0x3e, r29	; 62
    5748:	0f be       	out	0x3f, r0	; 63
    574a:	cd bf       	out	0x3d, r28	; 61
    574c:	cf 91       	pop	r28
    574e:	df 91       	pop	r29
    5750:	08 95       	ret

00005752 <LCD_enuInit>:
#include "LCD_priv.h"
#include "LCD_config.h"

#include "util/delay.h"

ES_t LCD_enuInit(void){
    5752:	df 93       	push	r29
    5754:	cf 93       	push	r28
    5756:	cd b7       	in	r28, 0x3d	; 61
    5758:	de b7       	in	r29, 0x3e	; 62
    575a:	e9 97       	sbiw	r28, 0x39	; 57
    575c:	0f b6       	in	r0, 0x3f	; 63
    575e:	f8 94       	cli
    5760:	de bf       	out	0x3e, r29	; 62
    5762:	0f be       	out	0x3f, r0	; 63
    5764:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorStates = ES_NOK;
    5766:	81 e0       	ldi	r24, 0x01	; 1
    5768:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(RS_PORT, RS_PIN, OUTPUT);
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	60 e0       	ldi	r22, 0x00	; 0
    576e:	41 e0       	ldi	r20, 0x01	; 1
    5770:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    5774:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(RW_PORT, RW_PIN, OUTPUT);
    5776:	80 e0       	ldi	r24, 0x00	; 0
    5778:	61 e0       	ldi	r22, 0x01	; 1
    577a:	41 e0       	ldi	r20, 0x01	; 1
    577c:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    5780:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(EN_PORT, EN_PIN, OUTPUT);
    5782:	80 e0       	ldi	r24, 0x00	; 0
    5784:	62 e0       	ldi	r22, 0x02	; 2
    5786:	41 e0       	ldi	r20, 0x01	; 1
    5788:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    578c:	89 af       	std	Y+57, r24	; 0x39

	Local_enuErrorStates = DIO_enuSetPinDir(D7_PORT, D7_PIN, OUTPUT);
    578e:	80 e0       	ldi	r24, 0x00	; 0
    5790:	63 e0       	ldi	r22, 0x03	; 3
    5792:	41 e0       	ldi	r20, 0x01	; 1
    5794:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    5798:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(D6_PORT, D6_PIN, OUTPUT);
    579a:	80 e0       	ldi	r24, 0x00	; 0
    579c:	64 e0       	ldi	r22, 0x04	; 4
    579e:	41 e0       	ldi	r20, 0x01	; 1
    57a0:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    57a4:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(D5_PORT, D5_PIN, OUTPUT);
    57a6:	80 e0       	ldi	r24, 0x00	; 0
    57a8:	65 e0       	ldi	r22, 0x05	; 5
    57aa:	41 e0       	ldi	r20, 0x01	; 1
    57ac:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    57b0:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(D4_PORT, D4_PIN, OUTPUT);
    57b2:	80 e0       	ldi	r24, 0x00	; 0
    57b4:	66 e0       	ldi	r22, 0x06	; 6
    57b6:	41 e0       	ldi	r20, 0x01	; 1
    57b8:	0e 94 a1 28 	call	0x5142	; 0x5142 <DIO_enuSetPinDir>
    57bc:	89 af       	std	Y+57, r24	; 0x39
    57be:	80 e0       	ldi	r24, 0x00	; 0
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	a0 ef       	ldi	r26, 0xF0	; 240
    57c4:	b1 e4       	ldi	r27, 0x41	; 65
    57c6:	8d ab       	std	Y+53, r24	; 0x35
    57c8:	9e ab       	std	Y+54, r25	; 0x36
    57ca:	af ab       	std	Y+55, r26	; 0x37
    57cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57ce:	6d a9       	ldd	r22, Y+53	; 0x35
    57d0:	7e a9       	ldd	r23, Y+54	; 0x36
    57d2:	8f a9       	ldd	r24, Y+55	; 0x37
    57d4:	98 ad       	ldd	r25, Y+56	; 0x38
    57d6:	20 e0       	ldi	r18, 0x00	; 0
    57d8:	30 e0       	ldi	r19, 0x00	; 0
    57da:	4a ef       	ldi	r20, 0xFA	; 250
    57dc:	54 e4       	ldi	r21, 0x44	; 68
    57de:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    57e2:	dc 01       	movw	r26, r24
    57e4:	cb 01       	movw	r24, r22
    57e6:	89 ab       	std	Y+49, r24	; 0x31
    57e8:	9a ab       	std	Y+50, r25	; 0x32
    57ea:	ab ab       	std	Y+51, r26	; 0x33
    57ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    57ee:	69 a9       	ldd	r22, Y+49	; 0x31
    57f0:	7a a9       	ldd	r23, Y+50	; 0x32
    57f2:	8b a9       	ldd	r24, Y+51	; 0x33
    57f4:	9c a9       	ldd	r25, Y+52	; 0x34
    57f6:	20 e0       	ldi	r18, 0x00	; 0
    57f8:	30 e0       	ldi	r19, 0x00	; 0
    57fa:	40 e8       	ldi	r20, 0x80	; 128
    57fc:	5f e3       	ldi	r21, 0x3F	; 63
    57fe:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    5802:	88 23       	and	r24, r24
    5804:	2c f4       	brge	.+10     	; 0x5810 <LCD_enuInit+0xbe>
		__ticks = 1;
    5806:	81 e0       	ldi	r24, 0x01	; 1
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	98 ab       	std	Y+48, r25	; 0x30
    580c:	8f a7       	std	Y+47, r24	; 0x2f
    580e:	3f c0       	rjmp	.+126    	; 0x588e <LCD_enuInit+0x13c>
	else if (__tmp > 65535)
    5810:	69 a9       	ldd	r22, Y+49	; 0x31
    5812:	7a a9       	ldd	r23, Y+50	; 0x32
    5814:	8b a9       	ldd	r24, Y+51	; 0x33
    5816:	9c a9       	ldd	r25, Y+52	; 0x34
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	3f ef       	ldi	r19, 0xFF	; 255
    581c:	4f e7       	ldi	r20, 0x7F	; 127
    581e:	57 e4       	ldi	r21, 0x47	; 71
    5820:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    5824:	18 16       	cp	r1, r24
    5826:	4c f5       	brge	.+82     	; 0x587a <LCD_enuInit+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5828:	6d a9       	ldd	r22, Y+53	; 0x35
    582a:	7e a9       	ldd	r23, Y+54	; 0x36
    582c:	8f a9       	ldd	r24, Y+55	; 0x37
    582e:	98 ad       	ldd	r25, Y+56	; 0x38
    5830:	20 e0       	ldi	r18, 0x00	; 0
    5832:	30 e0       	ldi	r19, 0x00	; 0
    5834:	40 e2       	ldi	r20, 0x20	; 32
    5836:	51 e4       	ldi	r21, 0x41	; 65
    5838:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	bc 01       	movw	r22, r24
    5842:	cd 01       	movw	r24, r26
    5844:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5848:	dc 01       	movw	r26, r24
    584a:	cb 01       	movw	r24, r22
    584c:	98 ab       	std	Y+48, r25	; 0x30
    584e:	8f a7       	std	Y+47, r24	; 0x2f
    5850:	0f c0       	rjmp	.+30     	; 0x5870 <LCD_enuInit+0x11e>
    5852:	88 ec       	ldi	r24, 0xC8	; 200
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	9e a7       	std	Y+46, r25	; 0x2e
    5858:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    585a:	8d a5       	ldd	r24, Y+45	; 0x2d
    585c:	9e a5       	ldd	r25, Y+46	; 0x2e
    585e:	01 97       	sbiw	r24, 0x01	; 1
    5860:	f1 f7       	brne	.-4      	; 0x585e <LCD_enuInit+0x10c>
    5862:	9e a7       	std	Y+46, r25	; 0x2e
    5864:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5866:	8f a5       	ldd	r24, Y+47	; 0x2f
    5868:	98 a9       	ldd	r25, Y+48	; 0x30
    586a:	01 97       	sbiw	r24, 0x01	; 1
    586c:	98 ab       	std	Y+48, r25	; 0x30
    586e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5870:	8f a5       	ldd	r24, Y+47	; 0x2f
    5872:	98 a9       	ldd	r25, Y+48	; 0x30
    5874:	00 97       	sbiw	r24, 0x00	; 0
    5876:	69 f7       	brne	.-38     	; 0x5852 <LCD_enuInit+0x100>
    5878:	14 c0       	rjmp	.+40     	; 0x58a2 <LCD_enuInit+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    587a:	69 a9       	ldd	r22, Y+49	; 0x31
    587c:	7a a9       	ldd	r23, Y+50	; 0x32
    587e:	8b a9       	ldd	r24, Y+51	; 0x33
    5880:	9c a9       	ldd	r25, Y+52	; 0x34
    5882:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5886:	dc 01       	movw	r26, r24
    5888:	cb 01       	movw	r24, r22
    588a:	98 ab       	std	Y+48, r25	; 0x30
    588c:	8f a7       	std	Y+47, r24	; 0x2f
    588e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5890:	98 a9       	ldd	r25, Y+48	; 0x30
    5892:	9c a7       	std	Y+44, r25	; 0x2c
    5894:	8b a7       	std	Y+43, r24	; 0x2b
    5896:	8b a5       	ldd	r24, Y+43	; 0x2b
    5898:	9c a5       	ldd	r25, Y+44	; 0x2c
    589a:	01 97       	sbiw	r24, 0x01	; 1
    589c:	f1 f7       	brne	.-4      	; 0x589a <LCD_enuInit+0x148>
    589e:	9c a7       	std	Y+44, r25	; 0x2c
    58a0:	8b a7       	std	Y+43, r24	; 0x2b

	Local_enuErrorStates = LCD_enuToSendCommand(0x38);
	_delay_ms(1);

#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = LCD_enuToSendCommand(0x28);
    58a2:	88 e2       	ldi	r24, 0x28	; 40
    58a4:	0e 94 77 31 	call	0x62ee	; 0x62ee <LCD_enuToSendCommand>
    58a8:	89 af       	std	Y+57, r24	; 0x39
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	a0 e8       	ldi	r26, 0x80	; 128
    58b0:	bf e3       	ldi	r27, 0x3F	; 63
    58b2:	8f a3       	std	Y+39, r24	; 0x27
    58b4:	98 a7       	std	Y+40, r25	; 0x28
    58b6:	a9 a7       	std	Y+41, r26	; 0x29
    58b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58ba:	6f a1       	ldd	r22, Y+39	; 0x27
    58bc:	78 a5       	ldd	r23, Y+40	; 0x28
    58be:	89 a5       	ldd	r24, Y+41	; 0x29
    58c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    58c2:	20 e0       	ldi	r18, 0x00	; 0
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	4a ef       	ldi	r20, 0xFA	; 250
    58c8:	54 e4       	ldi	r21, 0x44	; 68
    58ca:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    58ce:	dc 01       	movw	r26, r24
    58d0:	cb 01       	movw	r24, r22
    58d2:	8b a3       	std	Y+35, r24	; 0x23
    58d4:	9c a3       	std	Y+36, r25	; 0x24
    58d6:	ad a3       	std	Y+37, r26	; 0x25
    58d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    58da:	6b a1       	ldd	r22, Y+35	; 0x23
    58dc:	7c a1       	ldd	r23, Y+36	; 0x24
    58de:	8d a1       	ldd	r24, Y+37	; 0x25
    58e0:	9e a1       	ldd	r25, Y+38	; 0x26
    58e2:	20 e0       	ldi	r18, 0x00	; 0
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	40 e8       	ldi	r20, 0x80	; 128
    58e8:	5f e3       	ldi	r21, 0x3F	; 63
    58ea:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    58ee:	88 23       	and	r24, r24
    58f0:	2c f4       	brge	.+10     	; 0x58fc <LCD_enuInit+0x1aa>
		__ticks = 1;
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	9a a3       	std	Y+34, r25	; 0x22
    58f8:	89 a3       	std	Y+33, r24	; 0x21
    58fa:	3f c0       	rjmp	.+126    	; 0x597a <LCD_enuInit+0x228>
	else if (__tmp > 65535)
    58fc:	6b a1       	ldd	r22, Y+35	; 0x23
    58fe:	7c a1       	ldd	r23, Y+36	; 0x24
    5900:	8d a1       	ldd	r24, Y+37	; 0x25
    5902:	9e a1       	ldd	r25, Y+38	; 0x26
    5904:	20 e0       	ldi	r18, 0x00	; 0
    5906:	3f ef       	ldi	r19, 0xFF	; 255
    5908:	4f e7       	ldi	r20, 0x7F	; 127
    590a:	57 e4       	ldi	r21, 0x47	; 71
    590c:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    5910:	18 16       	cp	r1, r24
    5912:	4c f5       	brge	.+82     	; 0x5966 <LCD_enuInit+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5914:	6f a1       	ldd	r22, Y+39	; 0x27
    5916:	78 a5       	ldd	r23, Y+40	; 0x28
    5918:	89 a5       	ldd	r24, Y+41	; 0x29
    591a:	9a a5       	ldd	r25, Y+42	; 0x2a
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	40 e2       	ldi	r20, 0x20	; 32
    5922:	51 e4       	ldi	r21, 0x41	; 65
    5924:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5928:	dc 01       	movw	r26, r24
    592a:	cb 01       	movw	r24, r22
    592c:	bc 01       	movw	r22, r24
    592e:	cd 01       	movw	r24, r26
    5930:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5934:	dc 01       	movw	r26, r24
    5936:	cb 01       	movw	r24, r22
    5938:	9a a3       	std	Y+34, r25	; 0x22
    593a:	89 a3       	std	Y+33, r24	; 0x21
    593c:	0f c0       	rjmp	.+30     	; 0x595c <LCD_enuInit+0x20a>
    593e:	88 ec       	ldi	r24, 0xC8	; 200
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	98 a3       	std	Y+32, r25	; 0x20
    5944:	8f 8f       	std	Y+31, r24	; 0x1f
    5946:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5948:	98 a1       	ldd	r25, Y+32	; 0x20
    594a:	01 97       	sbiw	r24, 0x01	; 1
    594c:	f1 f7       	brne	.-4      	; 0x594a <LCD_enuInit+0x1f8>
    594e:	98 a3       	std	Y+32, r25	; 0x20
    5950:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5952:	89 a1       	ldd	r24, Y+33	; 0x21
    5954:	9a a1       	ldd	r25, Y+34	; 0x22
    5956:	01 97       	sbiw	r24, 0x01	; 1
    5958:	9a a3       	std	Y+34, r25	; 0x22
    595a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    595c:	89 a1       	ldd	r24, Y+33	; 0x21
    595e:	9a a1       	ldd	r25, Y+34	; 0x22
    5960:	00 97       	sbiw	r24, 0x00	; 0
    5962:	69 f7       	brne	.-38     	; 0x593e <LCD_enuInit+0x1ec>
    5964:	14 c0       	rjmp	.+40     	; 0x598e <LCD_enuInit+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5966:	6b a1       	ldd	r22, Y+35	; 0x23
    5968:	7c a1       	ldd	r23, Y+36	; 0x24
    596a:	8d a1       	ldd	r24, Y+37	; 0x25
    596c:	9e a1       	ldd	r25, Y+38	; 0x26
    596e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5972:	dc 01       	movw	r26, r24
    5974:	cb 01       	movw	r24, r22
    5976:	9a a3       	std	Y+34, r25	; 0x22
    5978:	89 a3       	std	Y+33, r24	; 0x21
    597a:	89 a1       	ldd	r24, Y+33	; 0x21
    597c:	9a a1       	ldd	r25, Y+34	; 0x22
    597e:	9e 8f       	std	Y+30, r25	; 0x1e
    5980:	8d 8f       	std	Y+29, r24	; 0x1d
    5982:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5984:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5986:	01 97       	sbiw	r24, 0x01	; 1
    5988:	f1 f7       	brne	.-4      	; 0x5986 <LCD_enuInit+0x234>
    598a:	9e 8f       	std	Y+30, r25	; 0x1e
    598c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#endif

	Local_enuErrorStates = LCD_enuToSendCommand(0x0f);
    598e:	8f e0       	ldi	r24, 0x0F	; 15
    5990:	0e 94 77 31 	call	0x62ee	; 0x62ee <LCD_enuToSendCommand>
    5994:	89 af       	std	Y+57, r24	; 0x39
    5996:	80 e0       	ldi	r24, 0x00	; 0
    5998:	90 e0       	ldi	r25, 0x00	; 0
    599a:	a0 e8       	ldi	r26, 0x80	; 128
    599c:	bf e3       	ldi	r27, 0x3F	; 63
    599e:	89 8f       	std	Y+25, r24	; 0x19
    59a0:	9a 8f       	std	Y+26, r25	; 0x1a
    59a2:	ab 8f       	std	Y+27, r26	; 0x1b
    59a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59a6:	69 8d       	ldd	r22, Y+25	; 0x19
    59a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	30 e0       	ldi	r19, 0x00	; 0
    59b2:	4a ef       	ldi	r20, 0xFA	; 250
    59b4:	54 e4       	ldi	r21, 0x44	; 68
    59b6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    59ba:	dc 01       	movw	r26, r24
    59bc:	cb 01       	movw	r24, r22
    59be:	8d 8b       	std	Y+21, r24	; 0x15
    59c0:	9e 8b       	std	Y+22, r25	; 0x16
    59c2:	af 8b       	std	Y+23, r26	; 0x17
    59c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    59c6:	6d 89       	ldd	r22, Y+21	; 0x15
    59c8:	7e 89       	ldd	r23, Y+22	; 0x16
    59ca:	8f 89       	ldd	r24, Y+23	; 0x17
    59cc:	98 8d       	ldd	r25, Y+24	; 0x18
    59ce:	20 e0       	ldi	r18, 0x00	; 0
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	40 e8       	ldi	r20, 0x80	; 128
    59d4:	5f e3       	ldi	r21, 0x3F	; 63
    59d6:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    59da:	88 23       	and	r24, r24
    59dc:	2c f4       	brge	.+10     	; 0x59e8 <LCD_enuInit+0x296>
		__ticks = 1;
    59de:	81 e0       	ldi	r24, 0x01	; 1
    59e0:	90 e0       	ldi	r25, 0x00	; 0
    59e2:	9c 8b       	std	Y+20, r25	; 0x14
    59e4:	8b 8b       	std	Y+19, r24	; 0x13
    59e6:	3f c0       	rjmp	.+126    	; 0x5a66 <LCD_enuInit+0x314>
	else if (__tmp > 65535)
    59e8:	6d 89       	ldd	r22, Y+21	; 0x15
    59ea:	7e 89       	ldd	r23, Y+22	; 0x16
    59ec:	8f 89       	ldd	r24, Y+23	; 0x17
    59ee:	98 8d       	ldd	r25, Y+24	; 0x18
    59f0:	20 e0       	ldi	r18, 0x00	; 0
    59f2:	3f ef       	ldi	r19, 0xFF	; 255
    59f4:	4f e7       	ldi	r20, 0x7F	; 127
    59f6:	57 e4       	ldi	r21, 0x47	; 71
    59f8:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    59fc:	18 16       	cp	r1, r24
    59fe:	4c f5       	brge	.+82     	; 0x5a52 <LCD_enuInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a00:	69 8d       	ldd	r22, Y+25	; 0x19
    5a02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a08:	20 e0       	ldi	r18, 0x00	; 0
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	40 e2       	ldi	r20, 0x20	; 32
    5a0e:	51 e4       	ldi	r21, 0x41	; 65
    5a10:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5a14:	dc 01       	movw	r26, r24
    5a16:	cb 01       	movw	r24, r22
    5a18:	bc 01       	movw	r22, r24
    5a1a:	cd 01       	movw	r24, r26
    5a1c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5a20:	dc 01       	movw	r26, r24
    5a22:	cb 01       	movw	r24, r22
    5a24:	9c 8b       	std	Y+20, r25	; 0x14
    5a26:	8b 8b       	std	Y+19, r24	; 0x13
    5a28:	0f c0       	rjmp	.+30     	; 0x5a48 <LCD_enuInit+0x2f6>
    5a2a:	88 ec       	ldi	r24, 0xC8	; 200
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	9a 8b       	std	Y+18, r25	; 0x12
    5a30:	89 8b       	std	Y+17, r24	; 0x11
    5a32:	89 89       	ldd	r24, Y+17	; 0x11
    5a34:	9a 89       	ldd	r25, Y+18	; 0x12
    5a36:	01 97       	sbiw	r24, 0x01	; 1
    5a38:	f1 f7       	brne	.-4      	; 0x5a36 <LCD_enuInit+0x2e4>
    5a3a:	9a 8b       	std	Y+18, r25	; 0x12
    5a3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    5a40:	9c 89       	ldd	r25, Y+20	; 0x14
    5a42:	01 97       	sbiw	r24, 0x01	; 1
    5a44:	9c 8b       	std	Y+20, r25	; 0x14
    5a46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a48:	8b 89       	ldd	r24, Y+19	; 0x13
    5a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    5a4c:	00 97       	sbiw	r24, 0x00	; 0
    5a4e:	69 f7       	brne	.-38     	; 0x5a2a <LCD_enuInit+0x2d8>
    5a50:	14 c0       	rjmp	.+40     	; 0x5a7a <LCD_enuInit+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a52:	6d 89       	ldd	r22, Y+21	; 0x15
    5a54:	7e 89       	ldd	r23, Y+22	; 0x16
    5a56:	8f 89       	ldd	r24, Y+23	; 0x17
    5a58:	98 8d       	ldd	r25, Y+24	; 0x18
    5a5a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5a5e:	dc 01       	movw	r26, r24
    5a60:	cb 01       	movw	r24, r22
    5a62:	9c 8b       	std	Y+20, r25	; 0x14
    5a64:	8b 8b       	std	Y+19, r24	; 0x13
    5a66:	8b 89       	ldd	r24, Y+19	; 0x13
    5a68:	9c 89       	ldd	r25, Y+20	; 0x14
    5a6a:	98 8b       	std	Y+16, r25	; 0x10
    5a6c:	8f 87       	std	Y+15, r24	; 0x0f
    5a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a70:	98 89       	ldd	r25, Y+16	; 0x10
    5a72:	01 97       	sbiw	r24, 0x01	; 1
    5a74:	f1 f7       	brne	.-4      	; 0x5a72 <LCD_enuInit+0x320>
    5a76:	98 8b       	std	Y+16, r25	; 0x10
    5a78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Local_enuErrorStates = LCD_enuToSendCommand(0x01);
    5a7a:	81 e0       	ldi	r24, 0x01	; 1
    5a7c:	0e 94 77 31 	call	0x62ee	; 0x62ee <LCD_enuToSendCommand>
    5a80:	89 af       	std	Y+57, r24	; 0x39
    5a82:	80 e0       	ldi	r24, 0x00	; 0
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	a0 e0       	ldi	r26, 0x00	; 0
    5a88:	b0 e4       	ldi	r27, 0x40	; 64
    5a8a:	8b 87       	std	Y+11, r24	; 0x0b
    5a8c:	9c 87       	std	Y+12, r25	; 0x0c
    5a8e:	ad 87       	std	Y+13, r26	; 0x0d
    5a90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a92:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a94:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a9a:	20 e0       	ldi	r18, 0x00	; 0
    5a9c:	30 e0       	ldi	r19, 0x00	; 0
    5a9e:	4a ef       	ldi	r20, 0xFA	; 250
    5aa0:	54 e4       	ldi	r21, 0x44	; 68
    5aa2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5aa6:	dc 01       	movw	r26, r24
    5aa8:	cb 01       	movw	r24, r22
    5aaa:	8f 83       	std	Y+7, r24	; 0x07
    5aac:	98 87       	std	Y+8, r25	; 0x08
    5aae:	a9 87       	std	Y+9, r26	; 0x09
    5ab0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    5ab4:	78 85       	ldd	r23, Y+8	; 0x08
    5ab6:	89 85       	ldd	r24, Y+9	; 0x09
    5ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aba:	20 e0       	ldi	r18, 0x00	; 0
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	40 e8       	ldi	r20, 0x80	; 128
    5ac0:	5f e3       	ldi	r21, 0x3F	; 63
    5ac2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    5ac6:	88 23       	and	r24, r24
    5ac8:	2c f4       	brge	.+10     	; 0x5ad4 <LCD_enuInit+0x382>
		__ticks = 1;
    5aca:	81 e0       	ldi	r24, 0x01	; 1
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	9e 83       	std	Y+6, r25	; 0x06
    5ad0:	8d 83       	std	Y+5, r24	; 0x05
    5ad2:	3f c0       	rjmp	.+126    	; 0x5b52 <LCD_enuInit+0x400>
	else if (__tmp > 65535)
    5ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ad6:	78 85       	ldd	r23, Y+8	; 0x08
    5ad8:	89 85       	ldd	r24, Y+9	; 0x09
    5ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    5adc:	20 e0       	ldi	r18, 0x00	; 0
    5ade:	3f ef       	ldi	r19, 0xFF	; 255
    5ae0:	4f e7       	ldi	r20, 0x7F	; 127
    5ae2:	57 e4       	ldi	r21, 0x47	; 71
    5ae4:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    5ae8:	18 16       	cp	r1, r24
    5aea:	4c f5       	brge	.+82     	; 0x5b3e <LCD_enuInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aec:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aee:	7c 85       	ldd	r23, Y+12	; 0x0c
    5af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5af4:	20 e0       	ldi	r18, 0x00	; 0
    5af6:	30 e0       	ldi	r19, 0x00	; 0
    5af8:	40 e2       	ldi	r20, 0x20	; 32
    5afa:	51 e4       	ldi	r21, 0x41	; 65
    5afc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5b00:	dc 01       	movw	r26, r24
    5b02:	cb 01       	movw	r24, r22
    5b04:	bc 01       	movw	r22, r24
    5b06:	cd 01       	movw	r24, r26
    5b08:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b0c:	dc 01       	movw	r26, r24
    5b0e:	cb 01       	movw	r24, r22
    5b10:	9e 83       	std	Y+6, r25	; 0x06
    5b12:	8d 83       	std	Y+5, r24	; 0x05
    5b14:	0f c0       	rjmp	.+30     	; 0x5b34 <LCD_enuInit+0x3e2>
    5b16:	88 ec       	ldi	r24, 0xC8	; 200
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	9c 83       	std	Y+4, r25	; 0x04
    5b1c:	8b 83       	std	Y+3, r24	; 0x03
    5b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b20:	9c 81       	ldd	r25, Y+4	; 0x04
    5b22:	01 97       	sbiw	r24, 0x01	; 1
    5b24:	f1 f7       	brne	.-4      	; 0x5b22 <LCD_enuInit+0x3d0>
    5b26:	9c 83       	std	Y+4, r25	; 0x04
    5b28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b2e:	01 97       	sbiw	r24, 0x01	; 1
    5b30:	9e 83       	std	Y+6, r25	; 0x06
    5b32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b34:	8d 81       	ldd	r24, Y+5	; 0x05
    5b36:	9e 81       	ldd	r25, Y+6	; 0x06
    5b38:	00 97       	sbiw	r24, 0x00	; 0
    5b3a:	69 f7       	brne	.-38     	; 0x5b16 <LCD_enuInit+0x3c4>
    5b3c:	14 c0       	rjmp	.+40     	; 0x5b66 <LCD_enuInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b40:	78 85       	ldd	r23, Y+8	; 0x08
    5b42:	89 85       	ldd	r24, Y+9	; 0x09
    5b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b46:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b4a:	dc 01       	movw	r26, r24
    5b4c:	cb 01       	movw	r24, r22
    5b4e:	9e 83       	std	Y+6, r25	; 0x06
    5b50:	8d 83       	std	Y+5, r24	; 0x05
    5b52:	8d 81       	ldd	r24, Y+5	; 0x05
    5b54:	9e 81       	ldd	r25, Y+6	; 0x06
    5b56:	9a 83       	std	Y+2, r25	; 0x02
    5b58:	89 83       	std	Y+1, r24	; 0x01
    5b5a:	89 81       	ldd	r24, Y+1	; 0x01
    5b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b5e:	01 97       	sbiw	r24, 0x01	; 1
    5b60:	f1 f7       	brne	.-4      	; 0x5b5e <LCD_enuInit+0x40c>
    5b62:	9a 83       	std	Y+2, r25	; 0x02
    5b64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Local_enuErrorStates = LCD_enuToSendCommand(0x06);
    5b66:	86 e0       	ldi	r24, 0x06	; 6
    5b68:	0e 94 77 31 	call	0x62ee	; 0x62ee <LCD_enuToSendCommand>
    5b6c:	89 af       	std	Y+57, r24	; 0x39

	return Local_enuErrorStates;
    5b6e:	89 ad       	ldd	r24, Y+57	; 0x39
}
    5b70:	e9 96       	adiw	r28, 0x39	; 57
    5b72:	0f b6       	in	r0, 0x3f	; 63
    5b74:	f8 94       	cli
    5b76:	de bf       	out	0x3e, r29	; 62
    5b78:	0f be       	out	0x3f, r0	; 63
    5b7a:	cd bf       	out	0x3d, r28	; 61
    5b7c:	cf 91       	pop	r28
    5b7e:	df 91       	pop	r29
    5b80:	08 95       	ret

00005b82 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(uint_8 Copy_uint8Command){
    5b82:	df 93       	push	r29
    5b84:	cf 93       	push	r28
    5b86:	00 d0       	rcall	.+0      	; 0x5b88 <LCD_enuSendCommand+0x6>
    5b88:	cd b7       	in	r28, 0x3d	; 61
    5b8a:	de b7       	in	r29, 0x3e	; 62
    5b8c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    5b8e:	81 e0       	ldi	r24, 0x01	; 1
    5b90:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = LCD_enuToSendCommand(Copy_uint8Command);
    5b92:	8a 81       	ldd	r24, Y+2	; 0x02
    5b94:	0e 94 77 31 	call	0x62ee	; 0x62ee <LCD_enuToSendCommand>
    5b98:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStates = ES_OK;
    5b9a:	19 82       	std	Y+1, r1	; 0x01
    5b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    5b9e:	0f 90       	pop	r0
    5ba0:	0f 90       	pop	r0
    5ba2:	cf 91       	pop	r28
    5ba4:	df 91       	pop	r29
    5ba6:	08 95       	ret

00005ba8 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(uint_8 Copy_uint8Data){
    5ba8:	df 93       	push	r29
    5baa:	cf 93       	push	r28
    5bac:	00 d0       	rcall	.+0      	; 0x5bae <LCD_enuDisplayChar+0x6>
    5bae:	cd b7       	in	r28, 0x3d	; 61
    5bb0:	de b7       	in	r29, 0x3e	; 62
    5bb2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    5bb4:	81 e0       	ldi	r24, 0x01	; 1
    5bb6:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = LCD_enuSendData(Copy_uint8Data);
    5bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bba:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <LCD_enuSendData>
    5bbe:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStates;
    5bc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    5bc2:	0f 90       	pop	r0
    5bc4:	0f 90       	pop	r0
    5bc6:	cf 91       	pop	r28
    5bc8:	df 91       	pop	r29
    5bca:	08 95       	ret

00005bcc <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(uint_8* Copy_uint8Data){
    5bcc:	df 93       	push	r29
    5bce:	cf 93       	push	r28
    5bd0:	00 d0       	rcall	.+0      	; 0x5bd2 <LCD_enuDisplayString+0x6>
    5bd2:	00 d0       	rcall	.+0      	; 0x5bd4 <LCD_enuDisplayString+0x8>
    5bd4:	cd b7       	in	r28, 0x3d	; 61
    5bd6:	de b7       	in	r29, 0x3e	; 62
    5bd8:	9c 83       	std	Y+4, r25	; 0x04
    5bda:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    5bdc:	81 e0       	ldi	r24, 0x01	; 1
    5bde:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Local_uint8Iterator = 0;
    5be0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_uint8Data != NULL){
    5be2:	8b 81       	ldd	r24, Y+3	; 0x03
    5be4:	9c 81       	ldd	r25, Y+4	; 0x04
    5be6:	00 97       	sbiw	r24, 0x00	; 0
    5be8:	e1 f0       	breq	.+56     	; 0x5c22 <LCD_enuDisplayString+0x56>
    5bea:	0f c0       	rjmp	.+30     	; 0x5c0a <LCD_enuDisplayString+0x3e>
		while(Copy_uint8Data[Local_uint8Iterator] != '\0'){
			Local_enuErrorStates = LCD_enuSendData(Copy_uint8Data[Local_uint8Iterator]);
    5bec:	89 81       	ldd	r24, Y+1	; 0x01
    5bee:	28 2f       	mov	r18, r24
    5bf0:	30 e0       	ldi	r19, 0x00	; 0
    5bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    5bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    5bf6:	fc 01       	movw	r30, r24
    5bf8:	e2 0f       	add	r30, r18
    5bfa:	f3 1f       	adc	r31, r19
    5bfc:	80 81       	ld	r24, Z
    5bfe:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <LCD_enuSendData>
    5c02:	8a 83       	std	Y+2, r24	; 0x02
			Local_uint8Iterator++;
    5c04:	89 81       	ldd	r24, Y+1	; 0x01
    5c06:	8f 5f       	subi	r24, 0xFF	; 255
    5c08:	89 83       	std	Y+1, r24	; 0x01

ES_t LCD_enuDisplayString(uint_8* Copy_uint8Data){
	ES_t Local_enuErrorStates = ES_NOK;
	uint_8 Local_uint8Iterator = 0;
	if(Copy_uint8Data != NULL){
		while(Copy_uint8Data[Local_uint8Iterator] != '\0'){
    5c0a:	89 81       	ldd	r24, Y+1	; 0x01
    5c0c:	28 2f       	mov	r18, r24
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	8b 81       	ldd	r24, Y+3	; 0x03
    5c12:	9c 81       	ldd	r25, Y+4	; 0x04
    5c14:	fc 01       	movw	r30, r24
    5c16:	e2 0f       	add	r30, r18
    5c18:	f3 1f       	adc	r31, r19
    5c1a:	80 81       	ld	r24, Z
    5c1c:	88 23       	and	r24, r24
    5c1e:	31 f7       	brne	.-52     	; 0x5bec <LCD_enuDisplayString+0x20>
    5c20:	02 c0       	rjmp	.+4      	; 0x5c26 <LCD_enuDisplayString+0x5a>
			Local_enuErrorStates = LCD_enuSendData(Copy_uint8Data[Local_uint8Iterator]);
			Local_uint8Iterator++;
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    5c22:	82 e0       	ldi	r24, 0x02	; 2
    5c24:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorStates;
    5c26:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5c28:	0f 90       	pop	r0
    5c2a:	0f 90       	pop	r0
    5c2c:	0f 90       	pop	r0
    5c2e:	0f 90       	pop	r0
    5c30:	cf 91       	pop	r28
    5c32:	df 91       	pop	r29
    5c34:	08 95       	ret

00005c36 <LCD_enuDisplayInteger>:

ES_t LCD_enuDisplayInteger(sint_64 Copy_uint32Data){
    5c36:	af 92       	push	r10
    5c38:	bf 92       	push	r11
    5c3a:	cf 92       	push	r12
    5c3c:	df 92       	push	r13
    5c3e:	ef 92       	push	r14
    5c40:	ff 92       	push	r15
    5c42:	0f 93       	push	r16
    5c44:	1f 93       	push	r17
    5c46:	df 93       	push	r29
    5c48:	cf 93       	push	r28
    5c4a:	cd b7       	in	r28, 0x3d	; 61
    5c4c:	de b7       	in	r29, 0x3e	; 62
    5c4e:	29 97       	sbiw	r28, 0x09	; 9
    5c50:	0f b6       	in	r0, 0x3f	; 63
    5c52:	f8 94       	cli
    5c54:	de bf       	out	0x3e, r29	; 62
    5c56:	0f be       	out	0x3f, r0	; 63
    5c58:	cd bf       	out	0x3d, r28	; 61
    5c5a:	2a 83       	std	Y+2, r18	; 0x02
    5c5c:	3b 83       	std	Y+3, r19	; 0x03
    5c5e:	4c 83       	std	Y+4, r20	; 0x04
    5c60:	5d 83       	std	Y+5, r21	; 0x05
    5c62:	6e 83       	std	Y+6, r22	; 0x06
    5c64:	7f 83       	std	Y+7, r23	; 0x07
    5c66:	88 87       	std	Y+8, r24	; 0x08
    5c68:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorStates = ES_NOK;
    5c6a:	81 e0       	ldi	r24, 0x01	; 1
    5c6c:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = LCD_enuDisplayNumber(Copy_uint32Data);
    5c6e:	aa 80       	ldd	r10, Y+2	; 0x02
    5c70:	bb 80       	ldd	r11, Y+3	; 0x03
    5c72:	cc 80       	ldd	r12, Y+4	; 0x04
    5c74:	dd 80       	ldd	r13, Y+5	; 0x05
    5c76:	ee 80       	ldd	r14, Y+6	; 0x06
    5c78:	ff 80       	ldd	r15, Y+7	; 0x07
    5c7a:	08 85       	ldd	r16, Y+8	; 0x08
    5c7c:	19 85       	ldd	r17, Y+9	; 0x09
    5c7e:	2a 2d       	mov	r18, r10
    5c80:	3b 2d       	mov	r19, r11
    5c82:	4c 2d       	mov	r20, r12
    5c84:	5d 2d       	mov	r21, r13
    5c86:	6e 2d       	mov	r22, r14
    5c88:	7f 2d       	mov	r23, r15
    5c8a:	80 2f       	mov	r24, r16
    5c8c:	91 2f       	mov	r25, r17
    5c8e:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <LCD_enuDisplayNumber>
    5c92:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStates;
    5c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    5c96:	29 96       	adiw	r28, 0x09	; 9
    5c98:	0f b6       	in	r0, 0x3f	; 63
    5c9a:	f8 94       	cli
    5c9c:	de bf       	out	0x3e, r29	; 62
    5c9e:	0f be       	out	0x3f, r0	; 63
    5ca0:	cd bf       	out	0x3d, r28	; 61
    5ca2:	cf 91       	pop	r28
    5ca4:	df 91       	pop	r29
    5ca6:	1f 91       	pop	r17
    5ca8:	0f 91       	pop	r16
    5caa:	ff 90       	pop	r15
    5cac:	ef 90       	pop	r14
    5cae:	df 90       	pop	r13
    5cb0:	cf 90       	pop	r12
    5cb2:	bf 90       	pop	r11
    5cb4:	af 90       	pop	r10
    5cb6:	08 95       	ret

00005cb8 <LCD_enuDisplayFloat>:

ES_t LCD_enuDisplayFloat(f64 Copy_f64Data){
    5cb8:	af 92       	push	r10
    5cba:	bf 92       	push	r11
    5cbc:	cf 92       	push	r12
    5cbe:	df 92       	push	r13
    5cc0:	ef 92       	push	r14
    5cc2:	ff 92       	push	r15
    5cc4:	0f 93       	push	r16
    5cc6:	1f 93       	push	r17
    5cc8:	df 93       	push	r29
    5cca:	cf 93       	push	r28
    5ccc:	cd b7       	in	r28, 0x3d	; 61
    5cce:	de b7       	in	r29, 0x3e	; 62
    5cd0:	62 97       	sbiw	r28, 0x12	; 18
    5cd2:	0f b6       	in	r0, 0x3f	; 63
    5cd4:	f8 94       	cli
    5cd6:	de bf       	out	0x3e, r29	; 62
    5cd8:	0f be       	out	0x3f, r0	; 63
    5cda:	cd bf       	out	0x3d, r28	; 61
    5cdc:	6f 87       	std	Y+15, r22	; 0x0f
    5cde:	78 8b       	std	Y+16, r23	; 0x10
    5ce0:	89 8b       	std	Y+17, r24	; 0x11
    5ce2:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t Local_enuErrorStates = ES_NOK;
    5ce4:	81 e0       	ldi	r24, 0x01	; 1
    5ce6:	8e 87       	std	Y+14, r24	; 0x0e
	uint_64 Local_uint64RealNum;
	f64	Local_f64Fraction;
	if(Copy_f64Data < 0){
    5ce8:	6f 85       	ldd	r22, Y+15	; 0x0f
    5cea:	78 89       	ldd	r23, Y+16	; 0x10
    5cec:	89 89       	ldd	r24, Y+17	; 0x11
    5cee:	9a 89       	ldd	r25, Y+18	; 0x12
    5cf0:	20 e0       	ldi	r18, 0x00	; 0
    5cf2:	30 e0       	ldi	r19, 0x00	; 0
    5cf4:	40 e0       	ldi	r20, 0x00	; 0
    5cf6:	50 e0       	ldi	r21, 0x00	; 0
    5cf8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    5cfc:	88 23       	and	r24, r24
    5cfe:	6c f4       	brge	.+26     	; 0x5d1a <LCD_enuDisplayFloat+0x62>
		Local_enuErrorStates = LCD_enuSendData('-');
    5d00:	8d e2       	ldi	r24, 0x2D	; 45
    5d02:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <LCD_enuSendData>
    5d06:	8e 87       	std	Y+14, r24	; 0x0e
		Copy_f64Data *= -1;
    5d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d0a:	98 89       	ldd	r25, Y+16	; 0x10
    5d0c:	a9 89       	ldd	r26, Y+17	; 0x11
    5d0e:	ba 89       	ldd	r27, Y+18	; 0x12
    5d10:	b0 58       	subi	r27, 0x80	; 128
    5d12:	8f 87       	std	Y+15, r24	; 0x0f
    5d14:	98 8b       	std	Y+16, r25	; 0x10
    5d16:	a9 8b       	std	Y+17, r26	; 0x11
    5d18:	ba 8b       	std	Y+18, r27	; 0x12
	}

	Local_uint64RealNum = (uint_64) Copy_f64Data;
    5d1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    5d1c:	78 89       	ldd	r23, Y+16	; 0x10
    5d1e:	89 89       	ldd	r24, Y+17	; 0x11
    5d20:	9a 89       	ldd	r25, Y+18	; 0x12
    5d22:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfdi>
    5d26:	a2 2e       	mov	r10, r18
    5d28:	b3 2e       	mov	r11, r19
    5d2a:	c4 2e       	mov	r12, r20
    5d2c:	d5 2e       	mov	r13, r21
    5d2e:	e6 2e       	mov	r14, r22
    5d30:	f7 2e       	mov	r15, r23
    5d32:	08 2f       	mov	r16, r24
    5d34:	19 2f       	mov	r17, r25
    5d36:	ae 82       	std	Y+6, r10	; 0x06
    5d38:	bf 82       	std	Y+7, r11	; 0x07
    5d3a:	c8 86       	std	Y+8, r12	; 0x08
    5d3c:	d9 86       	std	Y+9, r13	; 0x09
    5d3e:	ea 86       	std	Y+10, r14	; 0x0a
    5d40:	fb 86       	std	Y+11, r15	; 0x0b
    5d42:	0c 87       	std	Y+12, r16	; 0x0c
    5d44:	1d 87       	std	Y+13, r17	; 0x0d
	Local_f64Fraction = Copy_f64Data - Local_uint64RealNum;
    5d46:	2e 81       	ldd	r18, Y+6	; 0x06
    5d48:	3f 81       	ldd	r19, Y+7	; 0x07
    5d4a:	48 85       	ldd	r20, Y+8	; 0x08
    5d4c:	59 85       	ldd	r21, Y+9	; 0x09
    5d4e:	6a 85       	ldd	r22, Y+10	; 0x0a
    5d50:	7b 85       	ldd	r23, Y+11	; 0x0b
    5d52:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d54:	9d 85       	ldd	r25, Y+13	; 0x0d
    5d56:	0e 94 10 02 	call	0x420	; 0x420 <__floatundisf>
    5d5a:	9b 01       	movw	r18, r22
    5d5c:	ac 01       	movw	r20, r24
    5d5e:	6f 85       	ldd	r22, Y+15	; 0x0f
    5d60:	78 89       	ldd	r23, Y+16	; 0x10
    5d62:	89 89       	ldd	r24, Y+17	; 0x11
    5d64:	9a 89       	ldd	r25, Y+18	; 0x12
    5d66:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    5d6a:	dc 01       	movw	r26, r24
    5d6c:	cb 01       	movw	r24, r22
    5d6e:	8a 83       	std	Y+2, r24	; 0x02
    5d70:	9b 83       	std	Y+3, r25	; 0x03
    5d72:	ac 83       	std	Y+4, r26	; 0x04
    5d74:	bd 83       	std	Y+5, r27	; 0x05

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_uint64RealNum);
    5d76:	ae 80       	ldd	r10, Y+6	; 0x06
    5d78:	bf 80       	ldd	r11, Y+7	; 0x07
    5d7a:	c8 84       	ldd	r12, Y+8	; 0x08
    5d7c:	d9 84       	ldd	r13, Y+9	; 0x09
    5d7e:	ea 84       	ldd	r14, Y+10	; 0x0a
    5d80:	fb 84       	ldd	r15, Y+11	; 0x0b
    5d82:	0c 85       	ldd	r16, Y+12	; 0x0c
    5d84:	1d 85       	ldd	r17, Y+13	; 0x0d
    5d86:	2a 2d       	mov	r18, r10
    5d88:	3b 2d       	mov	r19, r11
    5d8a:	4c 2d       	mov	r20, r12
    5d8c:	5d 2d       	mov	r21, r13
    5d8e:	6e 2d       	mov	r22, r14
    5d90:	7f 2d       	mov	r23, r15
    5d92:	80 2f       	mov	r24, r16
    5d94:	91 2f       	mov	r25, r17
    5d96:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <LCD_enuDisplayNumber>
    5d9a:	8e 87       	std	Y+14, r24	; 0x0e
	Local_enuErrorStates = LCD_enuSendData('.');
    5d9c:	8e e2       	ldi	r24, 0x2E	; 46
    5d9e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <LCD_enuSendData>
    5da2:	8e 87       	std	Y+14, r24	; 0x0e

	uint_8 Local_uint8Iterator;
	for(Local_uint8Iterator = 0; Local_uint8Iterator < FRACTION_MAX_RANGE; Local_uint8Iterator++)
    5da4:	19 82       	std	Y+1, r1	; 0x01
    5da6:	13 c0       	rjmp	.+38     	; 0x5dce <LCD_enuDisplayFloat+0x116>
		Local_f64Fraction *= 10;
    5da8:	6a 81       	ldd	r22, Y+2	; 0x02
    5daa:	7b 81       	ldd	r23, Y+3	; 0x03
    5dac:	8c 81       	ldd	r24, Y+4	; 0x04
    5dae:	9d 81       	ldd	r25, Y+5	; 0x05
    5db0:	20 e0       	ldi	r18, 0x00	; 0
    5db2:	30 e0       	ldi	r19, 0x00	; 0
    5db4:	40 e2       	ldi	r20, 0x20	; 32
    5db6:	51 e4       	ldi	r21, 0x41	; 65
    5db8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5dbc:	dc 01       	movw	r26, r24
    5dbe:	cb 01       	movw	r24, r22
    5dc0:	8a 83       	std	Y+2, r24	; 0x02
    5dc2:	9b 83       	std	Y+3, r25	; 0x03
    5dc4:	ac 83       	std	Y+4, r26	; 0x04
    5dc6:	bd 83       	std	Y+5, r27	; 0x05

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_uint64RealNum);
	Local_enuErrorStates = LCD_enuSendData('.');

	uint_8 Local_uint8Iterator;
	for(Local_uint8Iterator = 0; Local_uint8Iterator < FRACTION_MAX_RANGE; Local_uint8Iterator++)
    5dc8:	89 81       	ldd	r24, Y+1	; 0x01
    5dca:	8f 5f       	subi	r24, 0xFF	; 255
    5dcc:	89 83       	std	Y+1, r24	; 0x01
    5dce:	89 81       	ldd	r24, Y+1	; 0x01
    5dd0:	84 30       	cpi	r24, 0x04	; 4
    5dd2:	50 f3       	brcs	.-44     	; 0x5da8 <LCD_enuDisplayFloat+0xf0>
		Local_f64Fraction *= 10;

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_f64Fraction);
    5dd4:	6a 81       	ldd	r22, Y+2	; 0x02
    5dd6:	7b 81       	ldd	r23, Y+3	; 0x03
    5dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    5dda:	9d 81       	ldd	r25, Y+5	; 0x05
    5ddc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixsfdi>
    5de0:	a2 2e       	mov	r10, r18
    5de2:	b3 2e       	mov	r11, r19
    5de4:	c4 2e       	mov	r12, r20
    5de6:	d5 2e       	mov	r13, r21
    5de8:	e6 2e       	mov	r14, r22
    5dea:	f7 2e       	mov	r15, r23
    5dec:	08 2f       	mov	r16, r24
    5dee:	19 2f       	mov	r17, r25
    5df0:	2a 2d       	mov	r18, r10
    5df2:	3b 2d       	mov	r19, r11
    5df4:	4c 2d       	mov	r20, r12
    5df6:	5d 2d       	mov	r21, r13
    5df8:	6e 2d       	mov	r22, r14
    5dfa:	7f 2d       	mov	r23, r15
    5dfc:	80 2f       	mov	r24, r16
    5dfe:	91 2f       	mov	r25, r17
    5e00:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <LCD_enuDisplayNumber>
    5e04:	8e 87       	std	Y+14, r24	; 0x0e
	return Local_enuErrorStates;
    5e06:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    5e08:	62 96       	adiw	r28, 0x12	; 18
    5e0a:	0f b6       	in	r0, 0x3f	; 63
    5e0c:	f8 94       	cli
    5e0e:	de bf       	out	0x3e, r29	; 62
    5e10:	0f be       	out	0x3f, r0	; 63
    5e12:	cd bf       	out	0x3d, r28	; 61
    5e14:	cf 91       	pop	r28
    5e16:	df 91       	pop	r29
    5e18:	1f 91       	pop	r17
    5e1a:	0f 91       	pop	r16
    5e1c:	ff 90       	pop	r15
    5e1e:	ef 90       	pop	r14
    5e20:	df 90       	pop	r13
    5e22:	cf 90       	pop	r12
    5e24:	bf 90       	pop	r11
    5e26:	af 90       	pop	r10
    5e28:	08 95       	ret

00005e2a <LCD_enuSendData>:

static inline ES_t LCD_enuSendData(uint_8 Copy_uint8Data){
    5e2a:	df 93       	push	r29
    5e2c:	cf 93       	push	r28
    5e2e:	cd b7       	in	r28, 0x3d	; 61
    5e30:	de b7       	in	r29, 0x3e	; 62
    5e32:	ea 97       	sbiw	r28, 0x3a	; 58
    5e34:	0f b6       	in	r0, 0x3f	; 63
    5e36:	f8 94       	cli
    5e38:	de bf       	out	0x3e, r29	; 62
    5e3a:	0f be       	out	0x3f, r0	; 63
    5e3c:	cd bf       	out	0x3d, r28	; 61
    5e3e:	8a af       	std	Y+58, r24	; 0x3a
	ES_t Local_enuErrorStates = ES_NOK;
    5e40:	81 e0       	ldi	r24, 0x01	; 1
    5e42:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, HIGH);
    5e44:	80 e0       	ldi	r24, 0x00	; 0
    5e46:	60 e0       	ldi	r22, 0x00	; 0
    5e48:	41 e0       	ldi	r20, 0x01	; 1
    5e4a:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5e4e:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
    5e50:	80 e0       	ldi	r24, 0x00	; 0
    5e52:	61 e0       	ldi	r22, 0x01	; 1
    5e54:	40 e0       	ldi	r20, 0x00	; 0
    5e56:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5e5a:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	62 e0       	ldi	r22, 0x02	; 2
    5e60:	40 e0       	ldi	r20, 0x00	; 0
    5e62:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5e66:	89 af       	std	Y+57, r24	; 0x39

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK1 & (Copy_uint8Data >> 7));
    5e68:	8a ad       	ldd	r24, Y+58	; 0x3a
    5e6a:	98 2f       	mov	r25, r24
    5e6c:	99 1f       	adc	r25, r25
    5e6e:	99 27       	eor	r25, r25
    5e70:	99 1f       	adc	r25, r25
    5e72:	80 e0       	ldi	r24, 0x00	; 0
    5e74:	63 e0       	ldi	r22, 0x03	; 3
    5e76:	49 2f       	mov	r20, r25
    5e78:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5e7c:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK1 & (Copy_uint8Data >> 6));
    5e7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    5e80:	82 95       	swap	r24
    5e82:	86 95       	lsr	r24
    5e84:	86 95       	lsr	r24
    5e86:	83 70       	andi	r24, 0x03	; 3
    5e88:	98 2f       	mov	r25, r24
    5e8a:	91 70       	andi	r25, 0x01	; 1
    5e8c:	80 e0       	ldi	r24, 0x00	; 0
    5e8e:	64 e0       	ldi	r22, 0x04	; 4
    5e90:	49 2f       	mov	r20, r25
    5e92:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5e96:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK1 & (Copy_uint8Data >> 5));
    5e98:	8a ad       	ldd	r24, Y+58	; 0x3a
    5e9a:	82 95       	swap	r24
    5e9c:	86 95       	lsr	r24
    5e9e:	87 70       	andi	r24, 0x07	; 7
    5ea0:	98 2f       	mov	r25, r24
    5ea2:	91 70       	andi	r25, 0x01	; 1
    5ea4:	80 e0       	ldi	r24, 0x00	; 0
    5ea6:	65 e0       	ldi	r22, 0x05	; 5
    5ea8:	49 2f       	mov	r20, r25
    5eaa:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5eae:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK1 & (Copy_uint8Data >> 4));
    5eb0:	8a ad       	ldd	r24, Y+58	; 0x3a
    5eb2:	82 95       	swap	r24
    5eb4:	8f 70       	andi	r24, 0x0F	; 15
    5eb6:	98 2f       	mov	r25, r24
    5eb8:	91 70       	andi	r25, 0x01	; 1
    5eba:	80 e0       	ldi	r24, 0x00	; 0
    5ebc:	66 e0       	ldi	r22, 0x06	; 6
    5ebe:	49 2f       	mov	r20, r25
    5ec0:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5ec4:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK1 & (Copy_uint8Data >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK1 & (Copy_uint8Data >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK1 & (Copy_uint8Data >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK1 & (Copy_uint8Data >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    5ec6:	80 e0       	ldi	r24, 0x00	; 0
    5ec8:	62 e0       	ldi	r22, 0x02	; 2
    5eca:	41 e0       	ldi	r20, 0x01	; 1
    5ecc:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5ed0:	89 af       	std	Y+57, r24	; 0x39
    5ed2:	80 e0       	ldi	r24, 0x00	; 0
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	a0 e2       	ldi	r26, 0x20	; 32
    5ed8:	b1 e4       	ldi	r27, 0x41	; 65
    5eda:	8d ab       	std	Y+53, r24	; 0x35
    5edc:	9e ab       	std	Y+54, r25	; 0x36
    5ede:	af ab       	std	Y+55, r26	; 0x37
    5ee0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ee2:	6d a9       	ldd	r22, Y+53	; 0x35
    5ee4:	7e a9       	ldd	r23, Y+54	; 0x36
    5ee6:	8f a9       	ldd	r24, Y+55	; 0x37
    5ee8:	98 ad       	ldd	r25, Y+56	; 0x38
    5eea:	20 e0       	ldi	r18, 0x00	; 0
    5eec:	30 e0       	ldi	r19, 0x00	; 0
    5eee:	4a ef       	ldi	r20, 0xFA	; 250
    5ef0:	54 e4       	ldi	r21, 0x44	; 68
    5ef2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5ef6:	dc 01       	movw	r26, r24
    5ef8:	cb 01       	movw	r24, r22
    5efa:	89 ab       	std	Y+49, r24	; 0x31
    5efc:	9a ab       	std	Y+50, r25	; 0x32
    5efe:	ab ab       	std	Y+51, r26	; 0x33
    5f00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5f02:	69 a9       	ldd	r22, Y+49	; 0x31
    5f04:	7a a9       	ldd	r23, Y+50	; 0x32
    5f06:	8b a9       	ldd	r24, Y+51	; 0x33
    5f08:	9c a9       	ldd	r25, Y+52	; 0x34
    5f0a:	20 e0       	ldi	r18, 0x00	; 0
    5f0c:	30 e0       	ldi	r19, 0x00	; 0
    5f0e:	40 e8       	ldi	r20, 0x80	; 128
    5f10:	5f e3       	ldi	r21, 0x3F	; 63
    5f12:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    5f16:	88 23       	and	r24, r24
    5f18:	2c f4       	brge	.+10     	; 0x5f24 <LCD_enuSendData+0xfa>
		__ticks = 1;
    5f1a:	81 e0       	ldi	r24, 0x01	; 1
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	98 ab       	std	Y+48, r25	; 0x30
    5f20:	8f a7       	std	Y+47, r24	; 0x2f
    5f22:	3f c0       	rjmp	.+126    	; 0x5fa2 <LCD_enuSendData+0x178>
	else if (__tmp > 65535)
    5f24:	69 a9       	ldd	r22, Y+49	; 0x31
    5f26:	7a a9       	ldd	r23, Y+50	; 0x32
    5f28:	8b a9       	ldd	r24, Y+51	; 0x33
    5f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    5f2c:	20 e0       	ldi	r18, 0x00	; 0
    5f2e:	3f ef       	ldi	r19, 0xFF	; 255
    5f30:	4f e7       	ldi	r20, 0x7F	; 127
    5f32:	57 e4       	ldi	r21, 0x47	; 71
    5f34:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    5f38:	18 16       	cp	r1, r24
    5f3a:	4c f5       	brge	.+82     	; 0x5f8e <LCD_enuSendData+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f3c:	6d a9       	ldd	r22, Y+53	; 0x35
    5f3e:	7e a9       	ldd	r23, Y+54	; 0x36
    5f40:	8f a9       	ldd	r24, Y+55	; 0x37
    5f42:	98 ad       	ldd	r25, Y+56	; 0x38
    5f44:	20 e0       	ldi	r18, 0x00	; 0
    5f46:	30 e0       	ldi	r19, 0x00	; 0
    5f48:	40 e2       	ldi	r20, 0x20	; 32
    5f4a:	51 e4       	ldi	r21, 0x41	; 65
    5f4c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5f50:	dc 01       	movw	r26, r24
    5f52:	cb 01       	movw	r24, r22
    5f54:	bc 01       	movw	r22, r24
    5f56:	cd 01       	movw	r24, r26
    5f58:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5f5c:	dc 01       	movw	r26, r24
    5f5e:	cb 01       	movw	r24, r22
    5f60:	98 ab       	std	Y+48, r25	; 0x30
    5f62:	8f a7       	std	Y+47, r24	; 0x2f
    5f64:	0f c0       	rjmp	.+30     	; 0x5f84 <LCD_enuSendData+0x15a>
    5f66:	88 ec       	ldi	r24, 0xC8	; 200
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	9e a7       	std	Y+46, r25	; 0x2e
    5f6c:	8d a7       	std	Y+45, r24	; 0x2d
    5f6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f70:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f72:	01 97       	sbiw	r24, 0x01	; 1
    5f74:	f1 f7       	brne	.-4      	; 0x5f72 <LCD_enuSendData+0x148>
    5f76:	9e a7       	std	Y+46, r25	; 0x2e
    5f78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f7c:	98 a9       	ldd	r25, Y+48	; 0x30
    5f7e:	01 97       	sbiw	r24, 0x01	; 1
    5f80:	98 ab       	std	Y+48, r25	; 0x30
    5f82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f86:	98 a9       	ldd	r25, Y+48	; 0x30
    5f88:	00 97       	sbiw	r24, 0x00	; 0
    5f8a:	69 f7       	brne	.-38     	; 0x5f66 <LCD_enuSendData+0x13c>
    5f8c:	14 c0       	rjmp	.+40     	; 0x5fb6 <LCD_enuSendData+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    5f90:	7a a9       	ldd	r23, Y+50	; 0x32
    5f92:	8b a9       	ldd	r24, Y+51	; 0x33
    5f94:	9c a9       	ldd	r25, Y+52	; 0x34
    5f96:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5f9a:	dc 01       	movw	r26, r24
    5f9c:	cb 01       	movw	r24, r22
    5f9e:	98 ab       	std	Y+48, r25	; 0x30
    5fa0:	8f a7       	std	Y+47, r24	; 0x2f
    5fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    5fa6:	9c a7       	std	Y+44, r25	; 0x2c
    5fa8:	8b a7       	std	Y+43, r24	; 0x2b
    5faa:	8b a5       	ldd	r24, Y+43	; 0x2b
    5fac:	9c a5       	ldd	r25, Y+44	; 0x2c
    5fae:	01 97       	sbiw	r24, 0x01	; 1
    5fb0:	f1 f7       	brne	.-4      	; 0x5fae <LCD_enuSendData+0x184>
    5fb2:	9c a7       	std	Y+44, r25	; 0x2c
    5fb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    5fb6:	80 e0       	ldi	r24, 0x00	; 0
    5fb8:	62 e0       	ldi	r22, 0x02	; 2
    5fba:	40 e0       	ldi	r20, 0x00	; 0
    5fbc:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    5fc0:	89 af       	std	Y+57, r24	; 0x39
    5fc2:	80 e0       	ldi	r24, 0x00	; 0
    5fc4:	90 e0       	ldi	r25, 0x00	; 0
    5fc6:	a0 e2       	ldi	r26, 0x20	; 32
    5fc8:	b1 e4       	ldi	r27, 0x41	; 65
    5fca:	8f a3       	std	Y+39, r24	; 0x27
    5fcc:	98 a7       	std	Y+40, r25	; 0x28
    5fce:	a9 a7       	std	Y+41, r26	; 0x29
    5fd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    5fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    5fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    5fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fda:	20 e0       	ldi	r18, 0x00	; 0
    5fdc:	30 e0       	ldi	r19, 0x00	; 0
    5fde:	4a ef       	ldi	r20, 0xFA	; 250
    5fe0:	54 e4       	ldi	r21, 0x44	; 68
    5fe2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5fe6:	dc 01       	movw	r26, r24
    5fe8:	cb 01       	movw	r24, r22
    5fea:	8b a3       	std	Y+35, r24	; 0x23
    5fec:	9c a3       	std	Y+36, r25	; 0x24
    5fee:	ad a3       	std	Y+37, r26	; 0x25
    5ff0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5ff2:	6b a1       	ldd	r22, Y+35	; 0x23
    5ff4:	7c a1       	ldd	r23, Y+36	; 0x24
    5ff6:	8d a1       	ldd	r24, Y+37	; 0x25
    5ff8:	9e a1       	ldd	r25, Y+38	; 0x26
    5ffa:	20 e0       	ldi	r18, 0x00	; 0
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	40 e8       	ldi	r20, 0x80	; 128
    6000:	5f e3       	ldi	r21, 0x3F	; 63
    6002:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    6006:	88 23       	and	r24, r24
    6008:	2c f4       	brge	.+10     	; 0x6014 <LCD_enuSendData+0x1ea>
		__ticks = 1;
    600a:	81 e0       	ldi	r24, 0x01	; 1
    600c:	90 e0       	ldi	r25, 0x00	; 0
    600e:	9a a3       	std	Y+34, r25	; 0x22
    6010:	89 a3       	std	Y+33, r24	; 0x21
    6012:	3f c0       	rjmp	.+126    	; 0x6092 <LCD_enuSendData+0x268>
	else if (__tmp > 65535)
    6014:	6b a1       	ldd	r22, Y+35	; 0x23
    6016:	7c a1       	ldd	r23, Y+36	; 0x24
    6018:	8d a1       	ldd	r24, Y+37	; 0x25
    601a:	9e a1       	ldd	r25, Y+38	; 0x26
    601c:	20 e0       	ldi	r18, 0x00	; 0
    601e:	3f ef       	ldi	r19, 0xFF	; 255
    6020:	4f e7       	ldi	r20, 0x7F	; 127
    6022:	57 e4       	ldi	r21, 0x47	; 71
    6024:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    6028:	18 16       	cp	r1, r24
    602a:	4c f5       	brge	.+82     	; 0x607e <LCD_enuSendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    602c:	6f a1       	ldd	r22, Y+39	; 0x27
    602e:	78 a5       	ldd	r23, Y+40	; 0x28
    6030:	89 a5       	ldd	r24, Y+41	; 0x29
    6032:	9a a5       	ldd	r25, Y+42	; 0x2a
    6034:	20 e0       	ldi	r18, 0x00	; 0
    6036:	30 e0       	ldi	r19, 0x00	; 0
    6038:	40 e2       	ldi	r20, 0x20	; 32
    603a:	51 e4       	ldi	r21, 0x41	; 65
    603c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    6040:	dc 01       	movw	r26, r24
    6042:	cb 01       	movw	r24, r22
    6044:	bc 01       	movw	r22, r24
    6046:	cd 01       	movw	r24, r26
    6048:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    604c:	dc 01       	movw	r26, r24
    604e:	cb 01       	movw	r24, r22
    6050:	9a a3       	std	Y+34, r25	; 0x22
    6052:	89 a3       	std	Y+33, r24	; 0x21
    6054:	0f c0       	rjmp	.+30     	; 0x6074 <LCD_enuSendData+0x24a>
    6056:	88 ec       	ldi	r24, 0xC8	; 200
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	98 a3       	std	Y+32, r25	; 0x20
    605c:	8f 8f       	std	Y+31, r24	; 0x1f
    605e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6060:	98 a1       	ldd	r25, Y+32	; 0x20
    6062:	01 97       	sbiw	r24, 0x01	; 1
    6064:	f1 f7       	brne	.-4      	; 0x6062 <LCD_enuSendData+0x238>
    6066:	98 a3       	std	Y+32, r25	; 0x20
    6068:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    606a:	89 a1       	ldd	r24, Y+33	; 0x21
    606c:	9a a1       	ldd	r25, Y+34	; 0x22
    606e:	01 97       	sbiw	r24, 0x01	; 1
    6070:	9a a3       	std	Y+34, r25	; 0x22
    6072:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6074:	89 a1       	ldd	r24, Y+33	; 0x21
    6076:	9a a1       	ldd	r25, Y+34	; 0x22
    6078:	00 97       	sbiw	r24, 0x00	; 0
    607a:	69 f7       	brne	.-38     	; 0x6056 <LCD_enuSendData+0x22c>
    607c:	14 c0       	rjmp	.+40     	; 0x60a6 <LCD_enuSendData+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    607e:	6b a1       	ldd	r22, Y+35	; 0x23
    6080:	7c a1       	ldd	r23, Y+36	; 0x24
    6082:	8d a1       	ldd	r24, Y+37	; 0x25
    6084:	9e a1       	ldd	r25, Y+38	; 0x26
    6086:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    608a:	dc 01       	movw	r26, r24
    608c:	cb 01       	movw	r24, r22
    608e:	9a a3       	std	Y+34, r25	; 0x22
    6090:	89 a3       	std	Y+33, r24	; 0x21
    6092:	89 a1       	ldd	r24, Y+33	; 0x21
    6094:	9a a1       	ldd	r25, Y+34	; 0x22
    6096:	9e 8f       	std	Y+30, r25	; 0x1e
    6098:	8d 8f       	std	Y+29, r24	; 0x1d
    609a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    609c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    609e:	01 97       	sbiw	r24, 0x01	; 1
    60a0:	f1 f7       	brne	.-4      	; 0x609e <LCD_enuSendData+0x274>
    60a2:	9e 8f       	std	Y+30, r25	; 0x1e
    60a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK1 & (Copy_uint8Data >> 3));
    60a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    60a8:	86 95       	lsr	r24
    60aa:	86 95       	lsr	r24
    60ac:	86 95       	lsr	r24
    60ae:	98 2f       	mov	r25, r24
    60b0:	91 70       	andi	r25, 0x01	; 1
    60b2:	80 e0       	ldi	r24, 0x00	; 0
    60b4:	63 e0       	ldi	r22, 0x03	; 3
    60b6:	49 2f       	mov	r20, r25
    60b8:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    60bc:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK1 & (Copy_uint8Data >> 2));
    60be:	8a ad       	ldd	r24, Y+58	; 0x3a
    60c0:	86 95       	lsr	r24
    60c2:	86 95       	lsr	r24
    60c4:	98 2f       	mov	r25, r24
    60c6:	91 70       	andi	r25, 0x01	; 1
    60c8:	80 e0       	ldi	r24, 0x00	; 0
    60ca:	64 e0       	ldi	r22, 0x04	; 4
    60cc:	49 2f       	mov	r20, r25
    60ce:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    60d2:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK1 & (Copy_uint8Data >> 1));
    60d4:	8a ad       	ldd	r24, Y+58	; 0x3a
    60d6:	86 95       	lsr	r24
    60d8:	98 2f       	mov	r25, r24
    60da:	91 70       	andi	r25, 0x01	; 1
    60dc:	80 e0       	ldi	r24, 0x00	; 0
    60de:	65 e0       	ldi	r22, 0x05	; 5
    60e0:	49 2f       	mov	r20, r25
    60e2:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    60e6:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK1 & (Copy_uint8Data >> 0));
    60e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    60ea:	98 2f       	mov	r25, r24
    60ec:	91 70       	andi	r25, 0x01	; 1
    60ee:	80 e0       	ldi	r24, 0x00	; 0
    60f0:	66 e0       	ldi	r22, 0x06	; 6
    60f2:	49 2f       	mov	r20, r25
    60f4:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    60f8:	89 af       	std	Y+57, r24	; 0x39
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    60fa:	80 e0       	ldi	r24, 0x00	; 0
    60fc:	62 e0       	ldi	r22, 0x02	; 2
    60fe:	41 e0       	ldi	r20, 0x01	; 1
    6100:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    6104:	89 af       	std	Y+57, r24	; 0x39
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	a0 e2       	ldi	r26, 0x20	; 32
    610c:	b1 e4       	ldi	r27, 0x41	; 65
    610e:	89 8f       	std	Y+25, r24	; 0x19
    6110:	9a 8f       	std	Y+26, r25	; 0x1a
    6112:	ab 8f       	std	Y+27, r26	; 0x1b
    6114:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6116:	69 8d       	ldd	r22, Y+25	; 0x19
    6118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    611a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    611c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    611e:	20 e0       	ldi	r18, 0x00	; 0
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	4a ef       	ldi	r20, 0xFA	; 250
    6124:	54 e4       	ldi	r21, 0x44	; 68
    6126:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    612a:	dc 01       	movw	r26, r24
    612c:	cb 01       	movw	r24, r22
    612e:	8d 8b       	std	Y+21, r24	; 0x15
    6130:	9e 8b       	std	Y+22, r25	; 0x16
    6132:	af 8b       	std	Y+23, r26	; 0x17
    6134:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6136:	6d 89       	ldd	r22, Y+21	; 0x15
    6138:	7e 89       	ldd	r23, Y+22	; 0x16
    613a:	8f 89       	ldd	r24, Y+23	; 0x17
    613c:	98 8d       	ldd	r25, Y+24	; 0x18
    613e:	20 e0       	ldi	r18, 0x00	; 0
    6140:	30 e0       	ldi	r19, 0x00	; 0
    6142:	40 e8       	ldi	r20, 0x80	; 128
    6144:	5f e3       	ldi	r21, 0x3F	; 63
    6146:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    614a:	88 23       	and	r24, r24
    614c:	2c f4       	brge	.+10     	; 0x6158 <LCD_enuSendData+0x32e>
		__ticks = 1;
    614e:	81 e0       	ldi	r24, 0x01	; 1
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	9c 8b       	std	Y+20, r25	; 0x14
    6154:	8b 8b       	std	Y+19, r24	; 0x13
    6156:	3f c0       	rjmp	.+126    	; 0x61d6 <LCD_enuSendData+0x3ac>
	else if (__tmp > 65535)
    6158:	6d 89       	ldd	r22, Y+21	; 0x15
    615a:	7e 89       	ldd	r23, Y+22	; 0x16
    615c:	8f 89       	ldd	r24, Y+23	; 0x17
    615e:	98 8d       	ldd	r25, Y+24	; 0x18
    6160:	20 e0       	ldi	r18, 0x00	; 0
    6162:	3f ef       	ldi	r19, 0xFF	; 255
    6164:	4f e7       	ldi	r20, 0x7F	; 127
    6166:	57 e4       	ldi	r21, 0x47	; 71
    6168:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    616c:	18 16       	cp	r1, r24
    616e:	4c f5       	brge	.+82     	; 0x61c2 <LCD_enuSendData+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6170:	69 8d       	ldd	r22, Y+25	; 0x19
    6172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6178:	20 e0       	ldi	r18, 0x00	; 0
    617a:	30 e0       	ldi	r19, 0x00	; 0
    617c:	40 e2       	ldi	r20, 0x20	; 32
    617e:	51 e4       	ldi	r21, 0x41	; 65
    6180:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    6184:	dc 01       	movw	r26, r24
    6186:	cb 01       	movw	r24, r22
    6188:	bc 01       	movw	r22, r24
    618a:	cd 01       	movw	r24, r26
    618c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6190:	dc 01       	movw	r26, r24
    6192:	cb 01       	movw	r24, r22
    6194:	9c 8b       	std	Y+20, r25	; 0x14
    6196:	8b 8b       	std	Y+19, r24	; 0x13
    6198:	0f c0       	rjmp	.+30     	; 0x61b8 <LCD_enuSendData+0x38e>
    619a:	88 ec       	ldi	r24, 0xC8	; 200
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	9a 8b       	std	Y+18, r25	; 0x12
    61a0:	89 8b       	std	Y+17, r24	; 0x11
    61a2:	89 89       	ldd	r24, Y+17	; 0x11
    61a4:	9a 89       	ldd	r25, Y+18	; 0x12
    61a6:	01 97       	sbiw	r24, 0x01	; 1
    61a8:	f1 f7       	brne	.-4      	; 0x61a6 <LCD_enuSendData+0x37c>
    61aa:	9a 8b       	std	Y+18, r25	; 0x12
    61ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61ae:	8b 89       	ldd	r24, Y+19	; 0x13
    61b0:	9c 89       	ldd	r25, Y+20	; 0x14
    61b2:	01 97       	sbiw	r24, 0x01	; 1
    61b4:	9c 8b       	std	Y+20, r25	; 0x14
    61b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61b8:	8b 89       	ldd	r24, Y+19	; 0x13
    61ba:	9c 89       	ldd	r25, Y+20	; 0x14
    61bc:	00 97       	sbiw	r24, 0x00	; 0
    61be:	69 f7       	brne	.-38     	; 0x619a <LCD_enuSendData+0x370>
    61c0:	14 c0       	rjmp	.+40     	; 0x61ea <LCD_enuSendData+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61c2:	6d 89       	ldd	r22, Y+21	; 0x15
    61c4:	7e 89       	ldd	r23, Y+22	; 0x16
    61c6:	8f 89       	ldd	r24, Y+23	; 0x17
    61c8:	98 8d       	ldd	r25, Y+24	; 0x18
    61ca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    61ce:	dc 01       	movw	r26, r24
    61d0:	cb 01       	movw	r24, r22
    61d2:	9c 8b       	std	Y+20, r25	; 0x14
    61d4:	8b 8b       	std	Y+19, r24	; 0x13
    61d6:	8b 89       	ldd	r24, Y+19	; 0x13
    61d8:	9c 89       	ldd	r25, Y+20	; 0x14
    61da:	98 8b       	std	Y+16, r25	; 0x10
    61dc:	8f 87       	std	Y+15, r24	; 0x0f
    61de:	8f 85       	ldd	r24, Y+15	; 0x0f
    61e0:	98 89       	ldd	r25, Y+16	; 0x10
    61e2:	01 97       	sbiw	r24, 0x01	; 1
    61e4:	f1 f7       	brne	.-4      	; 0x61e2 <LCD_enuSendData+0x3b8>
    61e6:	98 8b       	std	Y+16, r25	; 0x10
    61e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    61ea:	80 e0       	ldi	r24, 0x00	; 0
    61ec:	62 e0       	ldi	r22, 0x02	; 2
    61ee:	40 e0       	ldi	r20, 0x00	; 0
    61f0:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    61f4:	89 af       	std	Y+57, r24	; 0x39
    61f6:	80 e0       	ldi	r24, 0x00	; 0
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	a0 e2       	ldi	r26, 0x20	; 32
    61fc:	b1 e4       	ldi	r27, 0x41	; 65
    61fe:	8b 87       	std	Y+11, r24	; 0x0b
    6200:	9c 87       	std	Y+12, r25	; 0x0c
    6202:	ad 87       	std	Y+13, r26	; 0x0d
    6204:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6206:	6b 85       	ldd	r22, Y+11	; 0x0b
    6208:	7c 85       	ldd	r23, Y+12	; 0x0c
    620a:	8d 85       	ldd	r24, Y+13	; 0x0d
    620c:	9e 85       	ldd	r25, Y+14	; 0x0e
    620e:	20 e0       	ldi	r18, 0x00	; 0
    6210:	30 e0       	ldi	r19, 0x00	; 0
    6212:	4a ef       	ldi	r20, 0xFA	; 250
    6214:	54 e4       	ldi	r21, 0x44	; 68
    6216:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    621a:	dc 01       	movw	r26, r24
    621c:	cb 01       	movw	r24, r22
    621e:	8f 83       	std	Y+7, r24	; 0x07
    6220:	98 87       	std	Y+8, r25	; 0x08
    6222:	a9 87       	std	Y+9, r26	; 0x09
    6224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6226:	6f 81       	ldd	r22, Y+7	; 0x07
    6228:	78 85       	ldd	r23, Y+8	; 0x08
    622a:	89 85       	ldd	r24, Y+9	; 0x09
    622c:	9a 85       	ldd	r25, Y+10	; 0x0a
    622e:	20 e0       	ldi	r18, 0x00	; 0
    6230:	30 e0       	ldi	r19, 0x00	; 0
    6232:	40 e8       	ldi	r20, 0x80	; 128
    6234:	5f e3       	ldi	r21, 0x3F	; 63
    6236:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    623a:	88 23       	and	r24, r24
    623c:	2c f4       	brge	.+10     	; 0x6248 <LCD_enuSendData+0x41e>
		__ticks = 1;
    623e:	81 e0       	ldi	r24, 0x01	; 1
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	9e 83       	std	Y+6, r25	; 0x06
    6244:	8d 83       	std	Y+5, r24	; 0x05
    6246:	3f c0       	rjmp	.+126    	; 0x62c6 <LCD_enuSendData+0x49c>
	else if (__tmp > 65535)
    6248:	6f 81       	ldd	r22, Y+7	; 0x07
    624a:	78 85       	ldd	r23, Y+8	; 0x08
    624c:	89 85       	ldd	r24, Y+9	; 0x09
    624e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6250:	20 e0       	ldi	r18, 0x00	; 0
    6252:	3f ef       	ldi	r19, 0xFF	; 255
    6254:	4f e7       	ldi	r20, 0x7F	; 127
    6256:	57 e4       	ldi	r21, 0x47	; 71
    6258:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    625c:	18 16       	cp	r1, r24
    625e:	4c f5       	brge	.+82     	; 0x62b2 <LCD_enuSendData+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6260:	6b 85       	ldd	r22, Y+11	; 0x0b
    6262:	7c 85       	ldd	r23, Y+12	; 0x0c
    6264:	8d 85       	ldd	r24, Y+13	; 0x0d
    6266:	9e 85       	ldd	r25, Y+14	; 0x0e
    6268:	20 e0       	ldi	r18, 0x00	; 0
    626a:	30 e0       	ldi	r19, 0x00	; 0
    626c:	40 e2       	ldi	r20, 0x20	; 32
    626e:	51 e4       	ldi	r21, 0x41	; 65
    6270:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    6274:	dc 01       	movw	r26, r24
    6276:	cb 01       	movw	r24, r22
    6278:	bc 01       	movw	r22, r24
    627a:	cd 01       	movw	r24, r26
    627c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6280:	dc 01       	movw	r26, r24
    6282:	cb 01       	movw	r24, r22
    6284:	9e 83       	std	Y+6, r25	; 0x06
    6286:	8d 83       	std	Y+5, r24	; 0x05
    6288:	0f c0       	rjmp	.+30     	; 0x62a8 <LCD_enuSendData+0x47e>
    628a:	88 ec       	ldi	r24, 0xC8	; 200
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	9c 83       	std	Y+4, r25	; 0x04
    6290:	8b 83       	std	Y+3, r24	; 0x03
    6292:	8b 81       	ldd	r24, Y+3	; 0x03
    6294:	9c 81       	ldd	r25, Y+4	; 0x04
    6296:	01 97       	sbiw	r24, 0x01	; 1
    6298:	f1 f7       	brne	.-4      	; 0x6296 <LCD_enuSendData+0x46c>
    629a:	9c 83       	std	Y+4, r25	; 0x04
    629c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    629e:	8d 81       	ldd	r24, Y+5	; 0x05
    62a0:	9e 81       	ldd	r25, Y+6	; 0x06
    62a2:	01 97       	sbiw	r24, 0x01	; 1
    62a4:	9e 83       	std	Y+6, r25	; 0x06
    62a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62a8:	8d 81       	ldd	r24, Y+5	; 0x05
    62aa:	9e 81       	ldd	r25, Y+6	; 0x06
    62ac:	00 97       	sbiw	r24, 0x00	; 0
    62ae:	69 f7       	brne	.-38     	; 0x628a <LCD_enuSendData+0x460>
    62b0:	14 c0       	rjmp	.+40     	; 0x62da <LCD_enuSendData+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62b2:	6f 81       	ldd	r22, Y+7	; 0x07
    62b4:	78 85       	ldd	r23, Y+8	; 0x08
    62b6:	89 85       	ldd	r24, Y+9	; 0x09
    62b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    62be:	dc 01       	movw	r26, r24
    62c0:	cb 01       	movw	r24, r22
    62c2:	9e 83       	std	Y+6, r25	; 0x06
    62c4:	8d 83       	std	Y+5, r24	; 0x05
    62c6:	8d 81       	ldd	r24, Y+5	; 0x05
    62c8:	9e 81       	ldd	r25, Y+6	; 0x06
    62ca:	9a 83       	std	Y+2, r25	; 0x02
    62cc:	89 83       	std	Y+1, r24	; 0x01
    62ce:	89 81       	ldd	r24, Y+1	; 0x01
    62d0:	9a 81       	ldd	r25, Y+2	; 0x02
    62d2:	01 97       	sbiw	r24, 0x01	; 1
    62d4:	f1 f7       	brne	.-4      	; 0x62d2 <LCD_enuSendData+0x4a8>
    62d6:	9a 83       	std	Y+2, r25	; 0x02
    62d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return Local_enuErrorStates;
    62da:	89 ad       	ldd	r24, Y+57	; 0x39
}
    62dc:	ea 96       	adiw	r28, 0x3a	; 58
    62de:	0f b6       	in	r0, 0x3f	; 63
    62e0:	f8 94       	cli
    62e2:	de bf       	out	0x3e, r29	; 62
    62e4:	0f be       	out	0x3f, r0	; 63
    62e6:	cd bf       	out	0x3d, r28	; 61
    62e8:	cf 91       	pop	r28
    62ea:	df 91       	pop	r29
    62ec:	08 95       	ret

000062ee <LCD_enuToSendCommand>:

static inline ES_t LCD_enuToSendCommand(uint_8 Copy_uint8Command){
    62ee:	0f 93       	push	r16
    62f0:	1f 93       	push	r17
    62f2:	df 93       	push	r29
    62f4:	cf 93       	push	r28
    62f6:	cd b7       	in	r28, 0x3d	; 61
    62f8:	de b7       	in	r29, 0x3e	; 62
    62fa:	c6 55       	subi	r28, 0x56	; 86
    62fc:	d0 40       	sbci	r29, 0x00	; 0
    62fe:	0f b6       	in	r0, 0x3f	; 63
    6300:	f8 94       	cli
    6302:	de bf       	out	0x3e, r29	; 62
    6304:	0f be       	out	0x3f, r0	; 63
    6306:	cd bf       	out	0x3d, r28	; 61
    6308:	fe 01       	movw	r30, r28
    630a:	ea 5a       	subi	r30, 0xAA	; 170
    630c:	ff 4f       	sbci	r31, 0xFF	; 255
    630e:	80 83       	st	Z, r24
	ES_t Local_enuErrorStates;
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, LOW);
    6310:	80 e0       	ldi	r24, 0x00	; 0
    6312:	60 e0       	ldi	r22, 0x00	; 0
    6314:	40 e0       	ldi	r20, 0x00	; 0
    6316:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    631a:	fe 01       	movw	r30, r28
    631c:	eb 5a       	subi	r30, 0xAB	; 171
    631e:	ff 4f       	sbci	r31, 0xFF	; 255
    6320:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
    6322:	80 e0       	ldi	r24, 0x00	; 0
    6324:	61 e0       	ldi	r22, 0x01	; 1
    6326:	40 e0       	ldi	r20, 0x00	; 0
    6328:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    632c:	fe 01       	movw	r30, r28
    632e:	eb 5a       	subi	r30, 0xAB	; 171
    6330:	ff 4f       	sbci	r31, 0xFF	; 255
    6332:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    6334:	80 e0       	ldi	r24, 0x00	; 0
    6336:	62 e0       	ldi	r22, 0x02	; 2
    6338:	40 e0       	ldi	r20, 0x00	; 0
    633a:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    633e:	fe 01       	movw	r30, r28
    6340:	eb 5a       	subi	r30, 0xAB	; 171
    6342:	ff 4f       	sbci	r31, 0xFF	; 255
    6344:	80 83       	st	Z, r24

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK1 & (Copy_uint8Command >> 7));
    6346:	fe 01       	movw	r30, r28
    6348:	ea 5a       	subi	r30, 0xAA	; 170
    634a:	ff 4f       	sbci	r31, 0xFF	; 255
    634c:	80 81       	ld	r24, Z
    634e:	98 2f       	mov	r25, r24
    6350:	99 1f       	adc	r25, r25
    6352:	99 27       	eor	r25, r25
    6354:	99 1f       	adc	r25, r25
    6356:	80 e0       	ldi	r24, 0x00	; 0
    6358:	63 e0       	ldi	r22, 0x03	; 3
    635a:	49 2f       	mov	r20, r25
    635c:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    6360:	fe 01       	movw	r30, r28
    6362:	eb 5a       	subi	r30, 0xAB	; 171
    6364:	ff 4f       	sbci	r31, 0xFF	; 255
    6366:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK1 & (Copy_uint8Command >> 6));
    6368:	fe 01       	movw	r30, r28
    636a:	ea 5a       	subi	r30, 0xAA	; 170
    636c:	ff 4f       	sbci	r31, 0xFF	; 255
    636e:	80 81       	ld	r24, Z
    6370:	82 95       	swap	r24
    6372:	86 95       	lsr	r24
    6374:	86 95       	lsr	r24
    6376:	83 70       	andi	r24, 0x03	; 3
    6378:	98 2f       	mov	r25, r24
    637a:	91 70       	andi	r25, 0x01	; 1
    637c:	80 e0       	ldi	r24, 0x00	; 0
    637e:	64 e0       	ldi	r22, 0x04	; 4
    6380:	49 2f       	mov	r20, r25
    6382:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    6386:	fe 01       	movw	r30, r28
    6388:	eb 5a       	subi	r30, 0xAB	; 171
    638a:	ff 4f       	sbci	r31, 0xFF	; 255
    638c:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK1 & (Copy_uint8Command >> 5));
    638e:	fe 01       	movw	r30, r28
    6390:	ea 5a       	subi	r30, 0xAA	; 170
    6392:	ff 4f       	sbci	r31, 0xFF	; 255
    6394:	80 81       	ld	r24, Z
    6396:	82 95       	swap	r24
    6398:	86 95       	lsr	r24
    639a:	87 70       	andi	r24, 0x07	; 7
    639c:	98 2f       	mov	r25, r24
    639e:	91 70       	andi	r25, 0x01	; 1
    63a0:	80 e0       	ldi	r24, 0x00	; 0
    63a2:	65 e0       	ldi	r22, 0x05	; 5
    63a4:	49 2f       	mov	r20, r25
    63a6:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    63aa:	fe 01       	movw	r30, r28
    63ac:	eb 5a       	subi	r30, 0xAB	; 171
    63ae:	ff 4f       	sbci	r31, 0xFF	; 255
    63b0:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK1 & (Copy_uint8Command >> 4));
    63b2:	fe 01       	movw	r30, r28
    63b4:	ea 5a       	subi	r30, 0xAA	; 170
    63b6:	ff 4f       	sbci	r31, 0xFF	; 255
    63b8:	80 81       	ld	r24, Z
    63ba:	82 95       	swap	r24
    63bc:	8f 70       	andi	r24, 0x0F	; 15
    63be:	98 2f       	mov	r25, r24
    63c0:	91 70       	andi	r25, 0x01	; 1
    63c2:	80 e0       	ldi	r24, 0x00	; 0
    63c4:	66 e0       	ldi	r22, 0x06	; 6
    63c6:	49 2f       	mov	r20, r25
    63c8:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    63cc:	fe 01       	movw	r30, r28
    63ce:	eb 5a       	subi	r30, 0xAB	; 171
    63d0:	ff 4f       	sbci	r31, 0xFF	; 255
    63d2:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK1 & (Copy_uint8Command >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK1 & (Copy_uint8Command >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK1 & (Copy_uint8Command >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK1 & (Copy_uint8Command >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	if(Copy_uint8Command == 0x28){
    63d4:	fe 01       	movw	r30, r28
    63d6:	ea 5a       	subi	r30, 0xAA	; 170
    63d8:	ff 4f       	sbci	r31, 0xFF	; 255
    63da:	80 81       	ld	r24, Z
    63dc:	88 32       	cpi	r24, 0x28	; 40
    63de:	09 f0       	breq	.+2      	; 0x63e2 <LCD_enuToSendCommand+0xf4>
    63e0:	91 c1       	rjmp	.+802    	; 0x6704 <LCD_enuToSendCommand+0x416>
		Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    63e2:	80 e0       	ldi	r24, 0x00	; 0
    63e4:	62 e0       	ldi	r22, 0x02	; 2
    63e6:	41 e0       	ldi	r20, 0x01	; 1
    63e8:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    63ec:	fe 01       	movw	r30, r28
    63ee:	eb 5a       	subi	r30, 0xAB	; 171
    63f0:	ff 4f       	sbci	r31, 0xFF	; 255
    63f2:	80 83       	st	Z, r24
    63f4:	fe 01       	movw	r30, r28
    63f6:	ef 5a       	subi	r30, 0xAF	; 175
    63f8:	ff 4f       	sbci	r31, 0xFF	; 255
    63fa:	80 e0       	ldi	r24, 0x00	; 0
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	a0 e2       	ldi	r26, 0x20	; 32
    6400:	b1 e4       	ldi	r27, 0x41	; 65
    6402:	80 83       	st	Z, r24
    6404:	91 83       	std	Z+1, r25	; 0x01
    6406:	a2 83       	std	Z+2, r26	; 0x02
    6408:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    640a:	8e 01       	movw	r16, r28
    640c:	03 5b       	subi	r16, 0xB3	; 179
    640e:	1f 4f       	sbci	r17, 0xFF	; 255
    6410:	fe 01       	movw	r30, r28
    6412:	ef 5a       	subi	r30, 0xAF	; 175
    6414:	ff 4f       	sbci	r31, 0xFF	; 255
    6416:	60 81       	ld	r22, Z
    6418:	71 81       	ldd	r23, Z+1	; 0x01
    641a:	82 81       	ldd	r24, Z+2	; 0x02
    641c:	93 81       	ldd	r25, Z+3	; 0x03
    641e:	20 e0       	ldi	r18, 0x00	; 0
    6420:	30 e0       	ldi	r19, 0x00	; 0
    6422:	4a ef       	ldi	r20, 0xFA	; 250
    6424:	54 e4       	ldi	r21, 0x44	; 68
    6426:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    642a:	dc 01       	movw	r26, r24
    642c:	cb 01       	movw	r24, r22
    642e:	f8 01       	movw	r30, r16
    6430:	80 83       	st	Z, r24
    6432:	91 83       	std	Z+1, r25	; 0x01
    6434:	a2 83       	std	Z+2, r26	; 0x02
    6436:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6438:	fe 01       	movw	r30, r28
    643a:	e3 5b       	subi	r30, 0xB3	; 179
    643c:	ff 4f       	sbci	r31, 0xFF	; 255
    643e:	60 81       	ld	r22, Z
    6440:	71 81       	ldd	r23, Z+1	; 0x01
    6442:	82 81       	ldd	r24, Z+2	; 0x02
    6444:	93 81       	ldd	r25, Z+3	; 0x03
    6446:	20 e0       	ldi	r18, 0x00	; 0
    6448:	30 e0       	ldi	r19, 0x00	; 0
    644a:	40 e8       	ldi	r20, 0x80	; 128
    644c:	5f e3       	ldi	r21, 0x3F	; 63
    644e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    6452:	88 23       	and	r24, r24
    6454:	44 f4       	brge	.+16     	; 0x6466 <LCD_enuToSendCommand+0x178>
		__ticks = 1;
    6456:	fe 01       	movw	r30, r28
    6458:	e5 5b       	subi	r30, 0xB5	; 181
    645a:	ff 4f       	sbci	r31, 0xFF	; 255
    645c:	81 e0       	ldi	r24, 0x01	; 1
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	91 83       	std	Z+1, r25	; 0x01
    6462:	80 83       	st	Z, r24
    6464:	64 c0       	rjmp	.+200    	; 0x652e <LCD_enuToSendCommand+0x240>
	else if (__tmp > 65535)
    6466:	fe 01       	movw	r30, r28
    6468:	e3 5b       	subi	r30, 0xB3	; 179
    646a:	ff 4f       	sbci	r31, 0xFF	; 255
    646c:	60 81       	ld	r22, Z
    646e:	71 81       	ldd	r23, Z+1	; 0x01
    6470:	82 81       	ldd	r24, Z+2	; 0x02
    6472:	93 81       	ldd	r25, Z+3	; 0x03
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	3f ef       	ldi	r19, 0xFF	; 255
    6478:	4f e7       	ldi	r20, 0x7F	; 127
    647a:	57 e4       	ldi	r21, 0x47	; 71
    647c:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    6480:	18 16       	cp	r1, r24
    6482:	0c f0       	brlt	.+2      	; 0x6486 <LCD_enuToSendCommand+0x198>
    6484:	43 c0       	rjmp	.+134    	; 0x650c <LCD_enuToSendCommand+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6486:	fe 01       	movw	r30, r28
    6488:	ef 5a       	subi	r30, 0xAF	; 175
    648a:	ff 4f       	sbci	r31, 0xFF	; 255
    648c:	60 81       	ld	r22, Z
    648e:	71 81       	ldd	r23, Z+1	; 0x01
    6490:	82 81       	ldd	r24, Z+2	; 0x02
    6492:	93 81       	ldd	r25, Z+3	; 0x03
    6494:	20 e0       	ldi	r18, 0x00	; 0
    6496:	30 e0       	ldi	r19, 0x00	; 0
    6498:	40 e2       	ldi	r20, 0x20	; 32
    649a:	51 e4       	ldi	r21, 0x41	; 65
    649c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    64a0:	dc 01       	movw	r26, r24
    64a2:	cb 01       	movw	r24, r22
    64a4:	8e 01       	movw	r16, r28
    64a6:	05 5b       	subi	r16, 0xB5	; 181
    64a8:	1f 4f       	sbci	r17, 0xFF	; 255
    64aa:	bc 01       	movw	r22, r24
    64ac:	cd 01       	movw	r24, r26
    64ae:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    64b2:	dc 01       	movw	r26, r24
    64b4:	cb 01       	movw	r24, r22
    64b6:	f8 01       	movw	r30, r16
    64b8:	91 83       	std	Z+1, r25	; 0x01
    64ba:	80 83       	st	Z, r24
    64bc:	1f c0       	rjmp	.+62     	; 0x64fc <LCD_enuToSendCommand+0x20e>
    64be:	fe 01       	movw	r30, r28
    64c0:	e7 5b       	subi	r30, 0xB7	; 183
    64c2:	ff 4f       	sbci	r31, 0xFF	; 255
    64c4:	88 ec       	ldi	r24, 0xC8	; 200
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	91 83       	std	Z+1, r25	; 0x01
    64ca:	80 83       	st	Z, r24
    64cc:	fe 01       	movw	r30, r28
    64ce:	e7 5b       	subi	r30, 0xB7	; 183
    64d0:	ff 4f       	sbci	r31, 0xFF	; 255
    64d2:	80 81       	ld	r24, Z
    64d4:	91 81       	ldd	r25, Z+1	; 0x01
    64d6:	01 97       	sbiw	r24, 0x01	; 1
    64d8:	f1 f7       	brne	.-4      	; 0x64d6 <LCD_enuToSendCommand+0x1e8>
    64da:	fe 01       	movw	r30, r28
    64dc:	e7 5b       	subi	r30, 0xB7	; 183
    64de:	ff 4f       	sbci	r31, 0xFF	; 255
    64e0:	91 83       	std	Z+1, r25	; 0x01
    64e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64e4:	de 01       	movw	r26, r28
    64e6:	a5 5b       	subi	r26, 0xB5	; 181
    64e8:	bf 4f       	sbci	r27, 0xFF	; 255
    64ea:	fe 01       	movw	r30, r28
    64ec:	e5 5b       	subi	r30, 0xB5	; 181
    64ee:	ff 4f       	sbci	r31, 0xFF	; 255
    64f0:	80 81       	ld	r24, Z
    64f2:	91 81       	ldd	r25, Z+1	; 0x01
    64f4:	01 97       	sbiw	r24, 0x01	; 1
    64f6:	11 96       	adiw	r26, 0x01	; 1
    64f8:	9c 93       	st	X, r25
    64fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64fc:	fe 01       	movw	r30, r28
    64fe:	e5 5b       	subi	r30, 0xB5	; 181
    6500:	ff 4f       	sbci	r31, 0xFF	; 255
    6502:	80 81       	ld	r24, Z
    6504:	91 81       	ldd	r25, Z+1	; 0x01
    6506:	00 97       	sbiw	r24, 0x00	; 0
    6508:	d1 f6       	brne	.-76     	; 0x64be <LCD_enuToSendCommand+0x1d0>
    650a:	27 c0       	rjmp	.+78     	; 0x655a <LCD_enuToSendCommand+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    650c:	8e 01       	movw	r16, r28
    650e:	05 5b       	subi	r16, 0xB5	; 181
    6510:	1f 4f       	sbci	r17, 0xFF	; 255
    6512:	fe 01       	movw	r30, r28
    6514:	e3 5b       	subi	r30, 0xB3	; 179
    6516:	ff 4f       	sbci	r31, 0xFF	; 255
    6518:	60 81       	ld	r22, Z
    651a:	71 81       	ldd	r23, Z+1	; 0x01
    651c:	82 81       	ldd	r24, Z+2	; 0x02
    651e:	93 81       	ldd	r25, Z+3	; 0x03
    6520:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6524:	dc 01       	movw	r26, r24
    6526:	cb 01       	movw	r24, r22
    6528:	f8 01       	movw	r30, r16
    652a:	91 83       	std	Z+1, r25	; 0x01
    652c:	80 83       	st	Z, r24
    652e:	de 01       	movw	r26, r28
    6530:	a9 5b       	subi	r26, 0xB9	; 185
    6532:	bf 4f       	sbci	r27, 0xFF	; 255
    6534:	fe 01       	movw	r30, r28
    6536:	e5 5b       	subi	r30, 0xB5	; 181
    6538:	ff 4f       	sbci	r31, 0xFF	; 255
    653a:	80 81       	ld	r24, Z
    653c:	91 81       	ldd	r25, Z+1	; 0x01
    653e:	8d 93       	st	X+, r24
    6540:	9c 93       	st	X, r25
    6542:	fe 01       	movw	r30, r28
    6544:	e9 5b       	subi	r30, 0xB9	; 185
    6546:	ff 4f       	sbci	r31, 0xFF	; 255
    6548:	80 81       	ld	r24, Z
    654a:	91 81       	ldd	r25, Z+1	; 0x01
    654c:	01 97       	sbiw	r24, 0x01	; 1
    654e:	f1 f7       	brne	.-4      	; 0x654c <LCD_enuToSendCommand+0x25e>
    6550:	fe 01       	movw	r30, r28
    6552:	e9 5b       	subi	r30, 0xB9	; 185
    6554:	ff 4f       	sbci	r31, 0xFF	; 255
    6556:	91 83       	std	Z+1, r25	; 0x01
    6558:	80 83       	st	Z, r24
		_delay_ms(10);
		Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    655a:	80 e0       	ldi	r24, 0x00	; 0
    655c:	62 e0       	ldi	r22, 0x02	; 2
    655e:	40 e0       	ldi	r20, 0x00	; 0
    6560:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    6564:	fe 01       	movw	r30, r28
    6566:	eb 5a       	subi	r30, 0xAB	; 171
    6568:	ff 4f       	sbci	r31, 0xFF	; 255
    656a:	80 83       	st	Z, r24
    656c:	fe 01       	movw	r30, r28
    656e:	ed 5b       	subi	r30, 0xBD	; 189
    6570:	ff 4f       	sbci	r31, 0xFF	; 255
    6572:	80 e0       	ldi	r24, 0x00	; 0
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	a0 e2       	ldi	r26, 0x20	; 32
    6578:	b1 e4       	ldi	r27, 0x41	; 65
    657a:	80 83       	st	Z, r24
    657c:	91 83       	std	Z+1, r25	; 0x01
    657e:	a2 83       	std	Z+2, r26	; 0x02
    6580:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6582:	8e 01       	movw	r16, r28
    6584:	01 5c       	subi	r16, 0xC1	; 193
    6586:	1f 4f       	sbci	r17, 0xFF	; 255
    6588:	fe 01       	movw	r30, r28
    658a:	ed 5b       	subi	r30, 0xBD	; 189
    658c:	ff 4f       	sbci	r31, 0xFF	; 255
    658e:	60 81       	ld	r22, Z
    6590:	71 81       	ldd	r23, Z+1	; 0x01
    6592:	82 81       	ldd	r24, Z+2	; 0x02
    6594:	93 81       	ldd	r25, Z+3	; 0x03
    6596:	20 e0       	ldi	r18, 0x00	; 0
    6598:	30 e0       	ldi	r19, 0x00	; 0
    659a:	4a ef       	ldi	r20, 0xFA	; 250
    659c:	54 e4       	ldi	r21, 0x44	; 68
    659e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    65a2:	dc 01       	movw	r26, r24
    65a4:	cb 01       	movw	r24, r22
    65a6:	f8 01       	movw	r30, r16
    65a8:	80 83       	st	Z, r24
    65aa:	91 83       	std	Z+1, r25	; 0x01
    65ac:	a2 83       	std	Z+2, r26	; 0x02
    65ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    65b0:	fe 01       	movw	r30, r28
    65b2:	ff 96       	adiw	r30, 0x3f	; 63
    65b4:	60 81       	ld	r22, Z
    65b6:	71 81       	ldd	r23, Z+1	; 0x01
    65b8:	82 81       	ldd	r24, Z+2	; 0x02
    65ba:	93 81       	ldd	r25, Z+3	; 0x03
    65bc:	20 e0       	ldi	r18, 0x00	; 0
    65be:	30 e0       	ldi	r19, 0x00	; 0
    65c0:	40 e8       	ldi	r20, 0x80	; 128
    65c2:	5f e3       	ldi	r21, 0x3F	; 63
    65c4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    65c8:	88 23       	and	r24, r24
    65ca:	2c f4       	brge	.+10     	; 0x65d6 <LCD_enuToSendCommand+0x2e8>
		__ticks = 1;
    65cc:	81 e0       	ldi	r24, 0x01	; 1
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	9e af       	std	Y+62, r25	; 0x3e
    65d2:	8d af       	std	Y+61, r24	; 0x3d
    65d4:	46 c0       	rjmp	.+140    	; 0x6662 <LCD_enuToSendCommand+0x374>
	else if (__tmp > 65535)
    65d6:	fe 01       	movw	r30, r28
    65d8:	ff 96       	adiw	r30, 0x3f	; 63
    65da:	60 81       	ld	r22, Z
    65dc:	71 81       	ldd	r23, Z+1	; 0x01
    65de:	82 81       	ldd	r24, Z+2	; 0x02
    65e0:	93 81       	ldd	r25, Z+3	; 0x03
    65e2:	20 e0       	ldi	r18, 0x00	; 0
    65e4:	3f ef       	ldi	r19, 0xFF	; 255
    65e6:	4f e7       	ldi	r20, 0x7F	; 127
    65e8:	57 e4       	ldi	r21, 0x47	; 71
    65ea:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    65ee:	18 16       	cp	r1, r24
    65f0:	64 f5       	brge	.+88     	; 0x664a <LCD_enuToSendCommand+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65f2:	fe 01       	movw	r30, r28
    65f4:	ed 5b       	subi	r30, 0xBD	; 189
    65f6:	ff 4f       	sbci	r31, 0xFF	; 255
    65f8:	60 81       	ld	r22, Z
    65fa:	71 81       	ldd	r23, Z+1	; 0x01
    65fc:	82 81       	ldd	r24, Z+2	; 0x02
    65fe:	93 81       	ldd	r25, Z+3	; 0x03
    6600:	20 e0       	ldi	r18, 0x00	; 0
    6602:	30 e0       	ldi	r19, 0x00	; 0
    6604:	40 e2       	ldi	r20, 0x20	; 32
    6606:	51 e4       	ldi	r21, 0x41	; 65
    6608:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    660c:	dc 01       	movw	r26, r24
    660e:	cb 01       	movw	r24, r22
    6610:	bc 01       	movw	r22, r24
    6612:	cd 01       	movw	r24, r26
    6614:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6618:	dc 01       	movw	r26, r24
    661a:	cb 01       	movw	r24, r22
    661c:	9e af       	std	Y+62, r25	; 0x3e
    661e:	8d af       	std	Y+61, r24	; 0x3d
    6620:	0f c0       	rjmp	.+30     	; 0x6640 <LCD_enuToSendCommand+0x352>
    6622:	88 ec       	ldi	r24, 0xC8	; 200
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	9c af       	std	Y+60, r25	; 0x3c
    6628:	8b af       	std	Y+59, r24	; 0x3b
    662a:	8b ad       	ldd	r24, Y+59	; 0x3b
    662c:	9c ad       	ldd	r25, Y+60	; 0x3c
    662e:	01 97       	sbiw	r24, 0x01	; 1
    6630:	f1 f7       	brne	.-4      	; 0x662e <LCD_enuToSendCommand+0x340>
    6632:	9c af       	std	Y+60, r25	; 0x3c
    6634:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6636:	8d ad       	ldd	r24, Y+61	; 0x3d
    6638:	9e ad       	ldd	r25, Y+62	; 0x3e
    663a:	01 97       	sbiw	r24, 0x01	; 1
    663c:	9e af       	std	Y+62, r25	; 0x3e
    663e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6640:	8d ad       	ldd	r24, Y+61	; 0x3d
    6642:	9e ad       	ldd	r25, Y+62	; 0x3e
    6644:	00 97       	sbiw	r24, 0x00	; 0
    6646:	69 f7       	brne	.-38     	; 0x6622 <LCD_enuToSendCommand+0x334>
    6648:	16 c0       	rjmp	.+44     	; 0x6676 <LCD_enuToSendCommand+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    664a:	fe 01       	movw	r30, r28
    664c:	ff 96       	adiw	r30, 0x3f	; 63
    664e:	60 81       	ld	r22, Z
    6650:	71 81       	ldd	r23, Z+1	; 0x01
    6652:	82 81       	ldd	r24, Z+2	; 0x02
    6654:	93 81       	ldd	r25, Z+3	; 0x03
    6656:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    665a:	dc 01       	movw	r26, r24
    665c:	cb 01       	movw	r24, r22
    665e:	9e af       	std	Y+62, r25	; 0x3e
    6660:	8d af       	std	Y+61, r24	; 0x3d
    6662:	8d ad       	ldd	r24, Y+61	; 0x3d
    6664:	9e ad       	ldd	r25, Y+62	; 0x3e
    6666:	9a af       	std	Y+58, r25	; 0x3a
    6668:	89 af       	std	Y+57, r24	; 0x39
    666a:	89 ad       	ldd	r24, Y+57	; 0x39
    666c:	9a ad       	ldd	r25, Y+58	; 0x3a
    666e:	01 97       	sbiw	r24, 0x01	; 1
    6670:	f1 f7       	brne	.-4      	; 0x666e <LCD_enuToSendCommand+0x380>
    6672:	9a af       	std	Y+58, r25	; 0x3a
    6674:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);
		Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK1 & (Copy_uint8Command >> 7));
    6676:	fe 01       	movw	r30, r28
    6678:	ea 5a       	subi	r30, 0xAA	; 170
    667a:	ff 4f       	sbci	r31, 0xFF	; 255
    667c:	80 81       	ld	r24, Z
    667e:	98 2f       	mov	r25, r24
    6680:	99 1f       	adc	r25, r25
    6682:	99 27       	eor	r25, r25
    6684:	99 1f       	adc	r25, r25
    6686:	80 e0       	ldi	r24, 0x00	; 0
    6688:	63 e0       	ldi	r22, 0x03	; 3
    668a:	49 2f       	mov	r20, r25
    668c:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    6690:	fe 01       	movw	r30, r28
    6692:	eb 5a       	subi	r30, 0xAB	; 171
    6694:	ff 4f       	sbci	r31, 0xFF	; 255
    6696:	80 83       	st	Z, r24
		Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK1 & (Copy_uint8Command >> 6));
    6698:	fe 01       	movw	r30, r28
    669a:	ea 5a       	subi	r30, 0xAA	; 170
    669c:	ff 4f       	sbci	r31, 0xFF	; 255
    669e:	80 81       	ld	r24, Z
    66a0:	82 95       	swap	r24
    66a2:	86 95       	lsr	r24
    66a4:	86 95       	lsr	r24
    66a6:	83 70       	andi	r24, 0x03	; 3
    66a8:	98 2f       	mov	r25, r24
    66aa:	91 70       	andi	r25, 0x01	; 1
    66ac:	80 e0       	ldi	r24, 0x00	; 0
    66ae:	64 e0       	ldi	r22, 0x04	; 4
    66b0:	49 2f       	mov	r20, r25
    66b2:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    66b6:	fe 01       	movw	r30, r28
    66b8:	eb 5a       	subi	r30, 0xAB	; 171
    66ba:	ff 4f       	sbci	r31, 0xFF	; 255
    66bc:	80 83       	st	Z, r24
		Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK1 & (Copy_uint8Command >> 5));
    66be:	fe 01       	movw	r30, r28
    66c0:	ea 5a       	subi	r30, 0xAA	; 170
    66c2:	ff 4f       	sbci	r31, 0xFF	; 255
    66c4:	80 81       	ld	r24, Z
    66c6:	82 95       	swap	r24
    66c8:	86 95       	lsr	r24
    66ca:	87 70       	andi	r24, 0x07	; 7
    66cc:	98 2f       	mov	r25, r24
    66ce:	91 70       	andi	r25, 0x01	; 1
    66d0:	80 e0       	ldi	r24, 0x00	; 0
    66d2:	65 e0       	ldi	r22, 0x05	; 5
    66d4:	49 2f       	mov	r20, r25
    66d6:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    66da:	fe 01       	movw	r30, r28
    66dc:	eb 5a       	subi	r30, 0xAB	; 171
    66de:	ff 4f       	sbci	r31, 0xFF	; 255
    66e0:	80 83       	st	Z, r24
		Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK1 & (Copy_uint8Command >> 4));
    66e2:	fe 01       	movw	r30, r28
    66e4:	ea 5a       	subi	r30, 0xAA	; 170
    66e6:	ff 4f       	sbci	r31, 0xFF	; 255
    66e8:	80 81       	ld	r24, Z
    66ea:	82 95       	swap	r24
    66ec:	8f 70       	andi	r24, 0x0F	; 15
    66ee:	98 2f       	mov	r25, r24
    66f0:	91 70       	andi	r25, 0x01	; 1
    66f2:	80 e0       	ldi	r24, 0x00	; 0
    66f4:	66 e0       	ldi	r22, 0x06	; 6
    66f6:	49 2f       	mov	r20, r25
    66f8:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    66fc:	fe 01       	movw	r30, r28
    66fe:	eb 5a       	subi	r30, 0xAB	; 171
    6700:	ff 4f       	sbci	r31, 0xFF	; 255
    6702:	80 83       	st	Z, r24
	}
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    6704:	80 e0       	ldi	r24, 0x00	; 0
    6706:	62 e0       	ldi	r22, 0x02	; 2
    6708:	41 e0       	ldi	r20, 0x01	; 1
    670a:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    670e:	fe 01       	movw	r30, r28
    6710:	eb 5a       	subi	r30, 0xAB	; 171
    6712:	ff 4f       	sbci	r31, 0xFF	; 255
    6714:	80 83       	st	Z, r24
    6716:	80 e0       	ldi	r24, 0x00	; 0
    6718:	90 e0       	ldi	r25, 0x00	; 0
    671a:	a0 e2       	ldi	r26, 0x20	; 32
    671c:	b1 e4       	ldi	r27, 0x41	; 65
    671e:	8d ab       	std	Y+53, r24	; 0x35
    6720:	9e ab       	std	Y+54, r25	; 0x36
    6722:	af ab       	std	Y+55, r26	; 0x37
    6724:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6726:	6d a9       	ldd	r22, Y+53	; 0x35
    6728:	7e a9       	ldd	r23, Y+54	; 0x36
    672a:	8f a9       	ldd	r24, Y+55	; 0x37
    672c:	98 ad       	ldd	r25, Y+56	; 0x38
    672e:	20 e0       	ldi	r18, 0x00	; 0
    6730:	30 e0       	ldi	r19, 0x00	; 0
    6732:	4a ef       	ldi	r20, 0xFA	; 250
    6734:	54 e4       	ldi	r21, 0x44	; 68
    6736:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    673a:	dc 01       	movw	r26, r24
    673c:	cb 01       	movw	r24, r22
    673e:	89 ab       	std	Y+49, r24	; 0x31
    6740:	9a ab       	std	Y+50, r25	; 0x32
    6742:	ab ab       	std	Y+51, r26	; 0x33
    6744:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6746:	69 a9       	ldd	r22, Y+49	; 0x31
    6748:	7a a9       	ldd	r23, Y+50	; 0x32
    674a:	8b a9       	ldd	r24, Y+51	; 0x33
    674c:	9c a9       	ldd	r25, Y+52	; 0x34
    674e:	20 e0       	ldi	r18, 0x00	; 0
    6750:	30 e0       	ldi	r19, 0x00	; 0
    6752:	40 e8       	ldi	r20, 0x80	; 128
    6754:	5f e3       	ldi	r21, 0x3F	; 63
    6756:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    675a:	88 23       	and	r24, r24
    675c:	2c f4       	brge	.+10     	; 0x6768 <LCD_enuToSendCommand+0x47a>
		__ticks = 1;
    675e:	81 e0       	ldi	r24, 0x01	; 1
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	98 ab       	std	Y+48, r25	; 0x30
    6764:	8f a7       	std	Y+47, r24	; 0x2f
    6766:	3f c0       	rjmp	.+126    	; 0x67e6 <LCD_enuToSendCommand+0x4f8>
	else if (__tmp > 65535)
    6768:	69 a9       	ldd	r22, Y+49	; 0x31
    676a:	7a a9       	ldd	r23, Y+50	; 0x32
    676c:	8b a9       	ldd	r24, Y+51	; 0x33
    676e:	9c a9       	ldd	r25, Y+52	; 0x34
    6770:	20 e0       	ldi	r18, 0x00	; 0
    6772:	3f ef       	ldi	r19, 0xFF	; 255
    6774:	4f e7       	ldi	r20, 0x7F	; 127
    6776:	57 e4       	ldi	r21, 0x47	; 71
    6778:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    677c:	18 16       	cp	r1, r24
    677e:	4c f5       	brge	.+82     	; 0x67d2 <LCD_enuToSendCommand+0x4e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6780:	6d a9       	ldd	r22, Y+53	; 0x35
    6782:	7e a9       	ldd	r23, Y+54	; 0x36
    6784:	8f a9       	ldd	r24, Y+55	; 0x37
    6786:	98 ad       	ldd	r25, Y+56	; 0x38
    6788:	20 e0       	ldi	r18, 0x00	; 0
    678a:	30 e0       	ldi	r19, 0x00	; 0
    678c:	40 e2       	ldi	r20, 0x20	; 32
    678e:	51 e4       	ldi	r21, 0x41	; 65
    6790:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    6794:	dc 01       	movw	r26, r24
    6796:	cb 01       	movw	r24, r22
    6798:	bc 01       	movw	r22, r24
    679a:	cd 01       	movw	r24, r26
    679c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    67a0:	dc 01       	movw	r26, r24
    67a2:	cb 01       	movw	r24, r22
    67a4:	98 ab       	std	Y+48, r25	; 0x30
    67a6:	8f a7       	std	Y+47, r24	; 0x2f
    67a8:	0f c0       	rjmp	.+30     	; 0x67c8 <LCD_enuToSendCommand+0x4da>
    67aa:	88 ec       	ldi	r24, 0xC8	; 200
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	9e a7       	std	Y+46, r25	; 0x2e
    67b0:	8d a7       	std	Y+45, r24	; 0x2d
    67b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    67b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    67b6:	01 97       	sbiw	r24, 0x01	; 1
    67b8:	f1 f7       	brne	.-4      	; 0x67b6 <LCD_enuToSendCommand+0x4c8>
    67ba:	9e a7       	std	Y+46, r25	; 0x2e
    67bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67be:	8f a5       	ldd	r24, Y+47	; 0x2f
    67c0:	98 a9       	ldd	r25, Y+48	; 0x30
    67c2:	01 97       	sbiw	r24, 0x01	; 1
    67c4:	98 ab       	std	Y+48, r25	; 0x30
    67c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    67ca:	98 a9       	ldd	r25, Y+48	; 0x30
    67cc:	00 97       	sbiw	r24, 0x00	; 0
    67ce:	69 f7       	brne	.-38     	; 0x67aa <LCD_enuToSendCommand+0x4bc>
    67d0:	14 c0       	rjmp	.+40     	; 0x67fa <LCD_enuToSendCommand+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67d2:	69 a9       	ldd	r22, Y+49	; 0x31
    67d4:	7a a9       	ldd	r23, Y+50	; 0x32
    67d6:	8b a9       	ldd	r24, Y+51	; 0x33
    67d8:	9c a9       	ldd	r25, Y+52	; 0x34
    67da:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    67de:	dc 01       	movw	r26, r24
    67e0:	cb 01       	movw	r24, r22
    67e2:	98 ab       	std	Y+48, r25	; 0x30
    67e4:	8f a7       	std	Y+47, r24	; 0x2f
    67e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    67e8:	98 a9       	ldd	r25, Y+48	; 0x30
    67ea:	9c a7       	std	Y+44, r25	; 0x2c
    67ec:	8b a7       	std	Y+43, r24	; 0x2b
    67ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    67f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    67f2:	01 97       	sbiw	r24, 0x01	; 1
    67f4:	f1 f7       	brne	.-4      	; 0x67f2 <LCD_enuToSendCommand+0x504>
    67f6:	9c a7       	std	Y+44, r25	; 0x2c
    67f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    67fa:	80 e0       	ldi	r24, 0x00	; 0
    67fc:	62 e0       	ldi	r22, 0x02	; 2
    67fe:	40 e0       	ldi	r20, 0x00	; 0
    6800:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    6804:	fe 01       	movw	r30, r28
    6806:	eb 5a       	subi	r30, 0xAB	; 171
    6808:	ff 4f       	sbci	r31, 0xFF	; 255
    680a:	80 83       	st	Z, r24
    680c:	80 e0       	ldi	r24, 0x00	; 0
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	a0 e2       	ldi	r26, 0x20	; 32
    6812:	b1 e4       	ldi	r27, 0x41	; 65
    6814:	8f a3       	std	Y+39, r24	; 0x27
    6816:	98 a7       	std	Y+40, r25	; 0x28
    6818:	a9 a7       	std	Y+41, r26	; 0x29
    681a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    681c:	6f a1       	ldd	r22, Y+39	; 0x27
    681e:	78 a5       	ldd	r23, Y+40	; 0x28
    6820:	89 a5       	ldd	r24, Y+41	; 0x29
    6822:	9a a5       	ldd	r25, Y+42	; 0x2a
    6824:	20 e0       	ldi	r18, 0x00	; 0
    6826:	30 e0       	ldi	r19, 0x00	; 0
    6828:	4a ef       	ldi	r20, 0xFA	; 250
    682a:	54 e4       	ldi	r21, 0x44	; 68
    682c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    6830:	dc 01       	movw	r26, r24
    6832:	cb 01       	movw	r24, r22
    6834:	8b a3       	std	Y+35, r24	; 0x23
    6836:	9c a3       	std	Y+36, r25	; 0x24
    6838:	ad a3       	std	Y+37, r26	; 0x25
    683a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    683c:	6b a1       	ldd	r22, Y+35	; 0x23
    683e:	7c a1       	ldd	r23, Y+36	; 0x24
    6840:	8d a1       	ldd	r24, Y+37	; 0x25
    6842:	9e a1       	ldd	r25, Y+38	; 0x26
    6844:	20 e0       	ldi	r18, 0x00	; 0
    6846:	30 e0       	ldi	r19, 0x00	; 0
    6848:	40 e8       	ldi	r20, 0x80	; 128
    684a:	5f e3       	ldi	r21, 0x3F	; 63
    684c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    6850:	88 23       	and	r24, r24
    6852:	2c f4       	brge	.+10     	; 0x685e <LCD_enuToSendCommand+0x570>
		__ticks = 1;
    6854:	81 e0       	ldi	r24, 0x01	; 1
    6856:	90 e0       	ldi	r25, 0x00	; 0
    6858:	9a a3       	std	Y+34, r25	; 0x22
    685a:	89 a3       	std	Y+33, r24	; 0x21
    685c:	3f c0       	rjmp	.+126    	; 0x68dc <LCD_enuToSendCommand+0x5ee>
	else if (__tmp > 65535)
    685e:	6b a1       	ldd	r22, Y+35	; 0x23
    6860:	7c a1       	ldd	r23, Y+36	; 0x24
    6862:	8d a1       	ldd	r24, Y+37	; 0x25
    6864:	9e a1       	ldd	r25, Y+38	; 0x26
    6866:	20 e0       	ldi	r18, 0x00	; 0
    6868:	3f ef       	ldi	r19, 0xFF	; 255
    686a:	4f e7       	ldi	r20, 0x7F	; 127
    686c:	57 e4       	ldi	r21, 0x47	; 71
    686e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    6872:	18 16       	cp	r1, r24
    6874:	4c f5       	brge	.+82     	; 0x68c8 <LCD_enuToSendCommand+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6876:	6f a1       	ldd	r22, Y+39	; 0x27
    6878:	78 a5       	ldd	r23, Y+40	; 0x28
    687a:	89 a5       	ldd	r24, Y+41	; 0x29
    687c:	9a a5       	ldd	r25, Y+42	; 0x2a
    687e:	20 e0       	ldi	r18, 0x00	; 0
    6880:	30 e0       	ldi	r19, 0x00	; 0
    6882:	40 e2       	ldi	r20, 0x20	; 32
    6884:	51 e4       	ldi	r21, 0x41	; 65
    6886:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    688a:	dc 01       	movw	r26, r24
    688c:	cb 01       	movw	r24, r22
    688e:	bc 01       	movw	r22, r24
    6890:	cd 01       	movw	r24, r26
    6892:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6896:	dc 01       	movw	r26, r24
    6898:	cb 01       	movw	r24, r22
    689a:	9a a3       	std	Y+34, r25	; 0x22
    689c:	89 a3       	std	Y+33, r24	; 0x21
    689e:	0f c0       	rjmp	.+30     	; 0x68be <LCD_enuToSendCommand+0x5d0>
    68a0:	88 ec       	ldi	r24, 0xC8	; 200
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	98 a3       	std	Y+32, r25	; 0x20
    68a6:	8f 8f       	std	Y+31, r24	; 0x1f
    68a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    68aa:	98 a1       	ldd	r25, Y+32	; 0x20
    68ac:	01 97       	sbiw	r24, 0x01	; 1
    68ae:	f1 f7       	brne	.-4      	; 0x68ac <LCD_enuToSendCommand+0x5be>
    68b0:	98 a3       	std	Y+32, r25	; 0x20
    68b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68b4:	89 a1       	ldd	r24, Y+33	; 0x21
    68b6:	9a a1       	ldd	r25, Y+34	; 0x22
    68b8:	01 97       	sbiw	r24, 0x01	; 1
    68ba:	9a a3       	std	Y+34, r25	; 0x22
    68bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68be:	89 a1       	ldd	r24, Y+33	; 0x21
    68c0:	9a a1       	ldd	r25, Y+34	; 0x22
    68c2:	00 97       	sbiw	r24, 0x00	; 0
    68c4:	69 f7       	brne	.-38     	; 0x68a0 <LCD_enuToSendCommand+0x5b2>
    68c6:	14 c0       	rjmp	.+40     	; 0x68f0 <LCD_enuToSendCommand+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68c8:	6b a1       	ldd	r22, Y+35	; 0x23
    68ca:	7c a1       	ldd	r23, Y+36	; 0x24
    68cc:	8d a1       	ldd	r24, Y+37	; 0x25
    68ce:	9e a1       	ldd	r25, Y+38	; 0x26
    68d0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    68d4:	dc 01       	movw	r26, r24
    68d6:	cb 01       	movw	r24, r22
    68d8:	9a a3       	std	Y+34, r25	; 0x22
    68da:	89 a3       	std	Y+33, r24	; 0x21
    68dc:	89 a1       	ldd	r24, Y+33	; 0x21
    68de:	9a a1       	ldd	r25, Y+34	; 0x22
    68e0:	9e 8f       	std	Y+30, r25	; 0x1e
    68e2:	8d 8f       	std	Y+29, r24	; 0x1d
    68e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    68e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    68e8:	01 97       	sbiw	r24, 0x01	; 1
    68ea:	f1 f7       	brne	.-4      	; 0x68e8 <LCD_enuToSendCommand+0x5fa>
    68ec:	9e 8f       	std	Y+30, r25	; 0x1e
    68ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK1 & (Copy_uint8Command >> 3));
    68f0:	fe 01       	movw	r30, r28
    68f2:	ea 5a       	subi	r30, 0xAA	; 170
    68f4:	ff 4f       	sbci	r31, 0xFF	; 255
    68f6:	80 81       	ld	r24, Z
    68f8:	86 95       	lsr	r24
    68fa:	86 95       	lsr	r24
    68fc:	86 95       	lsr	r24
    68fe:	98 2f       	mov	r25, r24
    6900:	91 70       	andi	r25, 0x01	; 1
    6902:	80 e0       	ldi	r24, 0x00	; 0
    6904:	63 e0       	ldi	r22, 0x03	; 3
    6906:	49 2f       	mov	r20, r25
    6908:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    690c:	fe 01       	movw	r30, r28
    690e:	eb 5a       	subi	r30, 0xAB	; 171
    6910:	ff 4f       	sbci	r31, 0xFF	; 255
    6912:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK1 & (Copy_uint8Command >> 2));
    6914:	fe 01       	movw	r30, r28
    6916:	ea 5a       	subi	r30, 0xAA	; 170
    6918:	ff 4f       	sbci	r31, 0xFF	; 255
    691a:	80 81       	ld	r24, Z
    691c:	86 95       	lsr	r24
    691e:	86 95       	lsr	r24
    6920:	98 2f       	mov	r25, r24
    6922:	91 70       	andi	r25, 0x01	; 1
    6924:	80 e0       	ldi	r24, 0x00	; 0
    6926:	64 e0       	ldi	r22, 0x04	; 4
    6928:	49 2f       	mov	r20, r25
    692a:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    692e:	fe 01       	movw	r30, r28
    6930:	eb 5a       	subi	r30, 0xAB	; 171
    6932:	ff 4f       	sbci	r31, 0xFF	; 255
    6934:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK1 & (Copy_uint8Command >> 1));
    6936:	fe 01       	movw	r30, r28
    6938:	ea 5a       	subi	r30, 0xAA	; 170
    693a:	ff 4f       	sbci	r31, 0xFF	; 255
    693c:	80 81       	ld	r24, Z
    693e:	86 95       	lsr	r24
    6940:	98 2f       	mov	r25, r24
    6942:	91 70       	andi	r25, 0x01	; 1
    6944:	80 e0       	ldi	r24, 0x00	; 0
    6946:	65 e0       	ldi	r22, 0x05	; 5
    6948:	49 2f       	mov	r20, r25
    694a:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    694e:	fe 01       	movw	r30, r28
    6950:	eb 5a       	subi	r30, 0xAB	; 171
    6952:	ff 4f       	sbci	r31, 0xFF	; 255
    6954:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK1 & (Copy_uint8Command >> 0));
    6956:	fe 01       	movw	r30, r28
    6958:	ea 5a       	subi	r30, 0xAA	; 170
    695a:	ff 4f       	sbci	r31, 0xFF	; 255
    695c:	80 81       	ld	r24, Z
    695e:	98 2f       	mov	r25, r24
    6960:	91 70       	andi	r25, 0x01	; 1
    6962:	80 e0       	ldi	r24, 0x00	; 0
    6964:	66 e0       	ldi	r22, 0x06	; 6
    6966:	49 2f       	mov	r20, r25
    6968:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    696c:	fe 01       	movw	r30, r28
    696e:	eb 5a       	subi	r30, 0xAB	; 171
    6970:	ff 4f       	sbci	r31, 0xFF	; 255
    6972:	80 83       	st	Z, r24
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    6974:	80 e0       	ldi	r24, 0x00	; 0
    6976:	62 e0       	ldi	r22, 0x02	; 2
    6978:	41 e0       	ldi	r20, 0x01	; 1
    697a:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    697e:	fe 01       	movw	r30, r28
    6980:	eb 5a       	subi	r30, 0xAB	; 171
    6982:	ff 4f       	sbci	r31, 0xFF	; 255
    6984:	80 83       	st	Z, r24
    6986:	80 e0       	ldi	r24, 0x00	; 0
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	a0 e2       	ldi	r26, 0x20	; 32
    698c:	b1 e4       	ldi	r27, 0x41	; 65
    698e:	89 8f       	std	Y+25, r24	; 0x19
    6990:	9a 8f       	std	Y+26, r25	; 0x1a
    6992:	ab 8f       	std	Y+27, r26	; 0x1b
    6994:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6996:	69 8d       	ldd	r22, Y+25	; 0x19
    6998:	7a 8d       	ldd	r23, Y+26	; 0x1a
    699a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    699c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    699e:	20 e0       	ldi	r18, 0x00	; 0
    69a0:	30 e0       	ldi	r19, 0x00	; 0
    69a2:	4a ef       	ldi	r20, 0xFA	; 250
    69a4:	54 e4       	ldi	r21, 0x44	; 68
    69a6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    69aa:	dc 01       	movw	r26, r24
    69ac:	cb 01       	movw	r24, r22
    69ae:	8d 8b       	std	Y+21, r24	; 0x15
    69b0:	9e 8b       	std	Y+22, r25	; 0x16
    69b2:	af 8b       	std	Y+23, r26	; 0x17
    69b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    69b6:	6d 89       	ldd	r22, Y+21	; 0x15
    69b8:	7e 89       	ldd	r23, Y+22	; 0x16
    69ba:	8f 89       	ldd	r24, Y+23	; 0x17
    69bc:	98 8d       	ldd	r25, Y+24	; 0x18
    69be:	20 e0       	ldi	r18, 0x00	; 0
    69c0:	30 e0       	ldi	r19, 0x00	; 0
    69c2:	40 e8       	ldi	r20, 0x80	; 128
    69c4:	5f e3       	ldi	r21, 0x3F	; 63
    69c6:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    69ca:	88 23       	and	r24, r24
    69cc:	2c f4       	brge	.+10     	; 0x69d8 <LCD_enuToSendCommand+0x6ea>
		__ticks = 1;
    69ce:	81 e0       	ldi	r24, 0x01	; 1
    69d0:	90 e0       	ldi	r25, 0x00	; 0
    69d2:	9c 8b       	std	Y+20, r25	; 0x14
    69d4:	8b 8b       	std	Y+19, r24	; 0x13
    69d6:	3f c0       	rjmp	.+126    	; 0x6a56 <LCD_enuToSendCommand+0x768>
	else if (__tmp > 65535)
    69d8:	6d 89       	ldd	r22, Y+21	; 0x15
    69da:	7e 89       	ldd	r23, Y+22	; 0x16
    69dc:	8f 89       	ldd	r24, Y+23	; 0x17
    69de:	98 8d       	ldd	r25, Y+24	; 0x18
    69e0:	20 e0       	ldi	r18, 0x00	; 0
    69e2:	3f ef       	ldi	r19, 0xFF	; 255
    69e4:	4f e7       	ldi	r20, 0x7F	; 127
    69e6:	57 e4       	ldi	r21, 0x47	; 71
    69e8:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    69ec:	18 16       	cp	r1, r24
    69ee:	4c f5       	brge	.+82     	; 0x6a42 <LCD_enuToSendCommand+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69f0:	69 8d       	ldd	r22, Y+25	; 0x19
    69f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    69f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    69f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    69f8:	20 e0       	ldi	r18, 0x00	; 0
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	40 e2       	ldi	r20, 0x20	; 32
    69fe:	51 e4       	ldi	r21, 0x41	; 65
    6a00:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    6a04:	dc 01       	movw	r26, r24
    6a06:	cb 01       	movw	r24, r22
    6a08:	bc 01       	movw	r22, r24
    6a0a:	cd 01       	movw	r24, r26
    6a0c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6a10:	dc 01       	movw	r26, r24
    6a12:	cb 01       	movw	r24, r22
    6a14:	9c 8b       	std	Y+20, r25	; 0x14
    6a16:	8b 8b       	std	Y+19, r24	; 0x13
    6a18:	0f c0       	rjmp	.+30     	; 0x6a38 <LCD_enuToSendCommand+0x74a>
    6a1a:	88 ec       	ldi	r24, 0xC8	; 200
    6a1c:	90 e0       	ldi	r25, 0x00	; 0
    6a1e:	9a 8b       	std	Y+18, r25	; 0x12
    6a20:	89 8b       	std	Y+17, r24	; 0x11
    6a22:	89 89       	ldd	r24, Y+17	; 0x11
    6a24:	9a 89       	ldd	r25, Y+18	; 0x12
    6a26:	01 97       	sbiw	r24, 0x01	; 1
    6a28:	f1 f7       	brne	.-4      	; 0x6a26 <LCD_enuToSendCommand+0x738>
    6a2a:	9a 8b       	std	Y+18, r25	; 0x12
    6a2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    6a30:	9c 89       	ldd	r25, Y+20	; 0x14
    6a32:	01 97       	sbiw	r24, 0x01	; 1
    6a34:	9c 8b       	std	Y+20, r25	; 0x14
    6a36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a38:	8b 89       	ldd	r24, Y+19	; 0x13
    6a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    6a3c:	00 97       	sbiw	r24, 0x00	; 0
    6a3e:	69 f7       	brne	.-38     	; 0x6a1a <LCD_enuToSendCommand+0x72c>
    6a40:	14 c0       	rjmp	.+40     	; 0x6a6a <LCD_enuToSendCommand+0x77c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a42:	6d 89       	ldd	r22, Y+21	; 0x15
    6a44:	7e 89       	ldd	r23, Y+22	; 0x16
    6a46:	8f 89       	ldd	r24, Y+23	; 0x17
    6a48:	98 8d       	ldd	r25, Y+24	; 0x18
    6a4a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6a4e:	dc 01       	movw	r26, r24
    6a50:	cb 01       	movw	r24, r22
    6a52:	9c 8b       	std	Y+20, r25	; 0x14
    6a54:	8b 8b       	std	Y+19, r24	; 0x13
    6a56:	8b 89       	ldd	r24, Y+19	; 0x13
    6a58:	9c 89       	ldd	r25, Y+20	; 0x14
    6a5a:	98 8b       	std	Y+16, r25	; 0x10
    6a5c:	8f 87       	std	Y+15, r24	; 0x0f
    6a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a60:	98 89       	ldd	r25, Y+16	; 0x10
    6a62:	01 97       	sbiw	r24, 0x01	; 1
    6a64:	f1 f7       	brne	.-4      	; 0x6a62 <LCD_enuToSendCommand+0x774>
    6a66:	98 8b       	std	Y+16, r25	; 0x10
    6a68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    6a6a:	80 e0       	ldi	r24, 0x00	; 0
    6a6c:	62 e0       	ldi	r22, 0x02	; 2
    6a6e:	40 e0       	ldi	r20, 0x00	; 0
    6a70:	0e 94 8c 29 	call	0x5318	; 0x5318 <DIO_enuSetPinValue>
    6a74:	fe 01       	movw	r30, r28
    6a76:	eb 5a       	subi	r30, 0xAB	; 171
    6a78:	ff 4f       	sbci	r31, 0xFF	; 255
    6a7a:	80 83       	st	Z, r24
    6a7c:	80 e0       	ldi	r24, 0x00	; 0
    6a7e:	90 e0       	ldi	r25, 0x00	; 0
    6a80:	a0 e2       	ldi	r26, 0x20	; 32
    6a82:	b1 e4       	ldi	r27, 0x41	; 65
    6a84:	8b 87       	std	Y+11, r24	; 0x0b
    6a86:	9c 87       	std	Y+12, r25	; 0x0c
    6a88:	ad 87       	std	Y+13, r26	; 0x0d
    6a8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a94:	20 e0       	ldi	r18, 0x00	; 0
    6a96:	30 e0       	ldi	r19, 0x00	; 0
    6a98:	4a ef       	ldi	r20, 0xFA	; 250
    6a9a:	54 e4       	ldi	r21, 0x44	; 68
    6a9c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    6aa0:	dc 01       	movw	r26, r24
    6aa2:	cb 01       	movw	r24, r22
    6aa4:	8f 83       	std	Y+7, r24	; 0x07
    6aa6:	98 87       	std	Y+8, r25	; 0x08
    6aa8:	a9 87       	std	Y+9, r26	; 0x09
    6aaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6aac:	6f 81       	ldd	r22, Y+7	; 0x07
    6aae:	78 85       	ldd	r23, Y+8	; 0x08
    6ab0:	89 85       	ldd	r24, Y+9	; 0x09
    6ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ab4:	20 e0       	ldi	r18, 0x00	; 0
    6ab6:	30 e0       	ldi	r19, 0x00	; 0
    6ab8:	40 e8       	ldi	r20, 0x80	; 128
    6aba:	5f e3       	ldi	r21, 0x3F	; 63
    6abc:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__ltsf2>
    6ac0:	88 23       	and	r24, r24
    6ac2:	2c f4       	brge	.+10     	; 0x6ace <LCD_enuToSendCommand+0x7e0>
		__ticks = 1;
    6ac4:	81 e0       	ldi	r24, 0x01	; 1
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	9e 83       	std	Y+6, r25	; 0x06
    6aca:	8d 83       	std	Y+5, r24	; 0x05
    6acc:	3f c0       	rjmp	.+126    	; 0x6b4c <LCD_enuToSendCommand+0x85e>
	else if (__tmp > 65535)
    6ace:	6f 81       	ldd	r22, Y+7	; 0x07
    6ad0:	78 85       	ldd	r23, Y+8	; 0x08
    6ad2:	89 85       	ldd	r24, Y+9	; 0x09
    6ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ad6:	20 e0       	ldi	r18, 0x00	; 0
    6ad8:	3f ef       	ldi	r19, 0xFF	; 255
    6ada:	4f e7       	ldi	r20, 0x7F	; 127
    6adc:	57 e4       	ldi	r21, 0x47	; 71
    6ade:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gtsf2>
    6ae2:	18 16       	cp	r1, r24
    6ae4:	4c f5       	brge	.+82     	; 0x6b38 <LCD_enuToSendCommand+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    6aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    6aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    6aee:	20 e0       	ldi	r18, 0x00	; 0
    6af0:	30 e0       	ldi	r19, 0x00	; 0
    6af2:	40 e2       	ldi	r20, 0x20	; 32
    6af4:	51 e4       	ldi	r21, 0x41	; 65
    6af6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    6afa:	dc 01       	movw	r26, r24
    6afc:	cb 01       	movw	r24, r22
    6afe:	bc 01       	movw	r22, r24
    6b00:	cd 01       	movw	r24, r26
    6b02:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6b06:	dc 01       	movw	r26, r24
    6b08:	cb 01       	movw	r24, r22
    6b0a:	9e 83       	std	Y+6, r25	; 0x06
    6b0c:	8d 83       	std	Y+5, r24	; 0x05
    6b0e:	0f c0       	rjmp	.+30     	; 0x6b2e <LCD_enuToSendCommand+0x840>
    6b10:	88 ec       	ldi	r24, 0xC8	; 200
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	9c 83       	std	Y+4, r25	; 0x04
    6b16:	8b 83       	std	Y+3, r24	; 0x03
    6b18:	8b 81       	ldd	r24, Y+3	; 0x03
    6b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    6b1c:	01 97       	sbiw	r24, 0x01	; 1
    6b1e:	f1 f7       	brne	.-4      	; 0x6b1c <LCD_enuToSendCommand+0x82e>
    6b20:	9c 83       	std	Y+4, r25	; 0x04
    6b22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b24:	8d 81       	ldd	r24, Y+5	; 0x05
    6b26:	9e 81       	ldd	r25, Y+6	; 0x06
    6b28:	01 97       	sbiw	r24, 0x01	; 1
    6b2a:	9e 83       	std	Y+6, r25	; 0x06
    6b2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b30:	9e 81       	ldd	r25, Y+6	; 0x06
    6b32:	00 97       	sbiw	r24, 0x00	; 0
    6b34:	69 f7       	brne	.-38     	; 0x6b10 <LCD_enuToSendCommand+0x822>
    6b36:	14 c0       	rjmp	.+40     	; 0x6b60 <LCD_enuToSendCommand+0x872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b38:	6f 81       	ldd	r22, Y+7	; 0x07
    6b3a:	78 85       	ldd	r23, Y+8	; 0x08
    6b3c:	89 85       	ldd	r24, Y+9	; 0x09
    6b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b40:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6b44:	dc 01       	movw	r26, r24
    6b46:	cb 01       	movw	r24, r22
    6b48:	9e 83       	std	Y+6, r25	; 0x06
    6b4a:	8d 83       	std	Y+5, r24	; 0x05
    6b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    6b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    6b50:	9a 83       	std	Y+2, r25	; 0x02
    6b52:	89 83       	std	Y+1, r24	; 0x01
    6b54:	89 81       	ldd	r24, Y+1	; 0x01
    6b56:	9a 81       	ldd	r25, Y+2	; 0x02
    6b58:	01 97       	sbiw	r24, 0x01	; 1
    6b5a:	f1 f7       	brne	.-4      	; 0x6b58 <LCD_enuToSendCommand+0x86a>
    6b5c:	9a 83       	std	Y+2, r25	; 0x02
    6b5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return Local_enuErrorStates;
    6b60:	fe 01       	movw	r30, r28
    6b62:	eb 5a       	subi	r30, 0xAB	; 171
    6b64:	ff 4f       	sbci	r31, 0xFF	; 255
    6b66:	80 81       	ld	r24, Z
}
    6b68:	ca 5a       	subi	r28, 0xAA	; 170
    6b6a:	df 4f       	sbci	r29, 0xFF	; 255
    6b6c:	0f b6       	in	r0, 0x3f	; 63
    6b6e:	f8 94       	cli
    6b70:	de bf       	out	0x3e, r29	; 62
    6b72:	0f be       	out	0x3f, r0	; 63
    6b74:	cd bf       	out	0x3d, r28	; 61
    6b76:	cf 91       	pop	r28
    6b78:	df 91       	pop	r29
    6b7a:	1f 91       	pop	r17
    6b7c:	0f 91       	pop	r16
    6b7e:	08 95       	ret

00006b80 <LCD_enuDisplayNumber>:

static inline ES_t LCD_enuDisplayNumber(sint_64 Copy_uint32Data){
    6b80:	af 92       	push	r10
    6b82:	bf 92       	push	r11
    6b84:	cf 92       	push	r12
    6b86:	df 92       	push	r13
    6b88:	ef 92       	push	r14
    6b8a:	ff 92       	push	r15
    6b8c:	0f 93       	push	r16
    6b8e:	1f 93       	push	r17
    6b90:	df 93       	push	r29
    6b92:	cf 93       	push	r28
    6b94:	cd b7       	in	r28, 0x3d	; 61
    6b96:	de b7       	in	r29, 0x3e	; 62
    6b98:	ca 56       	subi	r28, 0x6A	; 106
    6b9a:	d0 40       	sbci	r29, 0x00	; 0
    6b9c:	0f b6       	in	r0, 0x3f	; 63
    6b9e:	f8 94       	cli
    6ba0:	de bf       	out	0x3e, r29	; 62
    6ba2:	0f be       	out	0x3f, r0	; 63
    6ba4:	cd bf       	out	0x3d, r28	; 61
    6ba6:	2b 87       	std	Y+11, r18	; 0x0b
    6ba8:	3c 87       	std	Y+12, r19	; 0x0c
    6baa:	4d 87       	std	Y+13, r20	; 0x0d
    6bac:	5e 87       	std	Y+14, r21	; 0x0e
    6bae:	6f 87       	std	Y+15, r22	; 0x0f
    6bb0:	78 8b       	std	Y+16, r23	; 0x10
    6bb2:	89 8b       	std	Y+17, r24	; 0x11
    6bb4:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t Local_enuErrorStates = ES_NOK;
    6bb6:	81 e0       	ldi	r24, 0x01	; 1
    6bb8:	8a 87       	std	Y+10, r24	; 0x0a

	uint_8 Local_uint8Digits = 1;
    6bba:	81 e0       	ldi	r24, 0x01	; 1
    6bbc:	89 87       	std	Y+9, r24	; 0x09
	sint_64 Local_uint8Dividor = 10;
    6bbe:	8a e0       	ldi	r24, 0x0A	; 10
    6bc0:	89 83       	std	Y+1, r24	; 0x01
    6bc2:	1a 82       	std	Y+2, r1	; 0x02
    6bc4:	1b 82       	std	Y+3, r1	; 0x03
    6bc6:	1c 82       	std	Y+4, r1	; 0x04
    6bc8:	1d 82       	std	Y+5, r1	; 0x05
    6bca:	1e 82       	std	Y+6, r1	; 0x06
    6bcc:	1f 82       	std	Y+7, r1	; 0x07
    6bce:	18 86       	std	Y+8, r1	; 0x08

	if(Copy_uint32Data < 0){
    6bd0:	8a 89       	ldd	r24, Y+18	; 0x12
    6bd2:	88 23       	and	r24, r24
    6bd4:	d4 f0       	brlt	.+52     	; 0x6c0a <LCD_enuDisplayNumber+0x8a>
    6bd6:	8a 89       	ldd	r24, Y+18	; 0x12
    6bd8:	88 23       	and	r24, r24
    6bda:	09 f0       	breq	.+2      	; 0x6bde <LCD_enuDisplayNumber+0x5e>
    6bdc:	38 c3       	rjmp	.+1648   	; 0x724e <LCD_enuDisplayNumber+0x6ce>
    6bde:	89 89       	ldd	r24, Y+17	; 0x11
    6be0:	88 23       	and	r24, r24
    6be2:	09 f0       	breq	.+2      	; 0x6be6 <LCD_enuDisplayNumber+0x66>
    6be4:	34 c3       	rjmp	.+1640   	; 0x724e <LCD_enuDisplayNumber+0x6ce>
    6be6:	88 89       	ldd	r24, Y+16	; 0x10
    6be8:	88 23       	and	r24, r24
    6bea:	09 f0       	breq	.+2      	; 0x6bee <LCD_enuDisplayNumber+0x6e>
    6bec:	30 c3       	rjmp	.+1632   	; 0x724e <LCD_enuDisplayNumber+0x6ce>
    6bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bf0:	88 23       	and	r24, r24
    6bf2:	09 f0       	breq	.+2      	; 0x6bf6 <LCD_enuDisplayNumber+0x76>
    6bf4:	2c c3       	rjmp	.+1624   	; 0x724e <LCD_enuDisplayNumber+0x6ce>
    6bf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    6bf8:	88 23       	and	r24, r24
    6bfa:	09 f0       	breq	.+2      	; 0x6bfe <LCD_enuDisplayNumber+0x7e>
    6bfc:	28 c3       	rjmp	.+1616   	; 0x724e <LCD_enuDisplayNumber+0x6ce>
    6bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c00:	88 23       	and	r24, r24
    6c02:	09 f0       	breq	.+2      	; 0x6c06 <LCD_enuDisplayNumber+0x86>
    6c04:	24 c3       	rjmp	.+1608   	; 0x724e <LCD_enuDisplayNumber+0x6ce>
    6c06:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c08:	22 c3       	rjmp	.+1604   	; 0x724e <LCD_enuDisplayNumber+0x6ce>
		Local_enuErrorStates = LCD_enuSendData('-');
    6c0a:	8d e2       	ldi	r24, 0x2D	; 45
    6c0c:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <LCD_enuSendData>
    6c10:	8a 87       	std	Y+10, r24	; 0x0a
		Copy_uint32Data *= -1;
    6c12:	1c 8a       	std	Y+20, r1	; 0x14
    6c14:	1d 8a       	std	Y+21, r1	; 0x15
    6c16:	1e 8a       	std	Y+22, r1	; 0x16
    6c18:	1f 8a       	std	Y+23, r1	; 0x17
    6c1a:	18 8e       	std	Y+24, r1	; 0x18
    6c1c:	19 8e       	std	Y+25, r1	; 0x19
    6c1e:	1a 8e       	std	Y+26, r1	; 0x1a
    6c20:	1b 8e       	std	Y+27, r1	; 0x1b
    6c22:	9b 85       	ldd	r25, Y+11	; 0x0b
    6c24:	9c 8f       	std	Y+28, r25	; 0x1c
    6c26:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c28:	8d 8f       	std	Y+29, r24	; 0x1d
    6c2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    6c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    6c2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c30:	8f 8f       	std	Y+31, r24	; 0x1f
    6c32:	9f 85       	ldd	r25, Y+15	; 0x0f
    6c34:	98 a3       	std	Y+32, r25	; 0x20
    6c36:	88 89       	ldd	r24, Y+16	; 0x10
    6c38:	89 a3       	std	Y+33, r24	; 0x21
    6c3a:	99 89       	ldd	r25, Y+17	; 0x11
    6c3c:	9a a3       	std	Y+34, r25	; 0x22
    6c3e:	8a 89       	ldd	r24, Y+18	; 0x12
    6c40:	8b a3       	std	Y+35, r24	; 0x23
    6c42:	9c 89       	ldd	r25, Y+20	; 0x14
    6c44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6c46:	98 1b       	sub	r25, r24
    6c48:	9c a3       	std	Y+36, r25	; 0x24
    6c4a:	91 e0       	ldi	r25, 0x01	; 1
    6c4c:	9c a7       	std	Y+44, r25	; 0x2c
    6c4e:	8c a1       	ldd	r24, Y+36	; 0x24
    6c50:	9c 89       	ldd	r25, Y+20	; 0x14
    6c52:	98 17       	cp	r25, r24
    6c54:	08 f0       	brcs	.+2      	; 0x6c58 <LCD_enuDisplayNumber+0xd8>
    6c56:	1c a6       	std	Y+44, r1	; 0x2c
    6c58:	8d 89       	ldd	r24, Y+21	; 0x15
    6c5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6c5c:	89 1b       	sub	r24, r25
    6c5e:	8d a3       	std	Y+37, r24	; 0x25
    6c60:	81 e0       	ldi	r24, 0x01	; 1
    6c62:	8d a7       	std	Y+45, r24	; 0x2d
    6c64:	9d a1       	ldd	r25, Y+37	; 0x25
    6c66:	8d 89       	ldd	r24, Y+21	; 0x15
    6c68:	89 17       	cp	r24, r25
    6c6a:	08 f0       	brcs	.+2      	; 0x6c6e <LCD_enuDisplayNumber+0xee>
    6c6c:	1d a6       	std	Y+45, r1	; 0x2d
    6c6e:	9d a1       	ldd	r25, Y+37	; 0x25
    6c70:	8c a5       	ldd	r24, Y+44	; 0x2c
    6c72:	98 1b       	sub	r25, r24
    6c74:	9e a7       	std	Y+46, r25	; 0x2e
    6c76:	91 e0       	ldi	r25, 0x01	; 1
    6c78:	9f a7       	std	Y+47, r25	; 0x2f
    6c7a:	8e a5       	ldd	r24, Y+46	; 0x2e
    6c7c:	9d a1       	ldd	r25, Y+37	; 0x25
    6c7e:	98 17       	cp	r25, r24
    6c80:	08 f0       	brcs	.+2      	; 0x6c84 <LCD_enuDisplayNumber+0x104>
    6c82:	1f a6       	std	Y+47, r1	; 0x2f
    6c84:	8d a5       	ldd	r24, Y+45	; 0x2d
    6c86:	9f a5       	ldd	r25, Y+47	; 0x2f
    6c88:	89 2b       	or	r24, r25
    6c8a:	8d a7       	std	Y+45, r24	; 0x2d
    6c8c:	8e a5       	ldd	r24, Y+46	; 0x2e
    6c8e:	8d a3       	std	Y+37, r24	; 0x25
    6c90:	9e 89       	ldd	r25, Y+22	; 0x16
    6c92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6c94:	98 1b       	sub	r25, r24
    6c96:	9e a3       	std	Y+38, r25	; 0x26
    6c98:	91 e0       	ldi	r25, 0x01	; 1
    6c9a:	98 ab       	std	Y+48, r25	; 0x30
    6c9c:	8e a1       	ldd	r24, Y+38	; 0x26
    6c9e:	9e 89       	ldd	r25, Y+22	; 0x16
    6ca0:	98 17       	cp	r25, r24
    6ca2:	08 f0       	brcs	.+2      	; 0x6ca6 <LCD_enuDisplayNumber+0x126>
    6ca4:	18 aa       	std	Y+48, r1	; 0x30
    6ca6:	8e a1       	ldd	r24, Y+38	; 0x26
    6ca8:	9d a5       	ldd	r25, Y+45	; 0x2d
    6caa:	89 1b       	sub	r24, r25
    6cac:	89 ab       	std	Y+49, r24	; 0x31
    6cae:	81 e0       	ldi	r24, 0x01	; 1
    6cb0:	8a ab       	std	Y+50, r24	; 0x32
    6cb2:	99 a9       	ldd	r25, Y+49	; 0x31
    6cb4:	8e a1       	ldd	r24, Y+38	; 0x26
    6cb6:	89 17       	cp	r24, r25
    6cb8:	08 f0       	brcs	.+2      	; 0x6cbc <LCD_enuDisplayNumber+0x13c>
    6cba:	1a aa       	std	Y+50, r1	; 0x32
    6cbc:	98 a9       	ldd	r25, Y+48	; 0x30
    6cbe:	8a a9       	ldd	r24, Y+50	; 0x32
    6cc0:	98 2b       	or	r25, r24
    6cc2:	98 ab       	std	Y+48, r25	; 0x30
    6cc4:	99 a9       	ldd	r25, Y+49	; 0x31
    6cc6:	9e a3       	std	Y+38, r25	; 0x26
    6cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    6cca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6ccc:	89 1b       	sub	r24, r25
    6cce:	8f a3       	std	Y+39, r24	; 0x27
    6cd0:	81 e0       	ldi	r24, 0x01	; 1
    6cd2:	8b ab       	std	Y+51, r24	; 0x33
    6cd4:	9f a1       	ldd	r25, Y+39	; 0x27
    6cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    6cd8:	89 17       	cp	r24, r25
    6cda:	08 f0       	brcs	.+2      	; 0x6cde <LCD_enuDisplayNumber+0x15e>
    6cdc:	1b aa       	std	Y+51, r1	; 0x33
    6cde:	9f a1       	ldd	r25, Y+39	; 0x27
    6ce0:	88 a9       	ldd	r24, Y+48	; 0x30
    6ce2:	98 1b       	sub	r25, r24
    6ce4:	9c ab       	std	Y+52, r25	; 0x34
    6ce6:	91 e0       	ldi	r25, 0x01	; 1
    6ce8:	9d ab       	std	Y+53, r25	; 0x35
    6cea:	8c a9       	ldd	r24, Y+52	; 0x34
    6cec:	9f a1       	ldd	r25, Y+39	; 0x27
    6cee:	98 17       	cp	r25, r24
    6cf0:	08 f0       	brcs	.+2      	; 0x6cf4 <LCD_enuDisplayNumber+0x174>
    6cf2:	1d aa       	std	Y+53, r1	; 0x35
    6cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    6cf6:	9d a9       	ldd	r25, Y+53	; 0x35
    6cf8:	89 2b       	or	r24, r25
    6cfa:	8b ab       	std	Y+51, r24	; 0x33
    6cfc:	8c a9       	ldd	r24, Y+52	; 0x34
    6cfe:	8f a3       	std	Y+39, r24	; 0x27
    6d00:	98 8d       	ldd	r25, Y+24	; 0x18
    6d02:	88 a1       	ldd	r24, Y+32	; 0x20
    6d04:	98 1b       	sub	r25, r24
    6d06:	98 a7       	std	Y+40, r25	; 0x28
    6d08:	91 e0       	ldi	r25, 0x01	; 1
    6d0a:	9e ab       	std	Y+54, r25	; 0x36
    6d0c:	88 a5       	ldd	r24, Y+40	; 0x28
    6d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    6d10:	98 17       	cp	r25, r24
    6d12:	08 f0       	brcs	.+2      	; 0x6d16 <LCD_enuDisplayNumber+0x196>
    6d14:	1e aa       	std	Y+54, r1	; 0x36
    6d16:	88 a5       	ldd	r24, Y+40	; 0x28
    6d18:	9b a9       	ldd	r25, Y+51	; 0x33
    6d1a:	89 1b       	sub	r24, r25
    6d1c:	8f ab       	std	Y+55, r24	; 0x37
    6d1e:	81 e0       	ldi	r24, 0x01	; 1
    6d20:	88 af       	std	Y+56, r24	; 0x38
    6d22:	9f a9       	ldd	r25, Y+55	; 0x37
    6d24:	88 a5       	ldd	r24, Y+40	; 0x28
    6d26:	89 17       	cp	r24, r25
    6d28:	08 f0       	brcs	.+2      	; 0x6d2c <LCD_enuDisplayNumber+0x1ac>
    6d2a:	18 ae       	std	Y+56, r1	; 0x38
    6d2c:	9e a9       	ldd	r25, Y+54	; 0x36
    6d2e:	88 ad       	ldd	r24, Y+56	; 0x38
    6d30:	98 2b       	or	r25, r24
    6d32:	9e ab       	std	Y+54, r25	; 0x36
    6d34:	9f a9       	ldd	r25, Y+55	; 0x37
    6d36:	98 a7       	std	Y+40, r25	; 0x28
    6d38:	89 8d       	ldd	r24, Y+25	; 0x19
    6d3a:	99 a1       	ldd	r25, Y+33	; 0x21
    6d3c:	89 1b       	sub	r24, r25
    6d3e:	89 a7       	std	Y+41, r24	; 0x29
    6d40:	81 e0       	ldi	r24, 0x01	; 1
    6d42:	89 af       	std	Y+57, r24	; 0x39
    6d44:	99 a5       	ldd	r25, Y+41	; 0x29
    6d46:	89 8d       	ldd	r24, Y+25	; 0x19
    6d48:	89 17       	cp	r24, r25
    6d4a:	08 f0       	brcs	.+2      	; 0x6d4e <LCD_enuDisplayNumber+0x1ce>
    6d4c:	19 ae       	std	Y+57, r1	; 0x39
    6d4e:	99 a5       	ldd	r25, Y+41	; 0x29
    6d50:	8e a9       	ldd	r24, Y+54	; 0x36
    6d52:	98 1b       	sub	r25, r24
    6d54:	9a af       	std	Y+58, r25	; 0x3a
    6d56:	91 e0       	ldi	r25, 0x01	; 1
    6d58:	9b af       	std	Y+59, r25	; 0x3b
    6d5a:	8a ad       	ldd	r24, Y+58	; 0x3a
    6d5c:	99 a5       	ldd	r25, Y+41	; 0x29
    6d5e:	98 17       	cp	r25, r24
    6d60:	08 f0       	brcs	.+2      	; 0x6d64 <LCD_enuDisplayNumber+0x1e4>
    6d62:	1b ae       	std	Y+59, r1	; 0x3b
    6d64:	89 ad       	ldd	r24, Y+57	; 0x39
    6d66:	9b ad       	ldd	r25, Y+59	; 0x3b
    6d68:	89 2b       	or	r24, r25
    6d6a:	89 af       	std	Y+57, r24	; 0x39
    6d6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    6d6e:	89 a7       	std	Y+41, r24	; 0x29
    6d70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d72:	8a a1       	ldd	r24, Y+34	; 0x22
    6d74:	98 1b       	sub	r25, r24
    6d76:	9a a7       	std	Y+42, r25	; 0x2a
    6d78:	91 e0       	ldi	r25, 0x01	; 1
    6d7a:	9c af       	std	Y+60, r25	; 0x3c
    6d7c:	8a a5       	ldd	r24, Y+42	; 0x2a
    6d7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d80:	98 17       	cp	r25, r24
    6d82:	08 f0       	brcs	.+2      	; 0x6d86 <LCD_enuDisplayNumber+0x206>
    6d84:	1c ae       	std	Y+60, r1	; 0x3c
    6d86:	8a a5       	ldd	r24, Y+42	; 0x2a
    6d88:	99 ad       	ldd	r25, Y+57	; 0x39
    6d8a:	89 1b       	sub	r24, r25
    6d8c:	8d af       	std	Y+61, r24	; 0x3d
    6d8e:	81 e0       	ldi	r24, 0x01	; 1
    6d90:	8e af       	std	Y+62, r24	; 0x3e
    6d92:	9d ad       	ldd	r25, Y+61	; 0x3d
    6d94:	8a a5       	ldd	r24, Y+42	; 0x2a
    6d96:	89 17       	cp	r24, r25
    6d98:	08 f0       	brcs	.+2      	; 0x6d9c <LCD_enuDisplayNumber+0x21c>
    6d9a:	1e ae       	std	Y+62, r1	; 0x3e
    6d9c:	9c ad       	ldd	r25, Y+60	; 0x3c
    6d9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6da0:	98 2b       	or	r25, r24
    6da2:	9c af       	std	Y+60, r25	; 0x3c
    6da4:	9d ad       	ldd	r25, Y+61	; 0x3d
    6da6:	9a a7       	std	Y+42, r25	; 0x2a
    6da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6daa:	9b a1       	ldd	r25, Y+35	; 0x23
    6dac:	89 1b       	sub	r24, r25
    6dae:	8b a7       	std	Y+43, r24	; 0x2b
    6db0:	8b a5       	ldd	r24, Y+43	; 0x2b
    6db2:	9c ad       	ldd	r25, Y+60	; 0x3c
    6db4:	89 1b       	sub	r24, r25
    6db6:	8b a7       	std	Y+43, r24	; 0x2b
    6db8:	8c a1       	ldd	r24, Y+36	; 0x24
    6dba:	8b 87       	std	Y+11, r24	; 0x0b
    6dbc:	9d a1       	ldd	r25, Y+37	; 0x25
    6dbe:	9c 87       	std	Y+12, r25	; 0x0c
    6dc0:	8e a1       	ldd	r24, Y+38	; 0x26
    6dc2:	8d 87       	std	Y+13, r24	; 0x0d
    6dc4:	9f a1       	ldd	r25, Y+39	; 0x27
    6dc6:	9e 87       	std	Y+14, r25	; 0x0e
    6dc8:	88 a5       	ldd	r24, Y+40	; 0x28
    6dca:	8f 87       	std	Y+15, r24	; 0x0f
    6dcc:	99 a5       	ldd	r25, Y+41	; 0x29
    6dce:	98 8b       	std	Y+16, r25	; 0x10
    6dd0:	8a a5       	ldd	r24, Y+42	; 0x2a
    6dd2:	89 8b       	std	Y+17, r24	; 0x11
    6dd4:	9b a5       	ldd	r25, Y+43	; 0x2b
    6dd6:	9a 8b       	std	Y+18, r25	; 0x12
    6dd8:	3a c2       	rjmp	.+1140   	; 0x724e <LCD_enuDisplayNumber+0x6ce>
	}

	while(Copy_uint32Data / Local_uint8Dividor){
		Local_uint8Dividor *= 10;
    6dda:	29 81       	ldd	r18, Y+1	; 0x01
    6ddc:	3a 81       	ldd	r19, Y+2	; 0x02
    6dde:	4b 81       	ldd	r20, Y+3	; 0x03
    6de0:	5c 81       	ldd	r21, Y+4	; 0x04
    6de2:	6d 81       	ldd	r22, Y+5	; 0x05
    6de4:	7e 81       	ldd	r23, Y+6	; 0x06
    6de6:	8f 81       	ldd	r24, Y+7	; 0x07
    6de8:	98 85       	ldd	r25, Y+8	; 0x08
    6dea:	a2 2e       	mov	r10, r18
    6dec:	b3 2e       	mov	r11, r19
    6dee:	c4 2e       	mov	r12, r20
    6df0:	d5 2e       	mov	r13, r21
    6df2:	e6 2e       	mov	r14, r22
    6df4:	f7 2e       	mov	r15, r23
    6df6:	08 2f       	mov	r16, r24
    6df8:	19 2f       	mov	r17, r25
    6dfa:	2a 2d       	mov	r18, r10
    6dfc:	3b 2d       	mov	r19, r11
    6dfe:	4c 2d       	mov	r20, r12
    6e00:	5d 2d       	mov	r21, r13
    6e02:	6e 2d       	mov	r22, r14
    6e04:	7f 2d       	mov	r23, r15
    6e06:	80 2f       	mov	r24, r16
    6e08:	91 2f       	mov	r25, r17
    6e0a:	01 e0       	ldi	r16, 0x01	; 1
    6e0c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    6e10:	2f af       	std	Y+63, r18	; 0x3f
    6e12:	21 96       	adiw	r28, 0x01	; 1
    6e14:	3f af       	std	Y+63, r19	; 0x3f
    6e16:	21 97       	sbiw	r28, 0x01	; 1
    6e18:	22 96       	adiw	r28, 0x02	; 2
    6e1a:	4f af       	std	Y+63, r20	; 0x3f
    6e1c:	22 97       	sbiw	r28, 0x02	; 2
    6e1e:	23 96       	adiw	r28, 0x03	; 3
    6e20:	5f af       	std	Y+63, r21	; 0x3f
    6e22:	23 97       	sbiw	r28, 0x03	; 3
    6e24:	24 96       	adiw	r28, 0x04	; 4
    6e26:	6f af       	std	Y+63, r22	; 0x3f
    6e28:	24 97       	sbiw	r28, 0x04	; 4
    6e2a:	25 96       	adiw	r28, 0x05	; 5
    6e2c:	7f af       	std	Y+63, r23	; 0x3f
    6e2e:	25 97       	sbiw	r28, 0x05	; 5
    6e30:	26 96       	adiw	r28, 0x06	; 6
    6e32:	8f af       	std	Y+63, r24	; 0x3f
    6e34:	26 97       	sbiw	r28, 0x06	; 6
    6e36:	27 96       	adiw	r28, 0x07	; 7
    6e38:	9f af       	std	Y+63, r25	; 0x3f
    6e3a:	27 97       	sbiw	r28, 0x07	; 7
    6e3c:	2f ad       	ldd	r18, Y+63	; 0x3f
    6e3e:	21 96       	adiw	r28, 0x01	; 1
    6e40:	3f ad       	ldd	r19, Y+63	; 0x3f
    6e42:	21 97       	sbiw	r28, 0x01	; 1
    6e44:	22 96       	adiw	r28, 0x02	; 2
    6e46:	4f ad       	ldd	r20, Y+63	; 0x3f
    6e48:	22 97       	sbiw	r28, 0x02	; 2
    6e4a:	23 96       	adiw	r28, 0x03	; 3
    6e4c:	5f ad       	ldd	r21, Y+63	; 0x3f
    6e4e:	23 97       	sbiw	r28, 0x03	; 3
    6e50:	24 96       	adiw	r28, 0x04	; 4
    6e52:	6f ad       	ldd	r22, Y+63	; 0x3f
    6e54:	24 97       	sbiw	r28, 0x04	; 4
    6e56:	25 96       	adiw	r28, 0x05	; 5
    6e58:	7f ad       	ldd	r23, Y+63	; 0x3f
    6e5a:	25 97       	sbiw	r28, 0x05	; 5
    6e5c:	26 96       	adiw	r28, 0x06	; 6
    6e5e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e60:	26 97       	sbiw	r28, 0x06	; 6
    6e62:	27 96       	adiw	r28, 0x07	; 7
    6e64:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e66:	27 97       	sbiw	r28, 0x07	; 7
    6e68:	02 e0       	ldi	r16, 0x02	; 2
    6e6a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    6e6e:	28 96       	adiw	r28, 0x08	; 8
    6e70:	2f af       	std	Y+63, r18	; 0x3f
    6e72:	28 97       	sbiw	r28, 0x08	; 8
    6e74:	29 96       	adiw	r28, 0x09	; 9
    6e76:	3f af       	std	Y+63, r19	; 0x3f
    6e78:	29 97       	sbiw	r28, 0x09	; 9
    6e7a:	2a 96       	adiw	r28, 0x0a	; 10
    6e7c:	4f af       	std	Y+63, r20	; 0x3f
    6e7e:	2a 97       	sbiw	r28, 0x0a	; 10
    6e80:	2b 96       	adiw	r28, 0x0b	; 11
    6e82:	5f af       	std	Y+63, r21	; 0x3f
    6e84:	2b 97       	sbiw	r28, 0x0b	; 11
    6e86:	2c 96       	adiw	r28, 0x0c	; 12
    6e88:	6f af       	std	Y+63, r22	; 0x3f
    6e8a:	2c 97       	sbiw	r28, 0x0c	; 12
    6e8c:	2d 96       	adiw	r28, 0x0d	; 13
    6e8e:	7f af       	std	Y+63, r23	; 0x3f
    6e90:	2d 97       	sbiw	r28, 0x0d	; 13
    6e92:	2e 96       	adiw	r28, 0x0e	; 14
    6e94:	8f af       	std	Y+63, r24	; 0x3f
    6e96:	2e 97       	sbiw	r28, 0x0e	; 14
    6e98:	2f 96       	adiw	r28, 0x0f	; 15
    6e9a:	9f af       	std	Y+63, r25	; 0x3f
    6e9c:	2f 97       	sbiw	r28, 0x0f	; 15
    6e9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ea0:	28 96       	adiw	r28, 0x08	; 8
    6ea2:	9f ad       	ldd	r25, Y+63	; 0x3f
    6ea4:	28 97       	sbiw	r28, 0x08	; 8
    6ea6:	89 0f       	add	r24, r25
    6ea8:	60 96       	adiw	r28, 0x10	; 16
    6eaa:	8f af       	std	Y+63, r24	; 0x3f
    6eac:	60 97       	sbiw	r28, 0x10	; 16
    6eae:	81 e0       	ldi	r24, 0x01	; 1
    6eb0:	68 96       	adiw	r28, 0x18	; 24
    6eb2:	8f af       	std	Y+63, r24	; 0x3f
    6eb4:	68 97       	sbiw	r28, 0x18	; 24
    6eb6:	60 96       	adiw	r28, 0x10	; 16
    6eb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    6eba:	60 97       	sbiw	r28, 0x10	; 16
    6ebc:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ebe:	98 17       	cp	r25, r24
    6ec0:	18 f0       	brcs	.+6      	; 0x6ec8 <LCD_enuDisplayNumber+0x348>
    6ec2:	68 96       	adiw	r28, 0x18	; 24
    6ec4:	1f ae       	std	Y+63, r1	; 0x3f
    6ec6:	68 97       	sbiw	r28, 0x18	; 24
    6ec8:	21 96       	adiw	r28, 0x01	; 1
    6eca:	9f ad       	ldd	r25, Y+63	; 0x3f
    6ecc:	21 97       	sbiw	r28, 0x01	; 1
    6ece:	29 96       	adiw	r28, 0x09	; 9
    6ed0:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ed2:	29 97       	sbiw	r28, 0x09	; 9
    6ed4:	98 0f       	add	r25, r24
    6ed6:	61 96       	adiw	r28, 0x11	; 17
    6ed8:	9f af       	std	Y+63, r25	; 0x3f
    6eda:	61 97       	sbiw	r28, 0x11	; 17
    6edc:	91 e0       	ldi	r25, 0x01	; 1
    6ede:	69 96       	adiw	r28, 0x19	; 25
    6ee0:	9f af       	std	Y+63, r25	; 0x3f
    6ee2:	69 97       	sbiw	r28, 0x19	; 25
    6ee4:	61 96       	adiw	r28, 0x11	; 17
    6ee6:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ee8:	61 97       	sbiw	r28, 0x11	; 17
    6eea:	21 96       	adiw	r28, 0x01	; 1
    6eec:	9f ad       	ldd	r25, Y+63	; 0x3f
    6eee:	21 97       	sbiw	r28, 0x01	; 1
    6ef0:	89 17       	cp	r24, r25
    6ef2:	18 f0       	brcs	.+6      	; 0x6efa <LCD_enuDisplayNumber+0x37a>
    6ef4:	69 96       	adiw	r28, 0x19	; 25
    6ef6:	1f ae       	std	Y+63, r1	; 0x3f
    6ef8:	69 97       	sbiw	r28, 0x19	; 25
    6efa:	68 96       	adiw	r28, 0x18	; 24
    6efc:	8f ad       	ldd	r24, Y+63	; 0x3f
    6efe:	68 97       	sbiw	r28, 0x18	; 24
    6f00:	61 96       	adiw	r28, 0x11	; 17
    6f02:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f04:	61 97       	sbiw	r28, 0x11	; 17
    6f06:	89 0f       	add	r24, r25
    6f08:	6a 96       	adiw	r28, 0x1a	; 26
    6f0a:	8f af       	std	Y+63, r24	; 0x3f
    6f0c:	6a 97       	sbiw	r28, 0x1a	; 26
    6f0e:	81 e0       	ldi	r24, 0x01	; 1
    6f10:	6b 96       	adiw	r28, 0x1b	; 27
    6f12:	8f af       	std	Y+63, r24	; 0x3f
    6f14:	6b 97       	sbiw	r28, 0x1b	; 27
    6f16:	6a 96       	adiw	r28, 0x1a	; 26
    6f18:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f1a:	6a 97       	sbiw	r28, 0x1a	; 26
    6f1c:	61 96       	adiw	r28, 0x11	; 17
    6f1e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f20:	61 97       	sbiw	r28, 0x11	; 17
    6f22:	98 17       	cp	r25, r24
    6f24:	18 f0       	brcs	.+6      	; 0x6f2c <LCD_enuDisplayNumber+0x3ac>
    6f26:	6b 96       	adiw	r28, 0x1b	; 27
    6f28:	1f ae       	std	Y+63, r1	; 0x3f
    6f2a:	6b 97       	sbiw	r28, 0x1b	; 27
    6f2c:	69 96       	adiw	r28, 0x19	; 25
    6f2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f30:	69 97       	sbiw	r28, 0x19	; 25
    6f32:	6b 96       	adiw	r28, 0x1b	; 27
    6f34:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f36:	6b 97       	sbiw	r28, 0x1b	; 27
    6f38:	98 2b       	or	r25, r24
    6f3a:	69 96       	adiw	r28, 0x19	; 25
    6f3c:	9f af       	std	Y+63, r25	; 0x3f
    6f3e:	69 97       	sbiw	r28, 0x19	; 25
    6f40:	6a 96       	adiw	r28, 0x1a	; 26
    6f42:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f44:	6a 97       	sbiw	r28, 0x1a	; 26
    6f46:	61 96       	adiw	r28, 0x11	; 17
    6f48:	9f af       	std	Y+63, r25	; 0x3f
    6f4a:	61 97       	sbiw	r28, 0x11	; 17
    6f4c:	22 96       	adiw	r28, 0x02	; 2
    6f4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f50:	22 97       	sbiw	r28, 0x02	; 2
    6f52:	2a 96       	adiw	r28, 0x0a	; 10
    6f54:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f56:	2a 97       	sbiw	r28, 0x0a	; 10
    6f58:	89 0f       	add	r24, r25
    6f5a:	62 96       	adiw	r28, 0x12	; 18
    6f5c:	8f af       	std	Y+63, r24	; 0x3f
    6f5e:	62 97       	sbiw	r28, 0x12	; 18
    6f60:	81 e0       	ldi	r24, 0x01	; 1
    6f62:	6c 96       	adiw	r28, 0x1c	; 28
    6f64:	8f af       	std	Y+63, r24	; 0x3f
    6f66:	6c 97       	sbiw	r28, 0x1c	; 28
    6f68:	62 96       	adiw	r28, 0x12	; 18
    6f6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f6c:	62 97       	sbiw	r28, 0x12	; 18
    6f6e:	22 96       	adiw	r28, 0x02	; 2
    6f70:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f72:	22 97       	sbiw	r28, 0x02	; 2
    6f74:	98 17       	cp	r25, r24
    6f76:	18 f0       	brcs	.+6      	; 0x6f7e <LCD_enuDisplayNumber+0x3fe>
    6f78:	6c 96       	adiw	r28, 0x1c	; 28
    6f7a:	1f ae       	std	Y+63, r1	; 0x3f
    6f7c:	6c 97       	sbiw	r28, 0x1c	; 28
    6f7e:	69 96       	adiw	r28, 0x19	; 25
    6f80:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f82:	69 97       	sbiw	r28, 0x19	; 25
    6f84:	62 96       	adiw	r28, 0x12	; 18
    6f86:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f88:	62 97       	sbiw	r28, 0x12	; 18
    6f8a:	98 0f       	add	r25, r24
    6f8c:	6d 96       	adiw	r28, 0x1d	; 29
    6f8e:	9f af       	std	Y+63, r25	; 0x3f
    6f90:	6d 97       	sbiw	r28, 0x1d	; 29
    6f92:	91 e0       	ldi	r25, 0x01	; 1
    6f94:	6e 96       	adiw	r28, 0x1e	; 30
    6f96:	9f af       	std	Y+63, r25	; 0x3f
    6f98:	6e 97       	sbiw	r28, 0x1e	; 30
    6f9a:	6d 96       	adiw	r28, 0x1d	; 29
    6f9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f9e:	6d 97       	sbiw	r28, 0x1d	; 29
    6fa0:	62 96       	adiw	r28, 0x12	; 18
    6fa2:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fa4:	62 97       	sbiw	r28, 0x12	; 18
    6fa6:	89 17       	cp	r24, r25
    6fa8:	18 f0       	brcs	.+6      	; 0x6fb0 <LCD_enuDisplayNumber+0x430>
    6faa:	6e 96       	adiw	r28, 0x1e	; 30
    6fac:	1f ae       	std	Y+63, r1	; 0x3f
    6fae:	6e 97       	sbiw	r28, 0x1e	; 30
    6fb0:	6c 96       	adiw	r28, 0x1c	; 28
    6fb2:	8f ad       	ldd	r24, Y+63	; 0x3f
    6fb4:	6c 97       	sbiw	r28, 0x1c	; 28
    6fb6:	6e 96       	adiw	r28, 0x1e	; 30
    6fb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fba:	6e 97       	sbiw	r28, 0x1e	; 30
    6fbc:	89 2b       	or	r24, r25
    6fbe:	6c 96       	adiw	r28, 0x1c	; 28
    6fc0:	8f af       	std	Y+63, r24	; 0x3f
    6fc2:	6c 97       	sbiw	r28, 0x1c	; 28
    6fc4:	6d 96       	adiw	r28, 0x1d	; 29
    6fc6:	8f ad       	ldd	r24, Y+63	; 0x3f
    6fc8:	6d 97       	sbiw	r28, 0x1d	; 29
    6fca:	62 96       	adiw	r28, 0x12	; 18
    6fcc:	8f af       	std	Y+63, r24	; 0x3f
    6fce:	62 97       	sbiw	r28, 0x12	; 18
    6fd0:	23 96       	adiw	r28, 0x03	; 3
    6fd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fd4:	23 97       	sbiw	r28, 0x03	; 3
    6fd6:	2b 96       	adiw	r28, 0x0b	; 11
    6fd8:	8f ad       	ldd	r24, Y+63	; 0x3f
    6fda:	2b 97       	sbiw	r28, 0x0b	; 11
    6fdc:	98 0f       	add	r25, r24
    6fde:	63 96       	adiw	r28, 0x13	; 19
    6fe0:	9f af       	std	Y+63, r25	; 0x3f
    6fe2:	63 97       	sbiw	r28, 0x13	; 19
    6fe4:	91 e0       	ldi	r25, 0x01	; 1
    6fe6:	6f 96       	adiw	r28, 0x1f	; 31
    6fe8:	9f af       	std	Y+63, r25	; 0x3f
    6fea:	6f 97       	sbiw	r28, 0x1f	; 31
    6fec:	63 96       	adiw	r28, 0x13	; 19
    6fee:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ff0:	63 97       	sbiw	r28, 0x13	; 19
    6ff2:	23 96       	adiw	r28, 0x03	; 3
    6ff4:	9f ad       	ldd	r25, Y+63	; 0x3f
    6ff6:	23 97       	sbiw	r28, 0x03	; 3
    6ff8:	89 17       	cp	r24, r25
    6ffa:	18 f0       	brcs	.+6      	; 0x7002 <LCD_enuDisplayNumber+0x482>
    6ffc:	6f 96       	adiw	r28, 0x1f	; 31
    6ffe:	1f ae       	std	Y+63, r1	; 0x3f
    7000:	6f 97       	sbiw	r28, 0x1f	; 31
    7002:	6c 96       	adiw	r28, 0x1c	; 28
    7004:	8f ad       	ldd	r24, Y+63	; 0x3f
    7006:	6c 97       	sbiw	r28, 0x1c	; 28
    7008:	63 96       	adiw	r28, 0x13	; 19
    700a:	9f ad       	ldd	r25, Y+63	; 0x3f
    700c:	63 97       	sbiw	r28, 0x13	; 19
    700e:	89 0f       	add	r24, r25
    7010:	a0 96       	adiw	r28, 0x20	; 32
    7012:	8f af       	std	Y+63, r24	; 0x3f
    7014:	a0 97       	sbiw	r28, 0x20	; 32
    7016:	81 e0       	ldi	r24, 0x01	; 1
    7018:	a1 96       	adiw	r28, 0x21	; 33
    701a:	8f af       	std	Y+63, r24	; 0x3f
    701c:	a1 97       	sbiw	r28, 0x21	; 33
    701e:	a0 96       	adiw	r28, 0x20	; 32
    7020:	9f ad       	ldd	r25, Y+63	; 0x3f
    7022:	a0 97       	sbiw	r28, 0x20	; 32
    7024:	63 96       	adiw	r28, 0x13	; 19
    7026:	8f ad       	ldd	r24, Y+63	; 0x3f
    7028:	63 97       	sbiw	r28, 0x13	; 19
    702a:	98 17       	cp	r25, r24
    702c:	18 f0       	brcs	.+6      	; 0x7034 <LCD_enuDisplayNumber+0x4b4>
    702e:	a1 96       	adiw	r28, 0x21	; 33
    7030:	1f ae       	std	Y+63, r1	; 0x3f
    7032:	a1 97       	sbiw	r28, 0x21	; 33
    7034:	6f 96       	adiw	r28, 0x1f	; 31
    7036:	9f ad       	ldd	r25, Y+63	; 0x3f
    7038:	6f 97       	sbiw	r28, 0x1f	; 31
    703a:	a1 96       	adiw	r28, 0x21	; 33
    703c:	8f ad       	ldd	r24, Y+63	; 0x3f
    703e:	a1 97       	sbiw	r28, 0x21	; 33
    7040:	98 2b       	or	r25, r24
    7042:	6f 96       	adiw	r28, 0x1f	; 31
    7044:	9f af       	std	Y+63, r25	; 0x3f
    7046:	6f 97       	sbiw	r28, 0x1f	; 31
    7048:	a0 96       	adiw	r28, 0x20	; 32
    704a:	9f ad       	ldd	r25, Y+63	; 0x3f
    704c:	a0 97       	sbiw	r28, 0x20	; 32
    704e:	63 96       	adiw	r28, 0x13	; 19
    7050:	9f af       	std	Y+63, r25	; 0x3f
    7052:	63 97       	sbiw	r28, 0x13	; 19
    7054:	24 96       	adiw	r28, 0x04	; 4
    7056:	8f ad       	ldd	r24, Y+63	; 0x3f
    7058:	24 97       	sbiw	r28, 0x04	; 4
    705a:	2c 96       	adiw	r28, 0x0c	; 12
    705c:	9f ad       	ldd	r25, Y+63	; 0x3f
    705e:	2c 97       	sbiw	r28, 0x0c	; 12
    7060:	89 0f       	add	r24, r25
    7062:	64 96       	adiw	r28, 0x14	; 20
    7064:	8f af       	std	Y+63, r24	; 0x3f
    7066:	64 97       	sbiw	r28, 0x14	; 20
    7068:	81 e0       	ldi	r24, 0x01	; 1
    706a:	a2 96       	adiw	r28, 0x22	; 34
    706c:	8f af       	std	Y+63, r24	; 0x3f
    706e:	a2 97       	sbiw	r28, 0x22	; 34
    7070:	64 96       	adiw	r28, 0x14	; 20
    7072:	9f ad       	ldd	r25, Y+63	; 0x3f
    7074:	64 97       	sbiw	r28, 0x14	; 20
    7076:	24 96       	adiw	r28, 0x04	; 4
    7078:	8f ad       	ldd	r24, Y+63	; 0x3f
    707a:	24 97       	sbiw	r28, 0x04	; 4
    707c:	98 17       	cp	r25, r24
    707e:	18 f0       	brcs	.+6      	; 0x7086 <LCD_enuDisplayNumber+0x506>
    7080:	a2 96       	adiw	r28, 0x22	; 34
    7082:	1f ae       	std	Y+63, r1	; 0x3f
    7084:	a2 97       	sbiw	r28, 0x22	; 34
    7086:	6f 96       	adiw	r28, 0x1f	; 31
    7088:	9f ad       	ldd	r25, Y+63	; 0x3f
    708a:	6f 97       	sbiw	r28, 0x1f	; 31
    708c:	64 96       	adiw	r28, 0x14	; 20
    708e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7090:	64 97       	sbiw	r28, 0x14	; 20
    7092:	98 0f       	add	r25, r24
    7094:	a3 96       	adiw	r28, 0x23	; 35
    7096:	9f af       	std	Y+63, r25	; 0x3f
    7098:	a3 97       	sbiw	r28, 0x23	; 35
    709a:	91 e0       	ldi	r25, 0x01	; 1
    709c:	a4 96       	adiw	r28, 0x24	; 36
    709e:	9f af       	std	Y+63, r25	; 0x3f
    70a0:	a4 97       	sbiw	r28, 0x24	; 36
    70a2:	a3 96       	adiw	r28, 0x23	; 35
    70a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    70a6:	a3 97       	sbiw	r28, 0x23	; 35
    70a8:	64 96       	adiw	r28, 0x14	; 20
    70aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    70ac:	64 97       	sbiw	r28, 0x14	; 20
    70ae:	89 17       	cp	r24, r25
    70b0:	18 f0       	brcs	.+6      	; 0x70b8 <LCD_enuDisplayNumber+0x538>
    70b2:	a4 96       	adiw	r28, 0x24	; 36
    70b4:	1f ae       	std	Y+63, r1	; 0x3f
    70b6:	a4 97       	sbiw	r28, 0x24	; 36
    70b8:	a2 96       	adiw	r28, 0x22	; 34
    70ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    70bc:	a2 97       	sbiw	r28, 0x22	; 34
    70be:	a4 96       	adiw	r28, 0x24	; 36
    70c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    70c2:	a4 97       	sbiw	r28, 0x24	; 36
    70c4:	89 2b       	or	r24, r25
    70c6:	a2 96       	adiw	r28, 0x22	; 34
    70c8:	8f af       	std	Y+63, r24	; 0x3f
    70ca:	a2 97       	sbiw	r28, 0x22	; 34
    70cc:	a3 96       	adiw	r28, 0x23	; 35
    70ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    70d0:	a3 97       	sbiw	r28, 0x23	; 35
    70d2:	64 96       	adiw	r28, 0x14	; 20
    70d4:	8f af       	std	Y+63, r24	; 0x3f
    70d6:	64 97       	sbiw	r28, 0x14	; 20
    70d8:	25 96       	adiw	r28, 0x05	; 5
    70da:	9f ad       	ldd	r25, Y+63	; 0x3f
    70dc:	25 97       	sbiw	r28, 0x05	; 5
    70de:	2d 96       	adiw	r28, 0x0d	; 13
    70e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    70e2:	2d 97       	sbiw	r28, 0x0d	; 13
    70e4:	98 0f       	add	r25, r24
    70e6:	65 96       	adiw	r28, 0x15	; 21
    70e8:	9f af       	std	Y+63, r25	; 0x3f
    70ea:	65 97       	sbiw	r28, 0x15	; 21
    70ec:	91 e0       	ldi	r25, 0x01	; 1
    70ee:	a5 96       	adiw	r28, 0x25	; 37
    70f0:	9f af       	std	Y+63, r25	; 0x3f
    70f2:	a5 97       	sbiw	r28, 0x25	; 37
    70f4:	65 96       	adiw	r28, 0x15	; 21
    70f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    70f8:	65 97       	sbiw	r28, 0x15	; 21
    70fa:	25 96       	adiw	r28, 0x05	; 5
    70fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    70fe:	25 97       	sbiw	r28, 0x05	; 5
    7100:	89 17       	cp	r24, r25
    7102:	18 f0       	brcs	.+6      	; 0x710a <LCD_enuDisplayNumber+0x58a>
    7104:	a5 96       	adiw	r28, 0x25	; 37
    7106:	1f ae       	std	Y+63, r1	; 0x3f
    7108:	a5 97       	sbiw	r28, 0x25	; 37
    710a:	a2 96       	adiw	r28, 0x22	; 34
    710c:	8f ad       	ldd	r24, Y+63	; 0x3f
    710e:	a2 97       	sbiw	r28, 0x22	; 34
    7110:	65 96       	adiw	r28, 0x15	; 21
    7112:	9f ad       	ldd	r25, Y+63	; 0x3f
    7114:	65 97       	sbiw	r28, 0x15	; 21
    7116:	89 0f       	add	r24, r25
    7118:	a6 96       	adiw	r28, 0x26	; 38
    711a:	8f af       	std	Y+63, r24	; 0x3f
    711c:	a6 97       	sbiw	r28, 0x26	; 38
    711e:	81 e0       	ldi	r24, 0x01	; 1
    7120:	a7 96       	adiw	r28, 0x27	; 39
    7122:	8f af       	std	Y+63, r24	; 0x3f
    7124:	a7 97       	sbiw	r28, 0x27	; 39
    7126:	a6 96       	adiw	r28, 0x26	; 38
    7128:	9f ad       	ldd	r25, Y+63	; 0x3f
    712a:	a6 97       	sbiw	r28, 0x26	; 38
    712c:	65 96       	adiw	r28, 0x15	; 21
    712e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7130:	65 97       	sbiw	r28, 0x15	; 21
    7132:	98 17       	cp	r25, r24
    7134:	18 f0       	brcs	.+6      	; 0x713c <LCD_enuDisplayNumber+0x5bc>
    7136:	a7 96       	adiw	r28, 0x27	; 39
    7138:	1f ae       	std	Y+63, r1	; 0x3f
    713a:	a7 97       	sbiw	r28, 0x27	; 39
    713c:	a5 96       	adiw	r28, 0x25	; 37
    713e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7140:	a5 97       	sbiw	r28, 0x25	; 37
    7142:	a7 96       	adiw	r28, 0x27	; 39
    7144:	8f ad       	ldd	r24, Y+63	; 0x3f
    7146:	a7 97       	sbiw	r28, 0x27	; 39
    7148:	98 2b       	or	r25, r24
    714a:	a5 96       	adiw	r28, 0x25	; 37
    714c:	9f af       	std	Y+63, r25	; 0x3f
    714e:	a5 97       	sbiw	r28, 0x25	; 37
    7150:	a6 96       	adiw	r28, 0x26	; 38
    7152:	9f ad       	ldd	r25, Y+63	; 0x3f
    7154:	a6 97       	sbiw	r28, 0x26	; 38
    7156:	65 96       	adiw	r28, 0x15	; 21
    7158:	9f af       	std	Y+63, r25	; 0x3f
    715a:	65 97       	sbiw	r28, 0x15	; 21
    715c:	26 96       	adiw	r28, 0x06	; 6
    715e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7160:	26 97       	sbiw	r28, 0x06	; 6
    7162:	2e 96       	adiw	r28, 0x0e	; 14
    7164:	9f ad       	ldd	r25, Y+63	; 0x3f
    7166:	2e 97       	sbiw	r28, 0x0e	; 14
    7168:	89 0f       	add	r24, r25
    716a:	66 96       	adiw	r28, 0x16	; 22
    716c:	8f af       	std	Y+63, r24	; 0x3f
    716e:	66 97       	sbiw	r28, 0x16	; 22
    7170:	81 e0       	ldi	r24, 0x01	; 1
    7172:	a8 96       	adiw	r28, 0x28	; 40
    7174:	8f af       	std	Y+63, r24	; 0x3f
    7176:	a8 97       	sbiw	r28, 0x28	; 40
    7178:	66 96       	adiw	r28, 0x16	; 22
    717a:	9f ad       	ldd	r25, Y+63	; 0x3f
    717c:	66 97       	sbiw	r28, 0x16	; 22
    717e:	26 96       	adiw	r28, 0x06	; 6
    7180:	8f ad       	ldd	r24, Y+63	; 0x3f
    7182:	26 97       	sbiw	r28, 0x06	; 6
    7184:	98 17       	cp	r25, r24
    7186:	18 f0       	brcs	.+6      	; 0x718e <LCD_enuDisplayNumber+0x60e>
    7188:	a8 96       	adiw	r28, 0x28	; 40
    718a:	1f ae       	std	Y+63, r1	; 0x3f
    718c:	a8 97       	sbiw	r28, 0x28	; 40
    718e:	a5 96       	adiw	r28, 0x25	; 37
    7190:	9f ad       	ldd	r25, Y+63	; 0x3f
    7192:	a5 97       	sbiw	r28, 0x25	; 37
    7194:	66 96       	adiw	r28, 0x16	; 22
    7196:	8f ad       	ldd	r24, Y+63	; 0x3f
    7198:	66 97       	sbiw	r28, 0x16	; 22
    719a:	98 0f       	add	r25, r24
    719c:	a9 96       	adiw	r28, 0x29	; 41
    719e:	9f af       	std	Y+63, r25	; 0x3f
    71a0:	a9 97       	sbiw	r28, 0x29	; 41
    71a2:	91 e0       	ldi	r25, 0x01	; 1
    71a4:	aa 96       	adiw	r28, 0x2a	; 42
    71a6:	9f af       	std	Y+63, r25	; 0x3f
    71a8:	aa 97       	sbiw	r28, 0x2a	; 42
    71aa:	a9 96       	adiw	r28, 0x29	; 41
    71ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    71ae:	a9 97       	sbiw	r28, 0x29	; 41
    71b0:	66 96       	adiw	r28, 0x16	; 22
    71b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    71b4:	66 97       	sbiw	r28, 0x16	; 22
    71b6:	89 17       	cp	r24, r25
    71b8:	18 f0       	brcs	.+6      	; 0x71c0 <LCD_enuDisplayNumber+0x640>
    71ba:	aa 96       	adiw	r28, 0x2a	; 42
    71bc:	1f ae       	std	Y+63, r1	; 0x3f
    71be:	aa 97       	sbiw	r28, 0x2a	; 42
    71c0:	a8 96       	adiw	r28, 0x28	; 40
    71c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    71c4:	a8 97       	sbiw	r28, 0x28	; 40
    71c6:	aa 96       	adiw	r28, 0x2a	; 42
    71c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    71ca:	aa 97       	sbiw	r28, 0x2a	; 42
    71cc:	89 2b       	or	r24, r25
    71ce:	a8 96       	adiw	r28, 0x28	; 40
    71d0:	8f af       	std	Y+63, r24	; 0x3f
    71d2:	a8 97       	sbiw	r28, 0x28	; 40
    71d4:	a9 96       	adiw	r28, 0x29	; 41
    71d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    71d8:	a9 97       	sbiw	r28, 0x29	; 41
    71da:	66 96       	adiw	r28, 0x16	; 22
    71dc:	8f af       	std	Y+63, r24	; 0x3f
    71de:	66 97       	sbiw	r28, 0x16	; 22
    71e0:	27 96       	adiw	r28, 0x07	; 7
    71e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    71e4:	27 97       	sbiw	r28, 0x07	; 7
    71e6:	2f 96       	adiw	r28, 0x0f	; 15
    71e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    71ea:	2f 97       	sbiw	r28, 0x0f	; 15
    71ec:	98 0f       	add	r25, r24
    71ee:	67 96       	adiw	r28, 0x17	; 23
    71f0:	9f af       	std	Y+63, r25	; 0x3f
    71f2:	67 97       	sbiw	r28, 0x17	; 23
    71f4:	a8 96       	adiw	r28, 0x28	; 40
    71f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    71f8:	a8 97       	sbiw	r28, 0x28	; 40
    71fa:	67 96       	adiw	r28, 0x17	; 23
    71fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    71fe:	67 97       	sbiw	r28, 0x17	; 23
    7200:	89 0f       	add	r24, r25
    7202:	67 96       	adiw	r28, 0x17	; 23
    7204:	8f af       	std	Y+63, r24	; 0x3f
    7206:	67 97       	sbiw	r28, 0x17	; 23
    7208:	60 96       	adiw	r28, 0x10	; 16
    720a:	8f ad       	ldd	r24, Y+63	; 0x3f
    720c:	60 97       	sbiw	r28, 0x10	; 16
    720e:	89 83       	std	Y+1, r24	; 0x01
    7210:	61 96       	adiw	r28, 0x11	; 17
    7212:	9f ad       	ldd	r25, Y+63	; 0x3f
    7214:	61 97       	sbiw	r28, 0x11	; 17
    7216:	9a 83       	std	Y+2, r25	; 0x02
    7218:	62 96       	adiw	r28, 0x12	; 18
    721a:	8f ad       	ldd	r24, Y+63	; 0x3f
    721c:	62 97       	sbiw	r28, 0x12	; 18
    721e:	8b 83       	std	Y+3, r24	; 0x03
    7220:	63 96       	adiw	r28, 0x13	; 19
    7222:	9f ad       	ldd	r25, Y+63	; 0x3f
    7224:	63 97       	sbiw	r28, 0x13	; 19
    7226:	9c 83       	std	Y+4, r25	; 0x04
    7228:	64 96       	adiw	r28, 0x14	; 20
    722a:	8f ad       	ldd	r24, Y+63	; 0x3f
    722c:	64 97       	sbiw	r28, 0x14	; 20
    722e:	8d 83       	std	Y+5, r24	; 0x05
    7230:	65 96       	adiw	r28, 0x15	; 21
    7232:	9f ad       	ldd	r25, Y+63	; 0x3f
    7234:	65 97       	sbiw	r28, 0x15	; 21
    7236:	9e 83       	std	Y+6, r25	; 0x06
    7238:	66 96       	adiw	r28, 0x16	; 22
    723a:	8f ad       	ldd	r24, Y+63	; 0x3f
    723c:	66 97       	sbiw	r28, 0x16	; 22
    723e:	8f 83       	std	Y+7, r24	; 0x07
    7240:	67 96       	adiw	r28, 0x17	; 23
    7242:	9f ad       	ldd	r25, Y+63	; 0x3f
    7244:	67 97       	sbiw	r28, 0x17	; 23
    7246:	98 87       	std	Y+8, r25	; 0x08
		++Local_uint8Digits;
    7248:	89 85       	ldd	r24, Y+9	; 0x09
    724a:	8f 5f       	subi	r24, 0xFF	; 255
    724c:	89 87       	std	Y+9, r24	; 0x09
	if(Copy_uint32Data < 0){
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_uint32Data *= -1;
	}

	while(Copy_uint32Data / Local_uint8Dividor){
    724e:	2b 85       	ldd	r18, Y+11	; 0x0b
    7250:	3c 85       	ldd	r19, Y+12	; 0x0c
    7252:	4d 85       	ldd	r20, Y+13	; 0x0d
    7254:	5e 85       	ldd	r21, Y+14	; 0x0e
    7256:	6f 85       	ldd	r22, Y+15	; 0x0f
    7258:	78 89       	ldd	r23, Y+16	; 0x10
    725a:	89 89       	ldd	r24, Y+17	; 0x11
    725c:	9a 89       	ldd	r25, Y+18	; 0x12
    725e:	a9 80       	ldd	r10, Y+1	; 0x01
    7260:	ba 80       	ldd	r11, Y+2	; 0x02
    7262:	cb 80       	ldd	r12, Y+3	; 0x03
    7264:	dc 80       	ldd	r13, Y+4	; 0x04
    7266:	ed 80       	ldd	r14, Y+5	; 0x05
    7268:	fe 80       	ldd	r15, Y+6	; 0x06
    726a:	0f 81       	ldd	r16, Y+7	; 0x07
    726c:	18 85       	ldd	r17, Y+8	; 0x08
    726e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divdi3>
    7272:	a2 2e       	mov	r10, r18
    7274:	b3 2e       	mov	r11, r19
    7276:	c4 2e       	mov	r12, r20
    7278:	d5 2e       	mov	r13, r21
    727a:	e6 2e       	mov	r14, r22
    727c:	f7 2e       	mov	r15, r23
    727e:	08 2f       	mov	r16, r24
    7280:	19 2f       	mov	r17, r25
    7282:	2a 2d       	mov	r18, r10
    7284:	3b 2d       	mov	r19, r11
    7286:	4c 2d       	mov	r20, r12
    7288:	5d 2d       	mov	r21, r13
    728a:	6e 2d       	mov	r22, r14
    728c:	7f 2d       	mov	r23, r15
    728e:	80 2f       	mov	r24, r16
    7290:	91 2f       	mov	r25, r17
    7292:	e2 2f       	mov	r30, r18
    7294:	e3 2b       	or	r30, r19
    7296:	e4 2b       	or	r30, r20
    7298:	e5 2b       	or	r30, r21
    729a:	e6 2b       	or	r30, r22
    729c:	e7 2b       	or	r30, r23
    729e:	e8 2b       	or	r30, r24
    72a0:	e9 2b       	or	r30, r25
    72a2:	ee 23       	and	r30, r30
    72a4:	09 f0       	breq	.+2      	; 0x72a8 <LCD_enuDisplayNumber+0x728>
    72a6:	99 cd       	rjmp	.-1230   	; 0x6dda <LCD_enuDisplayNumber+0x25a>
    72a8:	7e c0       	rjmp	.+252    	; 0x73a6 <LCD_enuDisplayNumber+0x826>
		Local_uint8Dividor *= 10;
		++Local_uint8Digits;
	}

	while(Local_uint8Digits--){
		Local_uint8Dividor /= 10;
    72aa:	a9 80       	ldd	r10, Y+1	; 0x01
    72ac:	ba 80       	ldd	r11, Y+2	; 0x02
    72ae:	cb 80       	ldd	r12, Y+3	; 0x03
    72b0:	dc 80       	ldd	r13, Y+4	; 0x04
    72b2:	ed 80       	ldd	r14, Y+5	; 0x05
    72b4:	fe 80       	ldd	r15, Y+6	; 0x06
    72b6:	0f 81       	ldd	r16, Y+7	; 0x07
    72b8:	18 85       	ldd	r17, Y+8	; 0x08
    72ba:	2a 2d       	mov	r18, r10
    72bc:	3b 2d       	mov	r19, r11
    72be:	4c 2d       	mov	r20, r12
    72c0:	5d 2d       	mov	r21, r13
    72c2:	6e 2d       	mov	r22, r14
    72c4:	7f 2d       	mov	r23, r15
    72c6:	80 2f       	mov	r24, r16
    72c8:	91 2f       	mov	r25, r17
    72ca:	0f 2e       	mov	r0, r31
    72cc:	fa e0       	ldi	r31, 0x0A	; 10
    72ce:	af 2e       	mov	r10, r31
    72d0:	f0 2d       	mov	r31, r0
    72d2:	bb 24       	eor	r11, r11
    72d4:	cc 24       	eor	r12, r12
    72d6:	dd 24       	eor	r13, r13
    72d8:	ee 24       	eor	r14, r14
    72da:	ff 24       	eor	r15, r15
    72dc:	00 e0       	ldi	r16, 0x00	; 0
    72de:	10 e0       	ldi	r17, 0x00	; 0
    72e0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divdi3>
    72e4:	a2 2e       	mov	r10, r18
    72e6:	b3 2e       	mov	r11, r19
    72e8:	c4 2e       	mov	r12, r20
    72ea:	d5 2e       	mov	r13, r21
    72ec:	e6 2e       	mov	r14, r22
    72ee:	f7 2e       	mov	r15, r23
    72f0:	08 2f       	mov	r16, r24
    72f2:	19 2f       	mov	r17, r25
    72f4:	a9 82       	std	Y+1, r10	; 0x01
    72f6:	ba 82       	std	Y+2, r11	; 0x02
    72f8:	cb 82       	std	Y+3, r12	; 0x03
    72fa:	dc 82       	std	Y+4, r13	; 0x04
    72fc:	ed 82       	std	Y+5, r14	; 0x05
    72fe:	fe 82       	std	Y+6, r15	; 0x06
    7300:	0f 83       	std	Y+7, r16	; 0x07
    7302:	18 87       	std	Y+8, r17	; 0x08
		Local_enuErrorStates = LCD_enuSendData('0' + (Copy_uint32Data / Local_uint8Dividor));
    7304:	2b 85       	ldd	r18, Y+11	; 0x0b
    7306:	3c 85       	ldd	r19, Y+12	; 0x0c
    7308:	4d 85       	ldd	r20, Y+13	; 0x0d
    730a:	5e 85       	ldd	r21, Y+14	; 0x0e
    730c:	6f 85       	ldd	r22, Y+15	; 0x0f
    730e:	78 89       	ldd	r23, Y+16	; 0x10
    7310:	89 89       	ldd	r24, Y+17	; 0x11
    7312:	9a 89       	ldd	r25, Y+18	; 0x12
    7314:	a9 80       	ldd	r10, Y+1	; 0x01
    7316:	ba 80       	ldd	r11, Y+2	; 0x02
    7318:	cb 80       	ldd	r12, Y+3	; 0x03
    731a:	dc 80       	ldd	r13, Y+4	; 0x04
    731c:	ed 80       	ldd	r14, Y+5	; 0x05
    731e:	fe 80       	ldd	r15, Y+6	; 0x06
    7320:	0f 81       	ldd	r16, Y+7	; 0x07
    7322:	18 85       	ldd	r17, Y+8	; 0x08
    7324:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divdi3>
    7328:	a2 2e       	mov	r10, r18
    732a:	b3 2e       	mov	r11, r19
    732c:	c4 2e       	mov	r12, r20
    732e:	d5 2e       	mov	r13, r21
    7330:	e6 2e       	mov	r14, r22
    7332:	f7 2e       	mov	r15, r23
    7334:	08 2f       	mov	r16, r24
    7336:	19 2f       	mov	r17, r25
    7338:	2a 2d       	mov	r18, r10
    733a:	3b 2d       	mov	r19, r11
    733c:	4c 2d       	mov	r20, r12
    733e:	5d 2d       	mov	r21, r13
    7340:	6e 2d       	mov	r22, r14
    7342:	7f 2d       	mov	r23, r15
    7344:	80 2f       	mov	r24, r16
    7346:	91 2f       	mov	r25, r17
    7348:	82 2f       	mov	r24, r18
    734a:	80 5d       	subi	r24, 0xD0	; 208
    734c:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <LCD_enuSendData>
    7350:	8a 87       	std	Y+10, r24	; 0x0a
		Copy_uint32Data -= ((Copy_uint32Data / Local_uint8Dividor) * Local_uint8Dividor);
    7352:	ab 84       	ldd	r10, Y+11	; 0x0b
    7354:	bc 84       	ldd	r11, Y+12	; 0x0c
    7356:	cd 84       	ldd	r12, Y+13	; 0x0d
    7358:	de 84       	ldd	r13, Y+14	; 0x0e
    735a:	ef 84       	ldd	r14, Y+15	; 0x0f
    735c:	f8 88       	ldd	r15, Y+16	; 0x10
    735e:	09 89       	ldd	r16, Y+17	; 0x11
    7360:	1a 89       	ldd	r17, Y+18	; 0x12
    7362:	2a 2d       	mov	r18, r10
    7364:	3b 2d       	mov	r19, r11
    7366:	4c 2d       	mov	r20, r12
    7368:	5d 2d       	mov	r21, r13
    736a:	6e 2d       	mov	r22, r14
    736c:	7f 2d       	mov	r23, r15
    736e:	80 2f       	mov	r24, r16
    7370:	91 2f       	mov	r25, r17
    7372:	a9 80       	ldd	r10, Y+1	; 0x01
    7374:	ba 80       	ldd	r11, Y+2	; 0x02
    7376:	cb 80       	ldd	r12, Y+3	; 0x03
    7378:	dc 80       	ldd	r13, Y+4	; 0x04
    737a:	ed 80       	ldd	r14, Y+5	; 0x05
    737c:	fe 80       	ldd	r15, Y+6	; 0x06
    737e:	0f 81       	ldd	r16, Y+7	; 0x07
    7380:	18 85       	ldd	r17, Y+8	; 0x08
    7382:	0e 94 14 0b 	call	0x1628	; 0x1628 <__moddi3>
    7386:	a2 2e       	mov	r10, r18
    7388:	b3 2e       	mov	r11, r19
    738a:	c4 2e       	mov	r12, r20
    738c:	d5 2e       	mov	r13, r21
    738e:	e6 2e       	mov	r14, r22
    7390:	f7 2e       	mov	r15, r23
    7392:	08 2f       	mov	r16, r24
    7394:	19 2f       	mov	r17, r25
    7396:	ab 86       	std	Y+11, r10	; 0x0b
    7398:	bc 86       	std	Y+12, r11	; 0x0c
    739a:	cd 86       	std	Y+13, r12	; 0x0d
    739c:	de 86       	std	Y+14, r13	; 0x0e
    739e:	ef 86       	std	Y+15, r14	; 0x0f
    73a0:	f8 8a       	std	Y+16, r15	; 0x10
    73a2:	09 8b       	std	Y+17, r16	; 0x11
    73a4:	1a 8b       	std	Y+18, r17	; 0x12
	while(Copy_uint32Data / Local_uint8Dividor){
		Local_uint8Dividor *= 10;
		++Local_uint8Digits;
	}

	while(Local_uint8Digits--){
    73a6:	89 85       	ldd	r24, Y+9	; 0x09
    73a8:	ab 96       	adiw	r28, 0x2b	; 43
    73aa:	8f af       	std	Y+63, r24	; 0x3f
    73ac:	ab 97       	sbiw	r28, 0x2b	; 43
    73ae:	ab 96       	adiw	r28, 0x2b	; 43
    73b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    73b2:	ab 97       	sbiw	r28, 0x2b	; 43
    73b4:	99 23       	and	r25, r25
    73b6:	21 f0       	breq	.+8      	; 0x73c0 <LCD_enuDisplayNumber+0x840>
    73b8:	81 e0       	ldi	r24, 0x01	; 1
    73ba:	ab 96       	adiw	r28, 0x2b	; 43
    73bc:	8f af       	std	Y+63, r24	; 0x3f
    73be:	ab 97       	sbiw	r28, 0x2b	; 43
    73c0:	ab 96       	adiw	r28, 0x2b	; 43
    73c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    73c4:	ab 97       	sbiw	r28, 0x2b	; 43
    73c6:	99 85       	ldd	r25, Y+9	; 0x09
    73c8:	91 50       	subi	r25, 0x01	; 1
    73ca:	99 87       	std	Y+9, r25	; 0x09
    73cc:	88 23       	and	r24, r24
    73ce:	09 f0       	breq	.+2      	; 0x73d2 <LCD_enuDisplayNumber+0x852>
    73d0:	6c cf       	rjmp	.-296    	; 0x72aa <LCD_enuDisplayNumber+0x72a>
		Local_uint8Dividor /= 10;
		Local_enuErrorStates = LCD_enuSendData('0' + (Copy_uint32Data / Local_uint8Dividor));
		Copy_uint32Data -= ((Copy_uint32Data / Local_uint8Dividor) * Local_uint8Dividor);
	}

	return Local_enuErrorStates;
    73d2:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    73d4:	c6 59       	subi	r28, 0x96	; 150
    73d6:	df 4f       	sbci	r29, 0xFF	; 255
    73d8:	0f b6       	in	r0, 0x3f	; 63
    73da:	f8 94       	cli
    73dc:	de bf       	out	0x3e, r29	; 62
    73de:	0f be       	out	0x3f, r0	; 63
    73e0:	cd bf       	out	0x3d, r28	; 61
    73e2:	cf 91       	pop	r28
    73e4:	df 91       	pop	r29
    73e6:	1f 91       	pop	r17
    73e8:	0f 91       	pop	r16
    73ea:	ff 90       	pop	r15
    73ec:	ef 90       	pop	r14
    73ee:	df 90       	pop	r13
    73f0:	cf 90       	pop	r12
    73f2:	bf 90       	pop	r11
    73f4:	af 90       	pop	r10
    73f6:	08 95       	ret

000073f8 <main>:
#define MCU_NUMBER	0

uint_16 String_Compare(const uint_8* Data, const uint_8* String);
uint_8 Get_Length(const uint_8* Data);

int main(void){
    73f8:	df 93       	push	r29
    73fa:	cf 93       	push	r28
    73fc:	cd b7       	in	r28, 0x3d	; 61
    73fe:	de b7       	in	r29, 0x3e	; 62
    7400:	29 97       	sbiw	r28, 0x09	; 9
    7402:	0f b6       	in	r0, 0x3f	; 63
    7404:	f8 94       	cli
    7406:	de bf       	out	0x3e, r29	; 62
    7408:	0f be       	out	0x3f, r0	; 63
    740a:	cd bf       	out	0x3d, r28	; 61
	UART_enuInit();
    740c:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_enuInit>
	LCD_enuInit();
    7410:	0e 94 a9 2b 	call	0x5752	; 0x5752 <LCD_enuInit>
	uint_8 *Data = "TOGGLE LED", *Address = "0x90ba8ab53";
    7414:	8d e7       	ldi	r24, 0x7D	; 125
    7416:	90 e0       	ldi	r25, 0x00	; 0
    7418:	99 87       	std	Y+9, r25	; 0x09
    741a:	88 87       	std	Y+8, r24	; 0x08
    741c:	88 e8       	ldi	r24, 0x88	; 136
    741e:	90 e0       	ldi	r25, 0x00	; 0
    7420:	9f 83       	std	Y+7, r25	; 0x07
    7422:	8e 83       	std	Y+6, r24	; 0x06
	uint_8 *Data_slave = "\0", *Address_slave = "\0";
    7424:	84 e9       	ldi	r24, 0x94	; 148
    7426:	90 e0       	ldi	r25, 0x00	; 0
    7428:	9d 83       	std	Y+5, r25	; 0x05
    742a:	8c 83       	std	Y+4, r24	; 0x04
    742c:	84 e9       	ldi	r24, 0x94	; 148
    742e:	90 e0       	ldi	r25, 0x00	; 0
    7430:	9b 83       	std	Y+3, r25	; 0x03
    7432:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Lcd_line = 0x01;
    7434:	81 e0       	ldi	r24, 0x01	; 1
    7436:	89 83       	std	Y+1, r24	; 0x01
	//UART_enuEnableMultiProcessorMode();
	UART_enuResetCharacterSize(7);
    7438:	87 e0       	ldi	r24, 0x07	; 7
    743a:	0e 94 8f 1c 	call	0x391e	; 0x391e <UART_enuResetCharacterSize>
	while(1){
#if MCU_NUMBER == 0
		UART_enuSendMCUAddress(Address);
    743e:	8e 81       	ldd	r24, Y+6	; 0x06
    7440:	9f 81       	ldd	r25, Y+7	; 0x07
    7442:	0e 94 c8 1c 	call	0x3990	; 0x3990 <UART_enuSendMCUAddress>
		UART_enuSendDataToMCU(Data);
    7446:	88 85       	ldd	r24, Y+8	; 0x08
    7448:	99 85       	ldd	r25, Y+9	; 0x09
    744a:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <UART_enuSendDataToMCU>
    744e:	f7 cf       	rjmp	.-18     	; 0x743e <main+0x46>

00007450 <String_Compare>:
	}

	return 0;
}

uint_16 String_Compare(const uint_8* Data, const uint_8* String){
    7450:	df 93       	push	r29
    7452:	cf 93       	push	r28
    7454:	cd b7       	in	r28, 0x3d	; 61
    7456:	de b7       	in	r29, 0x3e	; 62
    7458:	27 97       	sbiw	r28, 0x07	; 7
    745a:	0f b6       	in	r0, 0x3f	; 63
    745c:	f8 94       	cli
    745e:	de bf       	out	0x3e, r29	; 62
    7460:	0f be       	out	0x3f, r0	; 63
    7462:	cd bf       	out	0x3d, r28	; 61
    7464:	9b 83       	std	Y+3, r25	; 0x03
    7466:	8a 83       	std	Y+2, r24	; 0x02
    7468:	7d 83       	std	Y+5, r23	; 0x05
    746a:	6c 83       	std	Y+4, r22	; 0x04
	uint_8 Local_uint8Iterator = 0;
    746c:	19 82       	std	Y+1, r1	; 0x01
    746e:	1a c0       	rjmp	.+52     	; 0x74a4 <String_Compare+0x54>
	while(String[Local_uint8Iterator] != '\0'){
		if(Data[Local_uint8Iterator] != String[Local_uint8Iterator]){
    7470:	89 81       	ldd	r24, Y+1	; 0x01
    7472:	28 2f       	mov	r18, r24
    7474:	30 e0       	ldi	r19, 0x00	; 0
    7476:	8a 81       	ldd	r24, Y+2	; 0x02
    7478:	9b 81       	ldd	r25, Y+3	; 0x03
    747a:	fc 01       	movw	r30, r24
    747c:	e2 0f       	add	r30, r18
    747e:	f3 1f       	adc	r31, r19
    7480:	40 81       	ld	r20, Z
    7482:	89 81       	ldd	r24, Y+1	; 0x01
    7484:	28 2f       	mov	r18, r24
    7486:	30 e0       	ldi	r19, 0x00	; 0
    7488:	8c 81       	ldd	r24, Y+4	; 0x04
    748a:	9d 81       	ldd	r25, Y+5	; 0x05
    748c:	fc 01       	movw	r30, r24
    748e:	e2 0f       	add	r30, r18
    7490:	f3 1f       	adc	r31, r19
    7492:	80 81       	ld	r24, Z
    7494:	48 17       	cp	r20, r24
    7496:	19 f0       	breq	.+6      	; 0x749e <String_Compare+0x4e>
			return 0;
    7498:	1f 82       	std	Y+7, r1	; 0x07
    749a:	1e 82       	std	Y+6, r1	; 0x06
    749c:	29 c0       	rjmp	.+82     	; 0x74f0 <String_Compare+0xa0>
		}
		Local_uint8Iterator++;
    749e:	89 81       	ldd	r24, Y+1	; 0x01
    74a0:	8f 5f       	subi	r24, 0xFF	; 255
    74a2:	89 83       	std	Y+1, r24	; 0x01
	return 0;
}

uint_16 String_Compare(const uint_8* Data, const uint_8* String){
	uint_8 Local_uint8Iterator = 0;
	while(String[Local_uint8Iterator] != '\0'){
    74a4:	89 81       	ldd	r24, Y+1	; 0x01
    74a6:	28 2f       	mov	r18, r24
    74a8:	30 e0       	ldi	r19, 0x00	; 0
    74aa:	8c 81       	ldd	r24, Y+4	; 0x04
    74ac:	9d 81       	ldd	r25, Y+5	; 0x05
    74ae:	fc 01       	movw	r30, r24
    74b0:	e2 0f       	add	r30, r18
    74b2:	f3 1f       	adc	r31, r19
    74b4:	80 81       	ld	r24, Z
    74b6:	88 23       	and	r24, r24
    74b8:	d9 f6       	brne	.-74     	; 0x7470 <String_Compare+0x20>
		if(Data[Local_uint8Iterator] != String[Local_uint8Iterator]){
			return 0;
		}
		Local_uint8Iterator++;
	}
	if(Data[Local_uint8Iterator] != String[Local_uint8Iterator]){
    74ba:	89 81       	ldd	r24, Y+1	; 0x01
    74bc:	28 2f       	mov	r18, r24
    74be:	30 e0       	ldi	r19, 0x00	; 0
    74c0:	8a 81       	ldd	r24, Y+2	; 0x02
    74c2:	9b 81       	ldd	r25, Y+3	; 0x03
    74c4:	fc 01       	movw	r30, r24
    74c6:	e2 0f       	add	r30, r18
    74c8:	f3 1f       	adc	r31, r19
    74ca:	40 81       	ld	r20, Z
    74cc:	89 81       	ldd	r24, Y+1	; 0x01
    74ce:	28 2f       	mov	r18, r24
    74d0:	30 e0       	ldi	r19, 0x00	; 0
    74d2:	8c 81       	ldd	r24, Y+4	; 0x04
    74d4:	9d 81       	ldd	r25, Y+5	; 0x05
    74d6:	fc 01       	movw	r30, r24
    74d8:	e2 0f       	add	r30, r18
    74da:	f3 1f       	adc	r31, r19
    74dc:	80 81       	ld	r24, Z
    74de:	48 17       	cp	r20, r24
    74e0:	19 f0       	breq	.+6      	; 0x74e8 <String_Compare+0x98>
		return 0;
    74e2:	1f 82       	std	Y+7, r1	; 0x07
    74e4:	1e 82       	std	Y+6, r1	; 0x06
    74e6:	04 c0       	rjmp	.+8      	; 0x74f0 <String_Compare+0xa0>
	}
	return 1;
    74e8:	81 e0       	ldi	r24, 0x01	; 1
    74ea:	90 e0       	ldi	r25, 0x00	; 0
    74ec:	9f 83       	std	Y+7, r25	; 0x07
    74ee:	8e 83       	std	Y+6, r24	; 0x06
    74f0:	8e 81       	ldd	r24, Y+6	; 0x06
    74f2:	9f 81       	ldd	r25, Y+7	; 0x07
}
    74f4:	27 96       	adiw	r28, 0x07	; 7
    74f6:	0f b6       	in	r0, 0x3f	; 63
    74f8:	f8 94       	cli
    74fa:	de bf       	out	0x3e, r29	; 62
    74fc:	0f be       	out	0x3f, r0	; 63
    74fe:	cd bf       	out	0x3d, r28	; 61
    7500:	cf 91       	pop	r28
    7502:	df 91       	pop	r29
    7504:	08 95       	ret

00007506 <Get_Length>:

uint_8 Get_Length(const uint_8* Data){
    7506:	df 93       	push	r29
    7508:	cf 93       	push	r28
    750a:	00 d0       	rcall	.+0      	; 0x750c <Get_Length+0x6>
    750c:	0f 92       	push	r0
    750e:	cd b7       	in	r28, 0x3d	; 61
    7510:	de b7       	in	r29, 0x3e	; 62
    7512:	9b 83       	std	Y+3, r25	; 0x03
    7514:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Local_uint8Iterator = 0;
    7516:	19 82       	std	Y+1, r1	; 0x01
    7518:	03 c0       	rjmp	.+6      	; 0x7520 <Get_Length+0x1a>
	while(Data[Local_uint8Iterator] != '\0'){
		Local_uint8Iterator++;
    751a:	89 81       	ldd	r24, Y+1	; 0x01
    751c:	8f 5f       	subi	r24, 0xFF	; 255
    751e:	89 83       	std	Y+1, r24	; 0x01
	return 1;
}

uint_8 Get_Length(const uint_8* Data){
	uint_8 Local_uint8Iterator = 0;
	while(Data[Local_uint8Iterator] != '\0'){
    7520:	89 81       	ldd	r24, Y+1	; 0x01
    7522:	28 2f       	mov	r18, r24
    7524:	30 e0       	ldi	r19, 0x00	; 0
    7526:	8a 81       	ldd	r24, Y+2	; 0x02
    7528:	9b 81       	ldd	r25, Y+3	; 0x03
    752a:	fc 01       	movw	r30, r24
    752c:	e2 0f       	add	r30, r18
    752e:	f3 1f       	adc	r31, r19
    7530:	80 81       	ld	r24, Z
    7532:	88 23       	and	r24, r24
    7534:	91 f7       	brne	.-28     	; 0x751a <Get_Length+0x14>
		Local_uint8Iterator++;
	}
	return Local_uint8Iterator;
    7536:	89 81       	ldd	r24, Y+1	; 0x01
}
    7538:	0f 90       	pop	r0
    753a:	0f 90       	pop	r0
    753c:	0f 90       	pop	r0
    753e:	cf 91       	pop	r28
    7540:	df 91       	pop	r29
    7542:	08 95       	ret

00007544 <__udivmodhi4>:
    7544:	aa 1b       	sub	r26, r26
    7546:	bb 1b       	sub	r27, r27
    7548:	51 e1       	ldi	r21, 0x11	; 17
    754a:	07 c0       	rjmp	.+14     	; 0x755a <__udivmodhi4_ep>

0000754c <__udivmodhi4_loop>:
    754c:	aa 1f       	adc	r26, r26
    754e:	bb 1f       	adc	r27, r27
    7550:	a6 17       	cp	r26, r22
    7552:	b7 07       	cpc	r27, r23
    7554:	10 f0       	brcs	.+4      	; 0x755a <__udivmodhi4_ep>
    7556:	a6 1b       	sub	r26, r22
    7558:	b7 0b       	sbc	r27, r23

0000755a <__udivmodhi4_ep>:
    755a:	88 1f       	adc	r24, r24
    755c:	99 1f       	adc	r25, r25
    755e:	5a 95       	dec	r21
    7560:	a9 f7       	brne	.-22     	; 0x754c <__udivmodhi4_loop>
    7562:	80 95       	com	r24
    7564:	90 95       	com	r25
    7566:	bc 01       	movw	r22, r24
    7568:	cd 01       	movw	r24, r26
    756a:	08 95       	ret

0000756c <__udivmodsi4>:
    756c:	a1 e2       	ldi	r26, 0x21	; 33
    756e:	1a 2e       	mov	r1, r26
    7570:	aa 1b       	sub	r26, r26
    7572:	bb 1b       	sub	r27, r27
    7574:	fd 01       	movw	r30, r26
    7576:	0d c0       	rjmp	.+26     	; 0x7592 <__udivmodsi4_ep>

00007578 <__udivmodsi4_loop>:
    7578:	aa 1f       	adc	r26, r26
    757a:	bb 1f       	adc	r27, r27
    757c:	ee 1f       	adc	r30, r30
    757e:	ff 1f       	adc	r31, r31
    7580:	a2 17       	cp	r26, r18
    7582:	b3 07       	cpc	r27, r19
    7584:	e4 07       	cpc	r30, r20
    7586:	f5 07       	cpc	r31, r21
    7588:	20 f0       	brcs	.+8      	; 0x7592 <__udivmodsi4_ep>
    758a:	a2 1b       	sub	r26, r18
    758c:	b3 0b       	sbc	r27, r19
    758e:	e4 0b       	sbc	r30, r20
    7590:	f5 0b       	sbc	r31, r21

00007592 <__udivmodsi4_ep>:
    7592:	66 1f       	adc	r22, r22
    7594:	77 1f       	adc	r23, r23
    7596:	88 1f       	adc	r24, r24
    7598:	99 1f       	adc	r25, r25
    759a:	1a 94       	dec	r1
    759c:	69 f7       	brne	.-38     	; 0x7578 <__udivmodsi4_loop>
    759e:	60 95       	com	r22
    75a0:	70 95       	com	r23
    75a2:	80 95       	com	r24
    75a4:	90 95       	com	r25
    75a6:	9b 01       	movw	r18, r22
    75a8:	ac 01       	movw	r20, r24
    75aa:	bd 01       	movw	r22, r26
    75ac:	cf 01       	movw	r24, r30
    75ae:	08 95       	ret

000075b0 <__mulsi3>:
    75b0:	62 9f       	mul	r22, r18
    75b2:	d0 01       	movw	r26, r0
    75b4:	73 9f       	mul	r23, r19
    75b6:	f0 01       	movw	r30, r0
    75b8:	82 9f       	mul	r24, r18
    75ba:	e0 0d       	add	r30, r0
    75bc:	f1 1d       	adc	r31, r1
    75be:	64 9f       	mul	r22, r20
    75c0:	e0 0d       	add	r30, r0
    75c2:	f1 1d       	adc	r31, r1
    75c4:	92 9f       	mul	r25, r18
    75c6:	f0 0d       	add	r31, r0
    75c8:	83 9f       	mul	r24, r19
    75ca:	f0 0d       	add	r31, r0
    75cc:	74 9f       	mul	r23, r20
    75ce:	f0 0d       	add	r31, r0
    75d0:	65 9f       	mul	r22, r21
    75d2:	f0 0d       	add	r31, r0
    75d4:	99 27       	eor	r25, r25
    75d6:	72 9f       	mul	r23, r18
    75d8:	b0 0d       	add	r27, r0
    75da:	e1 1d       	adc	r30, r1
    75dc:	f9 1f       	adc	r31, r25
    75de:	63 9f       	mul	r22, r19
    75e0:	b0 0d       	add	r27, r0
    75e2:	e1 1d       	adc	r30, r1
    75e4:	f9 1f       	adc	r31, r25
    75e6:	bd 01       	movw	r22, r26
    75e8:	cf 01       	movw	r24, r30
    75ea:	11 24       	eor	r1, r1
    75ec:	08 95       	ret

000075ee <__prologue_saves__>:
    75ee:	2f 92       	push	r2
    75f0:	3f 92       	push	r3
    75f2:	4f 92       	push	r4
    75f4:	5f 92       	push	r5
    75f6:	6f 92       	push	r6
    75f8:	7f 92       	push	r7
    75fa:	8f 92       	push	r8
    75fc:	9f 92       	push	r9
    75fe:	af 92       	push	r10
    7600:	bf 92       	push	r11
    7602:	cf 92       	push	r12
    7604:	df 92       	push	r13
    7606:	ef 92       	push	r14
    7608:	ff 92       	push	r15
    760a:	0f 93       	push	r16
    760c:	1f 93       	push	r17
    760e:	cf 93       	push	r28
    7610:	df 93       	push	r29
    7612:	cd b7       	in	r28, 0x3d	; 61
    7614:	de b7       	in	r29, 0x3e	; 62
    7616:	ca 1b       	sub	r28, r26
    7618:	db 0b       	sbc	r29, r27
    761a:	0f b6       	in	r0, 0x3f	; 63
    761c:	f8 94       	cli
    761e:	de bf       	out	0x3e, r29	; 62
    7620:	0f be       	out	0x3f, r0	; 63
    7622:	cd bf       	out	0x3d, r28	; 61
    7624:	09 94       	ijmp

00007626 <__epilogue_restores__>:
    7626:	2a 88       	ldd	r2, Y+18	; 0x12
    7628:	39 88       	ldd	r3, Y+17	; 0x11
    762a:	48 88       	ldd	r4, Y+16	; 0x10
    762c:	5f 84       	ldd	r5, Y+15	; 0x0f
    762e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7630:	7d 84       	ldd	r7, Y+13	; 0x0d
    7632:	8c 84       	ldd	r8, Y+12	; 0x0c
    7634:	9b 84       	ldd	r9, Y+11	; 0x0b
    7636:	aa 84       	ldd	r10, Y+10	; 0x0a
    7638:	b9 84       	ldd	r11, Y+9	; 0x09
    763a:	c8 84       	ldd	r12, Y+8	; 0x08
    763c:	df 80       	ldd	r13, Y+7	; 0x07
    763e:	ee 80       	ldd	r14, Y+6	; 0x06
    7640:	fd 80       	ldd	r15, Y+5	; 0x05
    7642:	0c 81       	ldd	r16, Y+4	; 0x04
    7644:	1b 81       	ldd	r17, Y+3	; 0x03
    7646:	aa 81       	ldd	r26, Y+2	; 0x02
    7648:	b9 81       	ldd	r27, Y+1	; 0x01
    764a:	ce 0f       	add	r28, r30
    764c:	d1 1d       	adc	r29, r1
    764e:	0f b6       	in	r0, 0x3f	; 63
    7650:	f8 94       	cli
    7652:	de bf       	out	0x3e, r29	; 62
    7654:	0f be       	out	0x3f, r0	; 63
    7656:	cd bf       	out	0x3d, r28	; 61
    7658:	ed 01       	movw	r28, r26
    765a:	08 95       	ret

0000765c <_exit>:
    765c:	f8 94       	cli

0000765e <__stop_program>:
    765e:	ff cf       	rjmp	.-2      	; 0x765e <__stop_program>
