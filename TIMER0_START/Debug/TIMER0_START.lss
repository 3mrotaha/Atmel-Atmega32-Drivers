
TIMER0_START.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000024c6  0000255a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800168  00800168  00002662  2**0
                  ALLOC
  3 .stab         00001d10  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f2e  00000000  00000000  00004374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000052a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00005462  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00005672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00007cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000a488  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000a668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000a966  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b310  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_10>
      2c:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 37       	cpi	r26, 0x76	; 118
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ec       	ldi	r30, 0xC6	; 198
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b3 10 	call	0x2166	; 0x2166 <main>
      8a:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 46 12 	jmp	0x248c	; 0x248c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 46 12 	jmp	0x248c	; 0x248c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <TIMER0_enuInit>:
static uint_8 TIMER0_uint32Preload;

static void (*TIMER0_ApfuncCalledFuncs[2])(void*) = {NULL, NULL};
static void* TIMER0_ApvoidParameters[2] = {NULL, NULL};

ES_t TIMER0_enuInit(void){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 &= ~(BIT_MASK3 << TIMER0_CLOCKSELECT_BITS);
     e9c:	a3 e5       	ldi	r26, 0x53	; 83
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e3 e5       	ldi	r30, 0x53	; 83
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 7f       	andi	r24, 0xF8	; 248
     ea8:	8c 93       	st	X, r24
	TCCR0 |= (SELECT_CLOCK_SOURCE << TIMER0_CLOCKSELECT_BITS);
     eaa:	a3 e5       	ldi	r26, 0x53	; 83
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e3 e5       	ldi	r30, 0x53	; 83
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	83 60       	ori	r24, 0x03	; 3
     eb6:	8c 93       	st	X, r24
	TCCR0 &= ~(BIT_MASK2 << TIMER0_COM_BITS);
     eb8:	a3 e5       	ldi	r26, 0x53	; 83
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e3 e5       	ldi	r30, 0x53	; 83
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7c       	andi	r24, 0xCF	; 207
     ec4:	8c 93       	st	X, r24
	TCCR0 |= (SELECT_COMPARE_OUTPUT_MODE << TIMER0_COM_BITS);
     ec6:	a3 e5       	ldi	r26, 0x53	; 83
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e3 e5       	ldi	r30, 0x53	; 83
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 63       	ori	r24, 0x30	; 48
     ed2:	8c 93       	st	X, r24
	TIMSK &= ~(BIT_MASK1 << TIMER0_TOIE0_BIT);
     ed4:	a9 e5       	ldi	r26, 0x59	; 89
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e9 e5       	ldi	r30, 0x59	; 89
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	8c 93       	st	X, r24
	TIMSK &= ~(BIT_MASK1 << TIMER0_OCIE0_BIT);
     ee2:	a9 e5       	ldi	r26, 0x59	; 89
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e9 e5       	ldi	r30, 0x59	; 89
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8d 7f       	andi	r24, 0xFD	; 253
     eee:	8c 93       	st	X, r24
	TCCR0 &= ~(BIT_MASK1 << TIMER0_WGM00_BIT);
	TCCR0 &= ~(BIT_MASK1 << TIMER0_WGM01_BIT);

	Local_enuErrorStates = ES_OK;
#elif SELECT_WAVE_GENERATION_MODE == TIMER0_PHASE_CORRECT_PWM_MODE
	TCCR0 &= ~(BIT_MASK1 << TIMER0_WGM00_BIT);
     ef0:	a3 e5       	ldi	r26, 0x53	; 83
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e3 e5       	ldi	r30, 0x53	; 83
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 7b       	andi	r24, 0xBF	; 191
     efc:	8c 93       	st	X, r24
	TCCR0 &= ~(BIT_MASK1 << TIMER0_WGM01_BIT);
     efe:	a3 e5       	ldi	r26, 0x53	; 83
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e3 e5       	ldi	r30, 0x53	; 83
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	87 7f       	andi	r24, 0xF7	; 247
     f0a:	8c 93       	st	X, r24
	TCCR0 |= (BIT_MASK1 << TIMER0_WGM00_BIT);
     f0c:	a3 e5       	ldi	r26, 0x53	; 83
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e3 e5       	ldi	r30, 0x53	; 83
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 64       	ori	r24, 0x40	; 64
     f18:	8c 93       	st	X, r24
	Local_enuErrorStates = ES_OK;
     f1a:	19 82       	std	Y+1, r1	; 0x01
	Local_enuErrorStates = ES_OK;
#else
#error "Error! you didn't select the wave generation mode"
#endif

	return Local_enuErrorStates;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <TIMER0_enuSetSyncDelay>:

ES_t TIMER0_enuSetSyncDelay(uint_32 Copy_uint32TimeMS){
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	63 97       	sbiw	r28, 0x13	; 19
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	99 8b       	std	Y+17, r25	; 0x11
     f40:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorStates = ES_NOK;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8f 87       	std	Y+15, r24	; 0x0f

	f32 Local_f32OVFTime = 256 * ((f32)PRESCALED_CLOCK_SOURCE / SELECT_TIMER_FREQ);
     f46:	8f e6       	ldi	r24, 0x6F	; 111
     f48:	92 e1       	ldi	r25, 0x12	; 18
     f4a:	a3 e8       	ldi	r26, 0x83	; 131
     f4c:	b1 e4       	ldi	r27, 0x41	; 65
     f4e:	8b 87       	std	Y+11, r24	; 0x0b
     f50:	9c 87       	std	Y+12, r25	; 0x0c
     f52:	ad 87       	std	Y+13, r26	; 0x0d
     f54:	be 87       	std	Y+14, r27	; 0x0e
	f32 Local_f32NumOVF = Copy_uint32TimeMS/Local_f32OVFTime;
     f56:	88 89       	ldd	r24, Y+16	; 0x10
     f58:	99 89       	ldd	r25, Y+17	; 0x11
     f5a:	cc 01       	movw	r24, r24
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	2b 85       	ldd	r18, Y+11	; 0x0b
     f72:	3c 85       	ldd	r19, Y+12	; 0x0c
     f74:	4d 85       	ldd	r20, Y+13	; 0x0d
     f76:	5e 85       	ldd	r21, Y+14	; 0x0e
     f78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	8f 83       	std	Y+7, r24	; 0x07
     f82:	98 87       	std	Y+8, r25	; 0x08
     f84:	a9 87       	std	Y+9, r26	; 0x09
     f86:	ba 87       	std	Y+10, r27	; 0x0a
	uint_32 Local_uint32NumOVF_int = (uint_32)Local_f32NumOVF + 1;
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05

	if((Local_f32NumOVF - (uint_32)Local_f32NumOVF) != 0.0){
     f9e:	6f 81       	ldd	r22, Y+7	; 0x07
     fa0:	78 85       	ldd	r23, Y+8	; 0x08
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	cc 01       	movw	r24, r24
     fb0:	a0 e0       	ldi	r26, 0x00	; 0
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
     fbc:	9b 01       	movw	r18, r22
     fbe:	ac 01       	movw	r20, r24
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
     fe0:	88 23       	and	r24, r24
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <TIMER0_enuSetSyncDelay+0xc0>
     fe4:	a2 c0       	rjmp	.+324    	; 0x112a <TIMER0_enuSetSyncDelay+0x204>
		f32 Local_uint8Preload = 256.0 - (256.0 * (Local_f32NumOVF - (uint_32)Local_f32NumOVF));
     fe6:	6f 81       	ldd	r22, Y+7	; 0x07
     fe8:	78 85       	ldd	r23, Y+8	; 0x08
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	cc 01       	movw	r24, r24
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	6f 81       	ldd	r22, Y+7	; 0x07
    100a:	78 85       	ldd	r23, Y+8	; 0x08
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	53 ec       	ldi	r21, 0xC3	; 195
    1024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e8       	ldi	r20, 0x80	; 128
    1036:	53 e4       	ldi	r21, 0x43	; 67
    1038:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	ab 83       	std	Y+3, r26	; 0x03
    1046:	bc 83       	std	Y+4, r27	; 0x04
		if((Local_uint8Preload - (uint_32)Local_uint8Preload) >= 0.5 && (Local_uint8Preload - (uint_32)Local_uint8Preload) < 1){
    1048:	69 81       	ldd	r22, Y+1	; 0x01
    104a:	7a 81       	ldd	r23, Y+2	; 0x02
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	cc 01       	movw	r24, r24
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	69 81       	ldd	r22, Y+1	; 0x01
    106c:	7a 81       	ldd	r23, Y+2	; 0x02
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	1b 8a       	std	Y+19, r1	; 0x13
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	5f e3       	ldi	r21, 0x3F	; 63
    1088:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    108c:	88 23       	and	r24, r24
    108e:	14 f0       	brlt	.+4      	; 0x1094 <TIMER0_enuSetSyncDelay+0x16e>
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	8b 8b       	std	Y+19, r24	; 0x13
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	9b 89       	ldd	r25, Y+19	; 0x13
    1098:	89 27       	eor	r24, r25
    109a:	88 23       	and	r24, r24
    109c:	c9 f5       	brne	.+114    	; 0x1110 <TIMER0_enuSetSyncDelay+0x1ea>
    109e:	69 81       	ldd	r22, Y+1	; 0x01
    10a0:	7a 81       	ldd	r23, Y+2	; 0x02
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	cc 01       	movw	r24, r24
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	69 81       	ldd	r22, Y+1	; 0x01
    10c2:	7a 81       	ldd	r23, Y+2	; 0x02
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	1a 8a       	std	Y+18, r1	; 0x12
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	14 f4       	brge	.+4      	; 0x10ea <TIMER0_enuSetSyncDelay+0x1c4>
    10e6:	e1 e0       	ldi	r30, 0x01	; 1
    10e8:	ea 8b       	std	Y+18, r30	; 0x12
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	fa 89       	ldd	r31, Y+18	; 0x12
    10ee:	8f 27       	eor	r24, r31
    10f0:	88 23       	and	r24, r24
    10f2:	71 f4       	brne	.+28     	; 0x1110 <TIMER0_enuSetSyncDelay+0x1ea>
			TCNT0 = (uint_8)Local_uint8Preload + 1;
    10f4:	02 e5       	ldi	r16, 0x52	; 82
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    10f8:	69 81       	ldd	r22, Y+1	; 0x01
    10fa:	7a 81       	ldd	r23, Y+2	; 0x02
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	f8 01       	movw	r30, r16
    110c:	80 83       	st	Z, r24
    110e:	32 c0       	rjmp	.+100    	; 0x1174 <TIMER0_enuSetSyncDelay+0x24e>
		}
		else{
			TCNT0 = (uint_8)Local_uint8Preload;
    1110:	02 e5       	ldi	r16, 0x52	; 82
    1112:	10 e0       	ldi	r17, 0x00	; 0
    1114:	69 81       	ldd	r22, Y+1	; 0x01
    1116:	7a 81       	ldd	r23, Y+2	; 0x02
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	f8 01       	movw	r30, r16
    1126:	80 83       	st	Z, r24
    1128:	25 c0       	rjmp	.+74     	; 0x1174 <TIMER0_enuSetSyncDelay+0x24e>
		}
	}
	else{
		TIMER0_uint32NumOVF = (uint_32)Local_f32NumOVF;
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	90 93 73 01 	sts	0x0173, r25
    113e:	80 93 72 01 	sts	0x0172, r24
		TCNT0 = 0;
    1142:	e2 e5       	ldi	r30, 0x52	; 82
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	10 82       	st	Z, r1
    1148:	15 c0       	rjmp	.+42     	; 0x1174 <TIMER0_enuSetSyncDelay+0x24e>
	}

	while(Local_uint32NumOVF_int){
		while(!((TIFR >> TIMER0_TOV0_BIT) & BIT_MASK1));
    114a:	e8 e5       	ldi	r30, 0x58	; 88
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	81 70       	andi	r24, 0x01	; 1
    1156:	90 70       	andi	r25, 0x00	; 0
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	b9 f3       	breq	.-18     	; 0x114a <TIMER0_enuSetSyncDelay+0x224>
		TIFR |= (BIT_MASK1 << TIMER0_TOV0_BIT);
    115c:	a8 e5       	ldi	r26, 0x58	; 88
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e8 e5       	ldi	r30, 0x58	; 88
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	81 60       	ori	r24, 0x01	; 1
    1168:	8c 93       	st	X, r24
		Local_uint32NumOVF_int--;
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9e 83       	std	Y+6, r25	; 0x06
    1172:	8d 83       	std	Y+5, r24	; 0x05
	else{
		TIMER0_uint32NumOVF = (uint_32)Local_f32NumOVF;
		TCNT0 = 0;
	}

	while(Local_uint32NumOVF_int){
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	39 f7       	brne	.-50     	; 0x114a <TIMER0_enuSetSyncDelay+0x224>
		while(!((TIFR >> TIMER0_TOV0_BIT) & BIT_MASK1));
		TIFR |= (BIT_MASK1 << TIMER0_TOV0_BIT);
		Local_uint32NumOVF_int--;
	}
	return Local_enuErrorStates = ES_OK;
    117c:	1f 86       	std	Y+15, r1	; 0x0f
    117e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1180:	63 96       	adiw	r28, 0x13	; 19
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	08 95       	ret

00001196 <TIMER0_enuSetAsyncDelay>:

ES_t TIMER0_enuSetAsyncDelay(uint_32 Copy_uint32TimeMS, void (*Copy_pfuncCallFunc) (void*), void* Copy_pvoidParameter){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	62 97       	sbiw	r28, 0x12	; 18
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	9e 87       	std	Y+14, r25	; 0x0e
    11ac:	8d 87       	std	Y+13, r24	; 0x0d
    11ae:	78 8b       	std	Y+16, r23	; 0x10
    11b0:	6f 87       	std	Y+15, r22	; 0x0f
    11b2:	5a 8b       	std	Y+18, r21	; 0x12
    11b4:	49 8b       	std	Y+17, r20	; 0x11
	ES_t Local_enuErrorStates = ES_NOK;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	8c 87       	std	Y+12, r24	; 0x0c

	TIMSK |= (BIT_MASK1 << TIMER0_TOIE0_BIT);
    11ba:	a9 e5       	ldi	r26, 0x59	; 89
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e9 e5       	ldi	r30, 0x59	; 89
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	8c 93       	st	X, r24
	f32 Local_f32OVFTime = 256 * ((f32)PRESCALED_CLOCK_SOURCE / SELECT_TIMER_FREQ);
    11c8:	8f e6       	ldi	r24, 0x6F	; 111
    11ca:	92 e1       	ldi	r25, 0x12	; 18
    11cc:	a3 e8       	ldi	r26, 0x83	; 131
    11ce:	b1 e4       	ldi	r27, 0x41	; 65
    11d0:	88 87       	std	Y+8, r24	; 0x08
    11d2:	99 87       	std	Y+9, r25	; 0x09
    11d4:	aa 87       	std	Y+10, r26	; 0x0a
    11d6:	bb 87       	std	Y+11, r27	; 0x0b
	f32 Local_f32NumOVF = Copy_uint32TimeMS/Local_f32OVFTime;
    11d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11da:	9e 85       	ldd	r25, Y+14	; 0x0e
    11dc:	cc 01       	movw	r24, r24
    11de:	a0 e0       	ldi	r26, 0x00	; 0
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	28 85       	ldd	r18, Y+8	; 0x08
    11f4:	39 85       	ldd	r19, Y+9	; 0x09
    11f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    11f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    11fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	8c 83       	std	Y+4, r24	; 0x04
    1204:	9d 83       	std	Y+5, r25	; 0x05
    1206:	ae 83       	std	Y+6, r26	; 0x06
    1208:	bf 83       	std	Y+7, r27	; 0x07
	uint_32 Local_uint32NumOVF_int = (uint_32)Local_f32NumOVF + 1;
    120a:	6c 81       	ldd	r22, Y+4	; 0x04
    120c:	7d 81       	ldd	r23, Y+5	; 0x05
    120e:	8e 81       	ldd	r24, Y+6	; 0x06
    1210:	9f 81       	ldd	r25, Y+7	; 0x07
    1212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	8a 83       	std	Y+2, r24	; 0x02

	if((Local_f32NumOVF - (uint_32)Local_f32NumOVF) != 0.0){
    1220:	6c 81       	ldd	r22, Y+4	; 0x04
    1222:	7d 81       	ldd	r23, Y+5	; 0x05
    1224:	8e 81       	ldd	r24, Y+6	; 0x06
    1226:	9f 81       	ldd	r25, Y+7	; 0x07
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	cc 01       	movw	r24, r24
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	6c 81       	ldd	r22, Y+4	; 0x04
    1244:	7d 81       	ldd	r23, Y+5	; 0x05
    1246:	8e 81       	ldd	r24, Y+6	; 0x06
    1248:	9f 81       	ldd	r25, Y+7	; 0x07
    124a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <TIMER0_enuSetAsyncDelay+0xd2>
    1266:	42 c0       	rjmp	.+132    	; 0x12ec <TIMER0_enuSetAsyncDelay+0x156>
		TIMER0_uint32NumOVF = Local_uint32NumOVF_int;
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	9b 81       	ldd	r25, Y+3	; 0x03
    126c:	90 93 73 01 	sts	0x0173, r25
    1270:	80 93 72 01 	sts	0x0172, r24
		uint_8 Local_uint8Preload = 256.0 - (256.0 * (Local_f32NumOVF - (uint_32)Local_f32NumOVF));
    1274:	6c 81       	ldd	r22, Y+4	; 0x04
    1276:	7d 81       	ldd	r23, Y+5	; 0x05
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	9f 81       	ldd	r25, Y+7	; 0x07
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	cc 01       	movw	r24, r24
    1286:	a0 e0       	ldi	r26, 0x00	; 0
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	bc 01       	movw	r22, r24
    128c:	cd 01       	movw	r24, r26
    128e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1292:	9b 01       	movw	r18, r22
    1294:	ac 01       	movw	r20, r24
    1296:	6c 81       	ldd	r22, Y+4	; 0x04
    1298:	7d 81       	ldd	r23, Y+5	; 0x05
    129a:	8e 81       	ldd	r24, Y+6	; 0x06
    129c:	9f 81       	ldd	r25, Y+7	; 0x07
    129e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e8       	ldi	r20, 0x80	; 128
    12b0:	53 ec       	ldi	r21, 0xC3	; 195
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	53 e4       	ldi	r21, 0x43	; 67
    12c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	89 83       	std	Y+1, r24	; 0x01
		TCNT0 = Local_uint8Preload;
    12dc:	e2 e5       	ldi	r30, 0x52	; 82
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	80 83       	st	Z, r24
		TIMER0_uint32Preload = Local_uint8Preload;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	80 93 74 01 	sts	0x0174, r24
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <TIMER0_enuSetAsyncDelay+0x178>
	}
	else{
		TCNT0 = 0;
    12ec:	e2 e5       	ldi	r30, 0x52	; 82
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	10 82       	st	Z, r1
		TIMER0_uint32Preload = 0;
    12f2:	10 92 74 01 	sts	0x0174, r1
		TIMER0_uint32NumOVF = (uint_32)Local_f32NumOVF;
    12f6:	6c 81       	ldd	r22, Y+4	; 0x04
    12f8:	7d 81       	ldd	r23, Y+5	; 0x05
    12fa:	8e 81       	ldd	r24, Y+6	; 0x06
    12fc:	9f 81       	ldd	r25, Y+7	; 0x07
    12fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	90 93 73 01 	sts	0x0173, r25
    130a:	80 93 72 01 	sts	0x0172, r24
	}

	if(Copy_pfuncCallFunc != NULL){
    130e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1310:	98 89       	ldd	r25, Y+16	; 0x10
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	71 f0       	breq	.+28     	; 0x1332 <TIMER0_enuSetAsyncDelay+0x19c>
		TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF] = Copy_pfuncCallFunc;
    1316:	8f 85       	ldd	r24, Y+15	; 0x0f
    1318:	98 89       	ldd	r25, Y+16	; 0x10
    131a:	90 93 69 01 	sts	0x0169, r25
    131e:	80 93 68 01 	sts	0x0168, r24
		TIMER0_ApvoidParameters[TIMER0_INT_OVF] = Copy_pvoidParameter;
    1322:	89 89       	ldd	r24, Y+17	; 0x11
    1324:	9a 89       	ldd	r25, Y+18	; 0x12
    1326:	90 93 6d 01 	sts	0x016D, r25
    132a:	80 93 6c 01 	sts	0x016C, r24
		Local_enuErrorStates = ES_OK;
    132e:	1c 86       	std	Y+12, r1	; 0x0c
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <TIMER0_enuSetAsyncDelay+0x1a0>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_enuErrorStates;
    1336:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1338:	62 96       	adiw	r28, 0x12	; 18
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <TIMER0_enuEnableOVFInterrupt>:

ES_t TIMER0_enuEnableOVFInterrupt(void){
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	0f 92       	push	r0
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	89 83       	std	Y+1, r24	; 0x01
	TIMSK |= (BIT_MASK1 << TIMER0_TOIE0_BIT);
    1358:	a9 e5       	ldi	r26, 0x59	; 89
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e9 e5       	ldi	r30, 0x59	; 89
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    1366:	19 82       	std	Y+1, r1	; 0x01
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <TIMER0_enuDisableOVFInterrupt>:

ES_t TIMER0_enuDisableOVFInterrupt(void){
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	0f 92       	push	r0
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
	TIMSK &= ~(BIT_MASK1 << TIMER0_TOIE0_BIT);
    1380:	a9 e5       	ldi	r26, 0x59	; 89
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e9 e5       	ldi	r30, 0x59	; 89
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8e 7f       	andi	r24, 0xFE	; 254
    138c:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	89 81       	ldd	r24, Y+1	; 0x01
}
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <TIMER0_enuSetCompareMatch>:

ES_t TIMER0_enuSetCompareMatch(uint_8 Copy_uint8Counts, uint_8 Copy_uint8OCMode){
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <TIMER0_enuSetCompareMatch+0x6>
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTB, DIO_uint8_PIN3, OUTPUT);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	63 e0       	ldi	r22, 0x03	; 3
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_enuSetPinDir>
    13b8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= ~(BIT_MASK2 << TIMER0_COM_BITS);
    13ba:	a3 e5       	ldi	r26, 0x53	; 83
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 e5       	ldi	r30, 0x53	; 83
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 7c       	andi	r24, 0xCF	; 207
    13c6:	8c 93       	st	X, r24
	TCCR0 |= (Copy_uint8OCMode << TIMER0_COM_BITS);
    13c8:	a3 e5       	ldi	r26, 0x53	; 83
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e3 e5       	ldi	r30, 0x53	; 83
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	82 95       	swap	r24
    13dc:	92 95       	swap	r25
    13de:	90 7f       	andi	r25, 0xF0	; 240
    13e0:	98 27       	eor	r25, r24
    13e2:	80 7f       	andi	r24, 0xF0	; 240
    13e4:	98 27       	eor	r25, r24
    13e6:	82 2b       	or	r24, r18
    13e8:	8c 93       	st	X, r24
	OCR0 = Copy_uint8Counts;
    13ea:	ec e5       	ldi	r30, 0x5C	; 92
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	80 83       	st	Z, r24
	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
    13f2:	a9 e5       	ldi	r26, 0x59	; 89
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e9 e5       	ldi	r30, 0x59	; 89
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	82 60       	ori	r24, 0x02	; 2
    13fe:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    1400:	89 81       	ldd	r24, Y+1	; 0x01
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <TIMER0_enuCorrectPhasePWM>:

ES_t TIMER0_enuCorrectPhasePWM(uint_8 Copy_uint8Counts, uint_8 Copy_uint8OCMode){
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <TIMER0_enuCorrectPhasePWM+0x6>
    1414:	0f 92       	push	r0
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTB, DIO_uint8_PIN3, OUTPUT);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	63 e0       	ldi	r22, 0x03	; 3
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_enuSetPinDir>
    142c:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= ~(BIT_MASK2 << TIMER0_COM_BITS);
    142e:	a3 e5       	ldi	r26, 0x53	; 83
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e3 e5       	ldi	r30, 0x53	; 83
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8f 7c       	andi	r24, 0xCF	; 207
    143a:	8c 93       	st	X, r24
	TCCR0 |= (Copy_uint8OCMode << TIMER0_COM_BITS);
    143c:	a3 e5       	ldi	r26, 0x53	; 83
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e3 e5       	ldi	r30, 0x53	; 83
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	82 95       	swap	r24
    1450:	92 95       	swap	r25
    1452:	90 7f       	andi	r25, 0xF0	; 240
    1454:	98 27       	eor	r25, r24
    1456:	80 7f       	andi	r24, 0xF0	; 240
    1458:	98 27       	eor	r25, r24
    145a:	82 2b       	or	r24, r18
    145c:	8c 93       	st	X, r24
	OCR0 = Copy_uint8Counts;
    145e:	ec e5       	ldi	r30, 0x5C	; 92
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 83       	st	Z, r24
	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
    1466:	a9 e5       	ldi	r26, 0x59	; 89
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e9 e5       	ldi	r30, 0x59	; 89
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	82 60       	ori	r24, 0x02	; 2
    1472:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <TIMER0_enuFastPWM>:

ES_t TIMER0_enuFastPWM(uint_8 Copy_uint8Counts, uint_8 Copy_uint8OCMode){
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <TIMER0_enuFastPWM+0x6>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	8a 83       	std	Y+2, r24	; 0x02
    1490:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTB, DIO_uint8_PIN3, OUTPUT);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	63 e0       	ldi	r22, 0x03	; 3
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_enuSetPinDir>
    14a0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= ~(BIT_MASK2 << TIMER0_COM_BITS);
    14a2:	a3 e5       	ldi	r26, 0x53	; 83
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e3 e5       	ldi	r30, 0x53	; 83
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8f 7c       	andi	r24, 0xCF	; 207
    14ae:	8c 93       	st	X, r24
	TCCR0 |= (Copy_uint8OCMode << TIMER0_COM_BITS);
    14b0:	a3 e5       	ldi	r26, 0x53	; 83
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e3 e5       	ldi	r30, 0x53	; 83
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	28 2f       	mov	r18, r24
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	82 95       	swap	r24
    14c4:	92 95       	swap	r25
    14c6:	90 7f       	andi	r25, 0xF0	; 240
    14c8:	98 27       	eor	r25, r24
    14ca:	80 7f       	andi	r24, 0xF0	; 240
    14cc:	98 27       	eor	r25, r24
    14ce:	82 2b       	or	r24, r18
    14d0:	8c 93       	st	X, r24
	OCR0 = Copy_uint8Counts;
    14d2:	ec e5       	ldi	r30, 0x5C	; 92
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	80 83       	st	Z, r24
	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
    14da:	a9 e5       	ldi	r26, 0x59	; 89
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e9 e5       	ldi	r30, 0x59	; 89
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	82 60       	ori	r24, 0x02	; 2
    14e6:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <TIMER0_enuEnableCOMPInterrupt>:

ES_t TIMER0_enuEnableCOMPInterrupt(void){
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	89 83       	std	Y+1, r24	; 0x01
	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
    1504:	a9 e5       	ldi	r26, 0x59	; 89
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e9 e5       	ldi	r30, 0x59	; 89
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	82 60       	ori	r24, 0x02	; 2
    1510:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    1512:	19 82       	std	Y+1, r1	; 0x01
    1514:	89 81       	ldd	r24, Y+1	; 0x01
}
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <TIMER0_enuDisableCOMPInterrupt>:

ES_t TIMER0_enuDisableCOMPInterrupt(void){
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	0f 92       	push	r0
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	89 83       	std	Y+1, r24	; 0x01
	TIMSK &= ~(BIT_MASK1 << TIMER0_OCIE0_BIT);
    152c:	a9 e5       	ldi	r26, 0x59	; 89
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e9 e5       	ldi	r30, 0x59	; 89
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8d 7f       	andi	r24, 0xFD	; 253
    1538:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    153a:	19 82       	std	Y+1, r1	; 0x01
    153c:	89 81       	ldd	r24, Y+1	; 0x01
}
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <TIMER0_enuCTCCallBack>:

ES_t TIMER0_enuCTCCallBack(void (*Copy_pfuncCallFunc) (void*), void* Copy_pvoidParameter){
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <TIMER0_enuCTCCallBack+0x6>
    154c:	00 d0       	rcall	.+0      	; 0x154e <TIMER0_enuCTCCallBack+0x8>
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	9b 83       	std	Y+3, r25	; 0x03
    1556:	8a 83       	std	Y+2, r24	; 0x02
    1558:	7d 83       	std	Y+5, r23	; 0x05
    155a:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorStates = ES_NOK;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pfuncCallFunc != NULL){
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	9b 81       	ldd	r25, Y+3	; 0x03
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	69 f0       	breq	.+26     	; 0x1582 <TIMER0_enuCTCCallBack+0x3c>
		TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP] = Copy_pfuncCallFunc;
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	90 93 6b 01 	sts	0x016B, r25
    1570:	80 93 6a 01 	sts	0x016A, r24
		TIMER0_ApvoidParameters[TIMER0_INT_COMP] = Copy_pvoidParameter;
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	90 93 6f 01 	sts	0x016F, r25
    157c:	80 93 6e 01 	sts	0x016E, r24
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <TIMER0_enuCTCCallBack+0x40>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1586:	89 81       	ldd	r24, Y+1	; 0x01
}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <TIMER0_enuFastPWMByDutyCycle>:


ES_t TIMER0_enuFastPWMByDutyCycle(f32 Copy_uint8DutyCycle, uint_8 Copy_uint8OCMode){
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <TIMER0_enuFastPWMByDutyCycle+0xa>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <TIMER0_enuFastPWMByDutyCycle+0xc>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <TIMER0_enuFastPWMByDutyCycle+0xe>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	6a 83       	std	Y+2, r22	; 0x02
    15ac:	7b 83       	std	Y+3, r23	; 0x03
    15ae:	8c 83       	std	Y+4, r24	; 0x04
    15b0:	9d 83       	std	Y+5, r25	; 0x05
    15b2:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorStates = ES_NOK;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTB, DIO_uint8_PIN3, OUTPUT);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	63 e0       	ldi	r22, 0x03	; 3
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_enuSetPinDir>
    15c2:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 &= ~(BIT_MASK1 << TIMER0_WGM00_BIT);
    15c4:	a3 e5       	ldi	r26, 0x53	; 83
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e3 e5       	ldi	r30, 0x53	; 83
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7b       	andi	r24, 0xBF	; 191
    15d0:	8c 93       	st	X, r24
	TCCR0 &= ~(BIT_MASK1 << TIMER0_WGM01_BIT);
    15d2:	a3 e5       	ldi	r26, 0x53	; 83
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e3 e5       	ldi	r30, 0x53	; 83
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	87 7f       	andi	r24, 0xF7	; 247
    15de:	8c 93       	st	X, r24
	TCCR0 |= (BIT_MASK1 << TIMER0_WGM00_BIT);
    15e0:	a3 e5       	ldi	r26, 0x53	; 83
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e3 e5       	ldi	r30, 0x53	; 83
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	80 64       	ori	r24, 0x40	; 64
    15ec:	8c 93       	st	X, r24
	TCCR0 |= (BIT_MASK1 << TIMER0_WGM01_BIT);
    15ee:	a3 e5       	ldi	r26, 0x53	; 83
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e3 e5       	ldi	r30, 0x53	; 83
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	88 60       	ori	r24, 0x08	; 8
    15fa:	8c 93       	st	X, r24

	TCCR0 &= ~(BIT_MASK2 << TIMER0_COM_BITS);
    15fc:	a3 e5       	ldi	r26, 0x53	; 83
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e3 e5       	ldi	r30, 0x53	; 83
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8f 7c       	andi	r24, 0xCF	; 207
    1608:	8c 93       	st	X, r24
	TCCR0 |= (Copy_uint8OCMode << TIMER0_COM_BITS);
    160a:	a3 e5       	ldi	r26, 0x53	; 83
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e3 e5       	ldi	r30, 0x53	; 83
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	28 2f       	mov	r18, r24
    1616:	8e 81       	ldd	r24, Y+6	; 0x06
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	82 95       	swap	r24
    161e:	92 95       	swap	r25
    1620:	90 7f       	andi	r25, 0xF0	; 240
    1622:	98 27       	eor	r25, r24
    1624:	80 7f       	andi	r24, 0xF0	; 240
    1626:	98 27       	eor	r25, r24
    1628:	82 2b       	or	r24, r18
    162a:	8c 93       	st	X, r24

	OCR0 = (uint_8)(Copy_uint8DutyCycle * 256.0);
    162c:	0c e5       	ldi	r16, 0x5C	; 92
    162e:	10 e0       	ldi	r17, 0x00	; 0
    1630:	6a 81       	ldd	r22, Y+2	; 0x02
    1632:	7b 81       	ldd	r23, Y+3	; 0x03
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	f8 01       	movw	r30, r16
    1656:	80 83       	st	Z, r24

	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
    1658:	a9 e5       	ldi	r26, 0x59	; 89
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e9 e5       	ldi	r30, 0x59	; 89
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	82 60       	ori	r24, 0x02	; 2
    1664:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
}
    1668:	26 96       	adiw	r28, 0x06	; 6
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <TIMER0_enuPhaseCorrectByDutyCycle>:

ES_t TIMER0_enuPhaseCorrectByDutyCycle(f32 Copy_uint8DutyCycle, uint_8 Copy_uint8OCMode){
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	00 d0       	rcall	.+0      	; 0x1688 <TIMER0_enuPhaseCorrectByDutyCycle+0xa>
    1688:	00 d0       	rcall	.+0      	; 0x168a <TIMER0_enuPhaseCorrectByDutyCycle+0xc>
    168a:	00 d0       	rcall	.+0      	; 0x168c <TIMER0_enuPhaseCorrectByDutyCycle+0xe>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	6a 83       	std	Y+2, r22	; 0x02
    1692:	7b 83       	std	Y+3, r23	; 0x03
    1694:	8c 83       	std	Y+4, r24	; 0x04
    1696:	9d 83       	std	Y+5, r25	; 0x05
    1698:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorStates = ES_NOK;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTB, DIO_uint8_PIN3, OUTPUT);
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	63 e0       	ldi	r22, 0x03	; 3
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_enuSetPinDir>
    16a8:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 &= ~(BIT_MASK1 << TIMER0_WGM00_BIT);
    16aa:	a3 e5       	ldi	r26, 0x53	; 83
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e3 e5       	ldi	r30, 0x53	; 83
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 7b       	andi	r24, 0xBF	; 191
    16b6:	8c 93       	st	X, r24
	TCCR0 &= ~(BIT_MASK1 << TIMER0_WGM01_BIT);
    16b8:	a3 e5       	ldi	r26, 0x53	; 83
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e3 e5       	ldi	r30, 0x53	; 83
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	87 7f       	andi	r24, 0xF7	; 247
    16c4:	8c 93       	st	X, r24
	TCCR0 |= (BIT_MASK1 << TIMER0_WGM00_BIT);
    16c6:	a3 e5       	ldi	r26, 0x53	; 83
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e3 e5       	ldi	r30, 0x53	; 83
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 64       	ori	r24, 0x40	; 64
    16d2:	8c 93       	st	X, r24

	TCCR0 &= ~(BIT_MASK2 << TIMER0_COM_BITS);
    16d4:	a3 e5       	ldi	r26, 0x53	; 83
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e3 e5       	ldi	r30, 0x53	; 83
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	8f 7c       	andi	r24, 0xCF	; 207
    16e0:	8c 93       	st	X, r24
	TCCR0 |= (Copy_uint8OCMode << TIMER0_COM_BITS);
    16e2:	a3 e5       	ldi	r26, 0x53	; 83
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e3 e5       	ldi	r30, 0x53	; 83
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	28 2f       	mov	r18, r24
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	82 95       	swap	r24
    16f6:	92 95       	swap	r25
    16f8:	90 7f       	andi	r25, 0xF0	; 240
    16fa:	98 27       	eor	r25, r24
    16fc:	80 7f       	andi	r24, 0xF0	; 240
    16fe:	98 27       	eor	r25, r24
    1700:	82 2b       	or	r24, r18
    1702:	8c 93       	st	X, r24

	OCR0 = (uint_8)(Copy_uint8DutyCycle * 255.0);
    1704:	0c e5       	ldi	r16, 0x5C	; 92
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	6a 81       	ldd	r22, Y+2	; 0x02
    170a:	7b 81       	ldd	r23, Y+3	; 0x03
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	53 e4       	ldi	r21, 0x43	; 67
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	80 83       	st	Z, r24

	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
    1730:	a9 e5       	ldi	r26, 0x59	; 89
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e9 e5       	ldi	r30, 0x59	; 89
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	82 60       	ori	r24, 0x02	; 2
    173c:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1740:	26 96       	adiw	r28, 0x06	; 6
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <__vector_11>:

TIMER0_OVF_ISR{
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62

	static uint_32 counts = 0;
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF] != NULL){
    1780:	80 91 68 01 	lds	r24, 0x0168
    1784:	90 91 69 01 	lds	r25, 0x0169
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	31 f1       	breq	.+76     	; 0x17d8 <__vector_11+0x82>
		counts++;
    178c:	80 91 70 01 	lds	r24, 0x0170
    1790:	90 91 71 01 	lds	r25, 0x0171
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	90 93 71 01 	sts	0x0171, r25
    179a:	80 93 70 01 	sts	0x0170, r24
		if(counts == TIMER0_uint32NumOVF){
    179e:	20 91 70 01 	lds	r18, 0x0170
    17a2:	30 91 71 01 	lds	r19, 0x0171
    17a6:	80 91 72 01 	lds	r24, 0x0172
    17aa:	90 91 73 01 	lds	r25, 0x0173
    17ae:	28 17       	cp	r18, r24
    17b0:	39 07       	cpc	r19, r25
    17b2:	91 f4       	brne	.+36     	; 0x17d8 <__vector_11+0x82>
			counts = 0;
    17b4:	10 92 71 01 	sts	0x0171, r1
    17b8:	10 92 70 01 	sts	0x0170, r1
			TCNT0 = TIMER0_uint32Preload;
    17bc:	e2 e5       	ldi	r30, 0x52	; 82
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 91 74 01 	lds	r24, 0x0174
    17c4:	80 83       	st	Z, r24
			TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF](TIMER0_ApvoidParameters[TIMER0_INT_OVF]);
    17c6:	e0 91 68 01 	lds	r30, 0x0168
    17ca:	f0 91 69 01 	lds	r31, 0x0169
    17ce:	80 91 6c 01 	lds	r24, 0x016C
    17d2:	90 91 6d 01 	lds	r25, 0x016D
    17d6:	09 95       	icall
		}
	}
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	ff 91       	pop	r31
    17de:	ef 91       	pop	r30
    17e0:	bf 91       	pop	r27
    17e2:	af 91       	pop	r26
    17e4:	9f 91       	pop	r25
    17e6:	8f 91       	pop	r24
    17e8:	7f 91       	pop	r23
    17ea:	6f 91       	pop	r22
    17ec:	5f 91       	pop	r21
    17ee:	4f 91       	pop	r20
    17f0:	3f 91       	pop	r19
    17f2:	2f 91       	pop	r18
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <__vector_10>:

TIMER0_COMP_ISR{
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP] != NULL){
    1828:	80 91 6a 01 	lds	r24, 0x016A
    182c:	90 91 6b 01 	lds	r25, 0x016B
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	49 f0       	breq	.+18     	; 0x1846 <__vector_10+0x48>
		TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP](TIMER0_ApvoidParameters[TIMER0_INT_COMP]);
    1834:	e0 91 6a 01 	lds	r30, 0x016A
    1838:	f0 91 6b 01 	lds	r31, 0x016B
    183c:	80 91 6e 01 	lds	r24, 0x016E
    1840:	90 91 6f 01 	lds	r25, 0x016F
    1844:	09 95       	icall
	}
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"



ES_t DIO_enuInit(void){
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	0f 92       	push	r0
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(DIO_PA_PIN0_DIR, DIO_PA_PIN1_DIR, DIO_PA_PIN2_DIR, DIO_PA_PIN3_DIR, DIO_PA_PIN4_DIR, DIO_PA_PIN5_DIR, DIO_PA_PIN6_DIR, DIO_PA_PIN7_DIR);
    187a:	ea e3       	ldi	r30, 0x3A	; 58
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	89 ed       	ldi	r24, 0xD9	; 217
    1880:	80 83       	st	Z, r24
	DDRB = CONC(DIO_PB_PIN0_DIR, DIO_PB_PIN1_DIR, DIO_PB_PIN2_DIR, DIO_PB_PIN3_DIR, DIO_PB_PIN4_DIR, DIO_PB_PIN5_DIR, DIO_PB_PIN6_DIR, DIO_PB_PIN7_DIR);
    1882:	e7 e3       	ldi	r30, 0x37	; 55
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	89 ed       	ldi	r24, 0xD9	; 217
    1888:	80 83       	st	Z, r24
	DDRC = CONC(DIO_PC_PIN0_DIR, DIO_PC_PIN1_DIR, DIO_PC_PIN2_DIR, DIO_PC_PIN3_DIR, DIO_PC_PIN4_DIR, DIO_PC_PIN5_DIR, DIO_PC_PIN6_DIR, DIO_PC_PIN7_DIR);
    188a:	e4 e3       	ldi	r30, 0x34	; 52
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	89 ed       	ldi	r24, 0xD9	; 217
    1890:	80 83       	st	Z, r24
	DDRD = CONC(DIO_PD_PIN0_DIR, DIO_PD_PIN1_DIR, DIO_PD_PIN2_DIR, DIO_PD_PIN3_DIR, DIO_PD_PIN4_DIR, DIO_PD_PIN5_DIR, DIO_PD_PIN6_DIR, DIO_PD_PIN7_DIR);
    1892:	e1 e3       	ldi	r30, 0x31	; 49
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	89 ed       	ldi	r24, 0xD9	; 217
    1898:	80 83       	st	Z, r24

	PORTA = CONC(DIO_PA_PIN0_VAL, DIO_PA_PIN1_VAL, DIO_PA_PIN2_VAL, DIO_PA_PIN3_VAL, DIO_PA_PIN4_VAL, DIO_PA_PIN5_VAL, DIO_PA_PIN6_VAL, DIO_PA_PIN7_VAL);
    189a:	eb e3       	ldi	r30, 0x3B	; 59
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	8f e4       	ldi	r24, 0x4F	; 79
    18a0:	80 83       	st	Z, r24
	PORTB = CONC(DIO_PB_PIN0_VAL, DIO_PB_PIN1_VAL, DIO_PB_PIN2_VAL, DIO_PB_PIN3_VAL, DIO_PB_PIN4_VAL, DIO_PB_PIN5_VAL, DIO_PB_PIN6_VAL, DIO_PB_PIN7_VAL);
    18a2:	e8 e3       	ldi	r30, 0x38	; 56
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	8f e9       	ldi	r24, 0x9F	; 159
    18a8:	80 83       	st	Z, r24
	PORTC = CONC(DIO_PC_PIN0_VAL, DIO_PC_PIN1_VAL, DIO_PC_PIN2_VAL, DIO_PC_PIN3_VAL, DIO_PC_PIN4_VAL, DIO_PC_PIN5_VAL, DIO_PC_PIN6_VAL, DIO_PC_PIN7_VAL);
    18aa:	e5 e3       	ldi	r30, 0x35	; 53
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8f e9       	ldi	r24, 0x9F	; 159
    18b0:	80 83       	st	Z, r24
	PORTD = CONC(DIO_PD_PIN0_VAL, DIO_PD_PIN1_VAL, DIO_PD_PIN2_VAL, DIO_PD_PIN3_VAL, DIO_PD_PIN4_VAL, DIO_PD_PIN5_VAL, DIO_PD_PIN6_VAL, DIO_PD_PIN7_VAL);
    18b2:	e2 e3       	ldi	r30, 0x32	; 50
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8f e9       	ldi	r24, 0x9F	; 159
    18b8:	80 83       	st	Z, r24

	return Local_enuErrorState = ES_OK;
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <DIO_enuSetPortDir>:

ES_t DIO_enuSetPortDir(uint_8 Copy_uint8PortID, uint_8 Copy_uint8Value){
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <DIO_enuSetPortDir+0x6>
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <DIO_enuSetPortDir+0x8>
    18ce:	0f 92       	push	r0
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	8a 83       	std	Y+2, r24	; 0x02
    18d6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	a0 f5       	brcc	.+104    	; 0x194a <DIO_enuSetPortDir+0x84>

		switch(Copy_uint8PortID){
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3d 83       	std	Y+5, r19	; 0x05
    18ea:	2c 83       	std	Y+4, r18	; 0x04
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	d1 f0       	breq	.+52     	; 0x192a <DIO_enuSetPortDir+0x64>
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	2c f4       	brge	.+10     	; 0x190a <DIO_enuSetPortDir+0x44>
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	61 f0       	breq	.+24     	; 0x1920 <DIO_enuSetPortDir+0x5a>
    1908:	1e c0       	rjmp	.+60     	; 0x1946 <DIO_enuSetPortDir+0x80>
    190a:	2c 81       	ldd	r18, Y+4	; 0x04
    190c:	3d 81       	ldd	r19, Y+5	; 0x05
    190e:	22 30       	cpi	r18, 0x02	; 2
    1910:	31 05       	cpc	r19, r1
    1912:	81 f0       	breq	.+32     	; 0x1934 <DIO_enuSetPortDir+0x6e>
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	91 05       	cpc	r25, r1
    191c:	81 f0       	breq	.+32     	; 0x193e <DIO_enuSetPortDir+0x78>
    191e:	13 c0       	rjmp	.+38     	; 0x1946 <DIO_enuSetPortDir+0x80>
			case DIO_PORTA:
				DDRA =  Copy_uint8Value;
    1920:	ea e3       	ldi	r30, 0x3A	; 58
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	80 83       	st	Z, r24
    1928:	0e c0       	rjmp	.+28     	; 0x1946 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTB:
				DDRB =  Copy_uint8Value;
    192a:	e7 e3       	ldi	r30, 0x37	; 55
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	80 83       	st	Z, r24
    1932:	09 c0       	rjmp	.+18     	; 0x1946 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTC:
				DDRC =  Copy_uint8Value;
    1934:	e4 e3       	ldi	r30, 0x34	; 52
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	80 83       	st	Z, r24
    193c:	04 c0       	rjmp	.+8      	; 0x1946 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTD:
				DDRD =  Copy_uint8Value;
    193e:	e1 e3       	ldi	r30, 0x31	; 49
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    1946:	19 82       	std	Y+1, r1	; 0x01
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_enuSetPortDir+0x88>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    194e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8Value){
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <DIO_enuSetPortValue+0x6>
    1966:	00 d0       	rcall	.+0      	; 0x1968 <DIO_enuSetPortValue+0x8>
    1968:	0f 92       	push	r0
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	8a 83       	std	Y+2, r24	; 0x02
    1970:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	84 30       	cpi	r24, 0x04	; 4
    197a:	a0 f5       	brcc	.+104    	; 0x19e4 <DIO_enuSetPortValue+0x84>

		switch(Copy_uint8PortID){
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	3d 83       	std	Y+5, r19	; 0x05
    1984:	2c 83       	std	Y+4, r18	; 0x04
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	91 05       	cpc	r25, r1
    198e:	d1 f0       	breq	.+52     	; 0x19c4 <DIO_enuSetPortValue+0x64>
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	31 05       	cpc	r19, r1
    1998:	2c f4       	brge	.+10     	; 0x19a4 <DIO_enuSetPortValue+0x44>
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	61 f0       	breq	.+24     	; 0x19ba <DIO_enuSetPortValue+0x5a>
    19a2:	1e c0       	rjmp	.+60     	; 0x19e0 <DIO_enuSetPortValue+0x80>
    19a4:	2c 81       	ldd	r18, Y+4	; 0x04
    19a6:	3d 81       	ldd	r19, Y+5	; 0x05
    19a8:	22 30       	cpi	r18, 0x02	; 2
    19aa:	31 05       	cpc	r19, r1
    19ac:	81 f0       	breq	.+32     	; 0x19ce <DIO_enuSetPortValue+0x6e>
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	83 30       	cpi	r24, 0x03	; 3
    19b4:	91 05       	cpc	r25, r1
    19b6:	81 f0       	breq	.+32     	; 0x19d8 <DIO_enuSetPortValue+0x78>
    19b8:	13 c0       	rjmp	.+38     	; 0x19e0 <DIO_enuSetPortValue+0x80>
			case DIO_PORTA:
				PORTA =  Copy_uint8Value;
    19ba:	eb e3       	ldi	r30, 0x3B	; 59
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	80 83       	st	Z, r24
    19c2:	0e c0       	rjmp	.+28     	; 0x19e0 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTB:
				PORTB =  Copy_uint8Value;
    19c4:	e8 e3       	ldi	r30, 0x38	; 56
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	80 83       	st	Z, r24
    19cc:	09 c0       	rjmp	.+18     	; 0x19e0 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTC:
				PORTC =  Copy_uint8Value;
    19ce:	e5 e3       	ldi	r30, 0x35	; 53
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	80 83       	st	Z, r24
    19d6:	04 c0       	rjmp	.+8      	; 0x19e0 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTD:
				PORTD =  Copy_uint8Value;
    19d8:	e2 e3       	ldi	r30, 0x32	; 50
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    19e0:	19 82       	std	Y+1, r1	; 0x01
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_enuSetPortValue+0x88>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(uint_8 Copy_uint8PortID){
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <DIO_enuTogPortValue+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <DIO_enuTogPortValue+0x8>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	08 f0       	brcs	.+2      	; 0x1a14 <DIO_enuTogPortValue+0x1a>
    1a12:	40 c0       	rjmp	.+128    	; 0x1a94 <DIO_enuTogPortValue+0x9a>

		switch(Copy_uint8PortID){
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	3c 83       	std	Y+4, r19	; 0x04
    1a1c:	2b 83       	std	Y+3, r18	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	91 05       	cpc	r25, r1
    1a26:	e9 f0       	breq	.+58     	; 0x1a62 <DIO_enuTogPortValue+0x68>
    1a28:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <DIO_enuTogPortValue+0x42>
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	61 f0       	breq	.+24     	; 0x1a52 <DIO_enuTogPortValue+0x58>
    1a3a:	2a c0       	rjmp	.+84     	; 0x1a90 <DIO_enuTogPortValue+0x96>
    1a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	31 05       	cpc	r19, r1
    1a44:	b1 f0       	breq	.+44     	; 0x1a72 <DIO_enuTogPortValue+0x78>
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	c9 f0       	breq	.+50     	; 0x1a82 <DIO_enuTogPortValue+0x88>
    1a50:	1f c0       	rjmp	.+62     	; 0x1a90 <DIO_enuTogPortValue+0x96>
			case DIO_PORTA:
				PORTA = ~PORTA ;
    1a52:	ab e3       	ldi	r26, 0x3B	; 59
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	eb e3       	ldi	r30, 0x3B	; 59
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 95       	com	r24
    1a5e:	8c 93       	st	X, r24
    1a60:	17 c0       	rjmp	.+46     	; 0x1a90 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTB:
				PORTB =  ~PORTB;
    1a62:	a8 e3       	ldi	r26, 0x38	; 56
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e8 e3       	ldi	r30, 0x38	; 56
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	80 95       	com	r24
    1a6e:	8c 93       	st	X, r24
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTC:
				PORTC =  ~PORTC;
    1a72:	a5 e3       	ldi	r26, 0x35	; 53
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e3       	ldi	r30, 0x35	; 53
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 95       	com	r24
    1a7e:	8c 93       	st	X, r24
    1a80:	07 c0       	rjmp	.+14     	; 0x1a90 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTD:
				PORTD =  ~PORTD;
    1a82:	a2 e3       	ldi	r26, 0x32	; 50
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e2 e3       	ldi	r30, 0x32	; 50
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 95       	com	r24
    1a8e:	8c 93       	st	X, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    1a90:	19 82       	std	Y+1, r1	; 0x01
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_enuTogPortValue+0x9e>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(uint_8 Copy_uint8PortID, uint_8 *Copy_uint8Value){
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <DIO_enuGetPortValue+0x6>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <DIO_enuGetPortValue+0x8>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <DIO_enuGetPortValue+0xa>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
    1ab8:	7c 83       	std	Y+4, r23	; 0x04
    1aba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	84 30       	cpi	r24, 0x04	; 4
    1ac4:	e0 f5       	brcc	.+120    	; 0x1b3e <DIO_enuGetPortValue+0x96>

		switch(Copy_uint8PortID){
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	3e 83       	std	Y+6, r19	; 0x06
    1ace:	2d 83       	std	Y+5, r18	; 0x05
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	e1 f0       	breq	.+56     	; 0x1b12 <DIO_enuGetPortValue+0x6a>
    1ada:	2d 81       	ldd	r18, Y+5	; 0x05
    1adc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <DIO_enuGetPortValue+0x46>
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <DIO_enuGetPortValue+0x5c>
    1aec:	26 c0       	rjmp	.+76     	; 0x1b3a <DIO_enuGetPortValue+0x92>
    1aee:	2d 81       	ldd	r18, Y+5	; 0x05
    1af0:	3e 81       	ldd	r19, Y+6	; 0x06
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	a1 f0       	breq	.+40     	; 0x1b20 <DIO_enuGetPortValue+0x78>
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	91 05       	cpc	r25, r1
    1b00:	b1 f0       	breq	.+44     	; 0x1b2e <DIO_enuGetPortValue+0x86>
    1b02:	1b c0       	rjmp	.+54     	; 0x1b3a <DIO_enuGetPortValue+0x92>
			case DIO_PORTA:
				*Copy_uint8Value = PINA;
    1b04:	e9 e3       	ldi	r30, 0x39	; 57
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0e:	80 83       	st	Z, r24
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTB:
				*Copy_uint8Value = PINB;
    1b12:	e6 e3       	ldi	r30, 0x36	; 54
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1c:	80 83       	st	Z, r24
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTC:
				*Copy_uint8Value = PINC;
    1b20:	e3 e3       	ldi	r30, 0x33	; 51
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	eb 81       	ldd	r30, Y+3	; 0x03
    1b28:	fc 81       	ldd	r31, Y+4	; 0x04
    1b2a:	80 83       	st	Z, r24
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTD:
				*Copy_uint8Value = PIND;
    1b2e:	e0 e3       	ldi	r30, 0x30	; 48
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	eb 81       	ldd	r30, Y+3	; 0x03
    1b36:	fc 81       	ldd	r31, Y+4	; 0x04
    1b38:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    1b3a:	19 82       	std	Y+1, r1	; 0x01
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_enuGetPortValue+0x9a>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b44:	26 96       	adiw	r28, 0x06	; 6
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <DIO_enuSetPinDir>:

ES_t DIO_enuSetPinDir(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 Copy_uint8Value){
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <DIO_enuSetPinDir+0x6>
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <DIO_enuSetPinDir+0x8>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <DIO_enuSetPinDir+0xa>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	8a 83       	std	Y+2, r24	; 0x02
    1b66:	6b 83       	std	Y+3, r22	; 0x03
    1b68:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	84 30       	cpi	r24, 0x04	; 4
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <DIO_enuSetPinDir+0x20>
    1b74:	cf c0       	rjmp	.+414    	; 0x1d14 <DIO_enuSetPinDir+0x1be>
		if(Copy_uint8PinID <= DIO_PIN7){
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	88 30       	cpi	r24, 0x08	; 8
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <DIO_enuSetPinDir+0x28>
    1b7c:	c8 c0       	rjmp	.+400    	; 0x1d0e <DIO_enuSetPinDir+0x1b8>
			switch(Copy_uint8PortID){
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	3e 83       	std	Y+6, r19	; 0x06
    1b86:	2d 83       	std	Y+5, r18	; 0x05
    1b88:	6d 81       	ldd	r22, Y+5	; 0x05
    1b8a:	7e 81       	ldd	r23, Y+6	; 0x06
    1b8c:	61 30       	cpi	r22, 0x01	; 1
    1b8e:	71 05       	cpc	r23, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <DIO_enuSetPinDir+0x3e>
    1b92:	41 c0       	rjmp	.+130    	; 0x1c16 <DIO_enuSetPinDir+0xc0>
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	82 30       	cpi	r24, 0x02	; 2
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	34 f4       	brge	.+12     	; 0x1baa <DIO_enuSetPinDir+0x54>
    1b9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1ba0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba2:	21 15       	cp	r18, r1
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	71 f0       	breq	.+28     	; 0x1bc4 <DIO_enuSetPinDir+0x6e>
    1ba8:	b0 c0       	rjmp	.+352    	; 0x1d0a <DIO_enuSetPinDir+0x1b4>
    1baa:	6d 81       	ldd	r22, Y+5	; 0x05
    1bac:	7e 81       	ldd	r23, Y+6	; 0x06
    1bae:	62 30       	cpi	r22, 0x02	; 2
    1bb0:	71 05       	cpc	r23, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <DIO_enuSetPinDir+0x60>
    1bb4:	59 c0       	rjmp	.+178    	; 0x1c68 <DIO_enuSetPinDir+0x112>
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <DIO_enuSetPinDir+0x6c>
    1bc0:	7c c0       	rjmp	.+248    	; 0x1cba <DIO_enuSetPinDir+0x164>
    1bc2:	a3 c0       	rjmp	.+326    	; 0x1d0a <DIO_enuSetPinDir+0x1b4>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK << Copy_uint8PinID);
    1bc4:	aa e3       	ldi	r26, 0x3A	; 58
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ea e3       	ldi	r30, 0x3A	; 58
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <DIO_enuSetPinDir+0x8a>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	2a 95       	dec	r18
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <DIO_enuSetPinDir+0x86>
    1be4:	80 95       	com	r24
    1be6:	84 23       	and	r24, r20
    1be8:	8c 93       	st	X, r24
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
    1bea:	aa e3       	ldi	r26, 0x3A	; 58
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	ea e3       	ldi	r30, 0x3A	; 58
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	b9 01       	movw	r22, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_enuSetPinDir+0xb4>
    1c06:	66 0f       	add	r22, r22
    1c08:	77 1f       	adc	r23, r23
    1c0a:	8a 95       	dec	r24
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <DIO_enuSetPinDir+0xb0>
    1c0e:	cb 01       	movw	r24, r22
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	7a c0       	rjmp	.+244    	; 0x1d0a <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK << Copy_uint8PinID);
    1c16:	a7 e3       	ldi	r26, 0x37	; 55
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e7 e3       	ldi	r30, 0x37	; 55
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_enuSetPinDir+0xdc>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	2a 95       	dec	r18
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_enuSetPinDir+0xd8>
    1c36:	80 95       	com	r24
    1c38:	84 23       	and	r24, r20
    1c3a:	8c 93       	st	X, r24
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
    1c3c:	a7 e3       	ldi	r26, 0x37	; 55
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e7 e3       	ldi	r30, 0x37	; 55
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	b9 01       	movw	r22, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_enuSetPinDir+0x106>
    1c58:	66 0f       	add	r22, r22
    1c5a:	77 1f       	adc	r23, r23
    1c5c:	8a 95       	dec	r24
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_enuSetPinDir+0x102>
    1c60:	cb 01       	movw	r24, r22
    1c62:	84 2b       	or	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	51 c0       	rjmp	.+162    	; 0x1d0a <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK << Copy_uint8PinID);
    1c68:	a4 e3       	ldi	r26, 0x34	; 52
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e4 e3       	ldi	r30, 0x34	; 52
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <DIO_enuSetPinDir+0x12e>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	2a 95       	dec	r18
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <DIO_enuSetPinDir+0x12a>
    1c88:	80 95       	com	r24
    1c8a:	84 23       	and	r24, r20
    1c8c:	8c 93       	st	X, r24
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
    1c8e:	a4 e3       	ldi	r26, 0x34	; 52
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e4 e3       	ldi	r30, 0x34	; 52
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	48 2f       	mov	r20, r24
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	b9 01       	movw	r22, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <DIO_enuSetPinDir+0x158>
    1caa:	66 0f       	add	r22, r22
    1cac:	77 1f       	adc	r23, r23
    1cae:	8a 95       	dec	r24
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <DIO_enuSetPinDir+0x154>
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	84 2b       	or	r24, r20
    1cb6:	8c 93       	st	X, r24
    1cb8:	28 c0       	rjmp	.+80     	; 0x1d0a <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
    1cba:	a1 e3       	ldi	r26, 0x31	; 49
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e1 e3       	ldi	r30, 0x31	; 49
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_enuSetPinDir+0x180>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	2a 95       	dec	r18
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_enuSetPinDir+0x17c>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	8c 93       	st	X, r24
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
    1ce0:	a1 e3       	ldi	r26, 0x31	; 49
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e1 e3       	ldi	r30, 0x31	; 49
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8c 81       	ldd	r24, Y+4	; 0x04
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	b9 01       	movw	r22, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_enuSetPinDir+0x1aa>
    1cfc:	66 0f       	add	r22, r22
    1cfe:	77 1f       	adc	r23, r23
    1d00:	8a 95       	dec	r24
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_enuSetPinDir+0x1a6>
    1d04:	cb 01       	movw	r24, r22
    1d06:	84 2b       	or	r24, r20
    1d08:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <DIO_enuSetPinDir+0x1c2>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    1d0e:	84 e0       	ldi	r24, 0x04	; 4
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_enuSetPinDir+0x1c2>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1a:	26 96       	adiw	r28, 0x06	; 6
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 Copy_uint8Value){
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <DIO_enuSetPinValue+0x6>
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <DIO_enuSetPinValue+0x8>
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <DIO_enuSetPinValue+0xa>
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    1d3c:	6b 83       	std	Y+3, r22	; 0x03
    1d3e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	84 30       	cpi	r24, 0x04	; 4
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <DIO_enuSetPinValue+0x20>
    1d4a:	cf c0       	rjmp	.+414    	; 0x1eea <DIO_enuSetPinValue+0x1be>
		if(Copy_uint8PinID <= DIO_PIN7){
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	88 30       	cpi	r24, 0x08	; 8
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <DIO_enuSetPinValue+0x28>
    1d52:	c8 c0       	rjmp	.+400    	; 0x1ee4 <DIO_enuSetPinValue+0x1b8>
			switch(Copy_uint8PortID){
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3e 83       	std	Y+6, r19	; 0x06
    1d5c:	2d 83       	std	Y+5, r18	; 0x05
    1d5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d60:	7e 81       	ldd	r23, Y+6	; 0x06
    1d62:	61 30       	cpi	r22, 0x01	; 1
    1d64:	71 05       	cpc	r23, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <DIO_enuSetPinValue+0x3e>
    1d68:	41 c0       	rjmp	.+130    	; 0x1dec <DIO_enuSetPinValue+0xc0>
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	91 05       	cpc	r25, r1
    1d72:	34 f4       	brge	.+12     	; 0x1d80 <DIO_enuSetPinValue+0x54>
    1d74:	2d 81       	ldd	r18, Y+5	; 0x05
    1d76:	3e 81       	ldd	r19, Y+6	; 0x06
    1d78:	21 15       	cp	r18, r1
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	71 f0       	breq	.+28     	; 0x1d9a <DIO_enuSetPinValue+0x6e>
    1d7e:	b0 c0       	rjmp	.+352    	; 0x1ee0 <DIO_enuSetPinValue+0x1b4>
    1d80:	6d 81       	ldd	r22, Y+5	; 0x05
    1d82:	7e 81       	ldd	r23, Y+6	; 0x06
    1d84:	62 30       	cpi	r22, 0x02	; 2
    1d86:	71 05       	cpc	r23, r1
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <DIO_enuSetPinValue+0x60>
    1d8a:	59 c0       	rjmp	.+178    	; 0x1e3e <DIO_enuSetPinValue+0x112>
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <DIO_enuSetPinValue+0x6c>
    1d96:	7c c0       	rjmp	.+248    	; 0x1e90 <DIO_enuSetPinValue+0x164>
    1d98:	a3 c0       	rjmp	.+326    	; 0x1ee0 <DIO_enuSetPinValue+0x1b4>
				case DIO_PORTA:
					PORTA &= ~(BIT_MASK << Copy_uint8PinID);
    1d9a:	ab e3       	ldi	r26, 0x3B	; 59
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	eb e3       	ldi	r30, 0x3B	; 59
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <DIO_enuSetPinValue+0x8a>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	2a 95       	dec	r18
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <DIO_enuSetPinValue+0x86>
    1dba:	80 95       	com	r24
    1dbc:	84 23       	and	r24, r20
    1dbe:	8c 93       	st	X, r24
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
    1dc0:	ab e3       	ldi	r26, 0x3B	; 59
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	eb e3       	ldi	r30, 0x3B	; 59
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	b9 01       	movw	r22, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <DIO_enuSetPinValue+0xb4>
    1ddc:	66 0f       	add	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	8a 95       	dec	r24
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <DIO_enuSetPinValue+0xb0>
    1de4:	cb 01       	movw	r24, r22
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	7a c0       	rjmp	.+244    	; 0x1ee0 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTB:
					PORTB &= ~(BIT_MASK << Copy_uint8PinID);
    1dec:	a8 e3       	ldi	r26, 0x38	; 56
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e8 e3       	ldi	r30, 0x38	; 56
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_enuSetPinValue+0xdc>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	2a 95       	dec	r18
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_enuSetPinValue+0xd8>
    1e0c:	80 95       	com	r24
    1e0e:	84 23       	and	r24, r20
    1e10:	8c 93       	st	X, r24
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
    1e12:	a8 e3       	ldi	r26, 0x38	; 56
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e8 e3       	ldi	r30, 0x38	; 56
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	b9 01       	movw	r22, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <DIO_enuSetPinValue+0x106>
    1e2e:	66 0f       	add	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	8a 95       	dec	r24
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <DIO_enuSetPinValue+0x102>
    1e36:	cb 01       	movw	r24, r22
    1e38:	84 2b       	or	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	51 c0       	rjmp	.+162    	; 0x1ee0 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTC:
					PORTC &= ~(BIT_MASK << Copy_uint8PinID);
    1e3e:	a5 e3       	ldi	r26, 0x35	; 53
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e5 e3       	ldi	r30, 0x35	; 53
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <DIO_enuSetPinValue+0x12e>
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	2a 95       	dec	r18
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <DIO_enuSetPinValue+0x12a>
    1e5e:	80 95       	com	r24
    1e60:	84 23       	and	r24, r20
    1e62:	8c 93       	st	X, r24
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
    1e64:	a5 e3       	ldi	r26, 0x35	; 53
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e5 e3       	ldi	r30, 0x35	; 53
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	48 2f       	mov	r20, r24
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	b9 01       	movw	r22, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <DIO_enuSetPinValue+0x158>
    1e80:	66 0f       	add	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	8a 95       	dec	r24
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <DIO_enuSetPinValue+0x154>
    1e88:	cb 01       	movw	r24, r22
    1e8a:	84 2b       	or	r24, r20
    1e8c:	8c 93       	st	X, r24
    1e8e:	28 c0       	rjmp	.+80     	; 0x1ee0 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
    1e90:	a2 e3       	ldi	r26, 0x32	; 50
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e2 e3       	ldi	r30, 0x32	; 50
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_enuSetPinValue+0x180>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	2a 95       	dec	r18
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_enuSetPinValue+0x17c>
    1eb0:	80 95       	com	r24
    1eb2:	84 23       	and	r24, r20
    1eb4:	8c 93       	st	X, r24
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
    1eb6:	a2 e3       	ldi	r26, 0x32	; 50
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e2 e3       	ldi	r30, 0x32	; 50
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	b9 01       	movw	r22, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <DIO_enuSetPinValue+0x1aa>
    1ed2:	66 0f       	add	r22, r22
    1ed4:	77 1f       	adc	r23, r23
    1ed6:	8a 95       	dec	r24
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <DIO_enuSetPinValue+0x1a6>
    1eda:	cb 01       	movw	r24, r22
    1edc:	84 2b       	or	r24, r20
    1ede:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    1ee0:	19 82       	std	Y+1, r1	; 0x01
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <DIO_enuSetPinValue+0x1c2>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    1ee4:	84 e0       	ldi	r24, 0x04	; 4
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_enuSetPinValue+0x1c2>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef0:	26 96       	adiw	r28, 0x06	; 6
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID){
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <DIO_enuTogPinValue+0x6>
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <DIO_enuTogPinValue+0x8>
    1f0a:	0f 92       	push	r0
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	8a 83       	std	Y+2, r24	; 0x02
    1f12:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	84 30       	cpi	r24, 0x04	; 4
    1f1c:	08 f0       	brcs	.+2      	; 0x1f20 <DIO_enuTogPinValue+0x1e>
    1f1e:	77 c0       	rjmp	.+238    	; 0x200e <DIO_enuTogPinValue+0x10c>
		if(Copy_uint8PinID <= DIO_PIN7){
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	88 30       	cpi	r24, 0x08	; 8
    1f24:	08 f0       	brcs	.+2      	; 0x1f28 <DIO_enuTogPinValue+0x26>
    1f26:	70 c0       	rjmp	.+224    	; 0x2008 <DIO_enuTogPinValue+0x106>
			switch(Copy_uint8PortID){
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	3d 83       	std	Y+5, r19	; 0x05
    1f30:	2c 83       	std	Y+4, r18	; 0x04
    1f32:	8c 81       	ldd	r24, Y+4	; 0x04
    1f34:	9d 81       	ldd	r25, Y+5	; 0x05
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	91 05       	cpc	r25, r1
    1f3a:	49 f1       	breq	.+82     	; 0x1f8e <DIO_enuTogPinValue+0x8c>
    1f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <DIO_enuTogPinValue+0x4e>
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	61 f0       	breq	.+24     	; 0x1f66 <DIO_enuTogPinValue+0x64>
    1f4e:	5a c0       	rjmp	.+180    	; 0x2004 <DIO_enuTogPinValue+0x102>
    1f50:	2c 81       	ldd	r18, Y+4	; 0x04
    1f52:	3d 81       	ldd	r19, Y+5	; 0x05
    1f54:	22 30       	cpi	r18, 0x02	; 2
    1f56:	31 05       	cpc	r19, r1
    1f58:	71 f1       	breq	.+92     	; 0x1fb6 <DIO_enuTogPinValue+0xb4>
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5e:	83 30       	cpi	r24, 0x03	; 3
    1f60:	91 05       	cpc	r25, r1
    1f62:	e9 f1       	breq	.+122    	; 0x1fde <DIO_enuTogPinValue+0xdc>
    1f64:	4f c0       	rjmp	.+158    	; 0x2004 <DIO_enuTogPinValue+0x102>
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
    1f66:	ab e3       	ldi	r26, 0x3B	; 59
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	eb e3       	ldi	r30, 0x3B	; 59
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	48 2f       	mov	r20, r24
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	02 2e       	mov	r0, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_enuTogPinValue+0x82>
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	0a 94       	dec	r0
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_enuTogPinValue+0x7e>
    1f88:	84 27       	eor	r24, r20
    1f8a:	8c 93       	st	X, r24
    1f8c:	3b c0       	rjmp	.+118    	; 0x2004 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
    1f8e:	a8 e3       	ldi	r26, 0x38	; 56
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e8 e3       	ldi	r30, 0x38	; 56
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	02 2e       	mov	r0, r18
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <DIO_enuTogPinValue+0xaa>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	0a 94       	dec	r0
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <DIO_enuTogPinValue+0xa6>
    1fb0:	84 27       	eor	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	27 c0       	rjmp	.+78     	; 0x2004 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
    1fb6:	a5 e3       	ldi	r26, 0x35	; 53
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e5 e3       	ldi	r30, 0x35	; 53
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 2e       	mov	r0, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <DIO_enuTogPinValue+0xd2>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <DIO_enuTogPinValue+0xce>
    1fd8:	84 27       	eor	r24, r20
    1fda:	8c 93       	st	X, r24
    1fdc:	13 c0       	rjmp	.+38     	; 0x2004 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
    1fde:	a2 e3       	ldi	r26, 0x32	; 50
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e2 e3       	ldi	r30, 0x32	; 50
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	48 2f       	mov	r20, r24
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	02 2e       	mov	r0, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <DIO_enuTogPinValue+0xfa>
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	0a 94       	dec	r0
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <DIO_enuTogPinValue+0xf6>
    2000:	84 27       	eor	r24, r20
    2002:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    2004:	19 82       	std	Y+1, r1	; 0x01
    2006:	05 c0       	rjmp	.+10     	; 0x2012 <DIO_enuTogPinValue+0x110>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    2008:	84 e0       	ldi	r24, 0x04	; 4
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <DIO_enuTogPinValue+0x110>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 *Copy_uint8Value){
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	27 97       	sbiw	r28, 0x07	; 7
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	8a 83       	std	Y+2, r24	; 0x02
    203a:	6b 83       	std	Y+3, r22	; 0x03
    203c:	5d 83       	std	Y+5, r21	; 0x05
    203e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	84 30       	cpi	r24, 0x04	; 4
    2048:	08 f0       	brcs	.+2      	; 0x204c <DIO_enuGetPinValue+0x28>
    204a:	81 c0       	rjmp	.+258    	; 0x214e <DIO_enuGetPinValue+0x12a>
			if(Copy_uint8PinID <= DIO_PIN7){
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	88 30       	cpi	r24, 0x08	; 8
    2050:	08 f0       	brcs	.+2      	; 0x2054 <DIO_enuGetPinValue+0x30>
    2052:	7a c0       	rjmp	.+244    	; 0x2148 <DIO_enuGetPinValue+0x124>
				if(Copy_uint8Value != NULL){
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	9d 81       	ldd	r25, Y+5	; 0x05
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	09 f4       	brne	.+2      	; 0x205e <DIO_enuGetPinValue+0x3a>
    205c:	72 c0       	rjmp	.+228    	; 0x2142 <DIO_enuGetPinValue+0x11e>
					switch(Copy_uint8PortID){
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	3f 83       	std	Y+7, r19	; 0x07
    2066:	2e 83       	std	Y+6, r18	; 0x06
    2068:	4e 81       	ldd	r20, Y+6	; 0x06
    206a:	5f 81       	ldd	r21, Y+7	; 0x07
    206c:	41 30       	cpi	r20, 0x01	; 1
    206e:	51 05       	cpc	r21, r1
    2070:	59 f1       	breq	.+86     	; 0x20c8 <DIO_enuGetPinValue+0xa4>
    2072:	8e 81       	ldd	r24, Y+6	; 0x06
    2074:	9f 81       	ldd	r25, Y+7	; 0x07
    2076:	82 30       	cpi	r24, 0x02	; 2
    2078:	91 05       	cpc	r25, r1
    207a:	34 f4       	brge	.+12     	; 0x2088 <DIO_enuGetPinValue+0x64>
    207c:	2e 81       	ldd	r18, Y+6	; 0x06
    207e:	3f 81       	ldd	r19, Y+7	; 0x07
    2080:	21 15       	cp	r18, r1
    2082:	31 05       	cpc	r19, r1
    2084:	69 f0       	breq	.+26     	; 0x20a0 <DIO_enuGetPinValue+0x7c>
    2086:	5b c0       	rjmp	.+182    	; 0x213e <DIO_enuGetPinValue+0x11a>
    2088:	4e 81       	ldd	r20, Y+6	; 0x06
    208a:	5f 81       	ldd	r21, Y+7	; 0x07
    208c:	42 30       	cpi	r20, 0x02	; 2
    208e:	51 05       	cpc	r21, r1
    2090:	79 f1       	breq	.+94     	; 0x20f0 <DIO_enuGetPinValue+0xcc>
    2092:	8e 81       	ldd	r24, Y+6	; 0x06
    2094:	9f 81       	ldd	r25, Y+7	; 0x07
    2096:	83 30       	cpi	r24, 0x03	; 3
    2098:	91 05       	cpc	r25, r1
    209a:	09 f4       	brne	.+2      	; 0x209e <DIO_enuGetPinValue+0x7a>
    209c:	3d c0       	rjmp	.+122    	; 0x2118 <DIO_enuGetPinValue+0xf4>
    209e:	4f c0       	rjmp	.+158    	; 0x213e <DIO_enuGetPinValue+0x11a>
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
    20a0:	e9 e3       	ldi	r30, 0x39	; 57
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a9 01       	movw	r20, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <DIO_enuGetPinValue+0x94>
    20b4:	55 95       	asr	r21
    20b6:	47 95       	ror	r20
    20b8:	8a 95       	dec	r24
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <DIO_enuGetPinValue+0x90>
    20bc:	ca 01       	movw	r24, r20
    20be:	81 70       	andi	r24, 0x01	; 1
    20c0:	ec 81       	ldd	r30, Y+4	; 0x04
    20c2:	fd 81       	ldd	r31, Y+5	; 0x05
    20c4:	80 83       	st	Z, r24
    20c6:	3b c0       	rjmp	.+118    	; 0x213e <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
    20c8:	e6 e3       	ldi	r30, 0x36	; 54
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	88 2f       	mov	r24, r24
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a9 01       	movw	r20, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <DIO_enuGetPinValue+0xbc>
    20dc:	55 95       	asr	r21
    20de:	47 95       	ror	r20
    20e0:	8a 95       	dec	r24
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <DIO_enuGetPinValue+0xb8>
    20e4:	ca 01       	movw	r24, r20
    20e6:	81 70       	andi	r24, 0x01	; 1
    20e8:	ec 81       	ldd	r30, Y+4	; 0x04
    20ea:	fd 81       	ldd	r31, Y+5	; 0x05
    20ec:	80 83       	st	Z, r24
    20ee:	27 c0       	rjmp	.+78     	; 0x213e <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
    20f0:	e3 e3       	ldi	r30, 0x33	; 51
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a9 01       	movw	r20, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_enuGetPinValue+0xe4>
    2104:	55 95       	asr	r21
    2106:	47 95       	ror	r20
    2108:	8a 95       	dec	r24
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_enuGetPinValue+0xe0>
    210c:	ca 01       	movw	r24, r20
    210e:	81 70       	andi	r24, 0x01	; 1
    2110:	ec 81       	ldd	r30, Y+4	; 0x04
    2112:	fd 81       	ldd	r31, Y+5	; 0x05
    2114:	80 83       	st	Z, r24
    2116:	13 c0       	rjmp	.+38     	; 0x213e <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
    2118:	e0 e3       	ldi	r30, 0x30	; 48
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a9 01       	movw	r20, r18
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <DIO_enuGetPinValue+0x10c>
    212c:	55 95       	asr	r21
    212e:	47 95       	ror	r20
    2130:	8a 95       	dec	r24
    2132:	e2 f7       	brpl	.-8      	; 0x212c <DIO_enuGetPinValue+0x108>
    2134:	ca 01       	movw	r24, r20
    2136:	81 70       	andi	r24, 0x01	; 1
    2138:	ec 81       	ldd	r30, Y+4	; 0x04
    213a:	fd 81       	ldd	r31, Y+5	; 0x05
    213c:	80 83       	st	Z, r24
							break;
					}
					Local_enuErrorState = ES_OK;
    213e:	19 82       	std	Y+1, r1	; 0x01
    2140:	08 c0       	rjmp	.+16     	; 0x2152 <DIO_enuGetPinValue+0x12e>
				}
				else{
					Local_enuErrorState = ES_NULL_POINTER;
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	05 c0       	rjmp	.+10     	; 0x2152 <DIO_enuGetPinValue+0x12e>
				}
			}
			else{
				Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    2148:	84 e0       	ldi	r24, 0x04	; 4
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <DIO_enuGetPinValue+0x12e>
			}
		}
		else{
			Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorState;
    2152:	89 81       	ldd	r24, Y+1	; 0x01
}
    2154:	27 96       	adiw	r28, 0x07	; 7
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <main>:

#include "util/delay.h"

uint_8 x;
void Tog(void);
int main(void){
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	a1 97       	sbiw	r28, 0x21	; 33
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61

	TIMER0_enuInit();
    217a:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER0_enuInit>
	//DIO_enuSetPortDir(DIO_uint8_PORTC, OUTPUT);
	DIO_enuSetPortDir(DIO_uint8_PORTA, 0xff);
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	6f ef       	ldi	r22, 0xFF	; 255
    2182:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_enuSetPortDir>
	DIO_enuSetPortValue(DIO_uint8_PORTA, 0xff);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	6f ef       	ldi	r22, 0xFF	; 255
    218a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <DIO_enuSetPortValue>
	*((volatile uint_8*) 0x5F) |= (1 << 7);
    218e:	af e5       	ldi	r26, 0x5F	; 95
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ef e5       	ldi	r30, 0x5F	; 95
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	80 68       	ori	r24, 0x80	; 128
    219a:	8c 93       	st	X, r24

	//TIMER0_enuCTCCallBack(&Tog, NULL);
	//TIMER0_enuFastPWMByDutyCycle(.9, TIMER0_uint8PHASECORRECT_PWM_SET);
	//TIMER0_enuPhaseCorrectByDutyCycle(0.7, TIMER0_uint8PHASECORRECT_PWM_CLEAR);
		uint_8 j = 0;
    219c:	19 a2       	std	Y+33, r1	; 0x21
	for(f32 i =0; i < 1; i+= 0.1){
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e0       	ldi	r26, 0x00	; 0
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	8d 8f       	std	Y+29, r24	; 0x1d
    21a8:	9e 8f       	std	Y+30, r25	; 0x1e
    21aa:	af 8f       	std	Y+31, r26	; 0x1f
    21ac:	b8 a3       	std	Y+32, r27	; 0x20
    21ae:	39 c1       	rjmp	.+626    	; 0x2422 <main+0x2bc>
		TIMER0_enuPhaseCorrectByDutyCycle(i, TIMER0_uint8PHASECORRECT_PWM_CLEAR);
    21b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b4:	af 8d       	ldd	r26, Y+31	; 0x1f
    21b6:	b8 a1       	ldd	r27, Y+32	; 0x20
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	42 e0       	ldi	r20, 0x02	; 2
    21be:	0e 94 3f 0b 	call	0x167e	; 0x167e <TIMER0_enuPhaseCorrectByDutyCycle>
		if(i >= 0.9){
    21c2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21c4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    21c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21c8:	98 a1       	ldd	r25, Y+32	; 0x20
    21ca:	26 e6       	ldi	r18, 0x66	; 102
    21cc:	36 e6       	ldi	r19, 0x66	; 102
    21ce:	46 e6       	ldi	r20, 0x66	; 102
    21d0:	5f e3       	ldi	r21, 0x3F	; 63
    21d2:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    21d6:	88 23       	and	r24, r24
    21d8:	0c f4       	brge	.+2      	; 0x21dc <main+0x76>
    21da:	87 c0       	rjmp	.+270    	; 0x22ea <main+0x184>
			i = 0.1;
    21dc:	8d ec       	ldi	r24, 0xCD	; 205
    21de:	9c ec       	ldi	r25, 0xCC	; 204
    21e0:	ac ec       	ldi	r26, 0xCC	; 204
    21e2:	bd e3       	ldi	r27, 0x3D	; 61
    21e4:	8d 8f       	std	Y+29, r24	; 0x1d
    21e6:	9e 8f       	std	Y+30, r25	; 0x1e
    21e8:	af 8f       	std	Y+31, r26	; 0x1f
    21ea:	b8 a3       	std	Y+32, r27	; 0x20
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	aa e7       	ldi	r26, 0x7A	; 122
    21f2:	b4 e4       	ldi	r27, 0x44	; 68
    21f4:	89 8f       	std	Y+25, r24	; 0x19
    21f6:	9a 8f       	std	Y+26, r25	; 0x1a
    21f8:	ab 8f       	std	Y+27, r26	; 0x1b
    21fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	69 8d       	ldd	r22, Y+25	; 0x19
    21fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a e7       	ldi	r20, 0x7A	; 122
    220a:	53 e4       	ldi	r21, 0x43	; 67
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8d 8b       	std	Y+21, r24	; 0x15
    2216:	9e 8b       	std	Y+22, r25	; 0x16
    2218:	af 8b       	std	Y+23, r26	; 0x17
    221a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    221c:	6d 89       	ldd	r22, Y+21	; 0x15
    221e:	7e 89       	ldd	r23, Y+22	; 0x16
    2220:	8f 89       	ldd	r24, Y+23	; 0x17
    2222:	98 8d       	ldd	r25, Y+24	; 0x18
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <main+0xd8>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9c 8b       	std	Y+20, r25	; 0x14
    223a:	8b 8b       	std	Y+19, r24	; 0x13
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <main+0x156>
	else if (__tmp > 65535)
    223e:	6d 89       	ldd	r22, Y+21	; 0x15
    2240:	7e 89       	ldd	r23, Y+22	; 0x16
    2242:	8f 89       	ldd	r24, Y+23	; 0x17
    2244:	98 8d       	ldd	r25, Y+24	; 0x18
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	4c f5       	brge	.+82     	; 0x22a8 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	69 8d       	ldd	r22, Y+25	; 0x19
    2258:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	51 e4       	ldi	r21, 0x41	; 65
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9c 8b       	std	Y+20, r25	; 0x14
    227c:	8b 8b       	std	Y+19, r24	; 0x13
    227e:	0f c0       	rjmp	.+30     	; 0x229e <main+0x138>
    2280:	89 e1       	ldi	r24, 0x19	; 25
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9a 8b       	std	Y+18, r25	; 0x12
    2286:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2288:	89 89       	ldd	r24, Y+17	; 0x11
    228a:	9a 89       	ldd	r25, Y+18	; 0x12
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <main+0x126>
    2290:	9a 8b       	std	Y+18, r25	; 0x12
    2292:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	8b 89       	ldd	r24, Y+19	; 0x13
    2296:	9c 89       	ldd	r25, Y+20	; 0x14
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	9c 8b       	std	Y+20, r25	; 0x14
    229c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	8b 89       	ldd	r24, Y+19	; 0x13
    22a0:	9c 89       	ldd	r25, Y+20	; 0x14
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	69 f7       	brne	.-38     	; 0x2280 <main+0x11a>
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <main+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	6d 89       	ldd	r22, Y+21	; 0x15
    22aa:	7e 89       	ldd	r23, Y+22	; 0x16
    22ac:	8f 89       	ldd	r24, Y+23	; 0x17
    22ae:	98 8d       	ldd	r25, Y+24	; 0x18
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9c 8b       	std	Y+20, r25	; 0x14
    22ba:	8b 8b       	std	Y+19, r24	; 0x13
    22bc:	8b 89       	ldd	r24, Y+19	; 0x13
    22be:	9c 89       	ldd	r25, Y+20	; 0x14
    22c0:	98 8b       	std	Y+16, r25	; 0x10
    22c2:	8f 87       	std	Y+15, r24	; 0x0f
    22c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c6:	98 89       	ldd	r25, Y+16	; 0x10
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <main+0x162>
    22cc:	98 8b       	std	Y+16, r25	; 0x10
    22ce:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			if(j < 8){
    22d0:	89 a1       	ldd	r24, Y+33	; 0x21
    22d2:	88 30       	cpi	r24, 0x08	; 8
    22d4:	20 f4       	brcc	.+8      	; 0x22de <main+0x178>
				j+=1;
    22d6:	89 a1       	ldd	r24, Y+33	; 0x21
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	89 a3       	std	Y+33, r24	; 0x21
    22dc:	20 c0       	rjmp	.+64     	; 0x231e <main+0x1b8>
			}
			else{
				DIO_enuSetPortValue(DIO_uint8_PORTA, 0xff);
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	6f ef       	ldi	r22, 0xFF	; 255
    22e2:	0e 94 b0 0c 	call	0x1960	; 0x1960 <DIO_enuSetPortValue>
				j = 0;
    22e6:	19 a2       	std	Y+33, r1	; 0x21
    22e8:	1a c0       	rjmp	.+52     	; 0x231e <main+0x1b8>
			}
		}
		else if(i >= 0.5){
    22ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22ec:	7e 8d       	ldd	r23, Y+30	; 0x1e
    22ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22f0:	98 a1       	ldd	r25, Y+32	; 0x20
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    22fe:	88 23       	and	r24, r24
    2300:	34 f0       	brlt	.+12     	; 0x230e <main+0x1a8>
			DIO_enuSetPinValue(DIO_uint8_PORTA, j, LOW);
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	69 a1       	ldd	r22, Y+33	; 0x21
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_enuSetPinValue>
    230c:	08 c0       	rjmp	.+16     	; 0x231e <main+0x1b8>
		}
		else{
			DIO_enuSetPinValue(DIO_uint8_PORTA, j-1, HIGH);
    230e:	89 a1       	ldd	r24, Y+33	; 0x21
    2310:	98 2f       	mov	r25, r24
    2312:	91 50       	subi	r25, 0x01	; 1
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	69 2f       	mov	r22, r25
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DIO_enuSetPinValue>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	aa ef       	ldi	r26, 0xFA	; 250
    2324:	b3 e4       	ldi	r27, 0x43	; 67
    2326:	8b 87       	std	Y+11, r24	; 0x0b
    2328:	9c 87       	std	Y+12, r25	; 0x0c
    232a:	ad 87       	std	Y+13, r26	; 0x0d
    232c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a e7       	ldi	r20, 0x7A	; 122
    233c:	53 e4       	ldi	r21, 0x43	; 67
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8f 83       	std	Y+7, r24	; 0x07
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	a9 87       	std	Y+9, r26	; 0x09
    234c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <main+0x20a>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <main+0x288>
	else if (__tmp > 65535)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <main+0x26a>
    23b2:	89 e1       	ldi	r24, 0x19	; 25
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <main+0x258>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <main+0x24c>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <main+0x294>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01

	//TIMER0_enuCTCCallBack(&Tog, NULL);
	//TIMER0_enuFastPWMByDutyCycle(.9, TIMER0_uint8PHASECORRECT_PWM_SET);
	//TIMER0_enuPhaseCorrectByDutyCycle(0.7, TIMER0_uint8PHASECORRECT_PWM_CLEAR);
		uint_8 j = 0;
	for(f32 i =0; i < 1; i+= 0.1){
    2402:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2404:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2408:	98 a1       	ldd	r25, Y+32	; 0x20
    240a:	2d ec       	ldi	r18, 0xCD	; 205
    240c:	3c ec       	ldi	r19, 0xCC	; 204
    240e:	4c ec       	ldi	r20, 0xCC	; 204
    2410:	5d e3       	ldi	r21, 0x3D	; 61
    2412:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8d 8f       	std	Y+29, r24	; 0x1d
    241c:	9e 8f       	std	Y+30, r25	; 0x1e
    241e:	af 8f       	std	Y+31, r26	; 0x1f
    2420:	b8 a3       	std	Y+32, r27	; 0x20
    2422:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2424:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2426:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2428:	98 a1       	ldd	r25, Y+32	; 0x20
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	0c f4       	brge	.+2      	; 0x243c <main+0x2d6>
    243a:	ba ce       	rjmp	.-652    	; 0x21b0 <main+0x4a>
		else{
			DIO_enuSetPinValue(DIO_uint8_PORTA, j-1, HIGH);
		}
		_delay_ms(500);
	}
	DIO_enuSetPortValue(DIO_uint8_PORTA, 0x00);
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	0e 94 b0 0c 	call	0x1960	; 0x1960 <DIO_enuSetPortValue>
    2444:	ff cf       	rjmp	.-2      	; 0x2444 <main+0x2de>

00002446 <Tog>:
	while(1){

	}
	return 0;
}
void Tog(void){
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62

}
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <__prologue_saves__>:
    2454:	2f 92       	push	r2
    2456:	3f 92       	push	r3
    2458:	4f 92       	push	r4
    245a:	5f 92       	push	r5
    245c:	6f 92       	push	r6
    245e:	7f 92       	push	r7
    2460:	8f 92       	push	r8
    2462:	9f 92       	push	r9
    2464:	af 92       	push	r10
    2466:	bf 92       	push	r11
    2468:	cf 92       	push	r12
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	ca 1b       	sub	r28, r26
    247e:	db 0b       	sbc	r29, r27
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	09 94       	ijmp

0000248c <__epilogue_restores__>:
    248c:	2a 88       	ldd	r2, Y+18	; 0x12
    248e:	39 88       	ldd	r3, Y+17	; 0x11
    2490:	48 88       	ldd	r4, Y+16	; 0x10
    2492:	5f 84       	ldd	r5, Y+15	; 0x0f
    2494:	6e 84       	ldd	r6, Y+14	; 0x0e
    2496:	7d 84       	ldd	r7, Y+13	; 0x0d
    2498:	8c 84       	ldd	r8, Y+12	; 0x0c
    249a:	9b 84       	ldd	r9, Y+11	; 0x0b
    249c:	aa 84       	ldd	r10, Y+10	; 0x0a
    249e:	b9 84       	ldd	r11, Y+9	; 0x09
    24a0:	c8 84       	ldd	r12, Y+8	; 0x08
    24a2:	df 80       	ldd	r13, Y+7	; 0x07
    24a4:	ee 80       	ldd	r14, Y+6	; 0x06
    24a6:	fd 80       	ldd	r15, Y+5	; 0x05
    24a8:	0c 81       	ldd	r16, Y+4	; 0x04
    24aa:	1b 81       	ldd	r17, Y+3	; 0x03
    24ac:	aa 81       	ldd	r26, Y+2	; 0x02
    24ae:	b9 81       	ldd	r27, Y+1	; 0x01
    24b0:	ce 0f       	add	r28, r30
    24b2:	d1 1d       	adc	r29, r1
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	ed 01       	movw	r28, r26
    24c0:	08 95       	ret

000024c2 <_exit>:
    24c2:	f8 94       	cli

000024c4 <__stop_program>:
    24c4:	ff cf       	rjmp	.-2      	; 0x24c4 <__stop_program>
