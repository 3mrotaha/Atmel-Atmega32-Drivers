
try_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006850  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00006850  000068e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800172  00800172  000069f6  2**0
                  ALLOC
  3 .stab         000035d0  00000000  00000000  000069f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b8  00000000  00000000  00009fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a0  00000000  00000000  0000b380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002f9  00000000  00000000  0000b620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003b0b  00000000  00000000  0000b919  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001bb6  00000000  00000000  0000f424  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bec  00000000  00000000  00010fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  00012bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003ee  00000000  00000000  00012e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000028c4  00000000  00000000  00013276  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00015b3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 79 1d 	jmp	0x3af2	; 0x3af2 <__vector_1>
       8:	0c 94 b6 1d 	jmp	0x3b6c	; 0x3b6c <__vector_2>
       c:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 19 25 	jmp	0x4a32	; 0x4a32 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f8 e6       	ldi	r31, 0x68	; 104
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a9 33 	call	0x6752	; 0x6752 <main>
      8a:	0c 94 26 34 	jmp	0x684c	; 0x684c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
     1bc:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__fixsfdi>:
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	7b 01       	movw	r14, r22
     1f2:	8c 01       	movw	r16, r24
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
     200:	88 23       	and	r24, r24
     202:	0c f0       	brlt	.+2      	; 0x206 <__fixsfdi+0x1e>
     204:	5c c0       	rjmp	.+184    	; 0x2be <__fixsfdi+0xd6>
     206:	c8 01       	movw	r24, r16
     208:	b7 01       	movw	r22, r14
     20a:	90 58       	subi	r25, 0x80	; 128
     20c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfdi>
     210:	21 95       	neg	r18
     212:	e1 e0       	ldi	r30, 0x01	; 1
     214:	12 16       	cp	r1, r18
     216:	08 f0       	brcs	.+2      	; 0x21a <__fixsfdi+0x32>
     218:	e0 e0       	ldi	r30, 0x00	; 0
     21a:	31 95       	neg	r19
     21c:	f1 e0       	ldi	r31, 0x01	; 1
     21e:	13 16       	cp	r1, r19
     220:	08 f0       	brcs	.+2      	; 0x224 <__fixsfdi+0x3c>
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	e3 2e       	mov	r14, r19
     226:	ee 1a       	sub	r14, r30
     228:	e1 e0       	ldi	r30, 0x01	; 1
     22a:	3e 15       	cp	r19, r14
     22c:	08 f0       	brcs	.+2      	; 0x230 <__fixsfdi+0x48>
     22e:	e0 e0       	ldi	r30, 0x00	; 0
     230:	fe 2b       	or	r31, r30
     232:	41 95       	neg	r20
     234:	a1 e0       	ldi	r26, 0x01	; 1
     236:	14 16       	cp	r1, r20
     238:	08 f0       	brcs	.+2      	; 0x23c <__fixsfdi+0x54>
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	f4 2e       	mov	r15, r20
     23e:	ff 1a       	sub	r15, r31
     240:	e1 e0       	ldi	r30, 0x01	; 1
     242:	4f 15       	cp	r20, r15
     244:	08 f0       	brcs	.+2      	; 0x248 <__fixsfdi+0x60>
     246:	e0 e0       	ldi	r30, 0x00	; 0
     248:	ae 2b       	or	r26, r30
     24a:	51 95       	neg	r21
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	15 16       	cp	r1, r21
     250:	08 f0       	brcs	.+2      	; 0x254 <__fixsfdi+0x6c>
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	05 2f       	mov	r16, r21
     256:	0a 1b       	sub	r16, r26
     258:	e1 e0       	ldi	r30, 0x01	; 1
     25a:	50 17       	cp	r21, r16
     25c:	08 f0       	brcs	.+2      	; 0x260 <__fixsfdi+0x78>
     25e:	e0 e0       	ldi	r30, 0x00	; 0
     260:	fe 2b       	or	r31, r30
     262:	61 95       	neg	r22
     264:	a1 e0       	ldi	r26, 0x01	; 1
     266:	16 16       	cp	r1, r22
     268:	08 f0       	brcs	.+2      	; 0x26c <__fixsfdi+0x84>
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	16 2f       	mov	r17, r22
     26e:	1f 1b       	sub	r17, r31
     270:	e1 e0       	ldi	r30, 0x01	; 1
     272:	61 17       	cp	r22, r17
     274:	08 f0       	brcs	.+2      	; 0x278 <__fixsfdi+0x90>
     276:	e0 e0       	ldi	r30, 0x00	; 0
     278:	ae 2b       	or	r26, r30
     27a:	71 95       	neg	r23
     27c:	f1 e0       	ldi	r31, 0x01	; 1
     27e:	17 16       	cp	r1, r23
     280:	08 f0       	brcs	.+2      	; 0x284 <__fixsfdi+0x9c>
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	b7 2f       	mov	r27, r23
     286:	ba 1b       	sub	r27, r26
     288:	e1 e0       	ldi	r30, 0x01	; 1
     28a:	7b 17       	cp	r23, r27
     28c:	08 f0       	brcs	.+2      	; 0x290 <__fixsfdi+0xa8>
     28e:	e0 e0       	ldi	r30, 0x00	; 0
     290:	fe 2b       	or	r31, r30
     292:	81 95       	neg	r24
     294:	a1 e0       	ldi	r26, 0x01	; 1
     296:	18 16       	cp	r1, r24
     298:	08 f0       	brcs	.+2      	; 0x29c <__fixsfdi+0xb4>
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	38 2f       	mov	r19, r24
     29e:	3f 1b       	sub	r19, r31
     2a0:	f3 2f       	mov	r31, r19
     2a2:	e1 e0       	ldi	r30, 0x01	; 1
     2a4:	83 17       	cp	r24, r19
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <__fixsfdi+0xc2>
     2a8:	e0 e0       	ldi	r30, 0x00	; 0
     2aa:	ae 2b       	or	r26, r30
     2ac:	91 95       	neg	r25
     2ae:	3e 2d       	mov	r19, r14
     2b0:	4f 2d       	mov	r20, r15
     2b2:	50 2f       	mov	r21, r16
     2b4:	61 2f       	mov	r22, r17
     2b6:	7b 2f       	mov	r23, r27
     2b8:	8f 2f       	mov	r24, r31
     2ba:	9a 1b       	sub	r25, r26
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__fixsfdi+0xde>
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfdi>
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	08 95       	ret

000002d0 <__fixunssfdi>:
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ee e6       	ldi	r30, 0x6E	; 110
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	0c 94 ef 33 	jmp	0x67de	; 0x67de <__prologue_saves__>
     2dc:	7b 01       	movw	r14, r22
     2de:	8c 01       	movw	r16, r24
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e8       	ldi	r20, 0x80	; 128
     2e6:	5f e3       	ldi	r21, 0x3F	; 63
     2e8:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
     2ec:	88 23       	and	r24, r24
     2ee:	4c f4       	brge	.+18     	; 0x302 <__fixunssfdi+0x32>
     2f0:	aa 24       	eor	r10, r10
     2f2:	bb 24       	eor	r11, r11
     2f4:	cc 24       	eor	r12, r12
     2f6:	dd 24       	eor	r13, r13
     2f8:	ee 24       	eor	r14, r14
     2fa:	ff 24       	eor	r15, r15
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	86 c0       	rjmp	.+268    	; 0x40e <__fixunssfdi+0x13e>
     302:	c8 01       	movw	r24, r16
     304:	b7 01       	movw	r22, r14
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e8       	ldi	r20, 0x80	; 128
     30c:	5f e4       	ldi	r21, 0x4F	; 79
     30e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
     312:	88 23       	and	r24, r24
     314:	54 f4       	brge	.+20     	; 0x32a <__fixunssfdi+0x5a>
     316:	c8 01       	movw	r24, r16
     318:	b7 01       	movw	r22, r14
     31a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     31e:	5b 01       	movw	r10, r22
     320:	6c 01       	movw	r12, r24
     322:	ee 24       	eor	r14, r14
     324:	ff 24       	eor	r15, r15
     326:	87 01       	movw	r16, r14
     328:	72 c0       	rjmp	.+228    	; 0x40e <__fixunssfdi+0x13e>
     32a:	c8 01       	movw	r24, r16
     32c:	b7 01       	movw	r22, r14
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e5       	ldi	r21, 0x5F	; 95
     336:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
     33a:	87 fd       	sbrc	r24, 7
     33c:	0f c0       	rjmp	.+30     	; 0x35c <__fixunssfdi+0x8c>
     33e:	aa 24       	eor	r10, r10
     340:	aa 94       	dec	r10
     342:	bb 24       	eor	r11, r11
     344:	ba 94       	dec	r11
     346:	cc 24       	eor	r12, r12
     348:	ca 94       	dec	r12
     34a:	dd 24       	eor	r13, r13
     34c:	da 94       	dec	r13
     34e:	ee 24       	eor	r14, r14
     350:	ea 94       	dec	r14
     352:	ff 24       	eor	r15, r15
     354:	fa 94       	dec	r15
     356:	0f ef       	ldi	r16, 0xFF	; 255
     358:	1f ef       	ldi	r17, 0xFF	; 255
     35a:	59 c0       	rjmp	.+178    	; 0x40e <__fixunssfdi+0x13e>
     35c:	c8 01       	movw	r24, r16
     35e:	b7 01       	movw	r22, r14
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 e8       	ldi	r20, 0x80	; 128
     366:	5f e2       	ldi	r21, 0x2F	; 47
     368:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
     36c:	7b 01       	movw	r14, r22
     36e:	8c 01       	movw	r16, r24
     370:	22 24       	eor	r2, r2
     372:	33 24       	eor	r3, r3
     374:	21 01       	movw	r4, r2
     376:	90 e1       	ldi	r25, 0x10	; 16
     378:	a9 2e       	mov	r10, r25
     37a:	b1 2c       	mov	r11, r1
     37c:	c1 2c       	mov	r12, r1
     37e:	d1 2c       	mov	r13, r1
     380:	c0 e0       	ldi	r28, 0x00	; 0
     382:	d0 e0       	ldi	r29, 0x00	; 0
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0a 2c       	mov	r0, r10
     38e:	04 c0       	rjmp	.+8      	; 0x398 <__fixunssfdi+0xc8>
     390:	66 0f       	add	r22, r22
     392:	77 1f       	adc	r23, r23
     394:	88 1f       	adc	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	0a 94       	dec	r0
     39a:	d2 f7       	brpl	.-12     	; 0x390 <__fixunssfdi+0xc0>
     39c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatunsisf>
     3a0:	3b 01       	movw	r6, r22
     3a2:	4c 01       	movw	r8, r24
     3a4:	c8 01       	movw	r24, r16
     3a6:	b7 01       	movw	r22, r14
     3a8:	a4 01       	movw	r20, r8
     3aa:	93 01       	movw	r18, r6
     3ac:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__gesf2>
     3b0:	88 23       	and	r24, r24
     3b2:	64 f0       	brlt	.+24     	; 0x3cc <__fixunssfdi+0xfc>
     3b4:	2a 28       	or	r2, r10
     3b6:	3b 28       	or	r3, r11
     3b8:	4c 28       	or	r4, r12
     3ba:	5d 28       	or	r5, r13
     3bc:	c8 01       	movw	r24, r16
     3be:	b7 01       	movw	r22, r14
     3c0:	a4 01       	movw	r20, r8
     3c2:	93 01       	movw	r18, r6
     3c4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__divsf3>
     3c8:	7b 01       	movw	r14, r22
     3ca:	8c 01       	movw	r16, r24
     3cc:	d6 94       	lsr	r13
     3ce:	c7 94       	ror	r12
     3d0:	b7 94       	ror	r11
     3d2:	a7 94       	ror	r10
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	c5 30       	cpi	r28, 0x05	; 5
     3d8:	d1 05       	cpc	r29, r1
     3da:	a1 f6       	brne	.-88     	; 0x384 <__fixunssfdi+0xb4>
     3dc:	c8 01       	movw	r24, r16
     3de:	b7 01       	movw	r22, r14
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e8       	ldi	r20, 0x80	; 128
     3e6:	5f e4       	ldi	r21, 0x4F	; 79
     3e8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
     3ec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     3f0:	5b 01       	movw	r10, r22
     3f2:	6c 01       	movw	r12, r24
     3f4:	9b 01       	movw	r18, r22
     3f6:	a6 01       	movw	r20, r12
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	02 2d       	mov	r16, r2
     402:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
     406:	59 01       	movw	r10, r18
     408:	6a 01       	movw	r12, r20
     40a:	7b 01       	movw	r14, r22
     40c:	8c 01       	movw	r16, r24
     40e:	95 01       	movw	r18, r10
     410:	a6 01       	movw	r20, r12
     412:	b7 01       	movw	r22, r14
     414:	c8 01       	movw	r24, r16
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	e2 e1       	ldi	r30, 0x12	; 18
     41c:	0c 94 0b 34 	jmp	0x6816	; 0x6816 <__epilogue_restores__>

00000420 <__floatundisf>:
     420:	a2 e0       	ldi	r26, 0x02	; 2
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 ef 33 	jmp	0x67de	; 0x67de <__prologue_saves__>
     42c:	12 2f       	mov	r17, r18
     42e:	b3 2e       	mov	r11, r19
     430:	a4 2e       	mov	r10, r20
     432:	95 2e       	mov	r9, r21
     434:	86 2e       	mov	r8, r22
     436:	37 2e       	mov	r3, r23
     438:	28 2e       	mov	r2, r24
     43a:	9a 83       	std	Y+2, r25	; 0x02
     43c:	c2 2e       	mov	r12, r18
     43e:	d3 2e       	mov	r13, r19
     440:	e4 2e       	mov	r14, r20
     442:	f5 2e       	mov	r15, r21
     444:	a7 01       	movw	r20, r14
     446:	96 01       	movw	r18, r12
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	21 17       	cp	r18, r17
     452:	a1 f4       	brne	.+40     	; 0x47c <__floatundisf+0x5c>
     454:	3b 15       	cp	r19, r11
     456:	91 f4       	brne	.+36     	; 0x47c <__floatundisf+0x5c>
     458:	4a 15       	cp	r20, r10
     45a:	81 f4       	brne	.+32     	; 0x47c <__floatundisf+0x5c>
     45c:	59 15       	cp	r21, r9
     45e:	71 f4       	brne	.+28     	; 0x47c <__floatundisf+0x5c>
     460:	68 15       	cp	r22, r8
     462:	61 f4       	brne	.+24     	; 0x47c <__floatundisf+0x5c>
     464:	73 15       	cp	r23, r3
     466:	51 f4       	brne	.+20     	; 0x47c <__floatundisf+0x5c>
     468:	82 15       	cp	r24, r2
     46a:	41 f4       	brne	.+16     	; 0x47c <__floatundisf+0x5c>
     46c:	aa 81       	ldd	r26, Y+2	; 0x02
     46e:	9a 17       	cp	r25, r26
     470:	29 f4       	brne	.+10     	; 0x47c <__floatundisf+0x5c>
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatunsisf>
     47a:	aa c0       	rjmp	.+340    	; 0x5d0 <__floatundisf+0x1b0>
     47c:	21 2f       	mov	r18, r17
     47e:	3b 2d       	mov	r19, r11
     480:	4a 2d       	mov	r20, r10
     482:	59 2d       	mov	r21, r9
     484:	68 2d       	mov	r22, r8
     486:	73 2d       	mov	r23, r3
     488:	82 2d       	mov	r24, r2
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	00 e2       	ldi	r16, 0x20	; 32
     48e:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__lshrdi3>
     492:	c9 01       	movw	r24, r18
     494:	da 01       	movw	r26, r20
     496:	80 30       	cpi	r24, 0x00	; 0
     498:	e0 e0       	ldi	r30, 0x00	; 0
     49a:	9e 07       	cpc	r25, r30
     49c:	e1 e0       	ldi	r30, 0x01	; 1
     49e:	ae 07       	cpc	r26, r30
     4a0:	e0 e0       	ldi	r30, 0x00	; 0
     4a2:	be 07       	cpc	r27, r30
     4a4:	80 f4       	brcc	.+32     	; 0x4c6 <__floatundisf+0xa6>
     4a6:	8f 3f       	cpi	r24, 0xFF	; 255
     4a8:	91 05       	cpc	r25, r1
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	31 f0       	breq	.+12     	; 0x4bc <__floatundisf+0x9c>
     4b0:	28 f0       	brcs	.+10     	; 0x4bc <__floatundisf+0x9c>
     4b2:	28 e0       	ldi	r18, 0x08	; 8
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <__floatundisf+0xc8>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	11 c0       	rjmp	.+34     	; 0x4e8 <__floatundisf+0xc8>
     4c6:	80 30       	cpi	r24, 0x00	; 0
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	9f 07       	cpc	r25, r31
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	af 07       	cpc	r26, r31
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	bf 07       	cpc	r27, r31
     4d4:	28 f0       	brcs	.+10     	; 0x4e0 <__floatundisf+0xc0>
     4d6:	28 e1       	ldi	r18, 0x18	; 24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__floatundisf+0xc8>
     4e0:	20 e1       	ldi	r18, 0x10	; 16
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	02 2e       	mov	r0, r18
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__floatundisf+0xd4>
     4ec:	b6 95       	lsr	r27
     4ee:	a7 95       	ror	r26
     4f0:	97 95       	ror	r25
     4f2:	87 95       	ror	r24
     4f4:	0a 94       	dec	r0
     4f6:	d2 f7       	brpl	.-12     	; 0x4ec <__floatundisf+0xcc>
     4f8:	fc 01       	movw	r30, r24
     4fa:	e8 59       	subi	r30, 0x98	; 152
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	80 81       	ld	r24, Z
     500:	29 01       	movw	r4, r18
     502:	3a 01       	movw	r6, r20
     504:	48 0e       	add	r4, r24
     506:	51 1c       	adc	r5, r1
     508:	61 1c       	adc	r6, r1
     50a:	71 1c       	adc	r7, r1
     50c:	49 82       	std	Y+1, r4	; 0x01
     50e:	21 2f       	mov	r18, r17
     510:	3b 2d       	mov	r19, r11
     512:	4a 2d       	mov	r20, r10
     514:	59 2d       	mov	r21, r9
     516:	68 2d       	mov	r22, r8
     518:	73 2d       	mov	r23, r3
     51a:	82 2d       	mov	r24, r2
     51c:	9a 81       	ldd	r25, Y+2	; 0x02
     51e:	04 2d       	mov	r16, r4
     520:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__lshrdi3>
     524:	c9 01       	movw	r24, r18
     526:	da 01       	movw	r26, r20
     528:	4c 01       	movw	r8, r24
     52a:	5d 01       	movw	r10, r26
     52c:	80 e2       	ldi	r24, 0x20	; 32
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	84 19       	sub	r24, r4
     532:	95 09       	sbc	r25, r5
     534:	04 c0       	rjmp	.+8      	; 0x53e <__floatundisf+0x11e>
     536:	cc 0c       	add	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	ee 1c       	adc	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	8a 95       	dec	r24
     540:	d2 f7       	brpl	.-12     	; 0x536 <__floatundisf+0x116>
     542:	c1 14       	cp	r12, r1
     544:	d1 04       	cpc	r13, r1
     546:	e1 04       	cpc	r14, r1
     548:	f1 04       	cpc	r15, r1
     54a:	41 f0       	breq	.+16     	; 0x55c <__floatundisf+0x13c>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	88 2a       	or	r8, r24
     556:	99 2a       	or	r9, r25
     558:	aa 2a       	or	r10, r26
     55a:	bb 2a       	or	r11, r27
     55c:	90 e2       	ldi	r25, 0x20	; 32
     55e:	49 16       	cp	r4, r25
     560:	51 04       	cpc	r5, r1
     562:	61 04       	cpc	r6, r1
     564:	71 04       	cpc	r7, r1
     566:	59 f4       	brne	.+22     	; 0x57e <__floatundisf+0x15e>
     568:	0f 2e       	mov	r0, r31
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	ef 2e       	mov	r14, r31
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	ff 2e       	mov	r15, r31
     572:	f0 e8       	ldi	r31, 0x80	; 128
     574:	0f 2f       	mov	r16, r31
     576:	ff e4       	ldi	r31, 0x4F	; 79
     578:	1f 2f       	mov	r17, r31
     57a:	f0 2d       	mov	r31, r0
     57c:	21 c0       	rjmp	.+66     	; 0x5c0 <__floatundisf+0x1a0>
     57e:	af e1       	ldi	r26, 0x1F	; 31
     580:	4a 16       	cp	r4, r26
     582:	51 04       	cpc	r5, r1
     584:	61 04       	cpc	r6, r1
     586:	71 04       	cpc	r7, r1
     588:	59 f4       	brne	.+22     	; 0x5a0 <__floatundisf+0x180>
     58a:	0f 2e       	mov	r0, r31
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	ef 2e       	mov	r14, r31
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ff 2e       	mov	r15, r31
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	0f 2f       	mov	r16, r31
     598:	ff e4       	ldi	r31, 0x4F	; 79
     59a:	1f 2f       	mov	r17, r31
     59c:	f0 2d       	mov	r31, r0
     59e:	10 c0       	rjmp	.+32     	; 0x5c0 <__floatundisf+0x1a0>
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	09 80       	ldd	r0, Y+1	; 0x01
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <__floatundisf+0x194>
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	88 1f       	adc	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	0a 94       	dec	r0
     5b6:	d2 f7       	brpl	.-12     	; 0x5ac <__floatundisf+0x18c>
     5b8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__floatsisf>
     5bc:	7b 01       	movw	r14, r22
     5be:	8c 01       	movw	r16, r24
     5c0:	c5 01       	movw	r24, r10
     5c2:	b4 01       	movw	r22, r8
     5c4:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatunsisf>
     5c8:	a8 01       	movw	r20, r16
     5ca:	97 01       	movw	r18, r14
     5cc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
     5d0:	22 96       	adiw	r28, 0x02	; 2
     5d2:	e2 e1       	ldi	r30, 0x12	; 18
     5d4:	0c 94 0b 34 	jmp	0x6816	; 0x6816 <__epilogue_restores__>

000005d8 <__divdi3>:
     5d8:	a2 e7       	ldi	r26, 0x72	; 114
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e2 ef       	ldi	r30, 0xF2	; 242
     5de:	f2 e0       	ldi	r31, 0x02	; 2
     5e0:	0c 94 ef 33 	jmp	0x67de	; 0x67de <__prologue_saves__>
     5e4:	98 2e       	mov	r9, r24
     5e6:	89 2e       	mov	r8, r25
     5e8:	71 2e       	mov	r7, r17
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	fe 01       	movw	r30, r28
     5ee:	31 96       	adiw	r30, 0x01	; 1
     5f0:	df 01       	movw	r26, r30
     5f2:	68 2e       	mov	r6, r24
     5f4:	1d 92       	st	X+, r1
     5f6:	6a 94       	dec	r6
     5f8:	e9 f7       	brne	.-6      	; 0x5f4 <__divdi3+0x1c>
     5fa:	29 83       	std	Y+1, r18	; 0x01
     5fc:	3a 83       	std	Y+2, r19	; 0x02
     5fe:	4b 83       	std	Y+3, r20	; 0x03
     600:	5c 83       	std	Y+4, r21	; 0x04
     602:	6d 83       	std	Y+5, r22	; 0x05
     604:	7e 83       	std	Y+6, r23	; 0x06
     606:	9f 82       	std	Y+7, r9	; 0x07
     608:	98 87       	std	Y+8, r25	; 0x08
     60a:	fe 01       	movw	r30, r28
     60c:	39 96       	adiw	r30, 0x09	; 9
     60e:	df 01       	movw	r26, r30
     610:	1d 92       	st	X+, r1
     612:	8a 95       	dec	r24
     614:	e9 f7       	brne	.-6      	; 0x610 <__divdi3+0x38>
     616:	a9 86       	std	Y+9, r10	; 0x09
     618:	ba 86       	std	Y+10, r11	; 0x0a
     61a:	cb 86       	std	Y+11, r12	; 0x0b
     61c:	dc 86       	std	Y+12, r13	; 0x0c
     61e:	ed 86       	std	Y+13, r14	; 0x0d
     620:	fe 86       	std	Y+14, r15	; 0x0e
     622:	0f 87       	std	Y+15, r16	; 0x0f
     624:	18 8b       	std	Y+16, r17	; 0x10
     626:	8d 81       	ldd	r24, Y+5	; 0x05
     628:	9e 81       	ldd	r25, Y+6	; 0x06
     62a:	af 81       	ldd	r26, Y+7	; 0x07
     62c:	b8 85       	ldd	r27, Y+8	; 0x08
     62e:	b7 fd       	sbrc	r27, 7
     630:	07 c0       	rjmp	.+14     	; 0x640 <__divdi3+0x68>
     632:	e1 96       	adiw	r28, 0x31	; 49
     634:	1c ae       	std	Y+60, r1	; 0x3c
     636:	1d ae       	std	Y+61, r1	; 0x3d
     638:	1e ae       	std	Y+62, r1	; 0x3e
     63a:	1f ae       	std	Y+63, r1	; 0x3f
     63c:	e1 97       	sbiw	r28, 0x31	; 49
     63e:	64 c0       	rjmp	.+200    	; 0x708 <__divdi3+0x130>
     640:	21 95       	neg	r18
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	12 16       	cp	r1, r18
     646:	08 f0       	brcs	.+2      	; 0x64a <__divdi3+0x72>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	31 95       	neg	r19
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	13 16       	cp	r1, r19
     650:	08 f0       	brcs	.+2      	; 0x654 <__divdi3+0x7c>
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	b3 2f       	mov	r27, r19
     656:	b8 1b       	sub	r27, r24
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	3b 17       	cp	r19, r27
     65c:	08 f0       	brcs	.+2      	; 0x660 <__divdi3+0x88>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	98 2b       	or	r25, r24
     662:	41 95       	neg	r20
     664:	31 e0       	ldi	r19, 0x01	; 1
     666:	14 16       	cp	r1, r20
     668:	08 f0       	brcs	.+2      	; 0x66c <__divdi3+0x94>
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	a4 2f       	mov	r26, r20
     66e:	a9 1b       	sub	r26, r25
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	4a 17       	cp	r20, r26
     674:	08 f0       	brcs	.+2      	; 0x678 <__divdi3+0xa0>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	38 2b       	or	r19, r24
     67a:	51 95       	neg	r21
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	15 16       	cp	r1, r21
     680:	08 f0       	brcs	.+2      	; 0x684 <__divdi3+0xac>
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	f5 2f       	mov	r31, r21
     686:	f3 1b       	sub	r31, r19
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	5f 17       	cp	r21, r31
     68c:	08 f0       	brcs	.+2      	; 0x690 <__divdi3+0xb8>
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	98 2b       	or	r25, r24
     692:	61 95       	neg	r22
     694:	31 e0       	ldi	r19, 0x01	; 1
     696:	16 16       	cp	r1, r22
     698:	08 f0       	brcs	.+2      	; 0x69c <__divdi3+0xc4>
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	e6 2f       	mov	r30, r22
     69e:	e9 1b       	sub	r30, r25
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	6e 17       	cp	r22, r30
     6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__divdi3+0xd0>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	38 2b       	or	r19, r24
     6aa:	71 95       	neg	r23
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	17 16       	cp	r1, r23
     6b0:	08 f0       	brcs	.+2      	; 0x6b4 <__divdi3+0xdc>
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	57 2f       	mov	r21, r23
     6b6:	53 1b       	sub	r21, r19
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	75 17       	cp	r23, r21
     6bc:	08 f0       	brcs	.+2      	; 0x6c0 <__divdi3+0xe8>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	48 2b       	or	r20, r24
     6c2:	89 2d       	mov	r24, r9
     6c4:	81 95       	neg	r24
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	18 16       	cp	r1, r24
     6ca:	08 f0       	brcs	.+2      	; 0x6ce <__divdi3+0xf6>
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	68 2e       	mov	r6, r24
     6d0:	64 1a       	sub	r6, r20
     6d2:	46 2d       	mov	r20, r6
     6d4:	31 e0       	ldi	r19, 0x01	; 1
     6d6:	86 15       	cp	r24, r6
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <__divdi3+0x104>
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	93 2b       	or	r25, r19
     6de:	88 2d       	mov	r24, r8
     6e0:	81 95       	neg	r24
     6e2:	89 1b       	sub	r24, r25
     6e4:	29 83       	std	Y+1, r18	; 0x01
     6e6:	ba 83       	std	Y+2, r27	; 0x02
     6e8:	ab 83       	std	Y+3, r26	; 0x03
     6ea:	fc 83       	std	Y+4, r31	; 0x04
     6ec:	ed 83       	std	Y+5, r30	; 0x05
     6ee:	5e 83       	std	Y+6, r21	; 0x06
     6f0:	4f 83       	std	Y+7, r20	; 0x07
     6f2:	88 87       	std	Y+8, r24	; 0x08
     6f4:	2f ef       	ldi	r18, 0xFF	; 255
     6f6:	3f ef       	ldi	r19, 0xFF	; 255
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f ef       	ldi	r21, 0xFF	; 255
     6fc:	e1 96       	adiw	r28, 0x31	; 49
     6fe:	2c af       	std	Y+60, r18	; 0x3c
     700:	3d af       	std	Y+61, r19	; 0x3d
     702:	4e af       	std	Y+62, r20	; 0x3e
     704:	5f af       	std	Y+63, r21	; 0x3f
     706:	e1 97       	sbiw	r28, 0x31	; 49
     708:	8d 85       	ldd	r24, Y+13	; 0x0d
     70a:	9e 85       	ldd	r25, Y+14	; 0x0e
     70c:	af 85       	ldd	r26, Y+15	; 0x0f
     70e:	b8 89       	ldd	r27, Y+16	; 0x10
     710:	b7 ff       	sbrs	r27, 7
     712:	6a c0       	rjmp	.+212    	; 0x7e8 <__divdi3+0x210>
     714:	e1 96       	adiw	r28, 0x31	; 49
     716:	4c ad       	ldd	r20, Y+60	; 0x3c
     718:	5d ad       	ldd	r21, Y+61	; 0x3d
     71a:	6e ad       	ldd	r22, Y+62	; 0x3e
     71c:	7f ad       	ldd	r23, Y+63	; 0x3f
     71e:	e1 97       	sbiw	r28, 0x31	; 49
     720:	40 95       	com	r20
     722:	50 95       	com	r21
     724:	60 95       	com	r22
     726:	70 95       	com	r23
     728:	e1 96       	adiw	r28, 0x31	; 49
     72a:	4c af       	std	Y+60, r20	; 0x3c
     72c:	5d af       	std	Y+61, r21	; 0x3d
     72e:	6e af       	std	Y+62, r22	; 0x3e
     730:	7f af       	std	Y+63, r23	; 0x3f
     732:	e1 97       	sbiw	r28, 0x31	; 49
     734:	a1 94       	neg	r10
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	1a 14       	cp	r1, r10
     73a:	08 f0       	brcs	.+2      	; 0x73e <__divdi3+0x166>
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	b1 94       	neg	r11
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	1b 14       	cp	r1, r11
     744:	08 f0       	brcs	.+2      	; 0x748 <__divdi3+0x170>
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	6b 2d       	mov	r22, r11
     74a:	68 1b       	sub	r22, r24
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	b6 16       	cp	r11, r22
     750:	08 f0       	brcs	.+2      	; 0x754 <__divdi3+0x17c>
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	98 2b       	or	r25, r24
     756:	c1 94       	neg	r12
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	1c 14       	cp	r1, r12
     75c:	08 f0       	brcs	.+2      	; 0x760 <__divdi3+0x188>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	5c 2d       	mov	r21, r12
     762:	59 1b       	sub	r21, r25
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	c5 16       	cp	r12, r21
     768:	08 f0       	brcs	.+2      	; 0x76c <__divdi3+0x194>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	28 2b       	or	r18, r24
     76e:	d1 94       	neg	r13
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	1d 14       	cp	r1, r13
     774:	08 f0       	brcs	.+2      	; 0x778 <__divdi3+0x1a0>
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	4d 2d       	mov	r20, r13
     77a:	42 1b       	sub	r20, r18
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	d4 16       	cp	r13, r20
     780:	08 f0       	brcs	.+2      	; 0x784 <__divdi3+0x1ac>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	98 2b       	or	r25, r24
     786:	e1 94       	neg	r14
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	1e 14       	cp	r1, r14
     78c:	08 f0       	brcs	.+2      	; 0x790 <__divdi3+0x1b8>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	3e 2d       	mov	r19, r14
     792:	39 1b       	sub	r19, r25
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	e3 16       	cp	r14, r19
     798:	08 f0       	brcs	.+2      	; 0x79c <__divdi3+0x1c4>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	28 2b       	or	r18, r24
     79e:	f1 94       	neg	r15
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	1f 14       	cp	r1, r15
     7a4:	08 f0       	brcs	.+2      	; 0x7a8 <__divdi3+0x1d0>
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	7f 2d       	mov	r23, r15
     7aa:	72 1b       	sub	r23, r18
     7ac:	27 2f       	mov	r18, r23
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	f7 16       	cp	r15, r23
     7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__divdi3+0x1de>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	98 2b       	or	r25, r24
     7b8:	01 95       	neg	r16
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	10 16       	cp	r1, r16
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <__divdi3+0x1ea>
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	80 2f       	mov	r24, r16
     7c4:	89 1b       	sub	r24, r25
     7c6:	98 2f       	mov	r25, r24
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	09 17       	cp	r16, r25
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <__divdi3+0x1f8>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	18 2b       	or	r17, r24
     7d2:	87 2d       	mov	r24, r7
     7d4:	81 95       	neg	r24
     7d6:	81 1b       	sub	r24, r17
     7d8:	a9 86       	std	Y+9, r10	; 0x09
     7da:	6a 87       	std	Y+10, r22	; 0x0a
     7dc:	5b 87       	std	Y+11, r21	; 0x0b
     7de:	4c 87       	std	Y+12, r20	; 0x0c
     7e0:	3d 87       	std	Y+13, r19	; 0x0d
     7e2:	2e 87       	std	Y+14, r18	; 0x0e
     7e4:	9f 87       	std	Y+15, r25	; 0x0f
     7e6:	88 8b       	std	Y+16, r24	; 0x10
     7e8:	99 81       	ldd	r25, Y+1	; 0x01
     7ea:	2a 81       	ldd	r18, Y+2	; 0x02
     7ec:	3b 81       	ldd	r19, Y+3	; 0x03
     7ee:	4c 81       	ldd	r20, Y+4	; 0x04
     7f0:	5d 81       	ldd	r21, Y+5	; 0x05
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	7f 81       	ldd	r23, Y+7	; 0x07
     7f6:	a8 85       	ldd	r26, Y+8	; 0x08
     7f8:	b9 85       	ldd	r27, Y+9	; 0x09
     7fa:	1a 85       	ldd	r17, Y+10	; 0x0a
     7fc:	0b 85       	ldd	r16, Y+11	; 0x0b
     7fe:	fc 84       	ldd	r15, Y+12	; 0x0c
     800:	ed 84       	ldd	r14, Y+13	; 0x0d
     802:	de 84       	ldd	r13, Y+14	; 0x0e
     804:	cf 84       	ldd	r12, Y+15	; 0x0f
     806:	b8 88       	ldd	r11, Y+16	; 0x10
     808:	88 e0       	ldi	r24, 0x08	; 8
     80a:	e1 e1       	ldi	r30, 0x11	; 17
     80c:	8e 2e       	mov	r8, r30
     80e:	91 2c       	mov	r9, r1
     810:	8c 0e       	add	r8, r28
     812:	9d 1e       	adc	r9, r29
     814:	f4 01       	movw	r30, r8
     816:	68 2e       	mov	r6, r24
     818:	11 92       	st	Z+, r1
     81a:	6a 94       	dec	r6
     81c:	e9 f7       	brne	.-6      	; 0x818 <__divdi3+0x240>
     81e:	99 8b       	std	Y+17, r25	; 0x11
     820:	2a 8b       	std	Y+18, r18	; 0x12
     822:	3b 8b       	std	Y+19, r19	; 0x13
     824:	4c 8b       	std	Y+20, r20	; 0x14
     826:	5d 8b       	std	Y+21, r21	; 0x15
     828:	6e 8b       	std	Y+22, r22	; 0x16
     82a:	7f 8b       	std	Y+23, r23	; 0x17
     82c:	a8 8f       	std	Y+24, r26	; 0x18
     82e:	9e 01       	movw	r18, r28
     830:	27 5e       	subi	r18, 0xE7	; 231
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	f9 01       	movw	r30, r18
     836:	11 92       	st	Z+, r1
     838:	8a 95       	dec	r24
     83a:	e9 f7       	brne	.-6      	; 0x836 <__divdi3+0x25e>
     83c:	b9 8f       	std	Y+25, r27	; 0x19
     83e:	1a 8f       	std	Y+26, r17	; 0x1a
     840:	0b 8f       	std	Y+27, r16	; 0x1b
     842:	fc 8e       	std	Y+28, r15	; 0x1c
     844:	ed 8e       	std	Y+29, r14	; 0x1d
     846:	de 8e       	std	Y+30, r13	; 0x1e
     848:	cf 8e       	std	Y+31, r12	; 0x1f
     84a:	b8 a2       	std	Y+32, r11	; 0x20
     84c:	29 8c       	ldd	r2, Y+25	; 0x19
     84e:	3a 8c       	ldd	r3, Y+26	; 0x1a
     850:	4b 8c       	ldd	r4, Y+27	; 0x1b
     852:	5c 8c       	ldd	r5, Y+28	; 0x1c
     854:	ed 8c       	ldd	r14, Y+29	; 0x1d
     856:	fe 8c       	ldd	r15, Y+30	; 0x1e
     858:	0f 8d       	ldd	r16, Y+31	; 0x1f
     85a:	18 a1       	ldd	r17, Y+32	; 0x20
     85c:	69 88       	ldd	r6, Y+17	; 0x11
     85e:	7a 88       	ldd	r7, Y+18	; 0x12
     860:	8b 88       	ldd	r8, Y+19	; 0x13
     862:	9c 88       	ldd	r9, Y+20	; 0x14
     864:	21 96       	adiw	r28, 0x01	; 1
     866:	6c ae       	std	Y+60, r6	; 0x3c
     868:	7d ae       	std	Y+61, r7	; 0x3d
     86a:	8e ae       	std	Y+62, r8	; 0x3e
     86c:	9f ae       	std	Y+63, r9	; 0x3f
     86e:	21 97       	sbiw	r28, 0x01	; 1
     870:	6d 88       	ldd	r6, Y+21	; 0x15
     872:	7e 88       	ldd	r7, Y+22	; 0x16
     874:	8f 88       	ldd	r8, Y+23	; 0x17
     876:	98 8c       	ldd	r9, Y+24	; 0x18
     878:	e1 14       	cp	r14, r1
     87a:	f1 04       	cpc	r15, r1
     87c:	01 05       	cpc	r16, r1
     87e:	11 05       	cpc	r17, r1
     880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
     882:	d9 c3       	rjmp	.+1970   	; 0x1036 <__stack+0x7d7>
     884:	62 14       	cp	r6, r2
     886:	73 04       	cpc	r7, r3
     888:	84 04       	cpc	r8, r4
     88a:	95 04       	cpc	r9, r5
     88c:	08 f0       	brcs	.+2      	; 0x890 <__stack+0x31>
     88e:	57 c1       	rjmp	.+686    	; 0xb3e <__stack+0x2df>
     890:	00 e0       	ldi	r16, 0x00	; 0
     892:	20 16       	cp	r2, r16
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	30 06       	cpc	r3, r16
     898:	01 e0       	ldi	r16, 0x01	; 1
     89a:	40 06       	cpc	r4, r16
     89c:	00 e0       	ldi	r16, 0x00	; 0
     89e:	50 06       	cpc	r5, r16
     8a0:	88 f4       	brcc	.+34     	; 0x8c4 <__stack+0x65>
     8a2:	1f ef       	ldi	r17, 0xFF	; 255
     8a4:	21 16       	cp	r2, r17
     8a6:	31 04       	cpc	r3, r1
     8a8:	41 04       	cpc	r4, r1
     8aa:	51 04       	cpc	r5, r1
     8ac:	39 f0       	breq	.+14     	; 0x8bc <__stack+0x5d>
     8ae:	30 f0       	brcs	.+12     	; 0x8bc <__stack+0x5d>
     8b0:	48 e0       	ldi	r20, 0x08	; 8
     8b2:	e4 2e       	mov	r14, r20
     8b4:	f1 2c       	mov	r15, r1
     8b6:	01 2d       	mov	r16, r1
     8b8:	11 2d       	mov	r17, r1
     8ba:	18 c0       	rjmp	.+48     	; 0x8ec <__stack+0x8d>
     8bc:	ee 24       	eor	r14, r14
     8be:	ff 24       	eor	r15, r15
     8c0:	87 01       	movw	r16, r14
     8c2:	14 c0       	rjmp	.+40     	; 0x8ec <__stack+0x8d>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	22 16       	cp	r2, r18
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	32 06       	cpc	r3, r18
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	42 06       	cpc	r4, r18
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	52 06       	cpc	r5, r18
     8d4:	30 f0       	brcs	.+12     	; 0x8e2 <__stack+0x83>
     8d6:	38 e1       	ldi	r19, 0x18	; 24
     8d8:	e3 2e       	mov	r14, r19
     8da:	f1 2c       	mov	r15, r1
     8dc:	01 2d       	mov	r16, r1
     8de:	11 2d       	mov	r17, r1
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <__stack+0x8d>
     8e2:	20 e1       	ldi	r18, 0x10	; 16
     8e4:	e2 2e       	mov	r14, r18
     8e6:	f1 2c       	mov	r15, r1
     8e8:	01 2d       	mov	r16, r1
     8ea:	11 2d       	mov	r17, r1
     8ec:	d2 01       	movw	r26, r4
     8ee:	c1 01       	movw	r24, r2
     8f0:	0e 2c       	mov	r0, r14
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__stack+0x9d>
     8f4:	b6 95       	lsr	r27
     8f6:	a7 95       	ror	r26
     8f8:	97 95       	ror	r25
     8fa:	87 95       	ror	r24
     8fc:	0a 94       	dec	r0
     8fe:	d2 f7       	brpl	.-12     	; 0x8f4 <__stack+0x95>
     900:	88 59       	subi	r24, 0x98	; 152
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	dc 01       	movw	r26, r24
     906:	2c 91       	ld	r18, X
     908:	80 e2       	ldi	r24, 0x20	; 32
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	8e 19       	sub	r24, r14
     912:	9f 09       	sbc	r25, r15
     914:	a0 0b       	sbc	r26, r16
     916:	b1 0b       	sbc	r27, r17
     918:	7c 01       	movw	r14, r24
     91a:	8d 01       	movw	r16, r26
     91c:	e2 1a       	sub	r14, r18
     91e:	f1 08       	sbc	r15, r1
     920:	01 09       	sbc	r16, r1
     922:	11 09       	sbc	r17, r1
     924:	e1 14       	cp	r14, r1
     926:	f1 04       	cpc	r15, r1
     928:	01 05       	cpc	r16, r1
     92a:	11 05       	cpc	r17, r1
     92c:	d1 f1       	breq	.+116    	; 0x9a2 <__stack+0x143>
     92e:	0e 2c       	mov	r0, r14
     930:	04 c0       	rjmp	.+8      	; 0x93a <__stack+0xdb>
     932:	22 0c       	add	r2, r2
     934:	33 1c       	adc	r3, r3
     936:	44 1c       	adc	r4, r4
     938:	55 1c       	adc	r5, r5
     93a:	0a 94       	dec	r0
     93c:	d2 f7       	brpl	.-12     	; 0x932 <__stack+0xd3>
     93e:	a4 01       	movw	r20, r8
     940:	93 01       	movw	r18, r6
     942:	0e 2c       	mov	r0, r14
     944:	04 c0       	rjmp	.+8      	; 0x94e <__stack+0xef>
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	44 1f       	adc	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	0a 94       	dec	r0
     950:	d2 f7       	brpl	.-12     	; 0x946 <__stack+0xe7>
     952:	80 e2       	ldi	r24, 0x20	; 32
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	8e 19       	sub	r24, r14
     958:	9f 09       	sbc	r25, r15
     95a:	21 96       	adiw	r28, 0x01	; 1
     95c:	6c ac       	ldd	r6, Y+60	; 0x3c
     95e:	7d ac       	ldd	r7, Y+61	; 0x3d
     960:	8e ac       	ldd	r8, Y+62	; 0x3e
     962:	9f ac       	ldd	r9, Y+63	; 0x3f
     964:	21 97       	sbiw	r28, 0x01	; 1
     966:	04 c0       	rjmp	.+8      	; 0x970 <__stack+0x111>
     968:	96 94       	lsr	r9
     96a:	87 94       	ror	r8
     96c:	77 94       	ror	r7
     96e:	67 94       	ror	r6
     970:	8a 95       	dec	r24
     972:	d2 f7       	brpl	.-12     	; 0x968 <__stack+0x109>
     974:	62 2a       	or	r6, r18
     976:	73 2a       	or	r7, r19
     978:	84 2a       	or	r8, r20
     97a:	95 2a       	or	r9, r21
     97c:	21 96       	adiw	r28, 0x01	; 1
     97e:	ac ac       	ldd	r10, Y+60	; 0x3c
     980:	bd ac       	ldd	r11, Y+61	; 0x3d
     982:	ce ac       	ldd	r12, Y+62	; 0x3e
     984:	df ac       	ldd	r13, Y+63	; 0x3f
     986:	21 97       	sbiw	r28, 0x01	; 1
     988:	04 c0       	rjmp	.+8      	; 0x992 <__stack+0x133>
     98a:	aa 0c       	add	r10, r10
     98c:	bb 1c       	adc	r11, r11
     98e:	cc 1c       	adc	r12, r12
     990:	dd 1c       	adc	r13, r13
     992:	ea 94       	dec	r14
     994:	d2 f7       	brpl	.-12     	; 0x98a <__stack+0x12b>
     996:	21 96       	adiw	r28, 0x01	; 1
     998:	ac ae       	std	Y+60, r10	; 0x3c
     99a:	bd ae       	std	Y+61, r11	; 0x3d
     99c:	ce ae       	std	Y+62, r12	; 0x3e
     99e:	df ae       	std	Y+63, r13	; 0x3f
     9a0:	21 97       	sbiw	r28, 0x01	; 1
     9a2:	62 01       	movw	r12, r4
     9a4:	ee 24       	eor	r14, r14
     9a6:	ff 24       	eor	r15, r15
     9a8:	29 96       	adiw	r28, 0x09	; 9
     9aa:	cc ae       	std	Y+60, r12	; 0x3c
     9ac:	dd ae       	std	Y+61, r13	; 0x3d
     9ae:	ee ae       	std	Y+62, r14	; 0x3e
     9b0:	ff ae       	std	Y+63, r15	; 0x3f
     9b2:	29 97       	sbiw	r28, 0x09	; 9
     9b4:	92 01       	movw	r18, r4
     9b6:	81 01       	movw	r16, r2
     9b8:	20 70       	andi	r18, 0x00	; 0
     9ba:	30 70       	andi	r19, 0x00	; 0
     9bc:	2d 96       	adiw	r28, 0x0d	; 13
     9be:	0c af       	std	Y+60, r16	; 0x3c
     9c0:	1d af       	std	Y+61, r17	; 0x3d
     9c2:	2e af       	std	Y+62, r18	; 0x3e
     9c4:	3f af       	std	Y+63, r19	; 0x3f
     9c6:	2d 97       	sbiw	r28, 0x0d	; 13
     9c8:	c4 01       	movw	r24, r8
     9ca:	b3 01       	movw	r22, r6
     9cc:	a7 01       	movw	r20, r14
     9ce:	96 01       	movw	r18, r12
     9d0:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     9d4:	7b 01       	movw	r14, r22
     9d6:	8c 01       	movw	r16, r24
     9d8:	c4 01       	movw	r24, r8
     9da:	b3 01       	movw	r22, r6
     9dc:	29 96       	adiw	r28, 0x09	; 9
     9de:	2c ad       	ldd	r18, Y+60	; 0x3c
     9e0:	3d ad       	ldd	r19, Y+61	; 0x3d
     9e2:	4e ad       	ldd	r20, Y+62	; 0x3e
     9e4:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e6:	29 97       	sbiw	r28, 0x09	; 9
     9e8:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     9ec:	c9 01       	movw	r24, r18
     9ee:	da 01       	movw	r26, r20
     9f0:	3c 01       	movw	r6, r24
     9f2:	4d 01       	movw	r8, r26
     9f4:	c4 01       	movw	r24, r8
     9f6:	b3 01       	movw	r22, r6
     9f8:	2d 96       	adiw	r28, 0x0d	; 13
     9fa:	2c ad       	ldd	r18, Y+60	; 0x3c
     9fc:	3d ad       	ldd	r19, Y+61	; 0x3d
     9fe:	4e ad       	ldd	r20, Y+62	; 0x3e
     a00:	5f ad       	ldd	r21, Y+63	; 0x3f
     a02:	2d 97       	sbiw	r28, 0x0d	; 13
     a04:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	87 01       	movw	r16, r14
     a0e:	ff 24       	eor	r15, r15
     a10:	ee 24       	eor	r14, r14
     a12:	21 96       	adiw	r28, 0x01	; 1
     a14:	ac ac       	ldd	r10, Y+60	; 0x3c
     a16:	bd ac       	ldd	r11, Y+61	; 0x3d
     a18:	ce ac       	ldd	r12, Y+62	; 0x3e
     a1a:	df ac       	ldd	r13, Y+63	; 0x3f
     a1c:	21 97       	sbiw	r28, 0x01	; 1
     a1e:	c6 01       	movw	r24, r12
     a20:	aa 27       	eor	r26, r26
     a22:	bb 27       	eor	r27, r27
     a24:	57 01       	movw	r10, r14
     a26:	68 01       	movw	r12, r16
     a28:	a8 2a       	or	r10, r24
     a2a:	b9 2a       	or	r11, r25
     a2c:	ca 2a       	or	r12, r26
     a2e:	db 2a       	or	r13, r27
     a30:	a2 16       	cp	r10, r18
     a32:	b3 06       	cpc	r11, r19
     a34:	c4 06       	cpc	r12, r20
     a36:	d5 06       	cpc	r13, r21
     a38:	e0 f4       	brcc	.+56     	; 0xa72 <__stack+0x213>
     a3a:	08 94       	sec
     a3c:	61 08       	sbc	r6, r1
     a3e:	71 08       	sbc	r7, r1
     a40:	81 08       	sbc	r8, r1
     a42:	91 08       	sbc	r9, r1
     a44:	a2 0c       	add	r10, r2
     a46:	b3 1c       	adc	r11, r3
     a48:	c4 1c       	adc	r12, r4
     a4a:	d5 1c       	adc	r13, r5
     a4c:	a2 14       	cp	r10, r2
     a4e:	b3 04       	cpc	r11, r3
     a50:	c4 04       	cpc	r12, r4
     a52:	d5 04       	cpc	r13, r5
     a54:	70 f0       	brcs	.+28     	; 0xa72 <__stack+0x213>
     a56:	a2 16       	cp	r10, r18
     a58:	b3 06       	cpc	r11, r19
     a5a:	c4 06       	cpc	r12, r20
     a5c:	d5 06       	cpc	r13, r21
     a5e:	48 f4       	brcc	.+18     	; 0xa72 <__stack+0x213>
     a60:	08 94       	sec
     a62:	61 08       	sbc	r6, r1
     a64:	71 08       	sbc	r7, r1
     a66:	81 08       	sbc	r8, r1
     a68:	91 08       	sbc	r9, r1
     a6a:	a2 0c       	add	r10, r2
     a6c:	b3 1c       	adc	r11, r3
     a6e:	c4 1c       	adc	r12, r4
     a70:	d5 1c       	adc	r13, r5
     a72:	a2 1a       	sub	r10, r18
     a74:	b3 0a       	sbc	r11, r19
     a76:	c4 0a       	sbc	r12, r20
     a78:	d5 0a       	sbc	r13, r21
     a7a:	c6 01       	movw	r24, r12
     a7c:	b5 01       	movw	r22, r10
     a7e:	29 96       	adiw	r28, 0x09	; 9
     a80:	2c ad       	ldd	r18, Y+60	; 0x3c
     a82:	3d ad       	ldd	r19, Y+61	; 0x3d
     a84:	4e ad       	ldd	r20, Y+62	; 0x3e
     a86:	5f ad       	ldd	r21, Y+63	; 0x3f
     a88:	29 97       	sbiw	r28, 0x09	; 9
     a8a:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     a8e:	7b 01       	movw	r14, r22
     a90:	8c 01       	movw	r16, r24
     a92:	c6 01       	movw	r24, r12
     a94:	b5 01       	movw	r22, r10
     a96:	29 96       	adiw	r28, 0x09	; 9
     a98:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9a:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9c:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9e:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa0:	29 97       	sbiw	r28, 0x09	; 9
     aa2:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     aa6:	c9 01       	movw	r24, r18
     aa8:	da 01       	movw	r26, r20
     aaa:	5c 01       	movw	r10, r24
     aac:	6d 01       	movw	r12, r26
     aae:	c6 01       	movw	r24, r12
     ab0:	b5 01       	movw	r22, r10
     ab2:	2d 96       	adiw	r28, 0x0d	; 13
     ab4:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab6:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab8:	4e ad       	ldd	r20, Y+62	; 0x3e
     aba:	5f ad       	ldd	r21, Y+63	; 0x3f
     abc:	2d 97       	sbiw	r28, 0x0d	; 13
     abe:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	87 01       	movw	r16, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	ee 24       	eor	r14, r14
     acc:	21 96       	adiw	r28, 0x01	; 1
     ace:	8c ad       	ldd	r24, Y+60	; 0x3c
     ad0:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad2:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad4:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad6:	21 97       	sbiw	r28, 0x01	; 1
     ad8:	a0 70       	andi	r26, 0x00	; 0
     ada:	b0 70       	andi	r27, 0x00	; 0
     adc:	e8 2a       	or	r14, r24
     ade:	f9 2a       	or	r15, r25
     ae0:	0a 2b       	or	r16, r26
     ae2:	1b 2b       	or	r17, r27
     ae4:	e2 16       	cp	r14, r18
     ae6:	f3 06       	cpc	r15, r19
     ae8:	04 07       	cpc	r16, r20
     aea:	15 07       	cpc	r17, r21
     aec:	c0 f4       	brcc	.+48     	; 0xb1e <__stack+0x2bf>
     aee:	08 94       	sec
     af0:	a1 08       	sbc	r10, r1
     af2:	b1 08       	sbc	r11, r1
     af4:	c1 08       	sbc	r12, r1
     af6:	d1 08       	sbc	r13, r1
     af8:	e2 0c       	add	r14, r2
     afa:	f3 1c       	adc	r15, r3
     afc:	04 1d       	adc	r16, r4
     afe:	15 1d       	adc	r17, r5
     b00:	e2 14       	cp	r14, r2
     b02:	f3 04       	cpc	r15, r3
     b04:	04 05       	cpc	r16, r4
     b06:	15 05       	cpc	r17, r5
     b08:	50 f0       	brcs	.+20     	; 0xb1e <__stack+0x2bf>
     b0a:	e2 16       	cp	r14, r18
     b0c:	f3 06       	cpc	r15, r19
     b0e:	04 07       	cpc	r16, r20
     b10:	15 07       	cpc	r17, r21
     b12:	28 f4       	brcc	.+10     	; 0xb1e <__stack+0x2bf>
     b14:	08 94       	sec
     b16:	a1 08       	sbc	r10, r1
     b18:	b1 08       	sbc	r11, r1
     b1a:	c1 08       	sbc	r12, r1
     b1c:	d1 08       	sbc	r13, r1
     b1e:	d3 01       	movw	r26, r6
     b20:	99 27       	eor	r25, r25
     b22:	88 27       	eor	r24, r24
     b24:	86 01       	movw	r16, r12
     b26:	75 01       	movw	r14, r10
     b28:	e8 2a       	or	r14, r24
     b2a:	f9 2a       	or	r15, r25
     b2c:	0a 2b       	or	r16, r26
     b2e:	1b 2b       	or	r17, r27
     b30:	25 96       	adiw	r28, 0x05	; 5
     b32:	ec ae       	std	Y+60, r14	; 0x3c
     b34:	fd ae       	std	Y+61, r15	; 0x3d
     b36:	0e af       	std	Y+62, r16	; 0x3e
     b38:	1f af       	std	Y+63, r17	; 0x3f
     b3a:	25 97       	sbiw	r28, 0x05	; 5
     b3c:	eb c4       	rjmp	.+2518   	; 0x1514 <__stack+0xcb5>
     b3e:	21 14       	cp	r2, r1
     b40:	31 04       	cpc	r3, r1
     b42:	41 04       	cpc	r4, r1
     b44:	51 04       	cpc	r5, r1
     b46:	71 f4       	brne	.+28     	; 0xb64 <__stack+0x305>
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     b5c:	c9 01       	movw	r24, r18
     b5e:	da 01       	movw	r26, r20
     b60:	1c 01       	movw	r2, r24
     b62:	2d 01       	movw	r4, r26
     b64:	00 e0       	ldi	r16, 0x00	; 0
     b66:	20 16       	cp	r2, r16
     b68:	00 e0       	ldi	r16, 0x00	; 0
     b6a:	30 06       	cpc	r3, r16
     b6c:	01 e0       	ldi	r16, 0x01	; 1
     b6e:	40 06       	cpc	r4, r16
     b70:	00 e0       	ldi	r16, 0x00	; 0
     b72:	50 06       	cpc	r5, r16
     b74:	88 f4       	brcc	.+34     	; 0xb98 <__stack+0x339>
     b76:	1f ef       	ldi	r17, 0xFF	; 255
     b78:	21 16       	cp	r2, r17
     b7a:	31 04       	cpc	r3, r1
     b7c:	41 04       	cpc	r4, r1
     b7e:	51 04       	cpc	r5, r1
     b80:	31 f0       	breq	.+12     	; 0xb8e <__stack+0x32f>
     b82:	28 f0       	brcs	.+10     	; 0xb8e <__stack+0x32f>
     b84:	48 e0       	ldi	r20, 0x08	; 8
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	17 c0       	rjmp	.+46     	; 0xbbc <__stack+0x35d>
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	12 c0       	rjmp	.+36     	; 0xbbc <__stack+0x35d>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	22 16       	cp	r2, r18
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	32 06       	cpc	r3, r18
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	42 06       	cpc	r4, r18
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	52 06       	cpc	r5, r18
     ba8:	28 f0       	brcs	.+10     	; 0xbb4 <__stack+0x355>
     baa:	48 e1       	ldi	r20, 0x18	; 24
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x35d>
     bb4:	40 e1       	ldi	r20, 0x10	; 16
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	d2 01       	movw	r26, r4
     bbe:	c1 01       	movw	r24, r2
     bc0:	04 2e       	mov	r0, r20
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__stack+0x36d>
     bc4:	b6 95       	lsr	r27
     bc6:	a7 95       	ror	r26
     bc8:	97 95       	ror	r25
     bca:	87 95       	ror	r24
     bcc:	0a 94       	dec	r0
     bce:	d2 f7       	brpl	.-12     	; 0xbc4 <__stack+0x365>
     bd0:	88 59       	subi	r24, 0x98	; 152
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	dc 01       	movw	r26, r24
     bd6:	2c 91       	ld	r18, X
     bd8:	e0 e2       	ldi	r30, 0x20	; 32
     bda:	ee 2e       	mov	r14, r30
     bdc:	f1 2c       	mov	r15, r1
     bde:	01 2d       	mov	r16, r1
     be0:	11 2d       	mov	r17, r1
     be2:	d8 01       	movw	r26, r16
     be4:	c7 01       	movw	r24, r14
     be6:	84 1b       	sub	r24, r20
     be8:	95 0b       	sbc	r25, r21
     bea:	a6 0b       	sbc	r26, r22
     bec:	b7 0b       	sbc	r27, r23
     bee:	82 1b       	sub	r24, r18
     bf0:	91 09       	sbc	r25, r1
     bf2:	a1 09       	sbc	r26, r1
     bf4:	b1 09       	sbc	r27, r1
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 05       	cpc	r26, r1
     bfa:	b1 05       	cpc	r27, r1
     bfc:	61 f4       	brne	.+24     	; 0xc16 <__stack+0x3b7>
     bfe:	64 01       	movw	r12, r8
     c00:	53 01       	movw	r10, r6
     c02:	a2 18       	sub	r10, r2
     c04:	b3 08       	sbc	r11, r3
     c06:	c4 08       	sbc	r12, r4
     c08:	d5 08       	sbc	r13, r5
     c0a:	31 e0       	ldi	r19, 0x01	; 1
     c0c:	63 2e       	mov	r6, r19
     c0e:	71 2c       	mov	r7, r1
     c10:	81 2c       	mov	r8, r1
     c12:	91 2c       	mov	r9, r1
     c14:	24 c1       	rjmp	.+584    	; 0xe5e <__stack+0x5ff>
     c16:	e3 96       	adiw	r28, 0x33	; 51
     c18:	8f af       	std	Y+63, r24	; 0x3f
     c1a:	e3 97       	sbiw	r28, 0x33	; 51
     c1c:	08 2e       	mov	r0, r24
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__stack+0x3c9>
     c20:	22 0c       	add	r2, r2
     c22:	33 1c       	adc	r3, r3
     c24:	44 1c       	adc	r4, r4
     c26:	55 1c       	adc	r5, r5
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__stack+0x3c1>
     c2c:	ee 2d       	mov	r30, r14
     c2e:	e8 1b       	sub	r30, r24
     c30:	64 01       	movw	r12, r8
     c32:	53 01       	movw	r10, r6
     c34:	0e 2e       	mov	r0, r30
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <__stack+0x3e1>
     c38:	d6 94       	lsr	r13
     c3a:	c7 94       	ror	r12
     c3c:	b7 94       	ror	r11
     c3e:	a7 94       	ror	r10
     c40:	0a 94       	dec	r0
     c42:	d2 f7       	brpl	.-12     	; 0xc38 <__stack+0x3d9>
     c44:	a4 01       	movw	r20, r8
     c46:	93 01       	movw	r18, r6
     c48:	e3 96       	adiw	r28, 0x33	; 51
     c4a:	0f ac       	ldd	r0, Y+63	; 0x3f
     c4c:	e3 97       	sbiw	r28, 0x33	; 51
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__stack+0x3f9>
     c50:	22 0f       	add	r18, r18
     c52:	33 1f       	adc	r19, r19
     c54:	44 1f       	adc	r20, r20
     c56:	55 1f       	adc	r21, r21
     c58:	0a 94       	dec	r0
     c5a:	d2 f7       	brpl	.-12     	; 0xc50 <__stack+0x3f1>
     c5c:	21 96       	adiw	r28, 0x01	; 1
     c5e:	6c ac       	ldd	r6, Y+60	; 0x3c
     c60:	7d ac       	ldd	r7, Y+61	; 0x3d
     c62:	8e ac       	ldd	r8, Y+62	; 0x3e
     c64:	9f ac       	ldd	r9, Y+63	; 0x3f
     c66:	21 97       	sbiw	r28, 0x01	; 1
     c68:	0e 2e       	mov	r0, r30
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__stack+0x415>
     c6c:	96 94       	lsr	r9
     c6e:	87 94       	ror	r8
     c70:	77 94       	ror	r7
     c72:	67 94       	ror	r6
     c74:	0a 94       	dec	r0
     c76:	d2 f7       	brpl	.-12     	; 0xc6c <__stack+0x40d>
     c78:	84 01       	movw	r16, r8
     c7a:	73 01       	movw	r14, r6
     c7c:	e2 2a       	or	r14, r18
     c7e:	f3 2a       	or	r15, r19
     c80:	04 2b       	or	r16, r20
     c82:	15 2b       	or	r17, r21
     c84:	e9 ae       	std	Y+57, r14	; 0x39
     c86:	fa ae       	std	Y+58, r15	; 0x3a
     c88:	0b af       	std	Y+59, r16	; 0x3b
     c8a:	1c af       	std	Y+60, r17	; 0x3c
     c8c:	32 01       	movw	r6, r4
     c8e:	88 24       	eor	r8, r8
     c90:	99 24       	eor	r9, r9
     c92:	92 01       	movw	r18, r4
     c94:	81 01       	movw	r16, r2
     c96:	20 70       	andi	r18, 0x00	; 0
     c98:	30 70       	andi	r19, 0x00	; 0
     c9a:	61 96       	adiw	r28, 0x11	; 17
     c9c:	0c af       	std	Y+60, r16	; 0x3c
     c9e:	1d af       	std	Y+61, r17	; 0x3d
     ca0:	2e af       	std	Y+62, r18	; 0x3e
     ca2:	3f af       	std	Y+63, r19	; 0x3f
     ca4:	61 97       	sbiw	r28, 0x11	; 17
     ca6:	c6 01       	movw	r24, r12
     ca8:	b5 01       	movw	r22, r10
     caa:	a4 01       	movw	r20, r8
     cac:	93 01       	movw	r18, r6
     cae:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     cb2:	7b 01       	movw	r14, r22
     cb4:	8c 01       	movw	r16, r24
     cb6:	c6 01       	movw	r24, r12
     cb8:	b5 01       	movw	r22, r10
     cba:	a4 01       	movw	r20, r8
     cbc:	93 01       	movw	r18, r6
     cbe:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     cc2:	c9 01       	movw	r24, r18
     cc4:	da 01       	movw	r26, r20
     cc6:	65 96       	adiw	r28, 0x15	; 21
     cc8:	8c af       	std	Y+60, r24	; 0x3c
     cca:	9d af       	std	Y+61, r25	; 0x3d
     ccc:	ae af       	std	Y+62, r26	; 0x3e
     cce:	bf af       	std	Y+63, r27	; 0x3f
     cd0:	65 97       	sbiw	r28, 0x15	; 21
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	61 96       	adiw	r28, 0x11	; 17
     cd8:	2c ad       	ldd	r18, Y+60	; 0x3c
     cda:	3d ad       	ldd	r19, Y+61	; 0x3d
     cdc:	4e ad       	ldd	r20, Y+62	; 0x3e
     cde:	5f ad       	ldd	r21, Y+63	; 0x3f
     ce0:	61 97       	sbiw	r28, 0x11	; 17
     ce2:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	87 01       	movw	r16, r14
     cec:	ff 24       	eor	r15, r15
     cee:	ee 24       	eor	r14, r14
     cf0:	a9 ac       	ldd	r10, Y+57	; 0x39
     cf2:	ba ac       	ldd	r11, Y+58	; 0x3a
     cf4:	cb ac       	ldd	r12, Y+59	; 0x3b
     cf6:	dc ac       	ldd	r13, Y+60	; 0x3c
     cf8:	c6 01       	movw	r24, r12
     cfa:	aa 27       	eor	r26, r26
     cfc:	bb 27       	eor	r27, r27
     cfe:	5c 01       	movw	r10, r24
     d00:	6d 01       	movw	r12, r26
     d02:	ae 28       	or	r10, r14
     d04:	bf 28       	or	r11, r15
     d06:	c0 2a       	or	r12, r16
     d08:	d1 2a       	or	r13, r17
     d0a:	a2 16       	cp	r10, r18
     d0c:	b3 06       	cpc	r11, r19
     d0e:	c4 06       	cpc	r12, r20
     d10:	d5 06       	cpc	r13, r21
     d12:	60 f5       	brcc	.+88     	; 0xd6c <__stack+0x50d>
     d14:	65 96       	adiw	r28, 0x15	; 21
     d16:	6c ad       	ldd	r22, Y+60	; 0x3c
     d18:	7d ad       	ldd	r23, Y+61	; 0x3d
     d1a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d1c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d1e:	65 97       	sbiw	r28, 0x15	; 21
     d20:	61 50       	subi	r22, 0x01	; 1
     d22:	70 40       	sbci	r23, 0x00	; 0
     d24:	80 40       	sbci	r24, 0x00	; 0
     d26:	90 40       	sbci	r25, 0x00	; 0
     d28:	65 96       	adiw	r28, 0x15	; 21
     d2a:	6c af       	std	Y+60, r22	; 0x3c
     d2c:	7d af       	std	Y+61, r23	; 0x3d
     d2e:	8e af       	std	Y+62, r24	; 0x3e
     d30:	9f af       	std	Y+63, r25	; 0x3f
     d32:	65 97       	sbiw	r28, 0x15	; 21
     d34:	a2 0c       	add	r10, r2
     d36:	b3 1c       	adc	r11, r3
     d38:	c4 1c       	adc	r12, r4
     d3a:	d5 1c       	adc	r13, r5
     d3c:	a2 14       	cp	r10, r2
     d3e:	b3 04       	cpc	r11, r3
     d40:	c4 04       	cpc	r12, r4
     d42:	d5 04       	cpc	r13, r5
     d44:	98 f0       	brcs	.+38     	; 0xd6c <__stack+0x50d>
     d46:	a2 16       	cp	r10, r18
     d48:	b3 06       	cpc	r11, r19
     d4a:	c4 06       	cpc	r12, r20
     d4c:	d5 06       	cpc	r13, r21
     d4e:	70 f4       	brcc	.+28     	; 0xd6c <__stack+0x50d>
     d50:	61 50       	subi	r22, 0x01	; 1
     d52:	70 40       	sbci	r23, 0x00	; 0
     d54:	80 40       	sbci	r24, 0x00	; 0
     d56:	90 40       	sbci	r25, 0x00	; 0
     d58:	65 96       	adiw	r28, 0x15	; 21
     d5a:	6c af       	std	Y+60, r22	; 0x3c
     d5c:	7d af       	std	Y+61, r23	; 0x3d
     d5e:	8e af       	std	Y+62, r24	; 0x3e
     d60:	9f af       	std	Y+63, r25	; 0x3f
     d62:	65 97       	sbiw	r28, 0x15	; 21
     d64:	a2 0c       	add	r10, r2
     d66:	b3 1c       	adc	r11, r3
     d68:	c4 1c       	adc	r12, r4
     d6a:	d5 1c       	adc	r13, r5
     d6c:	a2 1a       	sub	r10, r18
     d6e:	b3 0a       	sbc	r11, r19
     d70:	c4 0a       	sbc	r12, r20
     d72:	d5 0a       	sbc	r13, r21
     d74:	c6 01       	movw	r24, r12
     d76:	b5 01       	movw	r22, r10
     d78:	a4 01       	movw	r20, r8
     d7a:	93 01       	movw	r18, r6
     d7c:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     d80:	7b 01       	movw	r14, r22
     d82:	8c 01       	movw	r16, r24
     d84:	c6 01       	movw	r24, r12
     d86:	b5 01       	movw	r22, r10
     d88:	a4 01       	movw	r20, r8
     d8a:	93 01       	movw	r18, r6
     d8c:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     d90:	c9 01       	movw	r24, r18
     d92:	da 01       	movw	r26, r20
     d94:	3c 01       	movw	r6, r24
     d96:	4d 01       	movw	r8, r26
     d98:	c4 01       	movw	r24, r8
     d9a:	b3 01       	movw	r22, r6
     d9c:	61 96       	adiw	r28, 0x11	; 17
     d9e:	2c ad       	ldd	r18, Y+60	; 0x3c
     da0:	3d ad       	ldd	r19, Y+61	; 0x3d
     da2:	4e ad       	ldd	r20, Y+62	; 0x3e
     da4:	5f ad       	ldd	r21, Y+63	; 0x3f
     da6:	61 97       	sbiw	r28, 0x11	; 17
     da8:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	87 01       	movw	r16, r14
     db2:	ff 24       	eor	r15, r15
     db4:	ee 24       	eor	r14, r14
     db6:	89 ad       	ldd	r24, Y+57	; 0x39
     db8:	9a ad       	ldd	r25, Y+58	; 0x3a
     dba:	ab ad       	ldd	r26, Y+59	; 0x3b
     dbc:	bc ad       	ldd	r27, Y+60	; 0x3c
     dbe:	a0 70       	andi	r26, 0x00	; 0
     dc0:	b0 70       	andi	r27, 0x00	; 0
     dc2:	57 01       	movw	r10, r14
     dc4:	68 01       	movw	r12, r16
     dc6:	a8 2a       	or	r10, r24
     dc8:	b9 2a       	or	r11, r25
     dca:	ca 2a       	or	r12, r26
     dcc:	db 2a       	or	r13, r27
     dce:	a2 16       	cp	r10, r18
     dd0:	b3 06       	cpc	r11, r19
     dd2:	c4 06       	cpc	r12, r20
     dd4:	d5 06       	cpc	r13, r21
     dd6:	e0 f4       	brcc	.+56     	; 0xe10 <__stack+0x5b1>
     dd8:	08 94       	sec
     dda:	61 08       	sbc	r6, r1
     ddc:	71 08       	sbc	r7, r1
     dde:	81 08       	sbc	r8, r1
     de0:	91 08       	sbc	r9, r1
     de2:	a2 0c       	add	r10, r2
     de4:	b3 1c       	adc	r11, r3
     de6:	c4 1c       	adc	r12, r4
     de8:	d5 1c       	adc	r13, r5
     dea:	a2 14       	cp	r10, r2
     dec:	b3 04       	cpc	r11, r3
     dee:	c4 04       	cpc	r12, r4
     df0:	d5 04       	cpc	r13, r5
     df2:	70 f0       	brcs	.+28     	; 0xe10 <__stack+0x5b1>
     df4:	a2 16       	cp	r10, r18
     df6:	b3 06       	cpc	r11, r19
     df8:	c4 06       	cpc	r12, r20
     dfa:	d5 06       	cpc	r13, r21
     dfc:	48 f4       	brcc	.+18     	; 0xe10 <__stack+0x5b1>
     dfe:	08 94       	sec
     e00:	61 08       	sbc	r6, r1
     e02:	71 08       	sbc	r7, r1
     e04:	81 08       	sbc	r8, r1
     e06:	91 08       	sbc	r9, r1
     e08:	a2 0c       	add	r10, r2
     e0a:	b3 1c       	adc	r11, r3
     e0c:	c4 1c       	adc	r12, r4
     e0e:	d5 1c       	adc	r13, r5
     e10:	21 96       	adiw	r28, 0x01	; 1
     e12:	8c ad       	ldd	r24, Y+60	; 0x3c
     e14:	9d ad       	ldd	r25, Y+61	; 0x3d
     e16:	ae ad       	ldd	r26, Y+62	; 0x3e
     e18:	bf ad       	ldd	r27, Y+63	; 0x3f
     e1a:	21 97       	sbiw	r28, 0x01	; 1
     e1c:	e3 96       	adiw	r28, 0x33	; 51
     e1e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e20:	e3 97       	sbiw	r28, 0x33	; 51
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__stack+0x5cd>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	aa 1f       	adc	r26, r26
     e2a:	bb 1f       	adc	r27, r27
     e2c:	0a 94       	dec	r0
     e2e:	d2 f7       	brpl	.-12     	; 0xe24 <__stack+0x5c5>
     e30:	21 96       	adiw	r28, 0x01	; 1
     e32:	8c af       	std	Y+60, r24	; 0x3c
     e34:	9d af       	std	Y+61, r25	; 0x3d
     e36:	ae af       	std	Y+62, r26	; 0x3e
     e38:	bf af       	std	Y+63, r27	; 0x3f
     e3a:	21 97       	sbiw	r28, 0x01	; 1
     e3c:	a2 1a       	sub	r10, r18
     e3e:	b3 0a       	sbc	r11, r19
     e40:	c4 0a       	sbc	r12, r20
     e42:	d5 0a       	sbc	r13, r21
     e44:	65 96       	adiw	r28, 0x15	; 21
     e46:	ec ac       	ldd	r14, Y+60	; 0x3c
     e48:	fd ac       	ldd	r15, Y+61	; 0x3d
     e4a:	0e ad       	ldd	r16, Y+62	; 0x3e
     e4c:	1f ad       	ldd	r17, Y+63	; 0x3f
     e4e:	65 97       	sbiw	r28, 0x15	; 21
     e50:	d7 01       	movw	r26, r14
     e52:	99 27       	eor	r25, r25
     e54:	88 27       	eor	r24, r24
     e56:	68 2a       	or	r6, r24
     e58:	79 2a       	or	r7, r25
     e5a:	8a 2a       	or	r8, r26
     e5c:	9b 2a       	or	r9, r27
     e5e:	82 01       	movw	r16, r4
     e60:	22 27       	eor	r18, r18
     e62:	33 27       	eor	r19, r19
     e64:	69 96       	adiw	r28, 0x19	; 25
     e66:	0c af       	std	Y+60, r16	; 0x3c
     e68:	1d af       	std	Y+61, r17	; 0x3d
     e6a:	2e af       	std	Y+62, r18	; 0x3e
     e6c:	3f af       	std	Y+63, r19	; 0x3f
     e6e:	69 97       	sbiw	r28, 0x19	; 25
     e70:	a2 01       	movw	r20, r4
     e72:	91 01       	movw	r18, r2
     e74:	40 70       	andi	r20, 0x00	; 0
     e76:	50 70       	andi	r21, 0x00	; 0
     e78:	6d 96       	adiw	r28, 0x1d	; 29
     e7a:	2c af       	std	Y+60, r18	; 0x3c
     e7c:	3d af       	std	Y+61, r19	; 0x3d
     e7e:	4e af       	std	Y+62, r20	; 0x3e
     e80:	5f af       	std	Y+63, r21	; 0x3f
     e82:	6d 97       	sbiw	r28, 0x1d	; 29
     e84:	c6 01       	movw	r24, r12
     e86:	b5 01       	movw	r22, r10
     e88:	69 96       	adiw	r28, 0x19	; 25
     e8a:	2c ad       	ldd	r18, Y+60	; 0x3c
     e8c:	3d ad       	ldd	r19, Y+61	; 0x3d
     e8e:	4e ad       	ldd	r20, Y+62	; 0x3e
     e90:	5f ad       	ldd	r21, Y+63	; 0x3f
     e92:	69 97       	sbiw	r28, 0x19	; 25
     e94:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     e98:	7b 01       	movw	r14, r22
     e9a:	8c 01       	movw	r16, r24
     e9c:	c6 01       	movw	r24, r12
     e9e:	b5 01       	movw	r22, r10
     ea0:	69 96       	adiw	r28, 0x19	; 25
     ea2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ea4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ea6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ea8:	5f ad       	ldd	r21, Y+63	; 0x3f
     eaa:	69 97       	sbiw	r28, 0x19	; 25
     eac:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     eb0:	c9 01       	movw	r24, r18
     eb2:	da 01       	movw	r26, r20
     eb4:	a1 96       	adiw	r28, 0x21	; 33
     eb6:	8c af       	std	Y+60, r24	; 0x3c
     eb8:	9d af       	std	Y+61, r25	; 0x3d
     eba:	ae af       	std	Y+62, r26	; 0x3e
     ebc:	bf af       	std	Y+63, r27	; 0x3f
     ebe:	a1 97       	sbiw	r28, 0x21	; 33
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	6d 96       	adiw	r28, 0x1d	; 29
     ec6:	2c ad       	ldd	r18, Y+60	; 0x3c
     ec8:	3d ad       	ldd	r19, Y+61	; 0x3d
     eca:	4e ad       	ldd	r20, Y+62	; 0x3e
     ecc:	5f ad       	ldd	r21, Y+63	; 0x3f
     ece:	6d 97       	sbiw	r28, 0x1d	; 29
     ed0:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
     ed4:	9b 01       	movw	r18, r22
     ed6:	ac 01       	movw	r20, r24
     ed8:	87 01       	movw	r16, r14
     eda:	ff 24       	eor	r15, r15
     edc:	ee 24       	eor	r14, r14
     ede:	21 96       	adiw	r28, 0x01	; 1
     ee0:	ac ac       	ldd	r10, Y+60	; 0x3c
     ee2:	bd ac       	ldd	r11, Y+61	; 0x3d
     ee4:	ce ac       	ldd	r12, Y+62	; 0x3e
     ee6:	df ac       	ldd	r13, Y+63	; 0x3f
     ee8:	21 97       	sbiw	r28, 0x01	; 1
     eea:	c6 01       	movw	r24, r12
     eec:	aa 27       	eor	r26, r26
     eee:	bb 27       	eor	r27, r27
     ef0:	57 01       	movw	r10, r14
     ef2:	68 01       	movw	r12, r16
     ef4:	a8 2a       	or	r10, r24
     ef6:	b9 2a       	or	r11, r25
     ef8:	ca 2a       	or	r12, r26
     efa:	db 2a       	or	r13, r27
     efc:	a2 16       	cp	r10, r18
     efe:	b3 06       	cpc	r11, r19
     f00:	c4 06       	cpc	r12, r20
     f02:	d5 06       	cpc	r13, r21
     f04:	60 f5       	brcc	.+88     	; 0xf5e <__stack+0x6ff>
     f06:	a1 96       	adiw	r28, 0x21	; 33
     f08:	6c ad       	ldd	r22, Y+60	; 0x3c
     f0a:	7d ad       	ldd	r23, Y+61	; 0x3d
     f0c:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0e:	9f ad       	ldd	r25, Y+63	; 0x3f
     f10:	a1 97       	sbiw	r28, 0x21	; 33
     f12:	61 50       	subi	r22, 0x01	; 1
     f14:	70 40       	sbci	r23, 0x00	; 0
     f16:	80 40       	sbci	r24, 0x00	; 0
     f18:	90 40       	sbci	r25, 0x00	; 0
     f1a:	a1 96       	adiw	r28, 0x21	; 33
     f1c:	6c af       	std	Y+60, r22	; 0x3c
     f1e:	7d af       	std	Y+61, r23	; 0x3d
     f20:	8e af       	std	Y+62, r24	; 0x3e
     f22:	9f af       	std	Y+63, r25	; 0x3f
     f24:	a1 97       	sbiw	r28, 0x21	; 33
     f26:	a2 0c       	add	r10, r2
     f28:	b3 1c       	adc	r11, r3
     f2a:	c4 1c       	adc	r12, r4
     f2c:	d5 1c       	adc	r13, r5
     f2e:	a2 14       	cp	r10, r2
     f30:	b3 04       	cpc	r11, r3
     f32:	c4 04       	cpc	r12, r4
     f34:	d5 04       	cpc	r13, r5
     f36:	98 f0       	brcs	.+38     	; 0xf5e <__stack+0x6ff>
     f38:	a2 16       	cp	r10, r18
     f3a:	b3 06       	cpc	r11, r19
     f3c:	c4 06       	cpc	r12, r20
     f3e:	d5 06       	cpc	r13, r21
     f40:	70 f4       	brcc	.+28     	; 0xf5e <__stack+0x6ff>
     f42:	61 50       	subi	r22, 0x01	; 1
     f44:	70 40       	sbci	r23, 0x00	; 0
     f46:	80 40       	sbci	r24, 0x00	; 0
     f48:	90 40       	sbci	r25, 0x00	; 0
     f4a:	a1 96       	adiw	r28, 0x21	; 33
     f4c:	6c af       	std	Y+60, r22	; 0x3c
     f4e:	7d af       	std	Y+61, r23	; 0x3d
     f50:	8e af       	std	Y+62, r24	; 0x3e
     f52:	9f af       	std	Y+63, r25	; 0x3f
     f54:	a1 97       	sbiw	r28, 0x21	; 33
     f56:	a2 0c       	add	r10, r2
     f58:	b3 1c       	adc	r11, r3
     f5a:	c4 1c       	adc	r12, r4
     f5c:	d5 1c       	adc	r13, r5
     f5e:	a2 1a       	sub	r10, r18
     f60:	b3 0a       	sbc	r11, r19
     f62:	c4 0a       	sbc	r12, r20
     f64:	d5 0a       	sbc	r13, r21
     f66:	c6 01       	movw	r24, r12
     f68:	b5 01       	movw	r22, r10
     f6a:	69 96       	adiw	r28, 0x19	; 25
     f6c:	2c ad       	ldd	r18, Y+60	; 0x3c
     f6e:	3d ad       	ldd	r19, Y+61	; 0x3d
     f70:	4e ad       	ldd	r20, Y+62	; 0x3e
     f72:	5f ad       	ldd	r21, Y+63	; 0x3f
     f74:	69 97       	sbiw	r28, 0x19	; 25
     f76:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     f7a:	7b 01       	movw	r14, r22
     f7c:	8c 01       	movw	r16, r24
     f7e:	c6 01       	movw	r24, r12
     f80:	b5 01       	movw	r22, r10
     f82:	69 96       	adiw	r28, 0x19	; 25
     f84:	2c ad       	ldd	r18, Y+60	; 0x3c
     f86:	3d ad       	ldd	r19, Y+61	; 0x3d
     f88:	4e ad       	ldd	r20, Y+62	; 0x3e
     f8a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f8c:	69 97       	sbiw	r28, 0x19	; 25
     f8e:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
     f92:	c9 01       	movw	r24, r18
     f94:	da 01       	movw	r26, r20
     f96:	5c 01       	movw	r10, r24
     f98:	6d 01       	movw	r12, r26
     f9a:	c6 01       	movw	r24, r12
     f9c:	b5 01       	movw	r22, r10
     f9e:	6d 96       	adiw	r28, 0x1d	; 29
     fa0:	2c ad       	ldd	r18, Y+60	; 0x3c
     fa2:	3d ad       	ldd	r19, Y+61	; 0x3d
     fa4:	4e ad       	ldd	r20, Y+62	; 0x3e
     fa6:	5f ad       	ldd	r21, Y+63	; 0x3f
     fa8:	6d 97       	sbiw	r28, 0x1d	; 29
     faa:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
     fae:	9b 01       	movw	r18, r22
     fb0:	ac 01       	movw	r20, r24
     fb2:	87 01       	movw	r16, r14
     fb4:	ff 24       	eor	r15, r15
     fb6:	ee 24       	eor	r14, r14
     fb8:	21 96       	adiw	r28, 0x01	; 1
     fba:	8c ad       	ldd	r24, Y+60	; 0x3c
     fbc:	9d ad       	ldd	r25, Y+61	; 0x3d
     fbe:	ae ad       	ldd	r26, Y+62	; 0x3e
     fc0:	bf ad       	ldd	r27, Y+63	; 0x3f
     fc2:	21 97       	sbiw	r28, 0x01	; 1
     fc4:	a0 70       	andi	r26, 0x00	; 0
     fc6:	b0 70       	andi	r27, 0x00	; 0
     fc8:	e8 2a       	or	r14, r24
     fca:	f9 2a       	or	r15, r25
     fcc:	0a 2b       	or	r16, r26
     fce:	1b 2b       	or	r17, r27
     fd0:	e2 16       	cp	r14, r18
     fd2:	f3 06       	cpc	r15, r19
     fd4:	04 07       	cpc	r16, r20
     fd6:	15 07       	cpc	r17, r21
     fd8:	c0 f4       	brcc	.+48     	; 0x100a <__stack+0x7ab>
     fda:	08 94       	sec
     fdc:	a1 08       	sbc	r10, r1
     fde:	b1 08       	sbc	r11, r1
     fe0:	c1 08       	sbc	r12, r1
     fe2:	d1 08       	sbc	r13, r1
     fe4:	e2 0c       	add	r14, r2
     fe6:	f3 1c       	adc	r15, r3
     fe8:	04 1d       	adc	r16, r4
     fea:	15 1d       	adc	r17, r5
     fec:	e2 14       	cp	r14, r2
     fee:	f3 04       	cpc	r15, r3
     ff0:	04 05       	cpc	r16, r4
     ff2:	15 05       	cpc	r17, r5
     ff4:	50 f0       	brcs	.+20     	; 0x100a <__stack+0x7ab>
     ff6:	e2 16       	cp	r14, r18
     ff8:	f3 06       	cpc	r15, r19
     ffa:	04 07       	cpc	r16, r20
     ffc:	15 07       	cpc	r17, r21
     ffe:	28 f4       	brcc	.+10     	; 0x100a <__stack+0x7ab>
    1000:	08 94       	sec
    1002:	a1 08       	sbc	r10, r1
    1004:	b1 08       	sbc	r11, r1
    1006:	c1 08       	sbc	r12, r1
    1008:	d1 08       	sbc	r13, r1
    100a:	a1 96       	adiw	r28, 0x21	; 33
    100c:	ec ac       	ldd	r14, Y+60	; 0x3c
    100e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1010:	0e ad       	ldd	r16, Y+62	; 0x3e
    1012:	1f ad       	ldd	r17, Y+63	; 0x3f
    1014:	a1 97       	sbiw	r28, 0x21	; 33
    1016:	d7 01       	movw	r26, r14
    1018:	99 27       	eor	r25, r25
    101a:	88 27       	eor	r24, r24
    101c:	96 01       	movw	r18, r12
    101e:	85 01       	movw	r16, r10
    1020:	08 2b       	or	r16, r24
    1022:	19 2b       	or	r17, r25
    1024:	2a 2b       	or	r18, r26
    1026:	3b 2b       	or	r19, r27
    1028:	25 96       	adiw	r28, 0x05	; 5
    102a:	0c af       	std	Y+60, r16	; 0x3c
    102c:	1d af       	std	Y+61, r17	; 0x3d
    102e:	2e af       	std	Y+62, r18	; 0x3e
    1030:	3f af       	std	Y+63, r19	; 0x3f
    1032:	25 97       	sbiw	r28, 0x05	; 5
    1034:	72 c2       	rjmp	.+1252   	; 0x151a <__stack+0xcbb>
    1036:	6e 14       	cp	r6, r14
    1038:	7f 04       	cpc	r7, r15
    103a:	80 06       	cpc	r8, r16
    103c:	91 06       	cpc	r9, r17
    103e:	08 f4       	brcc	.+2      	; 0x1042 <__stack+0x7e3>
    1040:	5f c2       	rjmp	.+1214   	; 0x1500 <__stack+0xca1>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	e2 16       	cp	r14, r18
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	f2 06       	cpc	r15, r18
    104a:	21 e0       	ldi	r18, 0x01	; 1
    104c:	02 07       	cpc	r16, r18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	12 07       	cpc	r17, r18
    1052:	88 f4       	brcc	.+34     	; 0x1076 <__stack+0x817>
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	e3 16       	cp	r14, r19
    1058:	f1 04       	cpc	r15, r1
    105a:	01 05       	cpc	r16, r1
    105c:	11 05       	cpc	r17, r1
    105e:	31 f0       	breq	.+12     	; 0x106c <__stack+0x80d>
    1060:	28 f0       	brcs	.+10     	; 0x106c <__stack+0x80d>
    1062:	48 e0       	ldi	r20, 0x08	; 8
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	17 c0       	rjmp	.+46     	; 0x109a <__stack+0x83b>
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	12 c0       	rjmp	.+36     	; 0x109a <__stack+0x83b>
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	e4 16       	cp	r14, r20
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	f4 06       	cpc	r15, r20
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	04 07       	cpc	r16, r20
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	14 07       	cpc	r17, r20
    1086:	28 f0       	brcs	.+10     	; 0x1092 <__stack+0x833>
    1088:	48 e1       	ldi	r20, 0x18	; 24
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	04 c0       	rjmp	.+8      	; 0x109a <__stack+0x83b>
    1092:	40 e1       	ldi	r20, 0x10	; 16
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	d8 01       	movw	r26, r16
    109c:	c7 01       	movw	r24, r14
    109e:	04 2e       	mov	r0, r20
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <__stack+0x84b>
    10a2:	b6 95       	lsr	r27
    10a4:	a7 95       	ror	r26
    10a6:	97 95       	ror	r25
    10a8:	87 95       	ror	r24
    10aa:	0a 94       	dec	r0
    10ac:	d2 f7       	brpl	.-12     	; 0x10a2 <__stack+0x843>
    10ae:	88 59       	subi	r24, 0x98	; 152
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	dc 01       	movw	r26, r24
    10b4:	2c 91       	ld	r18, X
    10b6:	30 e2       	ldi	r19, 0x20	; 32
    10b8:	a3 2e       	mov	r10, r19
    10ba:	b1 2c       	mov	r11, r1
    10bc:	c1 2c       	mov	r12, r1
    10be:	d1 2c       	mov	r13, r1
    10c0:	d6 01       	movw	r26, r12
    10c2:	c5 01       	movw	r24, r10
    10c4:	84 1b       	sub	r24, r20
    10c6:	95 0b       	sbc	r25, r21
    10c8:	a6 0b       	sbc	r26, r22
    10ca:	b7 0b       	sbc	r27, r23
    10cc:	82 1b       	sub	r24, r18
    10ce:	91 09       	sbc	r25, r1
    10d0:	a1 09       	sbc	r26, r1
    10d2:	b1 09       	sbc	r27, r1
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	a1 05       	cpc	r26, r1
    10d8:	b1 05       	cpc	r27, r1
    10da:	99 f4       	brne	.+38     	; 0x1102 <__stack+0x8a3>
    10dc:	e6 14       	cp	r14, r6
    10de:	f7 04       	cpc	r15, r7
    10e0:	08 05       	cpc	r16, r8
    10e2:	19 05       	cpc	r17, r9
    10e4:	08 f4       	brcc	.+2      	; 0x10e8 <__stack+0x889>
    10e6:	fe c1       	rjmp	.+1020   	; 0x14e4 <__stack+0xc85>
    10e8:	21 96       	adiw	r28, 0x01	; 1
    10ea:	6c ac       	ldd	r6, Y+60	; 0x3c
    10ec:	7d ac       	ldd	r7, Y+61	; 0x3d
    10ee:	8e ac       	ldd	r8, Y+62	; 0x3e
    10f0:	9f ac       	ldd	r9, Y+63	; 0x3f
    10f2:	21 97       	sbiw	r28, 0x01	; 1
    10f4:	62 14       	cp	r6, r2
    10f6:	73 04       	cpc	r7, r3
    10f8:	84 04       	cpc	r8, r4
    10fa:	95 04       	cpc	r9, r5
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <__stack+0x8a1>
    10fe:	f2 c1       	rjmp	.+996    	; 0x14e4 <__stack+0xc85>
    1100:	ff c1       	rjmp	.+1022   	; 0x1500 <__stack+0xca1>
    1102:	e2 96       	adiw	r28, 0x32	; 50
    1104:	8f af       	std	Y+63, r24	; 0x3f
    1106:	e2 97       	sbiw	r28, 0x32	; 50
    1108:	08 2e       	mov	r0, r24
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <__stack+0x8b5>
    110c:	ee 0c       	add	r14, r14
    110e:	ff 1c       	adc	r15, r15
    1110:	00 1f       	adc	r16, r16
    1112:	11 1f       	adc	r17, r17
    1114:	0a 94       	dec	r0
    1116:	d2 f7       	brpl	.-12     	; 0x110c <__stack+0x8ad>
    1118:	6a 2d       	mov	r22, r10
    111a:	68 1b       	sub	r22, r24
    111c:	d2 01       	movw	r26, r4
    111e:	c1 01       	movw	r24, r2
    1120:	06 2e       	mov	r0, r22
    1122:	04 c0       	rjmp	.+8      	; 0x112c <__stack+0x8cd>
    1124:	b6 95       	lsr	r27
    1126:	a7 95       	ror	r26
    1128:	97 95       	ror	r25
    112a:	87 95       	ror	r24
    112c:	0a 94       	dec	r0
    112e:	d2 f7       	brpl	.-12     	; 0x1124 <__stack+0x8c5>
    1130:	5c 01       	movw	r10, r24
    1132:	6d 01       	movw	r12, r26
    1134:	ae 28       	or	r10, r14
    1136:	bf 28       	or	r11, r15
    1138:	c0 2a       	or	r12, r16
    113a:	d1 2a       	or	r13, r17
    113c:	ad aa       	std	Y+53, r10	; 0x35
    113e:	be aa       	std	Y+54, r11	; 0x36
    1140:	cf aa       	std	Y+55, r12	; 0x37
    1142:	d8 ae       	std	Y+56, r13	; 0x38
    1144:	72 01       	movw	r14, r4
    1146:	61 01       	movw	r12, r2
    1148:	e2 96       	adiw	r28, 0x32	; 50
    114a:	0f ac       	ldd	r0, Y+63	; 0x3f
    114c:	e2 97       	sbiw	r28, 0x32	; 50
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <__stack+0x8f9>
    1150:	cc 0c       	add	r12, r12
    1152:	dd 1c       	adc	r13, r13
    1154:	ee 1c       	adc	r14, r14
    1156:	ff 1c       	adc	r15, r15
    1158:	0a 94       	dec	r0
    115a:	d2 f7       	brpl	.-12     	; 0x1150 <__stack+0x8f1>
    115c:	c9 aa       	std	Y+49, r12	; 0x31
    115e:	da aa       	std	Y+50, r13	; 0x32
    1160:	eb aa       	std	Y+51, r14	; 0x33
    1162:	fc aa       	std	Y+52, r15	; 0x34
    1164:	64 01       	movw	r12, r8
    1166:	53 01       	movw	r10, r6
    1168:	06 2e       	mov	r0, r22
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <__stack+0x915>
    116c:	d6 94       	lsr	r13
    116e:	c7 94       	ror	r12
    1170:	b7 94       	ror	r11
    1172:	a7 94       	ror	r10
    1174:	0a 94       	dec	r0
    1176:	d2 f7       	brpl	.-12     	; 0x116c <__stack+0x90d>
    1178:	d4 01       	movw	r26, r8
    117a:	c3 01       	movw	r24, r6
    117c:	e2 96       	adiw	r28, 0x32	; 50
    117e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1180:	e2 97       	sbiw	r28, 0x32	; 50
    1182:	04 c0       	rjmp	.+8      	; 0x118c <__stack+0x92d>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	aa 1f       	adc	r26, r26
    118a:	bb 1f       	adc	r27, r27
    118c:	0a 94       	dec	r0
    118e:	d2 f7       	brpl	.-12     	; 0x1184 <__stack+0x925>
    1190:	21 96       	adiw	r28, 0x01	; 1
    1192:	ec ac       	ldd	r14, Y+60	; 0x3c
    1194:	fd ac       	ldd	r15, Y+61	; 0x3d
    1196:	0e ad       	ldd	r16, Y+62	; 0x3e
    1198:	1f ad       	ldd	r17, Y+63	; 0x3f
    119a:	21 97       	sbiw	r28, 0x01	; 1
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <__stack+0x947>
    119e:	16 95       	lsr	r17
    11a0:	07 95       	ror	r16
    11a2:	f7 94       	ror	r15
    11a4:	e7 94       	ror	r14
    11a6:	6a 95       	dec	r22
    11a8:	d2 f7       	brpl	.-12     	; 0x119e <__stack+0x93f>
    11aa:	37 01       	movw	r6, r14
    11ac:	48 01       	movw	r8, r16
    11ae:	68 2a       	or	r6, r24
    11b0:	79 2a       	or	r7, r25
    11b2:	8a 2a       	or	r8, r26
    11b4:	9b 2a       	or	r9, r27
    11b6:	6d a6       	std	Y+45, r6	; 0x2d
    11b8:	7e a6       	std	Y+46, r7	; 0x2e
    11ba:	8f a6       	std	Y+47, r8	; 0x2f
    11bc:	98 aa       	std	Y+48, r9	; 0x30
    11be:	ed a8       	ldd	r14, Y+53	; 0x35
    11c0:	fe a8       	ldd	r15, Y+54	; 0x36
    11c2:	0f a9       	ldd	r16, Y+55	; 0x37
    11c4:	18 ad       	ldd	r17, Y+56	; 0x38
    11c6:	38 01       	movw	r6, r16
    11c8:	88 24       	eor	r8, r8
    11ca:	99 24       	eor	r9, r9
    11cc:	98 01       	movw	r18, r16
    11ce:	87 01       	movw	r16, r14
    11d0:	20 70       	andi	r18, 0x00	; 0
    11d2:	30 70       	andi	r19, 0x00	; 0
    11d4:	a5 96       	adiw	r28, 0x25	; 37
    11d6:	0c af       	std	Y+60, r16	; 0x3c
    11d8:	1d af       	std	Y+61, r17	; 0x3d
    11da:	2e af       	std	Y+62, r18	; 0x3e
    11dc:	3f af       	std	Y+63, r19	; 0x3f
    11de:	a5 97       	sbiw	r28, 0x25	; 37
    11e0:	c6 01       	movw	r24, r12
    11e2:	b5 01       	movw	r22, r10
    11e4:	a4 01       	movw	r20, r8
    11e6:	93 01       	movw	r18, r6
    11e8:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    11ec:	7b 01       	movw	r14, r22
    11ee:	8c 01       	movw	r16, r24
    11f0:	c6 01       	movw	r24, r12
    11f2:	b5 01       	movw	r22, r10
    11f4:	a4 01       	movw	r20, r8
    11f6:	93 01       	movw	r18, r6
    11f8:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    11fc:	c9 01       	movw	r24, r18
    11fe:	da 01       	movw	r26, r20
    1200:	1c 01       	movw	r2, r24
    1202:	2d 01       	movw	r4, r26
    1204:	c2 01       	movw	r24, r4
    1206:	b1 01       	movw	r22, r2
    1208:	a5 96       	adiw	r28, 0x25	; 37
    120a:	2c ad       	ldd	r18, Y+60	; 0x3c
    120c:	3d ad       	ldd	r19, Y+61	; 0x3d
    120e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1210:	5f ad       	ldd	r21, Y+63	; 0x3f
    1212:	a5 97       	sbiw	r28, 0x25	; 37
    1214:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	87 01       	movw	r16, r14
    121e:	ff 24       	eor	r15, r15
    1220:	ee 24       	eor	r14, r14
    1222:	ad a4       	ldd	r10, Y+45	; 0x2d
    1224:	be a4       	ldd	r11, Y+46	; 0x2e
    1226:	cf a4       	ldd	r12, Y+47	; 0x2f
    1228:	d8 a8       	ldd	r13, Y+48	; 0x30
    122a:	c6 01       	movw	r24, r12
    122c:	aa 27       	eor	r26, r26
    122e:	bb 27       	eor	r27, r27
    1230:	57 01       	movw	r10, r14
    1232:	68 01       	movw	r12, r16
    1234:	a8 2a       	or	r10, r24
    1236:	b9 2a       	or	r11, r25
    1238:	ca 2a       	or	r12, r26
    123a:	db 2a       	or	r13, r27
    123c:	a2 16       	cp	r10, r18
    123e:	b3 06       	cpc	r11, r19
    1240:	c4 06       	cpc	r12, r20
    1242:	d5 06       	cpc	r13, r21
    1244:	00 f5       	brcc	.+64     	; 0x1286 <__stack+0xa27>
    1246:	08 94       	sec
    1248:	21 08       	sbc	r2, r1
    124a:	31 08       	sbc	r3, r1
    124c:	41 08       	sbc	r4, r1
    124e:	51 08       	sbc	r5, r1
    1250:	ed a8       	ldd	r14, Y+53	; 0x35
    1252:	fe a8       	ldd	r15, Y+54	; 0x36
    1254:	0f a9       	ldd	r16, Y+55	; 0x37
    1256:	18 ad       	ldd	r17, Y+56	; 0x38
    1258:	ae 0c       	add	r10, r14
    125a:	bf 1c       	adc	r11, r15
    125c:	c0 1e       	adc	r12, r16
    125e:	d1 1e       	adc	r13, r17
    1260:	ae 14       	cp	r10, r14
    1262:	bf 04       	cpc	r11, r15
    1264:	c0 06       	cpc	r12, r16
    1266:	d1 06       	cpc	r13, r17
    1268:	70 f0       	brcs	.+28     	; 0x1286 <__stack+0xa27>
    126a:	a2 16       	cp	r10, r18
    126c:	b3 06       	cpc	r11, r19
    126e:	c4 06       	cpc	r12, r20
    1270:	d5 06       	cpc	r13, r21
    1272:	48 f4       	brcc	.+18     	; 0x1286 <__stack+0xa27>
    1274:	08 94       	sec
    1276:	21 08       	sbc	r2, r1
    1278:	31 08       	sbc	r3, r1
    127a:	41 08       	sbc	r4, r1
    127c:	51 08       	sbc	r5, r1
    127e:	ae 0c       	add	r10, r14
    1280:	bf 1c       	adc	r11, r15
    1282:	c0 1e       	adc	r12, r16
    1284:	d1 1e       	adc	r13, r17
    1286:	a2 1a       	sub	r10, r18
    1288:	b3 0a       	sbc	r11, r19
    128a:	c4 0a       	sbc	r12, r20
    128c:	d5 0a       	sbc	r13, r21
    128e:	c6 01       	movw	r24, r12
    1290:	b5 01       	movw	r22, r10
    1292:	a4 01       	movw	r20, r8
    1294:	93 01       	movw	r18, r6
    1296:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    129a:	7b 01       	movw	r14, r22
    129c:	8c 01       	movw	r16, r24
    129e:	c6 01       	movw	r24, r12
    12a0:	b5 01       	movw	r22, r10
    12a2:	a4 01       	movw	r20, r8
    12a4:	93 01       	movw	r18, r6
    12a6:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    12aa:	c9 01       	movw	r24, r18
    12ac:	da 01       	movw	r26, r20
    12ae:	3c 01       	movw	r6, r24
    12b0:	4d 01       	movw	r8, r26
    12b2:	c4 01       	movw	r24, r8
    12b4:	b3 01       	movw	r22, r6
    12b6:	a5 96       	adiw	r28, 0x25	; 37
    12b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    12ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    12bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    12be:	5f ad       	ldd	r21, Y+63	; 0x3f
    12c0:	a5 97       	sbiw	r28, 0x25	; 37
    12c2:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    12c6:	9b 01       	movw	r18, r22
    12c8:	ac 01       	movw	r20, r24
    12ca:	87 01       	movw	r16, r14
    12cc:	ff 24       	eor	r15, r15
    12ce:	ee 24       	eor	r14, r14
    12d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    12d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    12d4:	af a5       	ldd	r26, Y+47	; 0x2f
    12d6:	b8 a9       	ldd	r27, Y+48	; 0x30
    12d8:	a0 70       	andi	r26, 0x00	; 0
    12da:	b0 70       	andi	r27, 0x00	; 0
    12dc:	57 01       	movw	r10, r14
    12de:	68 01       	movw	r12, r16
    12e0:	a8 2a       	or	r10, r24
    12e2:	b9 2a       	or	r11, r25
    12e4:	ca 2a       	or	r12, r26
    12e6:	db 2a       	or	r13, r27
    12e8:	a2 16       	cp	r10, r18
    12ea:	b3 06       	cpc	r11, r19
    12ec:	c4 06       	cpc	r12, r20
    12ee:	d5 06       	cpc	r13, r21
    12f0:	00 f5       	brcc	.+64     	; 0x1332 <__stack+0xad3>
    12f2:	08 94       	sec
    12f4:	61 08       	sbc	r6, r1
    12f6:	71 08       	sbc	r7, r1
    12f8:	81 08       	sbc	r8, r1
    12fa:	91 08       	sbc	r9, r1
    12fc:	6d a9       	ldd	r22, Y+53	; 0x35
    12fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1300:	8f a9       	ldd	r24, Y+55	; 0x37
    1302:	98 ad       	ldd	r25, Y+56	; 0x38
    1304:	a6 0e       	add	r10, r22
    1306:	b7 1e       	adc	r11, r23
    1308:	c8 1e       	adc	r12, r24
    130a:	d9 1e       	adc	r13, r25
    130c:	a6 16       	cp	r10, r22
    130e:	b7 06       	cpc	r11, r23
    1310:	c8 06       	cpc	r12, r24
    1312:	d9 06       	cpc	r13, r25
    1314:	70 f0       	brcs	.+28     	; 0x1332 <__stack+0xad3>
    1316:	a2 16       	cp	r10, r18
    1318:	b3 06       	cpc	r11, r19
    131a:	c4 06       	cpc	r12, r20
    131c:	d5 06       	cpc	r13, r21
    131e:	48 f4       	brcc	.+18     	; 0x1332 <__stack+0xad3>
    1320:	08 94       	sec
    1322:	61 08       	sbc	r6, r1
    1324:	71 08       	sbc	r7, r1
    1326:	81 08       	sbc	r8, r1
    1328:	91 08       	sbc	r9, r1
    132a:	a6 0e       	add	r10, r22
    132c:	b7 1e       	adc	r11, r23
    132e:	c8 1e       	adc	r12, r24
    1330:	d9 1e       	adc	r13, r25
    1332:	d6 01       	movw	r26, r12
    1334:	c5 01       	movw	r24, r10
    1336:	82 1b       	sub	r24, r18
    1338:	93 0b       	sbc	r25, r19
    133a:	a4 0b       	sbc	r26, r20
    133c:	b5 0b       	sbc	r27, r21
    133e:	89 a7       	std	Y+41, r24	; 0x29
    1340:	9a a7       	std	Y+42, r25	; 0x2a
    1342:	ab a7       	std	Y+43, r26	; 0x2b
    1344:	bc a7       	std	Y+44, r27	; 0x2c
    1346:	d1 01       	movw	r26, r2
    1348:	99 27       	eor	r25, r25
    134a:	88 27       	eor	r24, r24
    134c:	64 01       	movw	r12, r8
    134e:	53 01       	movw	r10, r6
    1350:	a8 2a       	or	r10, r24
    1352:	b9 2a       	or	r11, r25
    1354:	ca 2a       	or	r12, r26
    1356:	db 2a       	or	r13, r27
    1358:	25 96       	adiw	r28, 0x05	; 5
    135a:	ac ae       	std	Y+60, r10	; 0x3c
    135c:	bd ae       	std	Y+61, r11	; 0x3d
    135e:	ce ae       	std	Y+62, r12	; 0x3e
    1360:	df ae       	std	Y+63, r13	; 0x3f
    1362:	25 97       	sbiw	r28, 0x05	; 5
    1364:	86 01       	movw	r16, r12
    1366:	75 01       	movw	r14, r10
    1368:	2f ef       	ldi	r18, 0xFF	; 255
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	e2 22       	and	r14, r18
    1372:	f3 22       	and	r15, r19
    1374:	04 23       	and	r16, r20
    1376:	15 23       	and	r17, r21
    1378:	a6 01       	movw	r20, r12
    137a:	66 27       	eor	r22, r22
    137c:	77 27       	eor	r23, r23
    137e:	ad 96       	adiw	r28, 0x2d	; 45
    1380:	4c af       	std	Y+60, r20	; 0x3c
    1382:	5d af       	std	Y+61, r21	; 0x3d
    1384:	6e af       	std	Y+62, r22	; 0x3e
    1386:	7f af       	std	Y+63, r23	; 0x3f
    1388:	ad 97       	sbiw	r28, 0x2d	; 45
    138a:	a9 a8       	ldd	r10, Y+49	; 0x31
    138c:	ba a8       	ldd	r11, Y+50	; 0x32
    138e:	cb a8       	ldd	r12, Y+51	; 0x33
    1390:	dc a8       	ldd	r13, Y+52	; 0x34
    1392:	6f ef       	ldi	r22, 0xFF	; 255
    1394:	7f ef       	ldi	r23, 0xFF	; 255
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a6 22       	and	r10, r22
    139c:	b7 22       	and	r11, r23
    139e:	c8 22       	and	r12, r24
    13a0:	d9 22       	and	r13, r25
    13a2:	89 a9       	ldd	r24, Y+49	; 0x31
    13a4:	9a a9       	ldd	r25, Y+50	; 0x32
    13a6:	ab a9       	ldd	r26, Y+51	; 0x33
    13a8:	bc a9       	ldd	r27, Y+52	; 0x34
    13aa:	1d 01       	movw	r2, r26
    13ac:	44 24       	eor	r4, r4
    13ae:	55 24       	eor	r5, r5
    13b0:	c8 01       	movw	r24, r16
    13b2:	b7 01       	movw	r22, r14
    13b4:	a6 01       	movw	r20, r12
    13b6:	95 01       	movw	r18, r10
    13b8:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    13bc:	a9 96       	adiw	r28, 0x29	; 41
    13be:	6c af       	std	Y+60, r22	; 0x3c
    13c0:	7d af       	std	Y+61, r23	; 0x3d
    13c2:	8e af       	std	Y+62, r24	; 0x3e
    13c4:	9f af       	std	Y+63, r25	; 0x3f
    13c6:	a9 97       	sbiw	r28, 0x29	; 41
    13c8:	c8 01       	movw	r24, r16
    13ca:	b7 01       	movw	r22, r14
    13cc:	a2 01       	movw	r20, r4
    13ce:	91 01       	movw	r18, r2
    13d0:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    13d4:	3b 01       	movw	r6, r22
    13d6:	4c 01       	movw	r8, r24
    13d8:	ad 96       	adiw	r28, 0x2d	; 45
    13da:	6c ad       	ldd	r22, Y+60	; 0x3c
    13dc:	7d ad       	ldd	r23, Y+61	; 0x3d
    13de:	8e ad       	ldd	r24, Y+62	; 0x3e
    13e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    13e2:	ad 97       	sbiw	r28, 0x2d	; 45
    13e4:	a6 01       	movw	r20, r12
    13e6:	95 01       	movw	r18, r10
    13e8:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    13ec:	7b 01       	movw	r14, r22
    13ee:	8c 01       	movw	r16, r24
    13f0:	ad 96       	adiw	r28, 0x2d	; 45
    13f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    13f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    13f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    13f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    13fa:	ad 97       	sbiw	r28, 0x2d	; 45
    13fc:	a2 01       	movw	r20, r4
    13fe:	91 01       	movw	r18, r2
    1400:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    1404:	5b 01       	movw	r10, r22
    1406:	6c 01       	movw	r12, r24
    1408:	a8 01       	movw	r20, r16
    140a:	97 01       	movw	r18, r14
    140c:	26 0d       	add	r18, r6
    140e:	37 1d       	adc	r19, r7
    1410:	48 1d       	adc	r20, r8
    1412:	59 1d       	adc	r21, r9
    1414:	a9 96       	adiw	r28, 0x29	; 41
    1416:	6c ac       	ldd	r6, Y+60	; 0x3c
    1418:	7d ac       	ldd	r7, Y+61	; 0x3d
    141a:	8e ac       	ldd	r8, Y+62	; 0x3e
    141c:	9f ac       	ldd	r9, Y+63	; 0x3f
    141e:	a9 97       	sbiw	r28, 0x29	; 41
    1420:	c4 01       	movw	r24, r8
    1422:	aa 27       	eor	r26, r26
    1424:	bb 27       	eor	r27, r27
    1426:	28 0f       	add	r18, r24
    1428:	39 1f       	adc	r19, r25
    142a:	4a 1f       	adc	r20, r26
    142c:	5b 1f       	adc	r21, r27
    142e:	2e 15       	cp	r18, r14
    1430:	3f 05       	cpc	r19, r15
    1432:	40 07       	cpc	r20, r16
    1434:	51 07       	cpc	r21, r17
    1436:	48 f4       	brcc	.+18     	; 0x144a <__stack+0xbeb>
    1438:	e1 2c       	mov	r14, r1
    143a:	f1 2c       	mov	r15, r1
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	06 2f       	mov	r16, r22
    1440:	11 2d       	mov	r17, r1
    1442:	ae 0c       	add	r10, r14
    1444:	bf 1c       	adc	r11, r15
    1446:	c0 1e       	adc	r12, r16
    1448:	d1 1e       	adc	r13, r17
    144a:	ca 01       	movw	r24, r20
    144c:	aa 27       	eor	r26, r26
    144e:	bb 27       	eor	r27, r27
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	6a 0d       	add	r22, r10
    1456:	7b 1d       	adc	r23, r11
    1458:	8c 1d       	adc	r24, r12
    145a:	9d 1d       	adc	r25, r13
    145c:	69 a4       	ldd	r6, Y+41	; 0x29
    145e:	7a a4       	ldd	r7, Y+42	; 0x2a
    1460:	8b a4       	ldd	r8, Y+43	; 0x2b
    1462:	9c a4       	ldd	r9, Y+44	; 0x2c
    1464:	66 16       	cp	r6, r22
    1466:	77 06       	cpc	r7, r23
    1468:	88 06       	cpc	r8, r24
    146a:	99 06       	cpc	r9, r25
    146c:	50 f1       	brcs	.+84     	; 0x14c2 <__stack+0xc63>
    146e:	66 15       	cp	r22, r6
    1470:	77 05       	cpc	r23, r7
    1472:	88 05       	cpc	r24, r8
    1474:	99 05       	cpc	r25, r9
    1476:	09 f0       	breq	.+2      	; 0x147a <__stack+0xc1b>
    1478:	4d c0       	rjmp	.+154    	; 0x1514 <__stack+0xcb5>
    147a:	d9 01       	movw	r26, r18
    147c:	99 27       	eor	r25, r25
    147e:	88 27       	eor	r24, r24
    1480:	a9 96       	adiw	r28, 0x29	; 41
    1482:	2c ad       	ldd	r18, Y+60	; 0x3c
    1484:	3d ad       	ldd	r19, Y+61	; 0x3d
    1486:	4e ad       	ldd	r20, Y+62	; 0x3e
    1488:	5f ad       	ldd	r21, Y+63	; 0x3f
    148a:	a9 97       	sbiw	r28, 0x29	; 41
    148c:	40 70       	andi	r20, 0x00	; 0
    148e:	50 70       	andi	r21, 0x00	; 0
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	a4 1f       	adc	r26, r20
    1496:	b5 1f       	adc	r27, r21
    1498:	21 96       	adiw	r28, 0x01	; 1
    149a:	2c ad       	ldd	r18, Y+60	; 0x3c
    149c:	3d ad       	ldd	r19, Y+61	; 0x3d
    149e:	4e ad       	ldd	r20, Y+62	; 0x3e
    14a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    14a2:	21 97       	sbiw	r28, 0x01	; 1
    14a4:	e2 96       	adiw	r28, 0x32	; 50
    14a6:	0f ac       	ldd	r0, Y+63	; 0x3f
    14a8:	e2 97       	sbiw	r28, 0x32	; 50
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <__stack+0xc55>
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	44 1f       	adc	r20, r20
    14b2:	55 1f       	adc	r21, r21
    14b4:	0a 94       	dec	r0
    14b6:	d2 f7       	brpl	.-12     	; 0x14ac <__stack+0xc4d>
    14b8:	28 17       	cp	r18, r24
    14ba:	39 07       	cpc	r19, r25
    14bc:	4a 07       	cpc	r20, r26
    14be:	5b 07       	cpc	r21, r27
    14c0:	48 f5       	brcc	.+82     	; 0x1514 <__stack+0xcb5>
    14c2:	25 96       	adiw	r28, 0x05	; 5
    14c4:	0c ad       	ldd	r16, Y+60	; 0x3c
    14c6:	1d ad       	ldd	r17, Y+61	; 0x3d
    14c8:	2e ad       	ldd	r18, Y+62	; 0x3e
    14ca:	3f ad       	ldd	r19, Y+63	; 0x3f
    14cc:	25 97       	sbiw	r28, 0x05	; 5
    14ce:	01 50       	subi	r16, 0x01	; 1
    14d0:	10 40       	sbci	r17, 0x00	; 0
    14d2:	20 40       	sbci	r18, 0x00	; 0
    14d4:	30 40       	sbci	r19, 0x00	; 0
    14d6:	25 96       	adiw	r28, 0x05	; 5
    14d8:	0c af       	std	Y+60, r16	; 0x3c
    14da:	1d af       	std	Y+61, r17	; 0x3d
    14dc:	2e af       	std	Y+62, r18	; 0x3e
    14de:	3f af       	std	Y+63, r19	; 0x3f
    14e0:	25 97       	sbiw	r28, 0x05	; 5
    14e2:	18 c0       	rjmp	.+48     	; 0x1514 <__stack+0xcb5>
    14e4:	66 24       	eor	r6, r6
    14e6:	77 24       	eor	r7, r7
    14e8:	43 01       	movw	r8, r6
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	25 96       	adiw	r28, 0x05	; 5
    14f4:	2c af       	std	Y+60, r18	; 0x3c
    14f6:	3d af       	std	Y+61, r19	; 0x3d
    14f8:	4e af       	std	Y+62, r20	; 0x3e
    14fa:	5f af       	std	Y+63, r21	; 0x3f
    14fc:	25 97       	sbiw	r28, 0x05	; 5
    14fe:	0d c0       	rjmp	.+26     	; 0x151a <__stack+0xcbb>
    1500:	66 24       	eor	r6, r6
    1502:	77 24       	eor	r7, r7
    1504:	43 01       	movw	r8, r6
    1506:	25 96       	adiw	r28, 0x05	; 5
    1508:	1c ae       	std	Y+60, r1	; 0x3c
    150a:	1d ae       	std	Y+61, r1	; 0x3d
    150c:	1e ae       	std	Y+62, r1	; 0x3e
    150e:	1f ae       	std	Y+63, r1	; 0x3f
    1510:	25 97       	sbiw	r28, 0x05	; 5
    1512:	03 c0       	rjmp	.+6      	; 0x151a <__stack+0xcbb>
    1514:	66 24       	eor	r6, r6
    1516:	77 24       	eor	r7, r7
    1518:	43 01       	movw	r8, r6
    151a:	fe 01       	movw	r30, r28
    151c:	b1 96       	adiw	r30, 0x21	; 33
    151e:	88 e0       	ldi	r24, 0x08	; 8
    1520:	df 01       	movw	r26, r30
    1522:	1d 92       	st	X+, r1
    1524:	8a 95       	dec	r24
    1526:	e9 f7       	brne	.-6      	; 0x1522 <__stack+0xcc3>
    1528:	25 96       	adiw	r28, 0x05	; 5
    152a:	ac ac       	ldd	r10, Y+60	; 0x3c
    152c:	bd ac       	ldd	r11, Y+61	; 0x3d
    152e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1530:	df ac       	ldd	r13, Y+63	; 0x3f
    1532:	25 97       	sbiw	r28, 0x05	; 5
    1534:	a9 a2       	std	Y+33, r10	; 0x21
    1536:	ba a2       	std	Y+34, r11	; 0x22
    1538:	cb a2       	std	Y+35, r12	; 0x23
    153a:	dc a2       	std	Y+36, r13	; 0x24
    153c:	6d a2       	std	Y+37, r6	; 0x25
    153e:	7e a2       	std	Y+38, r7	; 0x26
    1540:	8f a2       	std	Y+39, r8	; 0x27
    1542:	98 a6       	std	Y+40, r9	; 0x28
    1544:	22 96       	adiw	r28, 0x02	; 2
    1546:	2f ad       	ldd	r18, Y+63	; 0x3f
    1548:	22 97       	sbiw	r28, 0x02	; 2
    154a:	3a a1       	ldd	r19, Y+34	; 0x22
    154c:	4b a1       	ldd	r20, Y+35	; 0x23
    154e:	5c a1       	ldd	r21, Y+36	; 0x24
    1550:	66 2d       	mov	r22, r6
    1552:	7e a1       	ldd	r23, Y+38	; 0x26
    1554:	df a0       	ldd	r13, Y+39	; 0x27
    1556:	98 a5       	ldd	r25, Y+40	; 0x28
    1558:	e1 96       	adiw	r28, 0x31	; 49
    155a:	ec ac       	ldd	r14, Y+60	; 0x3c
    155c:	fd ac       	ldd	r15, Y+61	; 0x3d
    155e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1560:	1f ad       	ldd	r17, Y+63	; 0x3f
    1562:	e1 97       	sbiw	r28, 0x31	; 49
    1564:	e1 14       	cp	r14, r1
    1566:	f1 04       	cpc	r15, r1
    1568:	01 05       	cpc	r16, r1
    156a:	11 05       	cpc	r17, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <__stack+0xd11>
    156e:	56 c0       	rjmp	.+172    	; 0x161c <__stack+0xdbd>
    1570:	21 95       	neg	r18
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	12 16       	cp	r1, r18
    1576:	08 f0       	brcs	.+2      	; 0x157a <__stack+0xd1b>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	31 95       	neg	r19
    157c:	e1 e0       	ldi	r30, 0x01	; 1
    157e:	13 16       	cp	r1, r19
    1580:	08 f0       	brcs	.+2      	; 0x1584 <__stack+0xd25>
    1582:	e0 e0       	ldi	r30, 0x00	; 0
    1584:	93 2e       	mov	r9, r19
    1586:	98 1a       	sub	r9, r24
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	39 15       	cp	r19, r9
    158c:	08 f0       	brcs	.+2      	; 0x1590 <__stack+0xd31>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	e8 2b       	or	r30, r24
    1592:	41 95       	neg	r20
    1594:	f1 e0       	ldi	r31, 0x01	; 1
    1596:	14 16       	cp	r1, r20
    1598:	08 f0       	brcs	.+2      	; 0x159c <__stack+0xd3d>
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	a4 2e       	mov	r10, r20
    159e:	ae 1a       	sub	r10, r30
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	4a 15       	cp	r20, r10
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <__stack+0xd49>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	f8 2b       	or	r31, r24
    15aa:	51 95       	neg	r21
    15ac:	e1 e0       	ldi	r30, 0x01	; 1
    15ae:	15 16       	cp	r1, r21
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <__stack+0xd55>
    15b2:	e0 e0       	ldi	r30, 0x00	; 0
    15b4:	b5 2e       	mov	r11, r21
    15b6:	bf 1a       	sub	r11, r31
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	5b 15       	cp	r21, r11
    15bc:	08 f0       	brcs	.+2      	; 0x15c0 <__stack+0xd61>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	e8 2b       	or	r30, r24
    15c2:	61 95       	neg	r22
    15c4:	f1 e0       	ldi	r31, 0x01	; 1
    15c6:	16 16       	cp	r1, r22
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <__stack+0xd6d>
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	a6 2f       	mov	r26, r22
    15ce:	ae 1b       	sub	r26, r30
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	6a 17       	cp	r22, r26
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <__stack+0xd79>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	f8 2b       	or	r31, r24
    15da:	71 95       	neg	r23
    15dc:	e1 e0       	ldi	r30, 0x01	; 1
    15de:	17 16       	cp	r1, r23
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <__stack+0xd85>
    15e2:	e0 e0       	ldi	r30, 0x00	; 0
    15e4:	c7 2e       	mov	r12, r23
    15e6:	cf 1a       	sub	r12, r31
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	7c 15       	cp	r23, r12
    15ec:	08 f0       	brcs	.+2      	; 0x15f0 <__stack+0xd91>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	e8 2b       	or	r30, r24
    15f2:	8d 2d       	mov	r24, r13
    15f4:	81 95       	neg	r24
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
    15f8:	18 16       	cp	r1, r24
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <__stack+0xd9f>
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	d8 2e       	mov	r13, r24
    1600:	de 1a       	sub	r13, r30
    1602:	e1 e0       	ldi	r30, 0x01	; 1
    1604:	8d 15       	cp	r24, r13
    1606:	08 f0       	brcs	.+2      	; 0x160a <__stack+0xdab>
    1608:	e0 e0       	ldi	r30, 0x00	; 0
    160a:	fe 2b       	or	r31, r30
    160c:	89 2f       	mov	r24, r25
    160e:	81 95       	neg	r24
    1610:	39 2d       	mov	r19, r9
    1612:	a5 01       	movw	r20, r10
    1614:	6a 2f       	mov	r22, r26
    1616:	7c 2d       	mov	r23, r12
    1618:	98 2f       	mov	r25, r24
    161a:	9f 1b       	sub	r25, r31
    161c:	8d 2d       	mov	r24, r13
    161e:	ce 58       	subi	r28, 0x8E	; 142
    1620:	df 4f       	sbci	r29, 0xFF	; 255
    1622:	e2 e1       	ldi	r30, 0x12	; 18
    1624:	0c 94 0b 34 	jmp	0x6816	; 0x6816 <__epilogue_restores__>

00001628 <__moddi3>:
    1628:	a7 e7       	ldi	r26, 0x77	; 119
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ea e1       	ldi	r30, 0x1A	; 26
    162e:	fb e0       	ldi	r31, 0x0B	; 11
    1630:	0c 94 ef 33 	jmp	0x67de	; 0x67de <__prologue_saves__>
    1634:	98 2e       	mov	r9, r24
    1636:	89 2e       	mov	r8, r25
    1638:	71 2e       	mov	r7, r17
    163a:	88 e0       	ldi	r24, 0x08	; 8
    163c:	fe 01       	movw	r30, r28
    163e:	31 96       	adiw	r30, 0x01	; 1
    1640:	df 01       	movw	r26, r30
    1642:	68 2e       	mov	r6, r24
    1644:	1d 92       	st	X+, r1
    1646:	6a 94       	dec	r6
    1648:	e9 f7       	brne	.-6      	; 0x1644 <__moddi3+0x1c>
    164a:	29 83       	std	Y+1, r18	; 0x01
    164c:	3a 83       	std	Y+2, r19	; 0x02
    164e:	4b 83       	std	Y+3, r20	; 0x03
    1650:	5c 83       	std	Y+4, r21	; 0x04
    1652:	6d 83       	std	Y+5, r22	; 0x05
    1654:	7e 83       	std	Y+6, r23	; 0x06
    1656:	9f 82       	std	Y+7, r9	; 0x07
    1658:	98 87       	std	Y+8, r25	; 0x08
    165a:	fe 01       	movw	r30, r28
    165c:	39 96       	adiw	r30, 0x09	; 9
    165e:	df 01       	movw	r26, r30
    1660:	1d 92       	st	X+, r1
    1662:	8a 95       	dec	r24
    1664:	e9 f7       	brne	.-6      	; 0x1660 <__moddi3+0x38>
    1666:	a9 86       	std	Y+9, r10	; 0x09
    1668:	ba 86       	std	Y+10, r11	; 0x0a
    166a:	cb 86       	std	Y+11, r12	; 0x0b
    166c:	dc 86       	std	Y+12, r13	; 0x0c
    166e:	ed 86       	std	Y+13, r14	; 0x0d
    1670:	fe 86       	std	Y+14, r15	; 0x0e
    1672:	0f 87       	std	Y+15, r16	; 0x0f
    1674:	18 8b       	std	Y+16, r17	; 0x10
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	af 81       	ldd	r26, Y+7	; 0x07
    167c:	b8 85       	ldd	r27, Y+8	; 0x08
    167e:	b7 fd       	sbrc	r27, 7
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <__moddi3+0x68>
    1682:	e1 96       	adiw	r28, 0x31	; 49
    1684:	1c ae       	std	Y+60, r1	; 0x3c
    1686:	1d ae       	std	Y+61, r1	; 0x3d
    1688:	1e ae       	std	Y+62, r1	; 0x3e
    168a:	1f ae       	std	Y+63, r1	; 0x3f
    168c:	e1 97       	sbiw	r28, 0x31	; 49
    168e:	64 c0       	rjmp	.+200    	; 0x1758 <__moddi3+0x130>
    1690:	21 95       	neg	r18
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	12 16       	cp	r1, r18
    1696:	08 f0       	brcs	.+2      	; 0x169a <__moddi3+0x72>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	31 95       	neg	r19
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	13 16       	cp	r1, r19
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <__moddi3+0x7c>
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	b3 2f       	mov	r27, r19
    16a6:	b8 1b       	sub	r27, r24
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	3b 17       	cp	r19, r27
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <__moddi3+0x88>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	98 2b       	or	r25, r24
    16b2:	41 95       	neg	r20
    16b4:	31 e0       	ldi	r19, 0x01	; 1
    16b6:	14 16       	cp	r1, r20
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <__moddi3+0x94>
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	a4 2f       	mov	r26, r20
    16be:	a9 1b       	sub	r26, r25
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	4a 17       	cp	r20, r26
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <__moddi3+0xa0>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	38 2b       	or	r19, r24
    16ca:	51 95       	neg	r21
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	15 16       	cp	r1, r21
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <__moddi3+0xac>
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	f5 2f       	mov	r31, r21
    16d6:	f3 1b       	sub	r31, r19
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	5f 17       	cp	r21, r31
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <__moddi3+0xb8>
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	98 2b       	or	r25, r24
    16e2:	61 95       	neg	r22
    16e4:	31 e0       	ldi	r19, 0x01	; 1
    16e6:	16 16       	cp	r1, r22
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <__moddi3+0xc4>
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	e6 2f       	mov	r30, r22
    16ee:	e9 1b       	sub	r30, r25
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	6e 17       	cp	r22, r30
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <__moddi3+0xd0>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	38 2b       	or	r19, r24
    16fa:	71 95       	neg	r23
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	17 16       	cp	r1, r23
    1700:	08 f0       	brcs	.+2      	; 0x1704 <__moddi3+0xdc>
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	57 2f       	mov	r21, r23
    1706:	53 1b       	sub	r21, r19
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	75 17       	cp	r23, r21
    170c:	08 f0       	brcs	.+2      	; 0x1710 <__moddi3+0xe8>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	48 2b       	or	r20, r24
    1712:	89 2d       	mov	r24, r9
    1714:	81 95       	neg	r24
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	18 16       	cp	r1, r24
    171a:	08 f0       	brcs	.+2      	; 0x171e <__moddi3+0xf6>
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	68 2e       	mov	r6, r24
    1720:	64 1a       	sub	r6, r20
    1722:	46 2d       	mov	r20, r6
    1724:	31 e0       	ldi	r19, 0x01	; 1
    1726:	86 15       	cp	r24, r6
    1728:	08 f0       	brcs	.+2      	; 0x172c <__moddi3+0x104>
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	93 2b       	or	r25, r19
    172e:	88 2d       	mov	r24, r8
    1730:	81 95       	neg	r24
    1732:	89 1b       	sub	r24, r25
    1734:	29 83       	std	Y+1, r18	; 0x01
    1736:	ba 83       	std	Y+2, r27	; 0x02
    1738:	ab 83       	std	Y+3, r26	; 0x03
    173a:	fc 83       	std	Y+4, r31	; 0x04
    173c:	ed 83       	std	Y+5, r30	; 0x05
    173e:	5e 83       	std	Y+6, r21	; 0x06
    1740:	4f 83       	std	Y+7, r20	; 0x07
    1742:	88 87       	std	Y+8, r24	; 0x08
    1744:	2f ef       	ldi	r18, 0xFF	; 255
    1746:	3f ef       	ldi	r19, 0xFF	; 255
    1748:	4f ef       	ldi	r20, 0xFF	; 255
    174a:	5f ef       	ldi	r21, 0xFF	; 255
    174c:	e1 96       	adiw	r28, 0x31	; 49
    174e:	2c af       	std	Y+60, r18	; 0x3c
    1750:	3d af       	std	Y+61, r19	; 0x3d
    1752:	4e af       	std	Y+62, r20	; 0x3e
    1754:	5f af       	std	Y+63, r21	; 0x3f
    1756:	e1 97       	sbiw	r28, 0x31	; 49
    1758:	8d 85       	ldd	r24, Y+13	; 0x0d
    175a:	9e 85       	ldd	r25, Y+14	; 0x0e
    175c:	af 85       	ldd	r26, Y+15	; 0x0f
    175e:	b8 89       	ldd	r27, Y+16	; 0x10
    1760:	b7 ff       	sbrs	r27, 7
    1762:	5a c0       	rjmp	.+180    	; 0x1818 <__moddi3+0x1f0>
    1764:	a1 94       	neg	r10
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	1a 14       	cp	r1, r10
    176a:	08 f0       	brcs	.+2      	; 0x176e <__moddi3+0x146>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	b1 94       	neg	r11
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	1b 14       	cp	r1, r11
    1774:	08 f0       	brcs	.+2      	; 0x1778 <__moddi3+0x150>
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	6b 2d       	mov	r22, r11
    177a:	68 1b       	sub	r22, r24
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	b6 16       	cp	r11, r22
    1780:	08 f0       	brcs	.+2      	; 0x1784 <__moddi3+0x15c>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	98 2b       	or	r25, r24
    1786:	c1 94       	neg	r12
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	1c 14       	cp	r1, r12
    178c:	08 f0       	brcs	.+2      	; 0x1790 <__moddi3+0x168>
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	5c 2d       	mov	r21, r12
    1792:	59 1b       	sub	r21, r25
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	c5 16       	cp	r12, r21
    1798:	08 f0       	brcs	.+2      	; 0x179c <__moddi3+0x174>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	28 2b       	or	r18, r24
    179e:	d1 94       	neg	r13
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	1d 14       	cp	r1, r13
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <__moddi3+0x180>
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	4d 2d       	mov	r20, r13
    17aa:	42 1b       	sub	r20, r18
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	d4 16       	cp	r13, r20
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <__moddi3+0x18c>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	98 2b       	or	r25, r24
    17b6:	e1 94       	neg	r14
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	1e 14       	cp	r1, r14
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <__moddi3+0x198>
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3e 2d       	mov	r19, r14
    17c2:	39 1b       	sub	r19, r25
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	e3 16       	cp	r14, r19
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <__moddi3+0x1a4>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	28 2b       	or	r18, r24
    17ce:	f1 94       	neg	r15
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	1f 14       	cp	r1, r15
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <__moddi3+0x1b0>
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	7f 2d       	mov	r23, r15
    17da:	72 1b       	sub	r23, r18
    17dc:	27 2f       	mov	r18, r23
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	f7 16       	cp	r15, r23
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <__moddi3+0x1be>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	98 2b       	or	r25, r24
    17e8:	01 95       	neg	r16
    17ea:	11 e0       	ldi	r17, 0x01	; 1
    17ec:	10 16       	cp	r1, r16
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <__moddi3+0x1ca>
    17f0:	10 e0       	ldi	r17, 0x00	; 0
    17f2:	80 2f       	mov	r24, r16
    17f4:	89 1b       	sub	r24, r25
    17f6:	98 2f       	mov	r25, r24
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	09 17       	cp	r16, r25
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <__moddi3+0x1d8>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	18 2b       	or	r17, r24
    1802:	87 2d       	mov	r24, r7
    1804:	81 95       	neg	r24
    1806:	81 1b       	sub	r24, r17
    1808:	a9 86       	std	Y+9, r10	; 0x09
    180a:	6a 87       	std	Y+10, r22	; 0x0a
    180c:	5b 87       	std	Y+11, r21	; 0x0b
    180e:	4c 87       	std	Y+12, r20	; 0x0c
    1810:	3d 87       	std	Y+13, r19	; 0x0d
    1812:	2e 87       	std	Y+14, r18	; 0x0e
    1814:	9f 87       	std	Y+15, r25	; 0x0f
    1816:	88 8b       	std	Y+16, r24	; 0x10
    1818:	99 81       	ldd	r25, Y+1	; 0x01
    181a:	2a 81       	ldd	r18, Y+2	; 0x02
    181c:	3b 81       	ldd	r19, Y+3	; 0x03
    181e:	4c 81       	ldd	r20, Y+4	; 0x04
    1820:	5d 81       	ldd	r21, Y+5	; 0x05
    1822:	6e 81       	ldd	r22, Y+6	; 0x06
    1824:	7f 81       	ldd	r23, Y+7	; 0x07
    1826:	a8 85       	ldd	r26, Y+8	; 0x08
    1828:	b9 85       	ldd	r27, Y+9	; 0x09
    182a:	1a 85       	ldd	r17, Y+10	; 0x0a
    182c:	0b 85       	ldd	r16, Y+11	; 0x0b
    182e:	fc 84       	ldd	r15, Y+12	; 0x0c
    1830:	ed 84       	ldd	r14, Y+13	; 0x0d
    1832:	de 84       	ldd	r13, Y+14	; 0x0e
    1834:	cf 84       	ldd	r12, Y+15	; 0x0f
    1836:	b8 88       	ldd	r11, Y+16	; 0x10
    1838:	88 e0       	ldi	r24, 0x08	; 8
    183a:	e9 e1       	ldi	r30, 0x19	; 25
    183c:	8e 2e       	mov	r8, r30
    183e:	91 2c       	mov	r9, r1
    1840:	8c 0e       	add	r8, r28
    1842:	9d 1e       	adc	r9, r29
    1844:	f4 01       	movw	r30, r8
    1846:	68 2e       	mov	r6, r24
    1848:	11 92       	st	Z+, r1
    184a:	6a 94       	dec	r6
    184c:	e9 f7       	brne	.-6      	; 0x1848 <__moddi3+0x220>
    184e:	99 8f       	std	Y+25, r25	; 0x19
    1850:	2a 8f       	std	Y+26, r18	; 0x1a
    1852:	3b 8f       	std	Y+27, r19	; 0x1b
    1854:	4c 8f       	std	Y+28, r20	; 0x1c
    1856:	5d 8f       	std	Y+29, r21	; 0x1d
    1858:	6e 8f       	std	Y+30, r22	; 0x1e
    185a:	7f 8f       	std	Y+31, r23	; 0x1f
    185c:	a8 a3       	std	Y+32, r26	; 0x20
    185e:	9e 01       	movw	r18, r28
    1860:	2f 5d       	subi	r18, 0xDF	; 223
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	f9 01       	movw	r30, r18
    1866:	11 92       	st	Z+, r1
    1868:	8a 95       	dec	r24
    186a:	e9 f7       	brne	.-6      	; 0x1866 <__moddi3+0x23e>
    186c:	b9 a3       	std	Y+33, r27	; 0x21
    186e:	1a a3       	std	Y+34, r17	; 0x22
    1870:	0b a3       	std	Y+35, r16	; 0x23
    1872:	fc a2       	std	Y+36, r15	; 0x24
    1874:	ed a2       	std	Y+37, r14	; 0x25
    1876:	de a2       	std	Y+38, r13	; 0x26
    1878:	cf a2       	std	Y+39, r12	; 0x27
    187a:	b8 a6       	std	Y+40, r11	; 0x28
    187c:	29 a0       	ldd	r2, Y+33	; 0x21
    187e:	3a a0       	ldd	r3, Y+34	; 0x22
    1880:	4b a0       	ldd	r4, Y+35	; 0x23
    1882:	5c a0       	ldd	r5, Y+36	; 0x24
    1884:	ad a0       	ldd	r10, Y+37	; 0x25
    1886:	be a0       	ldd	r11, Y+38	; 0x26
    1888:	cf a0       	ldd	r12, Y+39	; 0x27
    188a:	d8 a4       	ldd	r13, Y+40	; 0x28
    188c:	49 8d       	ldd	r20, Y+25	; 0x19
    188e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1890:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1892:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1894:	e5 96       	adiw	r28, 0x35	; 53
    1896:	4f af       	std	Y+63, r20	; 0x3f
    1898:	e5 97       	sbiw	r28, 0x35	; 53
    189a:	e6 96       	adiw	r28, 0x36	; 54
    189c:	5f af       	std	Y+63, r21	; 0x3f
    189e:	e6 97       	sbiw	r28, 0x36	; 54
    18a0:	e7 96       	adiw	r28, 0x37	; 55
    18a2:	6f af       	std	Y+63, r22	; 0x3f
    18a4:	e7 97       	sbiw	r28, 0x37	; 55
    18a6:	e8 96       	adiw	r28, 0x38	; 56
    18a8:	7f af       	std	Y+63, r23	; 0x3f
    18aa:	e8 97       	sbiw	r28, 0x38	; 56
    18ac:	e8 96       	adiw	r28, 0x38	; 56
    18ae:	6c ac       	ldd	r6, Y+60	; 0x3c
    18b0:	7d ac       	ldd	r7, Y+61	; 0x3d
    18b2:	8e ac       	ldd	r8, Y+62	; 0x3e
    18b4:	9f ac       	ldd	r9, Y+63	; 0x3f
    18b6:	e8 97       	sbiw	r28, 0x38	; 56
    18b8:	2d 96       	adiw	r28, 0x0d	; 13
    18ba:	6c ae       	std	Y+60, r6	; 0x3c
    18bc:	7d ae       	std	Y+61, r7	; 0x3d
    18be:	8e ae       	std	Y+62, r8	; 0x3e
    18c0:	9f ae       	std	Y+63, r9	; 0x3f
    18c2:	2d 97       	sbiw	r28, 0x0d	; 13
    18c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    18ca:	38 a1       	ldd	r19, Y+32	; 0x20
    18cc:	3c 01       	movw	r6, r24
    18ce:	49 01       	movw	r8, r18
    18d0:	61 96       	adiw	r28, 0x11	; 17
    18d2:	6c ae       	std	Y+60, r6	; 0x3c
    18d4:	7d ae       	std	Y+61, r7	; 0x3d
    18d6:	8e ae       	std	Y+62, r8	; 0x3e
    18d8:	9f ae       	std	Y+63, r9	; 0x3f
    18da:	61 97       	sbiw	r28, 0x11	; 17
    18dc:	a1 14       	cp	r10, r1
    18de:	b1 04       	cpc	r11, r1
    18e0:	c1 04       	cpc	r12, r1
    18e2:	d1 04       	cpc	r13, r1
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <__moddi3+0x2c0>
    18e6:	28 c3       	rjmp	.+1616   	; 0x1f38 <__moddi3+0x910>
    18e8:	62 14       	cp	r6, r2
    18ea:	73 04       	cpc	r7, r3
    18ec:	84 04       	cpc	r8, r4
    18ee:	95 04       	cpc	r9, r5
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <__moddi3+0x2cc>
    18f2:	0e c1       	rjmp	.+540    	; 0x1b10 <__moddi3+0x4e8>
    18f4:	00 e0       	ldi	r16, 0x00	; 0
    18f6:	20 16       	cp	r2, r16
    18f8:	00 e0       	ldi	r16, 0x00	; 0
    18fa:	30 06       	cpc	r3, r16
    18fc:	01 e0       	ldi	r16, 0x01	; 1
    18fe:	40 06       	cpc	r4, r16
    1900:	00 e0       	ldi	r16, 0x00	; 0
    1902:	50 06       	cpc	r5, r16
    1904:	88 f4       	brcc	.+34     	; 0x1928 <__moddi3+0x300>
    1906:	1f ef       	ldi	r17, 0xFF	; 255
    1908:	21 16       	cp	r2, r17
    190a:	31 04       	cpc	r3, r1
    190c:	41 04       	cpc	r4, r1
    190e:	51 04       	cpc	r5, r1
    1910:	39 f0       	breq	.+14     	; 0x1920 <__moddi3+0x2f8>
    1912:	30 f0       	brcs	.+12     	; 0x1920 <__moddi3+0x2f8>
    1914:	88 e0       	ldi	r24, 0x08	; 8
    1916:	e8 2e       	mov	r14, r24
    1918:	f1 2c       	mov	r15, r1
    191a:	01 2d       	mov	r16, r1
    191c:	11 2d       	mov	r17, r1
    191e:	18 c0       	rjmp	.+48     	; 0x1950 <__moddi3+0x328>
    1920:	ee 24       	eor	r14, r14
    1922:	ff 24       	eor	r15, r15
    1924:	87 01       	movw	r16, r14
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <__moddi3+0x328>
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	22 16       	cp	r2, r18
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	32 06       	cpc	r3, r18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	42 06       	cpc	r4, r18
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	52 06       	cpc	r5, r18
    1938:	30 f0       	brcs	.+12     	; 0x1946 <__moddi3+0x31e>
    193a:	b8 e1       	ldi	r27, 0x18	; 24
    193c:	eb 2e       	mov	r14, r27
    193e:	f1 2c       	mov	r15, r1
    1940:	01 2d       	mov	r16, r1
    1942:	11 2d       	mov	r17, r1
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <__moddi3+0x328>
    1946:	a0 e1       	ldi	r26, 0x10	; 16
    1948:	ea 2e       	mov	r14, r26
    194a:	f1 2c       	mov	r15, r1
    194c:	01 2d       	mov	r16, r1
    194e:	11 2d       	mov	r17, r1
    1950:	d2 01       	movw	r26, r4
    1952:	c1 01       	movw	r24, r2
    1954:	0e 2c       	mov	r0, r14
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <__moddi3+0x338>
    1958:	b6 95       	lsr	r27
    195a:	a7 95       	ror	r26
    195c:	97 95       	ror	r25
    195e:	87 95       	ror	r24
    1960:	0a 94       	dec	r0
    1962:	d2 f7       	brpl	.-12     	; 0x1958 <__moddi3+0x330>
    1964:	88 59       	subi	r24, 0x98	; 152
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	dc 01       	movw	r26, r24
    196a:	2c 91       	ld	r18, X
    196c:	80 e2       	ldi	r24, 0x20	; 32
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e0       	ldi	r26, 0x00	; 0
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	8e 19       	sub	r24, r14
    1976:	9f 09       	sbc	r25, r15
    1978:	a0 0b       	sbc	r26, r16
    197a:	b1 0b       	sbc	r27, r17
    197c:	5c 01       	movw	r10, r24
    197e:	6d 01       	movw	r12, r26
    1980:	a2 1a       	sub	r10, r18
    1982:	b1 08       	sbc	r11, r1
    1984:	c1 08       	sbc	r12, r1
    1986:	d1 08       	sbc	r13, r1
    1988:	65 96       	adiw	r28, 0x15	; 21
    198a:	ac ae       	std	Y+60, r10	; 0x3c
    198c:	bd ae       	std	Y+61, r11	; 0x3d
    198e:	ce ae       	std	Y+62, r12	; 0x3e
    1990:	df ae       	std	Y+63, r13	; 0x3f
    1992:	65 97       	sbiw	r28, 0x15	; 21
    1994:	a1 14       	cp	r10, r1
    1996:	b1 04       	cpc	r11, r1
    1998:	c1 04       	cpc	r12, r1
    199a:	d1 04       	cpc	r13, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <__moddi3+0x378>
    199e:	45 c0       	rjmp	.+138    	; 0x1a2a <__moddi3+0x402>
    19a0:	62 96       	adiw	r28, 0x12	; 18
    19a2:	6f ad       	ldd	r22, Y+63	; 0x3f
    19a4:	62 97       	sbiw	r28, 0x12	; 18
    19a6:	06 2e       	mov	r0, r22
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <__moddi3+0x38a>
    19aa:	22 0c       	add	r2, r2
    19ac:	33 1c       	adc	r3, r3
    19ae:	44 1c       	adc	r4, r4
    19b0:	55 1c       	adc	r5, r5
    19b2:	0a 94       	dec	r0
    19b4:	d2 f7       	brpl	.-12     	; 0x19aa <__moddi3+0x382>
    19b6:	a4 01       	movw	r20, r8
    19b8:	93 01       	movw	r18, r6
    19ba:	06 2e       	mov	r0, r22
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <__moddi3+0x39e>
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	44 1f       	adc	r20, r20
    19c4:	55 1f       	adc	r21, r21
    19c6:	0a 94       	dec	r0
    19c8:	d2 f7       	brpl	.-12     	; 0x19be <__moddi3+0x396>
    19ca:	80 e2       	ldi	r24, 0x20	; 32
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	8a 19       	sub	r24, r10
    19d0:	9b 09       	sbc	r25, r11
    19d2:	e8 96       	adiw	r28, 0x38	; 56
    19d4:	cc ac       	ldd	r12, Y+60	; 0x3c
    19d6:	dd ac       	ldd	r13, Y+61	; 0x3d
    19d8:	ee ac       	ldd	r14, Y+62	; 0x3e
    19da:	ff ac       	ldd	r15, Y+63	; 0x3f
    19dc:	e8 97       	sbiw	r28, 0x38	; 56
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <__moddi3+0x3c0>
    19e0:	f6 94       	lsr	r15
    19e2:	e7 94       	ror	r14
    19e4:	d7 94       	ror	r13
    19e6:	c7 94       	ror	r12
    19e8:	8a 95       	dec	r24
    19ea:	d2 f7       	brpl	.-12     	; 0x19e0 <__moddi3+0x3b8>
    19ec:	87 01       	movw	r16, r14
    19ee:	76 01       	movw	r14, r12
    19f0:	e2 2a       	or	r14, r18
    19f2:	f3 2a       	or	r15, r19
    19f4:	04 2b       	or	r16, r20
    19f6:	15 2b       	or	r17, r21
    19f8:	61 96       	adiw	r28, 0x11	; 17
    19fa:	ec ae       	std	Y+60, r14	; 0x3c
    19fc:	fd ae       	std	Y+61, r15	; 0x3d
    19fe:	0e af       	std	Y+62, r16	; 0x3e
    1a00:	1f af       	std	Y+63, r17	; 0x3f
    1a02:	61 97       	sbiw	r28, 0x11	; 17
    1a04:	e8 96       	adiw	r28, 0x38	; 56
    1a06:	0c ad       	ldd	r16, Y+60	; 0x3c
    1a08:	1d ad       	ldd	r17, Y+61	; 0x3d
    1a0a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a0c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a0e:	e8 97       	sbiw	r28, 0x38	; 56
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <__moddi3+0x3f2>
    1a12:	00 0f       	add	r16, r16
    1a14:	11 1f       	adc	r17, r17
    1a16:	22 1f       	adc	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	6a 95       	dec	r22
    1a1c:	d2 f7       	brpl	.-12     	; 0x1a12 <__moddi3+0x3ea>
    1a1e:	2d 96       	adiw	r28, 0x0d	; 13
    1a20:	0c af       	std	Y+60, r16	; 0x3c
    1a22:	1d af       	std	Y+61, r17	; 0x3d
    1a24:	2e af       	std	Y+62, r18	; 0x3e
    1a26:	3f af       	std	Y+63, r19	; 0x3f
    1a28:	2d 97       	sbiw	r28, 0x0d	; 13
    1a2a:	32 01       	movw	r6, r4
    1a2c:	88 24       	eor	r8, r8
    1a2e:	99 24       	eor	r9, r9
    1a30:	a2 01       	movw	r20, r4
    1a32:	91 01       	movw	r18, r2
    1a34:	40 70       	andi	r20, 0x00	; 0
    1a36:	50 70       	andi	r21, 0x00	; 0
    1a38:	69 96       	adiw	r28, 0x19	; 25
    1a3a:	2c af       	std	Y+60, r18	; 0x3c
    1a3c:	3d af       	std	Y+61, r19	; 0x3d
    1a3e:	4e af       	std	Y+62, r20	; 0x3e
    1a40:	5f af       	std	Y+63, r21	; 0x3f
    1a42:	69 97       	sbiw	r28, 0x19	; 25
    1a44:	61 96       	adiw	r28, 0x11	; 17
    1a46:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a48:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a4e:	61 97       	sbiw	r28, 0x11	; 17
    1a50:	a4 01       	movw	r20, r8
    1a52:	93 01       	movw	r18, r6
    1a54:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1a58:	7b 01       	movw	r14, r22
    1a5a:	8c 01       	movw	r16, r24
    1a5c:	61 96       	adiw	r28, 0x11	; 17
    1a5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a60:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a62:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a64:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a66:	61 97       	sbiw	r28, 0x11	; 17
    1a68:	a4 01       	movw	r20, r8
    1a6a:	93 01       	movw	r18, r6
    1a6c:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1a70:	ca 01       	movw	r24, r20
    1a72:	b9 01       	movw	r22, r18
    1a74:	69 96       	adiw	r28, 0x19	; 25
    1a76:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a78:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a7a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a7c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a7e:	69 97       	sbiw	r28, 0x19	; 25
    1a80:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    1a84:	9b 01       	movw	r18, r22
    1a86:	ac 01       	movw	r20, r24
    1a88:	87 01       	movw	r16, r14
    1a8a:	ff 24       	eor	r15, r15
    1a8c:	ee 24       	eor	r14, r14
    1a8e:	2d 96       	adiw	r28, 0x0d	; 13
    1a90:	ac ac       	ldd	r10, Y+60	; 0x3c
    1a92:	bd ac       	ldd	r11, Y+61	; 0x3d
    1a94:	ce ac       	ldd	r12, Y+62	; 0x3e
    1a96:	df ac       	ldd	r13, Y+63	; 0x3f
    1a98:	2d 97       	sbiw	r28, 0x0d	; 13
    1a9a:	c6 01       	movw	r24, r12
    1a9c:	aa 27       	eor	r26, r26
    1a9e:	bb 27       	eor	r27, r27
    1aa0:	57 01       	movw	r10, r14
    1aa2:	68 01       	movw	r12, r16
    1aa4:	a8 2a       	or	r10, r24
    1aa6:	b9 2a       	or	r11, r25
    1aa8:	ca 2a       	or	r12, r26
    1aaa:	db 2a       	or	r13, r27
    1aac:	a2 16       	cp	r10, r18
    1aae:	b3 06       	cpc	r11, r19
    1ab0:	c4 06       	cpc	r12, r20
    1ab2:	d5 06       	cpc	r13, r21
    1ab4:	90 f4       	brcc	.+36     	; 0x1ada <__moddi3+0x4b2>
    1ab6:	a2 0c       	add	r10, r2
    1ab8:	b3 1c       	adc	r11, r3
    1aba:	c4 1c       	adc	r12, r4
    1abc:	d5 1c       	adc	r13, r5
    1abe:	a2 14       	cp	r10, r2
    1ac0:	b3 04       	cpc	r11, r3
    1ac2:	c4 04       	cpc	r12, r4
    1ac4:	d5 04       	cpc	r13, r5
    1ac6:	48 f0       	brcs	.+18     	; 0x1ada <__moddi3+0x4b2>
    1ac8:	a2 16       	cp	r10, r18
    1aca:	b3 06       	cpc	r11, r19
    1acc:	c4 06       	cpc	r12, r20
    1ace:	d5 06       	cpc	r13, r21
    1ad0:	20 f4       	brcc	.+8      	; 0x1ada <__moddi3+0x4b2>
    1ad2:	a2 0c       	add	r10, r2
    1ad4:	b3 1c       	adc	r11, r3
    1ad6:	c4 1c       	adc	r12, r4
    1ad8:	d5 1c       	adc	r13, r5
    1ada:	a2 1a       	sub	r10, r18
    1adc:	b3 0a       	sbc	r11, r19
    1ade:	c4 0a       	sbc	r12, r20
    1ae0:	d5 0a       	sbc	r13, r21
    1ae2:	c6 01       	movw	r24, r12
    1ae4:	b5 01       	movw	r22, r10
    1ae6:	a4 01       	movw	r20, r8
    1ae8:	93 01       	movw	r18, r6
    1aea:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1aee:	7b 01       	movw	r14, r22
    1af0:	8c 01       	movw	r16, r24
    1af2:	c6 01       	movw	r24, r12
    1af4:	b5 01       	movw	r22, r10
    1af6:	a4 01       	movw	r20, r8
    1af8:	93 01       	movw	r18, r6
    1afa:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1afe:	ca 01       	movw	r24, r20
    1b00:	b9 01       	movw	r22, r18
    1b02:	69 96       	adiw	r28, 0x19	; 25
    1b04:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b06:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b08:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b0a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b0c:	69 97       	sbiw	r28, 0x19	; 25
    1b0e:	c8 c1       	rjmp	.+912    	; 0x1ea0 <__moddi3+0x878>
    1b10:	21 14       	cp	r2, r1
    1b12:	31 04       	cpc	r3, r1
    1b14:	41 04       	cpc	r4, r1
    1b16:	51 04       	cpc	r5, r1
    1b18:	71 f4       	brne	.+28     	; 0x1b36 <__moddi3+0x50e>
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1b2e:	c9 01       	movw	r24, r18
    1b30:	da 01       	movw	r26, r20
    1b32:	1c 01       	movw	r2, r24
    1b34:	2d 01       	movw	r4, r26
    1b36:	00 e0       	ldi	r16, 0x00	; 0
    1b38:	20 16       	cp	r2, r16
    1b3a:	00 e0       	ldi	r16, 0x00	; 0
    1b3c:	30 06       	cpc	r3, r16
    1b3e:	01 e0       	ldi	r16, 0x01	; 1
    1b40:	40 06       	cpc	r4, r16
    1b42:	00 e0       	ldi	r16, 0x00	; 0
    1b44:	50 06       	cpc	r5, r16
    1b46:	88 f4       	brcc	.+34     	; 0x1b6a <__moddi3+0x542>
    1b48:	1f ef       	ldi	r17, 0xFF	; 255
    1b4a:	21 16       	cp	r2, r17
    1b4c:	31 04       	cpc	r3, r1
    1b4e:	41 04       	cpc	r4, r1
    1b50:	51 04       	cpc	r5, r1
    1b52:	39 f0       	breq	.+14     	; 0x1b62 <__moddi3+0x53a>
    1b54:	30 f0       	brcs	.+12     	; 0x1b62 <__moddi3+0x53a>
    1b56:	68 e0       	ldi	r22, 0x08	; 8
    1b58:	e6 2e       	mov	r14, r22
    1b5a:	f1 2c       	mov	r15, r1
    1b5c:	01 2d       	mov	r16, r1
    1b5e:	11 2d       	mov	r17, r1
    1b60:	18 c0       	rjmp	.+48     	; 0x1b92 <__moddi3+0x56a>
    1b62:	ee 24       	eor	r14, r14
    1b64:	ff 24       	eor	r15, r15
    1b66:	87 01       	movw	r16, r14
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <__moddi3+0x56a>
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	22 16       	cp	r2, r18
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	32 06       	cpc	r3, r18
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	42 06       	cpc	r4, r18
    1b76:	21 e0       	ldi	r18, 0x01	; 1
    1b78:	52 06       	cpc	r5, r18
    1b7a:	30 f0       	brcs	.+12     	; 0x1b88 <__moddi3+0x560>
    1b7c:	58 e1       	ldi	r21, 0x18	; 24
    1b7e:	e5 2e       	mov	r14, r21
    1b80:	f1 2c       	mov	r15, r1
    1b82:	01 2d       	mov	r16, r1
    1b84:	11 2d       	mov	r17, r1
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <__moddi3+0x56a>
    1b88:	40 e1       	ldi	r20, 0x10	; 16
    1b8a:	e4 2e       	mov	r14, r20
    1b8c:	f1 2c       	mov	r15, r1
    1b8e:	01 2d       	mov	r16, r1
    1b90:	11 2d       	mov	r17, r1
    1b92:	d2 01       	movw	r26, r4
    1b94:	c1 01       	movw	r24, r2
    1b96:	0e 2c       	mov	r0, r14
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <__moddi3+0x57a>
    1b9a:	b6 95       	lsr	r27
    1b9c:	a7 95       	ror	r26
    1b9e:	97 95       	ror	r25
    1ba0:	87 95       	ror	r24
    1ba2:	0a 94       	dec	r0
    1ba4:	d2 f7       	brpl	.-12     	; 0x1b9a <__moddi3+0x572>
    1ba6:	88 59       	subi	r24, 0x98	; 152
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	dc 01       	movw	r26, r24
    1bac:	2c 91       	ld	r18, X
    1bae:	30 e2       	ldi	r19, 0x20	; 32
    1bb0:	a3 2e       	mov	r10, r19
    1bb2:	b1 2c       	mov	r11, r1
    1bb4:	c1 2c       	mov	r12, r1
    1bb6:	d1 2c       	mov	r13, r1
    1bb8:	d6 01       	movw	r26, r12
    1bba:	c5 01       	movw	r24, r10
    1bbc:	8e 19       	sub	r24, r14
    1bbe:	9f 09       	sbc	r25, r15
    1bc0:	a0 0b       	sbc	r26, r16
    1bc2:	b1 0b       	sbc	r27, r17
    1bc4:	7c 01       	movw	r14, r24
    1bc6:	8d 01       	movw	r16, r26
    1bc8:	e2 1a       	sub	r14, r18
    1bca:	f1 08       	sbc	r15, r1
    1bcc:	01 09       	sbc	r16, r1
    1bce:	11 09       	sbc	r17, r1
    1bd0:	65 96       	adiw	r28, 0x15	; 21
    1bd2:	ec ae       	std	Y+60, r14	; 0x3c
    1bd4:	fd ae       	std	Y+61, r15	; 0x3d
    1bd6:	0e af       	std	Y+62, r16	; 0x3e
    1bd8:	1f af       	std	Y+63, r17	; 0x3f
    1bda:	65 97       	sbiw	r28, 0x15	; 21
    1bdc:	e1 14       	cp	r14, r1
    1bde:	f1 04       	cpc	r15, r1
    1be0:	01 05       	cpc	r16, r1
    1be2:	11 05       	cpc	r17, r1
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <__moddi3+0x5cc>
    1be6:	64 01       	movw	r12, r8
    1be8:	53 01       	movw	r10, r6
    1bea:	a2 18       	sub	r10, r2
    1bec:	b3 08       	sbc	r11, r3
    1bee:	c4 08       	sbc	r12, r4
    1bf0:	d5 08       	sbc	r13, r5
    1bf2:	ec c0       	rjmp	.+472    	; 0x1dcc <__moddi3+0x7a4>
    1bf4:	62 96       	adiw	r28, 0x12	; 18
    1bf6:	ff ac       	ldd	r15, Y+63	; 0x3f
    1bf8:	62 97       	sbiw	r28, 0x12	; 18
    1bfa:	e4 96       	adiw	r28, 0x34	; 52
    1bfc:	ff ae       	std	Y+63, r15	; 0x3f
    1bfe:	e4 97       	sbiw	r28, 0x34	; 52
    1c00:	0f 2c       	mov	r0, r15
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <__moddi3+0x5e4>
    1c04:	22 0c       	add	r2, r2
    1c06:	33 1c       	adc	r3, r3
    1c08:	44 1c       	adc	r4, r4
    1c0a:	55 1c       	adc	r5, r5
    1c0c:	0a 94       	dec	r0
    1c0e:	d2 f7       	brpl	.-12     	; 0x1c04 <__moddi3+0x5dc>
    1c10:	8a 2d       	mov	r24, r10
    1c12:	8f 19       	sub	r24, r15
    1c14:	64 01       	movw	r12, r8
    1c16:	53 01       	movw	r10, r6
    1c18:	08 2e       	mov	r0, r24
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <__moddi3+0x5fc>
    1c1c:	d6 94       	lsr	r13
    1c1e:	c7 94       	ror	r12
    1c20:	b7 94       	ror	r11
    1c22:	a7 94       	ror	r10
    1c24:	0a 94       	dec	r0
    1c26:	d2 f7       	brpl	.-12     	; 0x1c1c <__moddi3+0x5f4>
    1c28:	a4 01       	movw	r20, r8
    1c2a:	93 01       	movw	r18, r6
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__moddi3+0x60e>
    1c2e:	22 0f       	add	r18, r18
    1c30:	33 1f       	adc	r19, r19
    1c32:	44 1f       	adc	r20, r20
    1c34:	55 1f       	adc	r21, r21
    1c36:	fa 94       	dec	r15
    1c38:	d2 f7       	brpl	.-12     	; 0x1c2e <__moddi3+0x606>
    1c3a:	e8 96       	adiw	r28, 0x38	; 56
    1c3c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1c3e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1c40:	8e ac       	ldd	r8, Y+62	; 0x3e
    1c42:	9f ac       	ldd	r9, Y+63	; 0x3f
    1c44:	e8 97       	sbiw	r28, 0x38	; 56
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <__moddi3+0x628>
    1c48:	96 94       	lsr	r9
    1c4a:	87 94       	ror	r8
    1c4c:	77 94       	ror	r7
    1c4e:	67 94       	ror	r6
    1c50:	8a 95       	dec	r24
    1c52:	d2 f7       	brpl	.-12     	; 0x1c48 <__moddi3+0x620>
    1c54:	84 01       	movw	r16, r8
    1c56:	73 01       	movw	r14, r6
    1c58:	e2 2a       	or	r14, r18
    1c5a:	f3 2a       	or	r15, r19
    1c5c:	04 2b       	or	r16, r20
    1c5e:	15 2b       	or	r17, r21
    1c60:	29 96       	adiw	r28, 0x09	; 9
    1c62:	ec ae       	std	Y+60, r14	; 0x3c
    1c64:	fd ae       	std	Y+61, r15	; 0x3d
    1c66:	0e af       	std	Y+62, r16	; 0x3e
    1c68:	1f af       	std	Y+63, r17	; 0x3f
    1c6a:	29 97       	sbiw	r28, 0x09	; 9
    1c6c:	32 01       	movw	r6, r4
    1c6e:	88 24       	eor	r8, r8
    1c70:	99 24       	eor	r9, r9
    1c72:	92 01       	movw	r18, r4
    1c74:	81 01       	movw	r16, r2
    1c76:	20 70       	andi	r18, 0x00	; 0
    1c78:	30 70       	andi	r19, 0x00	; 0
    1c7a:	6d 96       	adiw	r28, 0x1d	; 29
    1c7c:	0c af       	std	Y+60, r16	; 0x3c
    1c7e:	1d af       	std	Y+61, r17	; 0x3d
    1c80:	2e af       	std	Y+62, r18	; 0x3e
    1c82:	3f af       	std	Y+63, r19	; 0x3f
    1c84:	6d 97       	sbiw	r28, 0x1d	; 29
    1c86:	c6 01       	movw	r24, r12
    1c88:	b5 01       	movw	r22, r10
    1c8a:	a4 01       	movw	r20, r8
    1c8c:	93 01       	movw	r18, r6
    1c8e:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1c92:	7b 01       	movw	r14, r22
    1c94:	8c 01       	movw	r16, r24
    1c96:	c6 01       	movw	r24, r12
    1c98:	b5 01       	movw	r22, r10
    1c9a:	a4 01       	movw	r20, r8
    1c9c:	93 01       	movw	r18, r6
    1c9e:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	b9 01       	movw	r22, r18
    1ca6:	6d 96       	adiw	r28, 0x1d	; 29
    1ca8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1caa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cac:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cae:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb0:	6d 97       	sbiw	r28, 0x1d	; 29
    1cb2:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	ac 01       	movw	r20, r24
    1cba:	87 01       	movw	r16, r14
    1cbc:	ff 24       	eor	r15, r15
    1cbe:	ee 24       	eor	r14, r14
    1cc0:	29 96       	adiw	r28, 0x09	; 9
    1cc2:	ac ac       	ldd	r10, Y+60	; 0x3c
    1cc4:	bd ac       	ldd	r11, Y+61	; 0x3d
    1cc6:	ce ac       	ldd	r12, Y+62	; 0x3e
    1cc8:	df ac       	ldd	r13, Y+63	; 0x3f
    1cca:	29 97       	sbiw	r28, 0x09	; 9
    1ccc:	c6 01       	movw	r24, r12
    1cce:	aa 27       	eor	r26, r26
    1cd0:	bb 27       	eor	r27, r27
    1cd2:	5c 01       	movw	r10, r24
    1cd4:	6d 01       	movw	r12, r26
    1cd6:	ae 28       	or	r10, r14
    1cd8:	bf 28       	or	r11, r15
    1cda:	c0 2a       	or	r12, r16
    1cdc:	d1 2a       	or	r13, r17
    1cde:	a2 16       	cp	r10, r18
    1ce0:	b3 06       	cpc	r11, r19
    1ce2:	c4 06       	cpc	r12, r20
    1ce4:	d5 06       	cpc	r13, r21
    1ce6:	90 f4       	brcc	.+36     	; 0x1d0c <__moddi3+0x6e4>
    1ce8:	a2 0c       	add	r10, r2
    1cea:	b3 1c       	adc	r11, r3
    1cec:	c4 1c       	adc	r12, r4
    1cee:	d5 1c       	adc	r13, r5
    1cf0:	a2 14       	cp	r10, r2
    1cf2:	b3 04       	cpc	r11, r3
    1cf4:	c4 04       	cpc	r12, r4
    1cf6:	d5 04       	cpc	r13, r5
    1cf8:	48 f0       	brcs	.+18     	; 0x1d0c <__moddi3+0x6e4>
    1cfa:	a2 16       	cp	r10, r18
    1cfc:	b3 06       	cpc	r11, r19
    1cfe:	c4 06       	cpc	r12, r20
    1d00:	d5 06       	cpc	r13, r21
    1d02:	20 f4       	brcc	.+8      	; 0x1d0c <__moddi3+0x6e4>
    1d04:	a2 0c       	add	r10, r2
    1d06:	b3 1c       	adc	r11, r3
    1d08:	c4 1c       	adc	r12, r4
    1d0a:	d5 1c       	adc	r13, r5
    1d0c:	a2 1a       	sub	r10, r18
    1d0e:	b3 0a       	sbc	r11, r19
    1d10:	c4 0a       	sbc	r12, r20
    1d12:	d5 0a       	sbc	r13, r21
    1d14:	c6 01       	movw	r24, r12
    1d16:	b5 01       	movw	r22, r10
    1d18:	a4 01       	movw	r20, r8
    1d1a:	93 01       	movw	r18, r6
    1d1c:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1d20:	7b 01       	movw	r14, r22
    1d22:	8c 01       	movw	r16, r24
    1d24:	c6 01       	movw	r24, r12
    1d26:	b5 01       	movw	r22, r10
    1d28:	a4 01       	movw	r20, r8
    1d2a:	93 01       	movw	r18, r6
    1d2c:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1d30:	ca 01       	movw	r24, r20
    1d32:	b9 01       	movw	r22, r18
    1d34:	6d 96       	adiw	r28, 0x1d	; 29
    1d36:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d38:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d3a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d3c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d3e:	6d 97       	sbiw	r28, 0x1d	; 29
    1d40:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    1d44:	9b 01       	movw	r18, r22
    1d46:	ac 01       	movw	r20, r24
    1d48:	87 01       	movw	r16, r14
    1d4a:	ff 24       	eor	r15, r15
    1d4c:	ee 24       	eor	r14, r14
    1d4e:	29 96       	adiw	r28, 0x09	; 9
    1d50:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d52:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d54:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d56:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d58:	29 97       	sbiw	r28, 0x09	; 9
    1d5a:	a0 70       	andi	r26, 0x00	; 0
    1d5c:	b0 70       	andi	r27, 0x00	; 0
    1d5e:	57 01       	movw	r10, r14
    1d60:	68 01       	movw	r12, r16
    1d62:	a8 2a       	or	r10, r24
    1d64:	b9 2a       	or	r11, r25
    1d66:	ca 2a       	or	r12, r26
    1d68:	db 2a       	or	r13, r27
    1d6a:	a2 16       	cp	r10, r18
    1d6c:	b3 06       	cpc	r11, r19
    1d6e:	c4 06       	cpc	r12, r20
    1d70:	d5 06       	cpc	r13, r21
    1d72:	90 f4       	brcc	.+36     	; 0x1d98 <__moddi3+0x770>
    1d74:	a2 0c       	add	r10, r2
    1d76:	b3 1c       	adc	r11, r3
    1d78:	c4 1c       	adc	r12, r4
    1d7a:	d5 1c       	adc	r13, r5
    1d7c:	a2 14       	cp	r10, r2
    1d7e:	b3 04       	cpc	r11, r3
    1d80:	c4 04       	cpc	r12, r4
    1d82:	d5 04       	cpc	r13, r5
    1d84:	48 f0       	brcs	.+18     	; 0x1d98 <__moddi3+0x770>
    1d86:	a2 16       	cp	r10, r18
    1d88:	b3 06       	cpc	r11, r19
    1d8a:	c4 06       	cpc	r12, r20
    1d8c:	d5 06       	cpc	r13, r21
    1d8e:	20 f4       	brcc	.+8      	; 0x1d98 <__moddi3+0x770>
    1d90:	a2 0c       	add	r10, r2
    1d92:	b3 1c       	adc	r11, r3
    1d94:	c4 1c       	adc	r12, r4
    1d96:	d5 1c       	adc	r13, r5
    1d98:	e8 96       	adiw	r28, 0x38	; 56
    1d9a:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d9c:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d9e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1da0:	1f ad       	ldd	r17, Y+63	; 0x3f
    1da2:	e8 97       	sbiw	r28, 0x38	; 56
    1da4:	e4 96       	adiw	r28, 0x34	; 52
    1da6:	0f ac       	ldd	r0, Y+63	; 0x3f
    1da8:	e4 97       	sbiw	r28, 0x34	; 52
    1daa:	04 c0       	rjmp	.+8      	; 0x1db4 <__moddi3+0x78c>
    1dac:	ee 0c       	add	r14, r14
    1dae:	ff 1c       	adc	r15, r15
    1db0:	00 1f       	adc	r16, r16
    1db2:	11 1f       	adc	r17, r17
    1db4:	0a 94       	dec	r0
    1db6:	d2 f7       	brpl	.-12     	; 0x1dac <__moddi3+0x784>
    1db8:	2d 96       	adiw	r28, 0x0d	; 13
    1dba:	ec ae       	std	Y+60, r14	; 0x3c
    1dbc:	fd ae       	std	Y+61, r15	; 0x3d
    1dbe:	0e af       	std	Y+62, r16	; 0x3e
    1dc0:	1f af       	std	Y+63, r17	; 0x3f
    1dc2:	2d 97       	sbiw	r28, 0x0d	; 13
    1dc4:	a2 1a       	sub	r10, r18
    1dc6:	b3 0a       	sbc	r11, r19
    1dc8:	c4 0a       	sbc	r12, r20
    1dca:	d5 0a       	sbc	r13, r21
    1dcc:	32 01       	movw	r6, r4
    1dce:	88 24       	eor	r8, r8
    1dd0:	99 24       	eor	r9, r9
    1dd2:	92 01       	movw	r18, r4
    1dd4:	81 01       	movw	r16, r2
    1dd6:	20 70       	andi	r18, 0x00	; 0
    1dd8:	30 70       	andi	r19, 0x00	; 0
    1dda:	a1 96       	adiw	r28, 0x21	; 33
    1ddc:	0c af       	std	Y+60, r16	; 0x3c
    1dde:	1d af       	std	Y+61, r17	; 0x3d
    1de0:	2e af       	std	Y+62, r18	; 0x3e
    1de2:	3f af       	std	Y+63, r19	; 0x3f
    1de4:	a1 97       	sbiw	r28, 0x21	; 33
    1de6:	c6 01       	movw	r24, r12
    1de8:	b5 01       	movw	r22, r10
    1dea:	a4 01       	movw	r20, r8
    1dec:	93 01       	movw	r18, r6
    1dee:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1df2:	7b 01       	movw	r14, r22
    1df4:	8c 01       	movw	r16, r24
    1df6:	c6 01       	movw	r24, r12
    1df8:	b5 01       	movw	r22, r10
    1dfa:	a4 01       	movw	r20, r8
    1dfc:	93 01       	movw	r18, r6
    1dfe:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1e02:	ca 01       	movw	r24, r20
    1e04:	b9 01       	movw	r22, r18
    1e06:	a1 96       	adiw	r28, 0x21	; 33
    1e08:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e0a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e10:	a1 97       	sbiw	r28, 0x21	; 33
    1e12:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    1e16:	9b 01       	movw	r18, r22
    1e18:	ac 01       	movw	r20, r24
    1e1a:	87 01       	movw	r16, r14
    1e1c:	ff 24       	eor	r15, r15
    1e1e:	ee 24       	eor	r14, r14
    1e20:	2d 96       	adiw	r28, 0x0d	; 13
    1e22:	ac ac       	ldd	r10, Y+60	; 0x3c
    1e24:	bd ac       	ldd	r11, Y+61	; 0x3d
    1e26:	ce ac       	ldd	r12, Y+62	; 0x3e
    1e28:	df ac       	ldd	r13, Y+63	; 0x3f
    1e2a:	2d 97       	sbiw	r28, 0x0d	; 13
    1e2c:	c6 01       	movw	r24, r12
    1e2e:	aa 27       	eor	r26, r26
    1e30:	bb 27       	eor	r27, r27
    1e32:	57 01       	movw	r10, r14
    1e34:	68 01       	movw	r12, r16
    1e36:	a8 2a       	or	r10, r24
    1e38:	b9 2a       	or	r11, r25
    1e3a:	ca 2a       	or	r12, r26
    1e3c:	db 2a       	or	r13, r27
    1e3e:	a2 16       	cp	r10, r18
    1e40:	b3 06       	cpc	r11, r19
    1e42:	c4 06       	cpc	r12, r20
    1e44:	d5 06       	cpc	r13, r21
    1e46:	90 f4       	brcc	.+36     	; 0x1e6c <__moddi3+0x844>
    1e48:	a2 0c       	add	r10, r2
    1e4a:	b3 1c       	adc	r11, r3
    1e4c:	c4 1c       	adc	r12, r4
    1e4e:	d5 1c       	adc	r13, r5
    1e50:	a2 14       	cp	r10, r2
    1e52:	b3 04       	cpc	r11, r3
    1e54:	c4 04       	cpc	r12, r4
    1e56:	d5 04       	cpc	r13, r5
    1e58:	48 f0       	brcs	.+18     	; 0x1e6c <__moddi3+0x844>
    1e5a:	a2 16       	cp	r10, r18
    1e5c:	b3 06       	cpc	r11, r19
    1e5e:	c4 06       	cpc	r12, r20
    1e60:	d5 06       	cpc	r13, r21
    1e62:	20 f4       	brcc	.+8      	; 0x1e6c <__moddi3+0x844>
    1e64:	a2 0c       	add	r10, r2
    1e66:	b3 1c       	adc	r11, r3
    1e68:	c4 1c       	adc	r12, r4
    1e6a:	d5 1c       	adc	r13, r5
    1e6c:	a2 1a       	sub	r10, r18
    1e6e:	b3 0a       	sbc	r11, r19
    1e70:	c4 0a       	sbc	r12, r20
    1e72:	d5 0a       	sbc	r13, r21
    1e74:	c6 01       	movw	r24, r12
    1e76:	b5 01       	movw	r22, r10
    1e78:	a4 01       	movw	r20, r8
    1e7a:	93 01       	movw	r18, r6
    1e7c:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1e80:	7b 01       	movw	r14, r22
    1e82:	8c 01       	movw	r16, r24
    1e84:	c6 01       	movw	r24, r12
    1e86:	b5 01       	movw	r22, r10
    1e88:	a4 01       	movw	r20, r8
    1e8a:	93 01       	movw	r18, r6
    1e8c:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    1e90:	ca 01       	movw	r24, r20
    1e92:	b9 01       	movw	r22, r18
    1e94:	a1 96       	adiw	r28, 0x21	; 33
    1e96:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e98:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e9a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e9c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e9e:	a1 97       	sbiw	r28, 0x21	; 33
    1ea0:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    1ea4:	9b 01       	movw	r18, r22
    1ea6:	ac 01       	movw	r20, r24
    1ea8:	87 01       	movw	r16, r14
    1eaa:	ff 24       	eor	r15, r15
    1eac:	ee 24       	eor	r14, r14
    1eae:	2d 96       	adiw	r28, 0x0d	; 13
    1eb0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1eb2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1eb4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1eb6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1eb8:	2d 97       	sbiw	r28, 0x0d	; 13
    1eba:	a0 70       	andi	r26, 0x00	; 0
    1ebc:	b0 70       	andi	r27, 0x00	; 0
    1ebe:	e8 2a       	or	r14, r24
    1ec0:	f9 2a       	or	r15, r25
    1ec2:	0a 2b       	or	r16, r26
    1ec4:	1b 2b       	or	r17, r27
    1ec6:	e2 16       	cp	r14, r18
    1ec8:	f3 06       	cpc	r15, r19
    1eca:	04 07       	cpc	r16, r20
    1ecc:	15 07       	cpc	r17, r21
    1ece:	90 f4       	brcc	.+36     	; 0x1ef4 <__moddi3+0x8cc>
    1ed0:	e2 0c       	add	r14, r2
    1ed2:	f3 1c       	adc	r15, r3
    1ed4:	04 1d       	adc	r16, r4
    1ed6:	15 1d       	adc	r17, r5
    1ed8:	e2 14       	cp	r14, r2
    1eda:	f3 04       	cpc	r15, r3
    1edc:	04 05       	cpc	r16, r4
    1ede:	15 05       	cpc	r17, r5
    1ee0:	48 f0       	brcs	.+18     	; 0x1ef4 <__moddi3+0x8cc>
    1ee2:	e2 16       	cp	r14, r18
    1ee4:	f3 06       	cpc	r15, r19
    1ee6:	04 07       	cpc	r16, r20
    1ee8:	15 07       	cpc	r17, r21
    1eea:	20 f4       	brcc	.+8      	; 0x1ef4 <__moddi3+0x8cc>
    1eec:	e2 0c       	add	r14, r2
    1eee:	f3 1c       	adc	r15, r3
    1ef0:	04 1d       	adc	r16, r4
    1ef2:	15 1d       	adc	r17, r5
    1ef4:	e2 1a       	sub	r14, r18
    1ef6:	f3 0a       	sbc	r15, r19
    1ef8:	04 0b       	sbc	r16, r20
    1efa:	15 0b       	sbc	r17, r21
    1efc:	d8 01       	movw	r26, r16
    1efe:	c7 01       	movw	r24, r14
    1f00:	62 96       	adiw	r28, 0x12	; 18
    1f02:	0f ac       	ldd	r0, Y+63	; 0x3f
    1f04:	62 97       	sbiw	r28, 0x12	; 18
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <__moddi3+0x8e8>
    1f08:	b6 95       	lsr	r27
    1f0a:	a7 95       	ror	r26
    1f0c:	97 95       	ror	r25
    1f0e:	87 95       	ror	r24
    1f10:	0a 94       	dec	r0
    1f12:	d2 f7       	brpl	.-12     	; 0x1f08 <__moddi3+0x8e0>
    1f14:	89 a7       	std	Y+41, r24	; 0x29
    1f16:	9a a7       	std	Y+42, r25	; 0x2a
    1f18:	ab a7       	std	Y+43, r26	; 0x2b
    1f1a:	bc a7       	std	Y+44, r27	; 0x2c
    1f1c:	1d a6       	std	Y+45, r1	; 0x2d
    1f1e:	1e a6       	std	Y+46, r1	; 0x2e
    1f20:	1f a6       	std	Y+47, r1	; 0x2f
    1f22:	18 aa       	std	Y+48, r1	; 0x30
    1f24:	89 8b       	std	Y+17, r24	; 0x11
    1f26:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f28:	8a 8b       	std	Y+18, r24	; 0x12
    1f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2c:	8b 8b       	std	Y+19, r24	; 0x13
    1f2e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f30:	8c 8b       	std	Y+20, r24	; 0x14
    1f32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f34:	8d 8b       	std	Y+21, r24	; 0x15
    1f36:	2f c3       	rjmp	.+1630   	; 0x2596 <__moddi3+0xf6e>
    1f38:	6a 14       	cp	r6, r10
    1f3a:	7b 04       	cpc	r7, r11
    1f3c:	8c 04       	cpc	r8, r12
    1f3e:	9d 04       	cpc	r9, r13
    1f40:	48 f4       	brcc	.+18     	; 0x1f54 <__moddi3+0x92c>
    1f42:	49 8b       	std	Y+17, r20	; 0x11
    1f44:	5a 8b       	std	Y+18, r21	; 0x12
    1f46:	6b 8b       	std	Y+19, r22	; 0x13
    1f48:	7c 8b       	std	Y+20, r23	; 0x14
    1f4a:	8d 8b       	std	Y+21, r24	; 0x15
    1f4c:	9e 8b       	std	Y+22, r25	; 0x16
    1f4e:	2f 8b       	std	Y+23, r18	; 0x17
    1f50:	38 8f       	std	Y+24, r19	; 0x18
    1f52:	27 c3       	rjmp	.+1614   	; 0x25a2 <__moddi3+0xf7a>
    1f54:	00 e0       	ldi	r16, 0x00	; 0
    1f56:	a0 16       	cp	r10, r16
    1f58:	00 e0       	ldi	r16, 0x00	; 0
    1f5a:	b0 06       	cpc	r11, r16
    1f5c:	01 e0       	ldi	r16, 0x01	; 1
    1f5e:	c0 06       	cpc	r12, r16
    1f60:	00 e0       	ldi	r16, 0x00	; 0
    1f62:	d0 06       	cpc	r13, r16
    1f64:	88 f4       	brcc	.+34     	; 0x1f88 <__moddi3+0x960>
    1f66:	1f ef       	ldi	r17, 0xFF	; 255
    1f68:	a1 16       	cp	r10, r17
    1f6a:	b1 04       	cpc	r11, r1
    1f6c:	c1 04       	cpc	r12, r1
    1f6e:	d1 04       	cpc	r13, r1
    1f70:	39 f0       	breq	.+14     	; 0x1f80 <__moddi3+0x958>
    1f72:	30 f0       	brcs	.+12     	; 0x1f80 <__moddi3+0x958>
    1f74:	28 e0       	ldi	r18, 0x08	; 8
    1f76:	e2 2e       	mov	r14, r18
    1f78:	f1 2c       	mov	r15, r1
    1f7a:	01 2d       	mov	r16, r1
    1f7c:	11 2d       	mov	r17, r1
    1f7e:	18 c0       	rjmp	.+48     	; 0x1fb0 <__moddi3+0x988>
    1f80:	ee 24       	eor	r14, r14
    1f82:	ff 24       	eor	r15, r15
    1f84:	87 01       	movw	r16, r14
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <__moddi3+0x988>
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	a2 16       	cp	r10, r18
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	b2 06       	cpc	r11, r18
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	c2 06       	cpc	r12, r18
    1f94:	21 e0       	ldi	r18, 0x01	; 1
    1f96:	d2 06       	cpc	r13, r18
    1f98:	30 f0       	brcs	.+12     	; 0x1fa6 <__moddi3+0x97e>
    1f9a:	98 e1       	ldi	r25, 0x18	; 24
    1f9c:	e9 2e       	mov	r14, r25
    1f9e:	f1 2c       	mov	r15, r1
    1fa0:	01 2d       	mov	r16, r1
    1fa2:	11 2d       	mov	r17, r1
    1fa4:	05 c0       	rjmp	.+10     	; 0x1fb0 <__moddi3+0x988>
    1fa6:	80 e1       	ldi	r24, 0x10	; 16
    1fa8:	e8 2e       	mov	r14, r24
    1faa:	f1 2c       	mov	r15, r1
    1fac:	01 2d       	mov	r16, r1
    1fae:	11 2d       	mov	r17, r1
    1fb0:	d6 01       	movw	r26, r12
    1fb2:	c5 01       	movw	r24, r10
    1fb4:	0e 2c       	mov	r0, r14
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <__moddi3+0x998>
    1fb8:	b6 95       	lsr	r27
    1fba:	a7 95       	ror	r26
    1fbc:	97 95       	ror	r25
    1fbe:	87 95       	ror	r24
    1fc0:	0a 94       	dec	r0
    1fc2:	d2 f7       	brpl	.-12     	; 0x1fb8 <__moddi3+0x990>
    1fc4:	88 59       	subi	r24, 0x98	; 152
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	dc 01       	movw	r26, r24
    1fca:	2c 91       	ld	r18, X
    1fcc:	80 e2       	ldi	r24, 0x20	; 32
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	8e 19       	sub	r24, r14
    1fd6:	9f 09       	sbc	r25, r15
    1fd8:	a0 0b       	sbc	r26, r16
    1fda:	b1 0b       	sbc	r27, r17
    1fdc:	82 1b       	sub	r24, r18
    1fde:	91 09       	sbc	r25, r1
    1fe0:	a1 09       	sbc	r26, r1
    1fe2:	b1 09       	sbc	r27, r1
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	a1 05       	cpc	r26, r1
    1fe8:	b1 05       	cpc	r27, r1
    1fea:	09 f0       	breq	.+2      	; 0x1fee <__moddi3+0x9c6>
    1fec:	59 c0       	rjmp	.+178    	; 0x20a0 <__moddi3+0xa78>
    1fee:	a6 14       	cp	r10, r6
    1ff0:	b7 04       	cpc	r11, r7
    1ff2:	c8 04       	cpc	r12, r8
    1ff4:	d9 04       	cpc	r13, r9
    1ff6:	70 f0       	brcs	.+28     	; 0x2014 <__moddi3+0x9ec>
    1ff8:	e8 96       	adiw	r28, 0x38	; 56
    1ffa:	ec ac       	ldd	r14, Y+60	; 0x3c
    1ffc:	fd ac       	ldd	r15, Y+61	; 0x3d
    1ffe:	0e ad       	ldd	r16, Y+62	; 0x3e
    2000:	1f ad       	ldd	r17, Y+63	; 0x3f
    2002:	e8 97       	sbiw	r28, 0x38	; 56
    2004:	e2 14       	cp	r14, r2
    2006:	f3 04       	cpc	r15, r3
    2008:	04 05       	cpc	r16, r4
    200a:	15 05       	cpc	r17, r5
    200c:	18 f4       	brcc	.+6      	; 0x2014 <__moddi3+0x9ec>
    200e:	d8 01       	movw	r26, r16
    2010:	c7 01       	movw	r24, r14
    2012:	2f c0       	rjmp	.+94     	; 0x2072 <__moddi3+0xa4a>
    2014:	e8 96       	adiw	r28, 0x38	; 56
    2016:	8c ad       	ldd	r24, Y+60	; 0x3c
    2018:	9d ad       	ldd	r25, Y+61	; 0x3d
    201a:	ae ad       	ldd	r26, Y+62	; 0x3e
    201c:	bf ad       	ldd	r27, Y+63	; 0x3f
    201e:	e8 97       	sbiw	r28, 0x38	; 56
    2020:	82 19       	sub	r24, r2
    2022:	93 09       	sbc	r25, r3
    2024:	a4 09       	sbc	r26, r4
    2026:	b5 09       	sbc	r27, r5
    2028:	a4 01       	movw	r20, r8
    202a:	93 01       	movw	r18, r6
    202c:	2a 19       	sub	r18, r10
    202e:	3b 09       	sbc	r19, r11
    2030:	4c 09       	sbc	r20, r12
    2032:	5d 09       	sbc	r21, r13
    2034:	aa 24       	eor	r10, r10
    2036:	bb 24       	eor	r11, r11
    2038:	65 01       	movw	r12, r10
    203a:	e8 96       	adiw	r28, 0x38	; 56
    203c:	6c ac       	ldd	r6, Y+60	; 0x3c
    203e:	7d ac       	ldd	r7, Y+61	; 0x3d
    2040:	8e ac       	ldd	r8, Y+62	; 0x3e
    2042:	9f ac       	ldd	r9, Y+63	; 0x3f
    2044:	e8 97       	sbiw	r28, 0x38	; 56
    2046:	68 16       	cp	r6, r24
    2048:	79 06       	cpc	r7, r25
    204a:	8a 06       	cpc	r8, r26
    204c:	9b 06       	cpc	r9, r27
    204e:	28 f4       	brcc	.+10     	; 0x205a <__moddi3+0xa32>
    2050:	11 e0       	ldi	r17, 0x01	; 1
    2052:	a1 2e       	mov	r10, r17
    2054:	b1 2c       	mov	r11, r1
    2056:	c1 2c       	mov	r12, r1
    2058:	d1 2c       	mov	r13, r1
    205a:	79 01       	movw	r14, r18
    205c:	8a 01       	movw	r16, r20
    205e:	ea 18       	sub	r14, r10
    2060:	fb 08       	sbc	r15, r11
    2062:	0c 09       	sbc	r16, r12
    2064:	1d 09       	sbc	r17, r13
    2066:	61 96       	adiw	r28, 0x11	; 17
    2068:	ec ae       	std	Y+60, r14	; 0x3c
    206a:	fd ae       	std	Y+61, r15	; 0x3d
    206c:	0e af       	std	Y+62, r16	; 0x3e
    206e:	1f af       	std	Y+63, r17	; 0x3f
    2070:	61 97       	sbiw	r28, 0x11	; 17
    2072:	89 a7       	std	Y+41, r24	; 0x29
    2074:	9a a7       	std	Y+42, r25	; 0x2a
    2076:	ab a7       	std	Y+43, r26	; 0x2b
    2078:	bc a7       	std	Y+44, r27	; 0x2c
    207a:	61 96       	adiw	r28, 0x11	; 17
    207c:	0c ad       	ldd	r16, Y+60	; 0x3c
    207e:	1d ad       	ldd	r17, Y+61	; 0x3d
    2080:	2e ad       	ldd	r18, Y+62	; 0x3e
    2082:	3f ad       	ldd	r19, Y+63	; 0x3f
    2084:	61 97       	sbiw	r28, 0x11	; 17
    2086:	0d a7       	std	Y+45, r16	; 0x2d
    2088:	1e a7       	std	Y+46, r17	; 0x2e
    208a:	2f a7       	std	Y+47, r18	; 0x2f
    208c:	38 ab       	std	Y+48, r19	; 0x30
    208e:	89 8b       	std	Y+17, r24	; 0x11
    2090:	8a a5       	ldd	r24, Y+42	; 0x2a
    2092:	8a 8b       	std	Y+18, r24	; 0x12
    2094:	8b a5       	ldd	r24, Y+43	; 0x2b
    2096:	8b 8b       	std	Y+19, r24	; 0x13
    2098:	8c a5       	ldd	r24, Y+44	; 0x2c
    209a:	8c 8b       	std	Y+20, r24	; 0x14
    209c:	0d 8b       	std	Y+21, r16	; 0x15
    209e:	7b c2       	rjmp	.+1270   	; 0x2596 <__moddi3+0xf6e>
    20a0:	e3 96       	adiw	r28, 0x33	; 51
    20a2:	8f af       	std	Y+63, r24	; 0x3f
    20a4:	e3 97       	sbiw	r28, 0x33	; 51
    20a6:	a6 01       	movw	r20, r12
    20a8:	95 01       	movw	r18, r10
    20aa:	08 2e       	mov	r0, r24
    20ac:	04 c0       	rjmp	.+8      	; 0x20b6 <__moddi3+0xa8e>
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	44 1f       	adc	r20, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	0a 94       	dec	r0
    20b8:	d2 f7       	brpl	.-12     	; 0x20ae <__moddi3+0xa86>
    20ba:	10 e2       	ldi	r17, 0x20	; 32
    20bc:	18 1b       	sub	r17, r24
    20be:	e2 96       	adiw	r28, 0x32	; 50
    20c0:	1f af       	std	Y+63, r17	; 0x3f
    20c2:	e2 97       	sbiw	r28, 0x32	; 50
    20c4:	d2 01       	movw	r26, r4
    20c6:	c1 01       	movw	r24, r2
    20c8:	01 2e       	mov	r0, r17
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <__moddi3+0xaac>
    20cc:	b6 95       	lsr	r27
    20ce:	a7 95       	ror	r26
    20d0:	97 95       	ror	r25
    20d2:	87 95       	ror	r24
    20d4:	0a 94       	dec	r0
    20d6:	d2 f7       	brpl	.-12     	; 0x20cc <__moddi3+0xaa4>
    20d8:	5c 01       	movw	r10, r24
    20da:	6d 01       	movw	r12, r26
    20dc:	a2 2a       	or	r10, r18
    20de:	b3 2a       	or	r11, r19
    20e0:	c4 2a       	or	r12, r20
    20e2:	d5 2a       	or	r13, r21
    20e4:	25 96       	adiw	r28, 0x05	; 5
    20e6:	ac ae       	std	Y+60, r10	; 0x3c
    20e8:	bd ae       	std	Y+61, r11	; 0x3d
    20ea:	ce ae       	std	Y+62, r12	; 0x3e
    20ec:	df ae       	std	Y+63, r13	; 0x3f
    20ee:	25 97       	sbiw	r28, 0x05	; 5
    20f0:	72 01       	movw	r14, r4
    20f2:	61 01       	movw	r12, r2
    20f4:	e3 96       	adiw	r28, 0x33	; 51
    20f6:	0f ac       	ldd	r0, Y+63	; 0x3f
    20f8:	e3 97       	sbiw	r28, 0x33	; 51
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <__moddi3+0xadc>
    20fc:	cc 0c       	add	r12, r12
    20fe:	dd 1c       	adc	r13, r13
    2100:	ee 1c       	adc	r14, r14
    2102:	ff 1c       	adc	r15, r15
    2104:	0a 94       	dec	r0
    2106:	d2 f7       	brpl	.-12     	; 0x20fc <__moddi3+0xad4>
    2108:	21 96       	adiw	r28, 0x01	; 1
    210a:	cc ae       	std	Y+60, r12	; 0x3c
    210c:	dd ae       	std	Y+61, r13	; 0x3d
    210e:	ee ae       	std	Y+62, r14	; 0x3e
    2110:	ff ae       	std	Y+63, r15	; 0x3f
    2112:	21 97       	sbiw	r28, 0x01	; 1
    2114:	64 01       	movw	r12, r8
    2116:	53 01       	movw	r10, r6
    2118:	01 2e       	mov	r0, r17
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <__moddi3+0xafc>
    211c:	d6 94       	lsr	r13
    211e:	c7 94       	ror	r12
    2120:	b7 94       	ror	r11
    2122:	a7 94       	ror	r10
    2124:	0a 94       	dec	r0
    2126:	d2 f7       	brpl	.-12     	; 0x211c <__moddi3+0xaf4>
    2128:	a4 01       	movw	r20, r8
    212a:	93 01       	movw	r18, r6
    212c:	e3 96       	adiw	r28, 0x33	; 51
    212e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2130:	e3 97       	sbiw	r28, 0x33	; 51
    2132:	04 c0       	rjmp	.+8      	; 0x213c <__moddi3+0xb14>
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	44 1f       	adc	r20, r20
    213a:	55 1f       	adc	r21, r21
    213c:	0a 94       	dec	r0
    213e:	d2 f7       	brpl	.-12     	; 0x2134 <__moddi3+0xb0c>
    2140:	e8 96       	adiw	r28, 0x38	; 56
    2142:	8c ad       	ldd	r24, Y+60	; 0x3c
    2144:	9d ad       	ldd	r25, Y+61	; 0x3d
    2146:	ae ad       	ldd	r26, Y+62	; 0x3e
    2148:	bf ad       	ldd	r27, Y+63	; 0x3f
    214a:	e8 97       	sbiw	r28, 0x38	; 56
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <__moddi3+0xb2e>
    214e:	b6 95       	lsr	r27
    2150:	a7 95       	ror	r26
    2152:	97 95       	ror	r25
    2154:	87 95       	ror	r24
    2156:	1a 95       	dec	r17
    2158:	d2 f7       	brpl	.-12     	; 0x214e <__moddi3+0xb26>
    215a:	7c 01       	movw	r14, r24
    215c:	8d 01       	movw	r16, r26
    215e:	e2 2a       	or	r14, r18
    2160:	f3 2a       	or	r15, r19
    2162:	04 2b       	or	r16, r20
    2164:	15 2b       	or	r17, r21
    2166:	e9 ae       	std	Y+57, r14	; 0x39
    2168:	fa ae       	std	Y+58, r15	; 0x3a
    216a:	0b af       	std	Y+59, r16	; 0x3b
    216c:	1c af       	std	Y+60, r17	; 0x3c
    216e:	e8 96       	adiw	r28, 0x38	; 56
    2170:	0c ad       	ldd	r16, Y+60	; 0x3c
    2172:	1d ad       	ldd	r17, Y+61	; 0x3d
    2174:	2e ad       	ldd	r18, Y+62	; 0x3e
    2176:	3f ad       	ldd	r19, Y+63	; 0x3f
    2178:	e8 97       	sbiw	r28, 0x38	; 56
    217a:	e3 96       	adiw	r28, 0x33	; 51
    217c:	0f ac       	ldd	r0, Y+63	; 0x3f
    217e:	e3 97       	sbiw	r28, 0x33	; 51
    2180:	04 c0       	rjmp	.+8      	; 0x218a <__moddi3+0xb62>
    2182:	00 0f       	add	r16, r16
    2184:	11 1f       	adc	r17, r17
    2186:	22 1f       	adc	r18, r18
    2188:	33 1f       	adc	r19, r19
    218a:	0a 94       	dec	r0
    218c:	d2 f7       	brpl	.-12     	; 0x2182 <__moddi3+0xb5a>
    218e:	0d ab       	std	Y+53, r16	; 0x35
    2190:	1e ab       	std	Y+54, r17	; 0x36
    2192:	2f ab       	std	Y+55, r18	; 0x37
    2194:	38 af       	std	Y+56, r19	; 0x38
    2196:	25 96       	adiw	r28, 0x05	; 5
    2198:	2c ad       	ldd	r18, Y+60	; 0x3c
    219a:	3d ad       	ldd	r19, Y+61	; 0x3d
    219c:	4e ad       	ldd	r20, Y+62	; 0x3e
    219e:	5f ad       	ldd	r21, Y+63	; 0x3f
    21a0:	25 97       	sbiw	r28, 0x05	; 5
    21a2:	3a 01       	movw	r6, r20
    21a4:	88 24       	eor	r8, r8
    21a6:	99 24       	eor	r9, r9
    21a8:	40 70       	andi	r20, 0x00	; 0
    21aa:	50 70       	andi	r21, 0x00	; 0
    21ac:	a5 96       	adiw	r28, 0x25	; 37
    21ae:	2c af       	std	Y+60, r18	; 0x3c
    21b0:	3d af       	std	Y+61, r19	; 0x3d
    21b2:	4e af       	std	Y+62, r20	; 0x3e
    21b4:	5f af       	std	Y+63, r21	; 0x3f
    21b6:	a5 97       	sbiw	r28, 0x25	; 37
    21b8:	c6 01       	movw	r24, r12
    21ba:	b5 01       	movw	r22, r10
    21bc:	a4 01       	movw	r20, r8
    21be:	93 01       	movw	r18, r6
    21c0:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    21c4:	7b 01       	movw	r14, r22
    21c6:	8c 01       	movw	r16, r24
    21c8:	c6 01       	movw	r24, r12
    21ca:	b5 01       	movw	r22, r10
    21cc:	a4 01       	movw	r20, r8
    21ce:	93 01       	movw	r18, r6
    21d0:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    21d4:	c9 01       	movw	r24, r18
    21d6:	da 01       	movw	r26, r20
    21d8:	1c 01       	movw	r2, r24
    21da:	2d 01       	movw	r4, r26
    21dc:	c2 01       	movw	r24, r4
    21de:	b1 01       	movw	r22, r2
    21e0:	a5 96       	adiw	r28, 0x25	; 37
    21e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    21e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    21e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    21e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    21ea:	a5 97       	sbiw	r28, 0x25	; 37
    21ec:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    21f0:	9b 01       	movw	r18, r22
    21f2:	ac 01       	movw	r20, r24
    21f4:	87 01       	movw	r16, r14
    21f6:	ff 24       	eor	r15, r15
    21f8:	ee 24       	eor	r14, r14
    21fa:	a9 ac       	ldd	r10, Y+57	; 0x39
    21fc:	ba ac       	ldd	r11, Y+58	; 0x3a
    21fe:	cb ac       	ldd	r12, Y+59	; 0x3b
    2200:	dc ac       	ldd	r13, Y+60	; 0x3c
    2202:	c6 01       	movw	r24, r12
    2204:	aa 27       	eor	r26, r26
    2206:	bb 27       	eor	r27, r27
    2208:	57 01       	movw	r10, r14
    220a:	68 01       	movw	r12, r16
    220c:	a8 2a       	or	r10, r24
    220e:	b9 2a       	or	r11, r25
    2210:	ca 2a       	or	r12, r26
    2212:	db 2a       	or	r13, r27
    2214:	a2 16       	cp	r10, r18
    2216:	b3 06       	cpc	r11, r19
    2218:	c4 06       	cpc	r12, r20
    221a:	d5 06       	cpc	r13, r21
    221c:	10 f5       	brcc	.+68     	; 0x2262 <__moddi3+0xc3a>
    221e:	08 94       	sec
    2220:	21 08       	sbc	r2, r1
    2222:	31 08       	sbc	r3, r1
    2224:	41 08       	sbc	r4, r1
    2226:	51 08       	sbc	r5, r1
    2228:	25 96       	adiw	r28, 0x05	; 5
    222a:	ec ac       	ldd	r14, Y+60	; 0x3c
    222c:	fd ac       	ldd	r15, Y+61	; 0x3d
    222e:	0e ad       	ldd	r16, Y+62	; 0x3e
    2230:	1f ad       	ldd	r17, Y+63	; 0x3f
    2232:	25 97       	sbiw	r28, 0x05	; 5
    2234:	ae 0c       	add	r10, r14
    2236:	bf 1c       	adc	r11, r15
    2238:	c0 1e       	adc	r12, r16
    223a:	d1 1e       	adc	r13, r17
    223c:	ae 14       	cp	r10, r14
    223e:	bf 04       	cpc	r11, r15
    2240:	c0 06       	cpc	r12, r16
    2242:	d1 06       	cpc	r13, r17
    2244:	70 f0       	brcs	.+28     	; 0x2262 <__moddi3+0xc3a>
    2246:	a2 16       	cp	r10, r18
    2248:	b3 06       	cpc	r11, r19
    224a:	c4 06       	cpc	r12, r20
    224c:	d5 06       	cpc	r13, r21
    224e:	48 f4       	brcc	.+18     	; 0x2262 <__moddi3+0xc3a>
    2250:	08 94       	sec
    2252:	21 08       	sbc	r2, r1
    2254:	31 08       	sbc	r3, r1
    2256:	41 08       	sbc	r4, r1
    2258:	51 08       	sbc	r5, r1
    225a:	ae 0c       	add	r10, r14
    225c:	bf 1c       	adc	r11, r15
    225e:	c0 1e       	adc	r12, r16
    2260:	d1 1e       	adc	r13, r17
    2262:	a2 1a       	sub	r10, r18
    2264:	b3 0a       	sbc	r11, r19
    2266:	c4 0a       	sbc	r12, r20
    2268:	d5 0a       	sbc	r13, r21
    226a:	c6 01       	movw	r24, r12
    226c:	b5 01       	movw	r22, r10
    226e:	a4 01       	movw	r20, r8
    2270:	93 01       	movw	r18, r6
    2272:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    2276:	7b 01       	movw	r14, r22
    2278:	8c 01       	movw	r16, r24
    227a:	c6 01       	movw	r24, r12
    227c:	b5 01       	movw	r22, r10
    227e:	a4 01       	movw	r20, r8
    2280:	93 01       	movw	r18, r6
    2282:	0e 94 cd 33 	call	0x679a	; 0x679a <__udivmodsi4>
    2286:	c9 01       	movw	r24, r18
    2288:	da 01       	movw	r26, r20
    228a:	3c 01       	movw	r6, r24
    228c:	4d 01       	movw	r8, r26
    228e:	c4 01       	movw	r24, r8
    2290:	b3 01       	movw	r22, r6
    2292:	a5 96       	adiw	r28, 0x25	; 37
    2294:	2c ad       	ldd	r18, Y+60	; 0x3c
    2296:	3d ad       	ldd	r19, Y+61	; 0x3d
    2298:	4e ad       	ldd	r20, Y+62	; 0x3e
    229a:	5f ad       	ldd	r21, Y+63	; 0x3f
    229c:	a5 97       	sbiw	r28, 0x25	; 37
    229e:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    22a2:	9b 01       	movw	r18, r22
    22a4:	ac 01       	movw	r20, r24
    22a6:	87 01       	movw	r16, r14
    22a8:	ff 24       	eor	r15, r15
    22aa:	ee 24       	eor	r14, r14
    22ac:	89 ad       	ldd	r24, Y+57	; 0x39
    22ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    22b0:	ab ad       	ldd	r26, Y+59	; 0x3b
    22b2:	bc ad       	ldd	r27, Y+60	; 0x3c
    22b4:	a0 70       	andi	r26, 0x00	; 0
    22b6:	b0 70       	andi	r27, 0x00	; 0
    22b8:	57 01       	movw	r10, r14
    22ba:	68 01       	movw	r12, r16
    22bc:	a8 2a       	or	r10, r24
    22be:	b9 2a       	or	r11, r25
    22c0:	ca 2a       	or	r12, r26
    22c2:	db 2a       	or	r13, r27
    22c4:	a2 16       	cp	r10, r18
    22c6:	b3 06       	cpc	r11, r19
    22c8:	c4 06       	cpc	r12, r20
    22ca:	d5 06       	cpc	r13, r21
    22cc:	10 f5       	brcc	.+68     	; 0x2312 <__moddi3+0xcea>
    22ce:	08 94       	sec
    22d0:	61 08       	sbc	r6, r1
    22d2:	71 08       	sbc	r7, r1
    22d4:	81 08       	sbc	r8, r1
    22d6:	91 08       	sbc	r9, r1
    22d8:	25 96       	adiw	r28, 0x05	; 5
    22da:	6c ad       	ldd	r22, Y+60	; 0x3c
    22dc:	7d ad       	ldd	r23, Y+61	; 0x3d
    22de:	8e ad       	ldd	r24, Y+62	; 0x3e
    22e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    22e2:	25 97       	sbiw	r28, 0x05	; 5
    22e4:	a6 0e       	add	r10, r22
    22e6:	b7 1e       	adc	r11, r23
    22e8:	c8 1e       	adc	r12, r24
    22ea:	d9 1e       	adc	r13, r25
    22ec:	a6 16       	cp	r10, r22
    22ee:	b7 06       	cpc	r11, r23
    22f0:	c8 06       	cpc	r12, r24
    22f2:	d9 06       	cpc	r13, r25
    22f4:	70 f0       	brcs	.+28     	; 0x2312 <__moddi3+0xcea>
    22f6:	a2 16       	cp	r10, r18
    22f8:	b3 06       	cpc	r11, r19
    22fa:	c4 06       	cpc	r12, r20
    22fc:	d5 06       	cpc	r13, r21
    22fe:	48 f4       	brcc	.+18     	; 0x2312 <__moddi3+0xcea>
    2300:	08 94       	sec
    2302:	61 08       	sbc	r6, r1
    2304:	71 08       	sbc	r7, r1
    2306:	81 08       	sbc	r8, r1
    2308:	91 08       	sbc	r9, r1
    230a:	a6 0e       	add	r10, r22
    230c:	b7 1e       	adc	r11, r23
    230e:	c8 1e       	adc	r12, r24
    2310:	d9 1e       	adc	r13, r25
    2312:	d6 01       	movw	r26, r12
    2314:	c5 01       	movw	r24, r10
    2316:	82 1b       	sub	r24, r18
    2318:	93 0b       	sbc	r25, r19
    231a:	a4 0b       	sbc	r26, r20
    231c:	b5 0b       	sbc	r27, r21
    231e:	89 ab       	std	Y+49, r24	; 0x31
    2320:	9a ab       	std	Y+50, r25	; 0x32
    2322:	ab ab       	std	Y+51, r26	; 0x33
    2324:	bc ab       	std	Y+52, r27	; 0x34
    2326:	d1 01       	movw	r26, r2
    2328:	99 27       	eor	r25, r25
    232a:	88 27       	eor	r24, r24
    232c:	84 01       	movw	r16, r8
    232e:	73 01       	movw	r14, r6
    2330:	e8 2a       	or	r14, r24
    2332:	f9 2a       	or	r15, r25
    2334:	0a 2b       	or	r16, r26
    2336:	1b 2b       	or	r17, r27
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	a8 2e       	mov	r10, r24
    233c:	8f ef       	ldi	r24, 0xFF	; 255
    233e:	b8 2e       	mov	r11, r24
    2340:	c1 2c       	mov	r12, r1
    2342:	d1 2c       	mov	r13, r1
    2344:	ae 20       	and	r10, r14
    2346:	bf 20       	and	r11, r15
    2348:	c0 22       	and	r12, r16
    234a:	d1 22       	and	r13, r17
    234c:	78 01       	movw	r14, r16
    234e:	00 27       	eor	r16, r16
    2350:	11 27       	eor	r17, r17
    2352:	21 96       	adiw	r28, 0x01	; 1
    2354:	6c ac       	ldd	r6, Y+60	; 0x3c
    2356:	7d ac       	ldd	r7, Y+61	; 0x3d
    2358:	8e ac       	ldd	r8, Y+62	; 0x3e
    235a:	9f ac       	ldd	r9, Y+63	; 0x3f
    235c:	21 97       	sbiw	r28, 0x01	; 1
    235e:	2f ef       	ldi	r18, 0xFF	; 255
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	62 22       	and	r6, r18
    2368:	73 22       	and	r7, r19
    236a:	84 22       	and	r8, r20
    236c:	95 22       	and	r9, r21
    236e:	21 96       	adiw	r28, 0x01	; 1
    2370:	6c ad       	ldd	r22, Y+60	; 0x3c
    2372:	7d ad       	ldd	r23, Y+61	; 0x3d
    2374:	8e ad       	ldd	r24, Y+62	; 0x3e
    2376:	9f ad       	ldd	r25, Y+63	; 0x3f
    2378:	21 97       	sbiw	r28, 0x01	; 1
    237a:	ac 01       	movw	r20, r24
    237c:	66 27       	eor	r22, r22
    237e:	77 27       	eor	r23, r23
    2380:	ad 96       	adiw	r28, 0x2d	; 45
    2382:	4c af       	std	Y+60, r20	; 0x3c
    2384:	5d af       	std	Y+61, r21	; 0x3d
    2386:	6e af       	std	Y+62, r22	; 0x3e
    2388:	7f af       	std	Y+63, r23	; 0x3f
    238a:	ad 97       	sbiw	r28, 0x2d	; 45
    238c:	c6 01       	movw	r24, r12
    238e:	b5 01       	movw	r22, r10
    2390:	a4 01       	movw	r20, r8
    2392:	93 01       	movw	r18, r6
    2394:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    2398:	a9 96       	adiw	r28, 0x29	; 41
    239a:	6c af       	std	Y+60, r22	; 0x3c
    239c:	7d af       	std	Y+61, r23	; 0x3d
    239e:	8e af       	std	Y+62, r24	; 0x3e
    23a0:	9f af       	std	Y+63, r25	; 0x3f
    23a2:	a9 97       	sbiw	r28, 0x29	; 41
    23a4:	c6 01       	movw	r24, r12
    23a6:	b5 01       	movw	r22, r10
    23a8:	ad 96       	adiw	r28, 0x2d	; 45
    23aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    23ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    23ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    23b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    23b2:	ad 97       	sbiw	r28, 0x2d	; 45
    23b4:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    23b8:	1b 01       	movw	r2, r22
    23ba:	2c 01       	movw	r4, r24
    23bc:	c8 01       	movw	r24, r16
    23be:	b7 01       	movw	r22, r14
    23c0:	a4 01       	movw	r20, r8
    23c2:	93 01       	movw	r18, r6
    23c4:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    23c8:	5b 01       	movw	r10, r22
    23ca:	6c 01       	movw	r12, r24
    23cc:	c8 01       	movw	r24, r16
    23ce:	b7 01       	movw	r22, r14
    23d0:	ad 96       	adiw	r28, 0x2d	; 45
    23d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    23d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    23d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    23d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    23da:	ad 97       	sbiw	r28, 0x2d	; 45
    23dc:	0e 94 ae 33 	call	0x675c	; 0x675c <__mulsi3>
    23e0:	7b 01       	movw	r14, r22
    23e2:	8c 01       	movw	r16, r24
    23e4:	a6 01       	movw	r20, r12
    23e6:	95 01       	movw	r18, r10
    23e8:	22 0d       	add	r18, r2
    23ea:	33 1d       	adc	r19, r3
    23ec:	44 1d       	adc	r20, r4
    23ee:	55 1d       	adc	r21, r5
    23f0:	a9 96       	adiw	r28, 0x29	; 41
    23f2:	6c ac       	ldd	r6, Y+60	; 0x3c
    23f4:	7d ac       	ldd	r7, Y+61	; 0x3d
    23f6:	8e ac       	ldd	r8, Y+62	; 0x3e
    23f8:	9f ac       	ldd	r9, Y+63	; 0x3f
    23fa:	a9 97       	sbiw	r28, 0x29	; 41
    23fc:	c4 01       	movw	r24, r8
    23fe:	aa 27       	eor	r26, r26
    2400:	bb 27       	eor	r27, r27
    2402:	28 0f       	add	r18, r24
    2404:	39 1f       	adc	r19, r25
    2406:	4a 1f       	adc	r20, r26
    2408:	5b 1f       	adc	r21, r27
    240a:	2a 15       	cp	r18, r10
    240c:	3b 05       	cpc	r19, r11
    240e:	4c 05       	cpc	r20, r12
    2410:	5d 05       	cpc	r21, r13
    2412:	48 f4       	brcc	.+18     	; 0x2426 <__moddi3+0xdfe>
    2414:	81 2c       	mov	r8, r1
    2416:	91 2c       	mov	r9, r1
    2418:	e1 e0       	ldi	r30, 0x01	; 1
    241a:	ae 2e       	mov	r10, r30
    241c:	b1 2c       	mov	r11, r1
    241e:	e8 0c       	add	r14, r8
    2420:	f9 1c       	adc	r15, r9
    2422:	0a 1d       	adc	r16, r10
    2424:	1b 1d       	adc	r17, r11
    2426:	ca 01       	movw	r24, r20
    2428:	aa 27       	eor	r26, r26
    242a:	bb 27       	eor	r27, r27
    242c:	57 01       	movw	r10, r14
    242e:	68 01       	movw	r12, r16
    2430:	a8 0e       	add	r10, r24
    2432:	b9 1e       	adc	r11, r25
    2434:	ca 1e       	adc	r12, r26
    2436:	db 1e       	adc	r13, r27
    2438:	a9 01       	movw	r20, r18
    243a:	33 27       	eor	r19, r19
    243c:	22 27       	eor	r18, r18
    243e:	a9 96       	adiw	r28, 0x29	; 41
    2440:	8c ad       	ldd	r24, Y+60	; 0x3c
    2442:	9d ad       	ldd	r25, Y+61	; 0x3d
    2444:	ae ad       	ldd	r26, Y+62	; 0x3e
    2446:	bf ad       	ldd	r27, Y+63	; 0x3f
    2448:	a9 97       	sbiw	r28, 0x29	; 41
    244a:	a0 70       	andi	r26, 0x00	; 0
    244c:	b0 70       	andi	r27, 0x00	; 0
    244e:	28 0f       	add	r18, r24
    2450:	39 1f       	adc	r19, r25
    2452:	4a 1f       	adc	r20, r26
    2454:	5b 1f       	adc	r21, r27
    2456:	e9 a8       	ldd	r14, Y+49	; 0x31
    2458:	fa a8       	ldd	r15, Y+50	; 0x32
    245a:	0b a9       	ldd	r16, Y+51	; 0x33
    245c:	1c a9       	ldd	r17, Y+52	; 0x34
    245e:	ea 14       	cp	r14, r10
    2460:	fb 04       	cpc	r15, r11
    2462:	0c 05       	cpc	r16, r12
    2464:	1d 05       	cpc	r17, r13
    2466:	70 f0       	brcs	.+28     	; 0x2484 <__moddi3+0xe5c>
    2468:	ae 14       	cp	r10, r14
    246a:	bf 04       	cpc	r11, r15
    246c:	c0 06       	cpc	r12, r16
    246e:	d1 06       	cpc	r13, r17
    2470:	89 f5       	brne	.+98     	; 0x24d4 <__moddi3+0xeac>
    2472:	6d a9       	ldd	r22, Y+53	; 0x35
    2474:	7e a9       	ldd	r23, Y+54	; 0x36
    2476:	8f a9       	ldd	r24, Y+55	; 0x37
    2478:	98 ad       	ldd	r25, Y+56	; 0x38
    247a:	62 17       	cp	r22, r18
    247c:	73 07       	cpc	r23, r19
    247e:	84 07       	cpc	r24, r20
    2480:	95 07       	cpc	r25, r21
    2482:	40 f5       	brcc	.+80     	; 0x24d4 <__moddi3+0xeac>
    2484:	da 01       	movw	r26, r20
    2486:	c9 01       	movw	r24, r18
    2488:	21 96       	adiw	r28, 0x01	; 1
    248a:	6c ac       	ldd	r6, Y+60	; 0x3c
    248c:	7d ac       	ldd	r7, Y+61	; 0x3d
    248e:	8e ac       	ldd	r8, Y+62	; 0x3e
    2490:	9f ac       	ldd	r9, Y+63	; 0x3f
    2492:	21 97       	sbiw	r28, 0x01	; 1
    2494:	86 19       	sub	r24, r6
    2496:	97 09       	sbc	r25, r7
    2498:	a8 09       	sbc	r26, r8
    249a:	b9 09       	sbc	r27, r9
    249c:	25 96       	adiw	r28, 0x05	; 5
    249e:	ec ac       	ldd	r14, Y+60	; 0x3c
    24a0:	fd ac       	ldd	r15, Y+61	; 0x3d
    24a2:	0e ad       	ldd	r16, Y+62	; 0x3e
    24a4:	1f ad       	ldd	r17, Y+63	; 0x3f
    24a6:	25 97       	sbiw	r28, 0x05	; 5
    24a8:	ae 18       	sub	r10, r14
    24aa:	bf 08       	sbc	r11, r15
    24ac:	c0 0a       	sbc	r12, r16
    24ae:	d1 0a       	sbc	r13, r17
    24b0:	ee 24       	eor	r14, r14
    24b2:	ff 24       	eor	r15, r15
    24b4:	87 01       	movw	r16, r14
    24b6:	28 17       	cp	r18, r24
    24b8:	39 07       	cpc	r19, r25
    24ba:	4a 07       	cpc	r20, r26
    24bc:	5b 07       	cpc	r21, r27
    24be:	28 f4       	brcc	.+10     	; 0x24ca <__moddi3+0xea2>
    24c0:	21 e0       	ldi	r18, 0x01	; 1
    24c2:	e2 2e       	mov	r14, r18
    24c4:	f1 2c       	mov	r15, r1
    24c6:	01 2d       	mov	r16, r1
    24c8:	11 2d       	mov	r17, r1
    24ca:	ae 18       	sub	r10, r14
    24cc:	bf 08       	sbc	r11, r15
    24ce:	c0 0a       	sbc	r12, r16
    24d0:	d1 0a       	sbc	r13, r17
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <__moddi3+0xeb0>
    24d4:	da 01       	movw	r26, r20
    24d6:	c9 01       	movw	r24, r18
    24d8:	6d a8       	ldd	r6, Y+53	; 0x35
    24da:	7e a8       	ldd	r7, Y+54	; 0x36
    24dc:	8f a8       	ldd	r8, Y+55	; 0x37
    24de:	98 ac       	ldd	r9, Y+56	; 0x38
    24e0:	68 1a       	sub	r6, r24
    24e2:	79 0a       	sbc	r7, r25
    24e4:	8a 0a       	sbc	r8, r26
    24e6:	9b 0a       	sbc	r9, r27
    24e8:	09 a9       	ldd	r16, Y+49	; 0x31
    24ea:	1a a9       	ldd	r17, Y+50	; 0x32
    24ec:	2b a9       	ldd	r18, Y+51	; 0x33
    24ee:	3c a9       	ldd	r19, Y+52	; 0x34
    24f0:	0a 19       	sub	r16, r10
    24f2:	1b 09       	sbc	r17, r11
    24f4:	2c 09       	sbc	r18, r12
    24f6:	3d 09       	sbc	r19, r13
    24f8:	58 01       	movw	r10, r16
    24fa:	69 01       	movw	r12, r18
    24fc:	22 24       	eor	r2, r2
    24fe:	33 24       	eor	r3, r3
    2500:	21 01       	movw	r4, r2
    2502:	2d a9       	ldd	r18, Y+53	; 0x35
    2504:	3e a9       	ldd	r19, Y+54	; 0x36
    2506:	4f a9       	ldd	r20, Y+55	; 0x37
    2508:	58 ad       	ldd	r21, Y+56	; 0x38
    250a:	26 15       	cp	r18, r6
    250c:	37 05       	cpc	r19, r7
    250e:	48 05       	cpc	r20, r8
    2510:	59 05       	cpc	r21, r9
    2512:	28 f4       	brcc	.+10     	; 0x251e <__moddi3+0xef6>
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	28 2e       	mov	r2, r24
    2518:	31 2c       	mov	r3, r1
    251a:	41 2c       	mov	r4, r1
    251c:	51 2c       	mov	r5, r1
    251e:	86 01       	movw	r16, r12
    2520:	75 01       	movw	r14, r10
    2522:	e2 18       	sub	r14, r2
    2524:	f3 08       	sbc	r15, r3
    2526:	04 09       	sbc	r16, r4
    2528:	15 09       	sbc	r17, r5
    252a:	a8 01       	movw	r20, r16
    252c:	97 01       	movw	r18, r14
    252e:	e2 96       	adiw	r28, 0x32	; 50
    2530:	0f ac       	ldd	r0, Y+63	; 0x3f
    2532:	e2 97       	sbiw	r28, 0x32	; 50
    2534:	04 c0       	rjmp	.+8      	; 0x253e <__moddi3+0xf16>
    2536:	22 0f       	add	r18, r18
    2538:	33 1f       	adc	r19, r19
    253a:	44 1f       	adc	r20, r20
    253c:	55 1f       	adc	r21, r21
    253e:	0a 94       	dec	r0
    2540:	d2 f7       	brpl	.-12     	; 0x2536 <__moddi3+0xf0e>
    2542:	d4 01       	movw	r26, r8
    2544:	c3 01       	movw	r24, r6
    2546:	e3 96       	adiw	r28, 0x33	; 51
    2548:	0f ac       	ldd	r0, Y+63	; 0x3f
    254a:	e3 97       	sbiw	r28, 0x33	; 51
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <__moddi3+0xf2e>
    254e:	b6 95       	lsr	r27
    2550:	a7 95       	ror	r26
    2552:	97 95       	ror	r25
    2554:	87 95       	ror	r24
    2556:	0a 94       	dec	r0
    2558:	d2 f7       	brpl	.-12     	; 0x254e <__moddi3+0xf26>
    255a:	28 2b       	or	r18, r24
    255c:	39 2b       	or	r19, r25
    255e:	4a 2b       	or	r20, r26
    2560:	5b 2b       	or	r21, r27
    2562:	29 a7       	std	Y+41, r18	; 0x29
    2564:	3a a7       	std	Y+42, r19	; 0x2a
    2566:	4b a7       	std	Y+43, r20	; 0x2b
    2568:	5c a7       	std	Y+44, r21	; 0x2c
    256a:	e3 96       	adiw	r28, 0x33	; 51
    256c:	0f ac       	ldd	r0, Y+63	; 0x3f
    256e:	e3 97       	sbiw	r28, 0x33	; 51
    2570:	04 c0       	rjmp	.+8      	; 0x257a <__moddi3+0xf52>
    2572:	16 95       	lsr	r17
    2574:	07 95       	ror	r16
    2576:	f7 94       	ror	r15
    2578:	e7 94       	ror	r14
    257a:	0a 94       	dec	r0
    257c:	d2 f7       	brpl	.-12     	; 0x2572 <__moddi3+0xf4a>
    257e:	ed a6       	std	Y+45, r14	; 0x2d
    2580:	fe a6       	std	Y+46, r15	; 0x2e
    2582:	0f a7       	std	Y+47, r16	; 0x2f
    2584:	18 ab       	std	Y+48, r17	; 0x30
    2586:	29 8b       	std	Y+17, r18	; 0x11
    2588:	8a a5       	ldd	r24, Y+42	; 0x2a
    258a:	8a 8b       	std	Y+18, r24	; 0x12
    258c:	8b a5       	ldd	r24, Y+43	; 0x2b
    258e:	8b 8b       	std	Y+19, r24	; 0x13
    2590:	8c a5       	ldd	r24, Y+44	; 0x2c
    2592:	8c 8b       	std	Y+20, r24	; 0x14
    2594:	ed 8a       	std	Y+21, r14	; 0x15
    2596:	8e a5       	ldd	r24, Y+46	; 0x2e
    2598:	8e 8b       	std	Y+22, r24	; 0x16
    259a:	8f a5       	ldd	r24, Y+47	; 0x2f
    259c:	8f 8b       	std	Y+23, r24	; 0x17
    259e:	88 a9       	ldd	r24, Y+48	; 0x30
    25a0:	88 8f       	std	Y+24, r24	; 0x18
    25a2:	e1 96       	adiw	r28, 0x31	; 49
    25a4:	4c ad       	ldd	r20, Y+60	; 0x3c
    25a6:	5d ad       	ldd	r21, Y+61	; 0x3d
    25a8:	6e ad       	ldd	r22, Y+62	; 0x3e
    25aa:	7f ad       	ldd	r23, Y+63	; 0x3f
    25ac:	e1 97       	sbiw	r28, 0x31	; 49
    25ae:	41 15       	cp	r20, r1
    25b0:	51 05       	cpc	r21, r1
    25b2:	61 05       	cpc	r22, r1
    25b4:	71 05       	cpc	r23, r1
    25b6:	09 f4       	brne	.+2      	; 0x25ba <__moddi3+0xf92>
    25b8:	67 c0       	rjmp	.+206    	; 0x2688 <__moddi3+0x1060>
    25ba:	89 89       	ldd	r24, Y+17	; 0x11
    25bc:	2a 89       	ldd	r18, Y+18	; 0x12
    25be:	3b 89       	ldd	r19, Y+19	; 0x13
    25c0:	4c 89       	ldd	r20, Y+20	; 0x14
    25c2:	5d 89       	ldd	r21, Y+21	; 0x15
    25c4:	ae 89       	ldd	r26, Y+22	; 0x16
    25c6:	bf 89       	ldd	r27, Y+23	; 0x17
    25c8:	18 8d       	ldd	r17, Y+24	; 0x18
    25ca:	f8 2f       	mov	r31, r24
    25cc:	f1 95       	neg	r31
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	1f 16       	cp	r1, r31
    25d2:	08 f0       	brcs	.+2      	; 0x25d6 <__moddi3+0xfae>
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	82 2f       	mov	r24, r18
    25d8:	81 95       	neg	r24
    25da:	21 e0       	ldi	r18, 0x01	; 1
    25dc:	18 16       	cp	r1, r24
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <__moddi3+0xfba>
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	e8 2f       	mov	r30, r24
    25e4:	e9 1b       	sub	r30, r25
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	8e 17       	cp	r24, r30
    25ea:	08 f0       	brcs	.+2      	; 0x25ee <__moddi3+0xfc6>
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	29 2b       	or	r18, r25
    25f0:	83 2f       	mov	r24, r19
    25f2:	81 95       	neg	r24
    25f4:	31 e0       	ldi	r19, 0x01	; 1
    25f6:	18 16       	cp	r1, r24
    25f8:	08 f0       	brcs	.+2      	; 0x25fc <__moddi3+0xfd4>
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	78 2f       	mov	r23, r24
    25fe:	72 1b       	sub	r23, r18
    2600:	91 e0       	ldi	r25, 0x01	; 1
    2602:	87 17       	cp	r24, r23
    2604:	08 f0       	brcs	.+2      	; 0x2608 <__moddi3+0xfe0>
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	39 2b       	or	r19, r25
    260a:	84 2f       	mov	r24, r20
    260c:	81 95       	neg	r24
    260e:	21 e0       	ldi	r18, 0x01	; 1
    2610:	18 16       	cp	r1, r24
    2612:	08 f0       	brcs	.+2      	; 0x2616 <__moddi3+0xfee>
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	68 2f       	mov	r22, r24
    2618:	63 1b       	sub	r22, r19
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	86 17       	cp	r24, r22
    261e:	08 f0       	brcs	.+2      	; 0x2622 <__moddi3+0xffa>
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	29 2b       	or	r18, r25
    2624:	85 2f       	mov	r24, r21
    2626:	81 95       	neg	r24
    2628:	31 e0       	ldi	r19, 0x01	; 1
    262a:	18 16       	cp	r1, r24
    262c:	08 f0       	brcs	.+2      	; 0x2630 <__moddi3+0x1008>
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	58 2f       	mov	r21, r24
    2632:	52 1b       	sub	r21, r18
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	85 17       	cp	r24, r21
    2638:	08 f0       	brcs	.+2      	; 0x263c <__moddi3+0x1014>
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	39 2b       	or	r19, r25
    263e:	8a 2f       	mov	r24, r26
    2640:	81 95       	neg	r24
    2642:	21 e0       	ldi	r18, 0x01	; 1
    2644:	18 16       	cp	r1, r24
    2646:	08 f0       	brcs	.+2      	; 0x264a <__moddi3+0x1022>
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	48 2f       	mov	r20, r24
    264c:	43 1b       	sub	r20, r19
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	84 17       	cp	r24, r20
    2652:	08 f0       	brcs	.+2      	; 0x2656 <__moddi3+0x102e>
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	29 2b       	or	r18, r25
    2658:	8b 2f       	mov	r24, r27
    265a:	81 95       	neg	r24
    265c:	91 e0       	ldi	r25, 0x01	; 1
    265e:	18 16       	cp	r1, r24
    2660:	08 f0       	brcs	.+2      	; 0x2664 <__moddi3+0x103c>
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	38 2f       	mov	r19, r24
    2666:	32 1b       	sub	r19, r18
    2668:	21 e0       	ldi	r18, 0x01	; 1
    266a:	83 17       	cp	r24, r19
    266c:	08 f0       	brcs	.+2      	; 0x2670 <__moddi3+0x1048>
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	92 2b       	or	r25, r18
    2672:	81 2f       	mov	r24, r17
    2674:	81 95       	neg	r24
    2676:	89 1b       	sub	r24, r25
    2678:	f9 8b       	std	Y+17, r31	; 0x11
    267a:	ea 8b       	std	Y+18, r30	; 0x12
    267c:	7b 8b       	std	Y+19, r23	; 0x13
    267e:	6c 8b       	std	Y+20, r22	; 0x14
    2680:	5d 8b       	std	Y+21, r21	; 0x15
    2682:	4e 8b       	std	Y+22, r20	; 0x16
    2684:	3f 8b       	std	Y+23, r19	; 0x17
    2686:	88 8f       	std	Y+24, r24	; 0x18
    2688:	29 89       	ldd	r18, Y+17	; 0x11
    268a:	3a 89       	ldd	r19, Y+18	; 0x12
    268c:	4b 89       	ldd	r20, Y+19	; 0x13
    268e:	5c 89       	ldd	r21, Y+20	; 0x14
    2690:	6d 89       	ldd	r22, Y+21	; 0x15
    2692:	7e 89       	ldd	r23, Y+22	; 0x16
    2694:	8f 89       	ldd	r24, Y+23	; 0x17
    2696:	98 8d       	ldd	r25, Y+24	; 0x18
    2698:	c9 58       	subi	r28, 0x89	; 137
    269a:	df 4f       	sbci	r29, 0xFF	; 255
    269c:	e2 e1       	ldi	r30, 0x12	; 18
    269e:	0c 94 0b 34 	jmp	0x6816	; 0x6816 <__epilogue_restores__>

000026a2 <_fpadd_parts>:
    26a2:	a0 e0       	ldi	r26, 0x00	; 0
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e7 e5       	ldi	r30, 0x57	; 87
    26a8:	f3 e1       	ldi	r31, 0x13	; 19
    26aa:	0c 94 ef 33 	jmp	0x67de	; 0x67de <__prologue_saves__>
    26ae:	dc 01       	movw	r26, r24
    26b0:	2b 01       	movw	r4, r22
    26b2:	fa 01       	movw	r30, r20
    26b4:	9c 91       	ld	r25, X
    26b6:	92 30       	cpi	r25, 0x02	; 2
    26b8:	08 f4       	brcc	.+2      	; 0x26bc <_fpadd_parts+0x1a>
    26ba:	39 c1       	rjmp	.+626    	; 0x292e <_fpadd_parts+0x28c>
    26bc:	eb 01       	movw	r28, r22
    26be:	88 81       	ld	r24, Y
    26c0:	82 30       	cpi	r24, 0x02	; 2
    26c2:	08 f4       	brcc	.+2      	; 0x26c6 <_fpadd_parts+0x24>
    26c4:	33 c1       	rjmp	.+614    	; 0x292c <_fpadd_parts+0x28a>
    26c6:	94 30       	cpi	r25, 0x04	; 4
    26c8:	69 f4       	brne	.+26     	; 0x26e4 <_fpadd_parts+0x42>
    26ca:	84 30       	cpi	r24, 0x04	; 4
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <_fpadd_parts+0x2e>
    26ce:	2f c1       	rjmp	.+606    	; 0x292e <_fpadd_parts+0x28c>
    26d0:	11 96       	adiw	r26, 0x01	; 1
    26d2:	9c 91       	ld	r25, X
    26d4:	11 97       	sbiw	r26, 0x01	; 1
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	98 17       	cp	r25, r24
    26da:	09 f4       	brne	.+2      	; 0x26de <_fpadd_parts+0x3c>
    26dc:	28 c1       	rjmp	.+592    	; 0x292e <_fpadd_parts+0x28c>
    26de:	a0 e6       	ldi	r26, 0x60	; 96
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	25 c1       	rjmp	.+586    	; 0x292e <_fpadd_parts+0x28c>
    26e4:	84 30       	cpi	r24, 0x04	; 4
    26e6:	09 f4       	brne	.+2      	; 0x26ea <_fpadd_parts+0x48>
    26e8:	21 c1       	rjmp	.+578    	; 0x292c <_fpadd_parts+0x28a>
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	a9 f4       	brne	.+42     	; 0x2718 <_fpadd_parts+0x76>
    26ee:	92 30       	cpi	r25, 0x02	; 2
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <_fpadd_parts+0x52>
    26f2:	1d c1       	rjmp	.+570    	; 0x292e <_fpadd_parts+0x28c>
    26f4:	9a 01       	movw	r18, r20
    26f6:	ad 01       	movw	r20, r26
    26f8:	88 e0       	ldi	r24, 0x08	; 8
    26fa:	ea 01       	movw	r28, r20
    26fc:	09 90       	ld	r0, Y+
    26fe:	ae 01       	movw	r20, r28
    2700:	e9 01       	movw	r28, r18
    2702:	09 92       	st	Y+, r0
    2704:	9e 01       	movw	r18, r28
    2706:	81 50       	subi	r24, 0x01	; 1
    2708:	c1 f7       	brne	.-16     	; 0x26fa <_fpadd_parts+0x58>
    270a:	e2 01       	movw	r28, r4
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	11 96       	adiw	r26, 0x01	; 1
    2710:	9c 91       	ld	r25, X
    2712:	89 23       	and	r24, r25
    2714:	81 83       	std	Z+1, r24	; 0x01
    2716:	08 c1       	rjmp	.+528    	; 0x2928 <_fpadd_parts+0x286>
    2718:	92 30       	cpi	r25, 0x02	; 2
    271a:	09 f4       	brne	.+2      	; 0x271e <_fpadd_parts+0x7c>
    271c:	07 c1       	rjmp	.+526    	; 0x292c <_fpadd_parts+0x28a>
    271e:	12 96       	adiw	r26, 0x02	; 2
    2720:	2d 90       	ld	r2, X+
    2722:	3c 90       	ld	r3, X
    2724:	13 97       	sbiw	r26, 0x03	; 3
    2726:	eb 01       	movw	r28, r22
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	9b 81       	ldd	r25, Y+3	; 0x03
    272c:	14 96       	adiw	r26, 0x04	; 4
    272e:	ad 90       	ld	r10, X+
    2730:	bd 90       	ld	r11, X+
    2732:	cd 90       	ld	r12, X+
    2734:	dc 90       	ld	r13, X
    2736:	17 97       	sbiw	r26, 0x07	; 7
    2738:	ec 80       	ldd	r14, Y+4	; 0x04
    273a:	fd 80       	ldd	r15, Y+5	; 0x05
    273c:	0e 81       	ldd	r16, Y+6	; 0x06
    273e:	1f 81       	ldd	r17, Y+7	; 0x07
    2740:	91 01       	movw	r18, r2
    2742:	28 1b       	sub	r18, r24
    2744:	39 0b       	sbc	r19, r25
    2746:	b9 01       	movw	r22, r18
    2748:	37 ff       	sbrs	r19, 7
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <_fpadd_parts+0xb2>
    274c:	66 27       	eor	r22, r22
    274e:	77 27       	eor	r23, r23
    2750:	62 1b       	sub	r22, r18
    2752:	73 0b       	sbc	r23, r19
    2754:	60 32       	cpi	r22, 0x20	; 32
    2756:	71 05       	cpc	r23, r1
    2758:	0c f0       	brlt	.+2      	; 0x275c <_fpadd_parts+0xba>
    275a:	61 c0       	rjmp	.+194    	; 0x281e <_fpadd_parts+0x17c>
    275c:	12 16       	cp	r1, r18
    275e:	13 06       	cpc	r1, r19
    2760:	6c f5       	brge	.+90     	; 0x27bc <_fpadd_parts+0x11a>
    2762:	37 01       	movw	r6, r14
    2764:	48 01       	movw	r8, r16
    2766:	06 2e       	mov	r0, r22
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <_fpadd_parts+0xd0>
    276a:	96 94       	lsr	r9
    276c:	87 94       	ror	r8
    276e:	77 94       	ror	r7
    2770:	67 94       	ror	r6
    2772:	0a 94       	dec	r0
    2774:	d2 f7       	brpl	.-12     	; 0x276a <_fpadd_parts+0xc8>
    2776:	21 e0       	ldi	r18, 0x01	; 1
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	04 c0       	rjmp	.+8      	; 0x2788 <_fpadd_parts+0xe6>
    2780:	22 0f       	add	r18, r18
    2782:	33 1f       	adc	r19, r19
    2784:	44 1f       	adc	r20, r20
    2786:	55 1f       	adc	r21, r21
    2788:	6a 95       	dec	r22
    278a:	d2 f7       	brpl	.-12     	; 0x2780 <_fpadd_parts+0xde>
    278c:	21 50       	subi	r18, 0x01	; 1
    278e:	30 40       	sbci	r19, 0x00	; 0
    2790:	40 40       	sbci	r20, 0x00	; 0
    2792:	50 40       	sbci	r21, 0x00	; 0
    2794:	2e 21       	and	r18, r14
    2796:	3f 21       	and	r19, r15
    2798:	40 23       	and	r20, r16
    279a:	51 23       	and	r21, r17
    279c:	21 15       	cp	r18, r1
    279e:	31 05       	cpc	r19, r1
    27a0:	41 05       	cpc	r20, r1
    27a2:	51 05       	cpc	r21, r1
    27a4:	21 f0       	breq	.+8      	; 0x27ae <_fpadd_parts+0x10c>
    27a6:	21 e0       	ldi	r18, 0x01	; 1
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	79 01       	movw	r14, r18
    27b0:	8a 01       	movw	r16, r20
    27b2:	e6 28       	or	r14, r6
    27b4:	f7 28       	or	r15, r7
    27b6:	08 29       	or	r16, r8
    27b8:	19 29       	or	r17, r9
    27ba:	3c c0       	rjmp	.+120    	; 0x2834 <_fpadd_parts+0x192>
    27bc:	23 2b       	or	r18, r19
    27be:	d1 f1       	breq	.+116    	; 0x2834 <_fpadd_parts+0x192>
    27c0:	26 0e       	add	r2, r22
    27c2:	37 1e       	adc	r3, r23
    27c4:	35 01       	movw	r6, r10
    27c6:	46 01       	movw	r8, r12
    27c8:	06 2e       	mov	r0, r22
    27ca:	04 c0       	rjmp	.+8      	; 0x27d4 <_fpadd_parts+0x132>
    27cc:	96 94       	lsr	r9
    27ce:	87 94       	ror	r8
    27d0:	77 94       	ror	r7
    27d2:	67 94       	ror	r6
    27d4:	0a 94       	dec	r0
    27d6:	d2 f7       	brpl	.-12     	; 0x27cc <_fpadd_parts+0x12a>
    27d8:	21 e0       	ldi	r18, 0x01	; 1
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <_fpadd_parts+0x148>
    27e2:	22 0f       	add	r18, r18
    27e4:	33 1f       	adc	r19, r19
    27e6:	44 1f       	adc	r20, r20
    27e8:	55 1f       	adc	r21, r21
    27ea:	6a 95       	dec	r22
    27ec:	d2 f7       	brpl	.-12     	; 0x27e2 <_fpadd_parts+0x140>
    27ee:	21 50       	subi	r18, 0x01	; 1
    27f0:	30 40       	sbci	r19, 0x00	; 0
    27f2:	40 40       	sbci	r20, 0x00	; 0
    27f4:	50 40       	sbci	r21, 0x00	; 0
    27f6:	2a 21       	and	r18, r10
    27f8:	3b 21       	and	r19, r11
    27fa:	4c 21       	and	r20, r12
    27fc:	5d 21       	and	r21, r13
    27fe:	21 15       	cp	r18, r1
    2800:	31 05       	cpc	r19, r1
    2802:	41 05       	cpc	r20, r1
    2804:	51 05       	cpc	r21, r1
    2806:	21 f0       	breq	.+8      	; 0x2810 <_fpadd_parts+0x16e>
    2808:	21 e0       	ldi	r18, 0x01	; 1
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	59 01       	movw	r10, r18
    2812:	6a 01       	movw	r12, r20
    2814:	a6 28       	or	r10, r6
    2816:	b7 28       	or	r11, r7
    2818:	c8 28       	or	r12, r8
    281a:	d9 28       	or	r13, r9
    281c:	0b c0       	rjmp	.+22     	; 0x2834 <_fpadd_parts+0x192>
    281e:	82 15       	cp	r24, r2
    2820:	93 05       	cpc	r25, r3
    2822:	2c f0       	brlt	.+10     	; 0x282e <_fpadd_parts+0x18c>
    2824:	1c 01       	movw	r2, r24
    2826:	aa 24       	eor	r10, r10
    2828:	bb 24       	eor	r11, r11
    282a:	65 01       	movw	r12, r10
    282c:	03 c0       	rjmp	.+6      	; 0x2834 <_fpadd_parts+0x192>
    282e:	ee 24       	eor	r14, r14
    2830:	ff 24       	eor	r15, r15
    2832:	87 01       	movw	r16, r14
    2834:	11 96       	adiw	r26, 0x01	; 1
    2836:	9c 91       	ld	r25, X
    2838:	d2 01       	movw	r26, r4
    283a:	11 96       	adiw	r26, 0x01	; 1
    283c:	8c 91       	ld	r24, X
    283e:	98 17       	cp	r25, r24
    2840:	09 f4       	brne	.+2      	; 0x2844 <_fpadd_parts+0x1a2>
    2842:	45 c0       	rjmp	.+138    	; 0x28ce <_fpadd_parts+0x22c>
    2844:	99 23       	and	r25, r25
    2846:	39 f0       	breq	.+14     	; 0x2856 <_fpadd_parts+0x1b4>
    2848:	a8 01       	movw	r20, r16
    284a:	97 01       	movw	r18, r14
    284c:	2a 19       	sub	r18, r10
    284e:	3b 09       	sbc	r19, r11
    2850:	4c 09       	sbc	r20, r12
    2852:	5d 09       	sbc	r21, r13
    2854:	06 c0       	rjmp	.+12     	; 0x2862 <_fpadd_parts+0x1c0>
    2856:	a6 01       	movw	r20, r12
    2858:	95 01       	movw	r18, r10
    285a:	2e 19       	sub	r18, r14
    285c:	3f 09       	sbc	r19, r15
    285e:	40 0b       	sbc	r20, r16
    2860:	51 0b       	sbc	r21, r17
    2862:	57 fd       	sbrc	r21, 7
    2864:	08 c0       	rjmp	.+16     	; 0x2876 <_fpadd_parts+0x1d4>
    2866:	11 82       	std	Z+1, r1	; 0x01
    2868:	33 82       	std	Z+3, r3	; 0x03
    286a:	22 82       	std	Z+2, r2	; 0x02
    286c:	24 83       	std	Z+4, r18	; 0x04
    286e:	35 83       	std	Z+5, r19	; 0x05
    2870:	46 83       	std	Z+6, r20	; 0x06
    2872:	57 83       	std	Z+7, r21	; 0x07
    2874:	1d c0       	rjmp	.+58     	; 0x28b0 <_fpadd_parts+0x20e>
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	81 83       	std	Z+1, r24	; 0x01
    287a:	33 82       	std	Z+3, r3	; 0x03
    287c:	22 82       	std	Z+2, r2	; 0x02
    287e:	88 27       	eor	r24, r24
    2880:	99 27       	eor	r25, r25
    2882:	dc 01       	movw	r26, r24
    2884:	82 1b       	sub	r24, r18
    2886:	93 0b       	sbc	r25, r19
    2888:	a4 0b       	sbc	r26, r20
    288a:	b5 0b       	sbc	r27, r21
    288c:	84 83       	std	Z+4, r24	; 0x04
    288e:	95 83       	std	Z+5, r25	; 0x05
    2890:	a6 83       	std	Z+6, r26	; 0x06
    2892:	b7 83       	std	Z+7, r27	; 0x07
    2894:	0d c0       	rjmp	.+26     	; 0x28b0 <_fpadd_parts+0x20e>
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	44 1f       	adc	r20, r20
    289c:	55 1f       	adc	r21, r21
    289e:	24 83       	std	Z+4, r18	; 0x04
    28a0:	35 83       	std	Z+5, r19	; 0x05
    28a2:	46 83       	std	Z+6, r20	; 0x06
    28a4:	57 83       	std	Z+7, r21	; 0x07
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	93 83       	std	Z+3, r25	; 0x03
    28ae:	82 83       	std	Z+2, r24	; 0x02
    28b0:	24 81       	ldd	r18, Z+4	; 0x04
    28b2:	35 81       	ldd	r19, Z+5	; 0x05
    28b4:	46 81       	ldd	r20, Z+6	; 0x06
    28b6:	57 81       	ldd	r21, Z+7	; 0x07
    28b8:	da 01       	movw	r26, r20
    28ba:	c9 01       	movw	r24, r18
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	a1 09       	sbc	r26, r1
    28c0:	b1 09       	sbc	r27, r1
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	9f 4f       	sbci	r25, 0xFF	; 255
    28c6:	af 4f       	sbci	r26, 0xFF	; 255
    28c8:	bf 43       	sbci	r27, 0x3F	; 63
    28ca:	28 f3       	brcs	.-54     	; 0x2896 <_fpadd_parts+0x1f4>
    28cc:	0b c0       	rjmp	.+22     	; 0x28e4 <_fpadd_parts+0x242>
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	33 82       	std	Z+3, r3	; 0x03
    28d2:	22 82       	std	Z+2, r2	; 0x02
    28d4:	ea 0c       	add	r14, r10
    28d6:	fb 1c       	adc	r15, r11
    28d8:	0c 1d       	adc	r16, r12
    28da:	1d 1d       	adc	r17, r13
    28dc:	e4 82       	std	Z+4, r14	; 0x04
    28de:	f5 82       	std	Z+5, r15	; 0x05
    28e0:	06 83       	std	Z+6, r16	; 0x06
    28e2:	17 83       	std	Z+7, r17	; 0x07
    28e4:	83 e0       	ldi	r24, 0x03	; 3
    28e6:	80 83       	st	Z, r24
    28e8:	24 81       	ldd	r18, Z+4	; 0x04
    28ea:	35 81       	ldd	r19, Z+5	; 0x05
    28ec:	46 81       	ldd	r20, Z+6	; 0x06
    28ee:	57 81       	ldd	r21, Z+7	; 0x07
    28f0:	57 ff       	sbrs	r21, 7
    28f2:	1a c0       	rjmp	.+52     	; 0x2928 <_fpadd_parts+0x286>
    28f4:	c9 01       	movw	r24, r18
    28f6:	aa 27       	eor	r26, r26
    28f8:	97 fd       	sbrc	r25, 7
    28fa:	a0 95       	com	r26
    28fc:	ba 2f       	mov	r27, r26
    28fe:	81 70       	andi	r24, 0x01	; 1
    2900:	90 70       	andi	r25, 0x00	; 0
    2902:	a0 70       	andi	r26, 0x00	; 0
    2904:	b0 70       	andi	r27, 0x00	; 0
    2906:	56 95       	lsr	r21
    2908:	47 95       	ror	r20
    290a:	37 95       	ror	r19
    290c:	27 95       	ror	r18
    290e:	82 2b       	or	r24, r18
    2910:	93 2b       	or	r25, r19
    2912:	a4 2b       	or	r26, r20
    2914:	b5 2b       	or	r27, r21
    2916:	84 83       	std	Z+4, r24	; 0x04
    2918:	95 83       	std	Z+5, r25	; 0x05
    291a:	a6 83       	std	Z+6, r26	; 0x06
    291c:	b7 83       	std	Z+7, r27	; 0x07
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	93 83       	std	Z+3, r25	; 0x03
    2926:	82 83       	std	Z+2, r24	; 0x02
    2928:	df 01       	movw	r26, r30
    292a:	01 c0       	rjmp	.+2      	; 0x292e <_fpadd_parts+0x28c>
    292c:	d2 01       	movw	r26, r4
    292e:	cd 01       	movw	r24, r26
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	e2 e1       	ldi	r30, 0x12	; 18
    2936:	0c 94 0b 34 	jmp	0x6816	; 0x6816 <__epilogue_restores__>

0000293a <__subsf3>:
    293a:	a0 e2       	ldi	r26, 0x20	; 32
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e3 ea       	ldi	r30, 0xA3	; 163
    2940:	f4 e1       	ldi	r31, 0x14	; 20
    2942:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__prologue_saves__+0x18>
    2946:	69 83       	std	Y+1, r22	; 0x01
    2948:	7a 83       	std	Y+2, r23	; 0x02
    294a:	8b 83       	std	Y+3, r24	; 0x03
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	2d 83       	std	Y+5, r18	; 0x05
    2950:	3e 83       	std	Y+6, r19	; 0x06
    2952:	4f 83       	std	Y+7, r20	; 0x07
    2954:	58 87       	std	Y+8, r21	; 0x08
    2956:	e9 e0       	ldi	r30, 0x09	; 9
    2958:	ee 2e       	mov	r14, r30
    295a:	f1 2c       	mov	r15, r1
    295c:	ec 0e       	add	r14, r28
    295e:	fd 1e       	adc	r15, r29
    2960:	ce 01       	movw	r24, r28
    2962:	01 96       	adiw	r24, 0x01	; 1
    2964:	b7 01       	movw	r22, r14
    2966:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    296a:	8e 01       	movw	r16, r28
    296c:	0f 5e       	subi	r16, 0xEF	; 239
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	ce 01       	movw	r24, r28
    2972:	05 96       	adiw	r24, 0x05	; 5
    2974:	b8 01       	movw	r22, r16
    2976:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    297a:	8a 89       	ldd	r24, Y+18	; 0x12
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	89 27       	eor	r24, r25
    2980:	8a 8b       	std	Y+18, r24	; 0x12
    2982:	c7 01       	movw	r24, r14
    2984:	b8 01       	movw	r22, r16
    2986:	ae 01       	movw	r20, r28
    2988:	47 5e       	subi	r20, 0xE7	; 231
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_fpadd_parts>
    2990:	0e 94 2a 19 	call	0x3254	; 0x3254 <__pack_f>
    2994:	a0 96       	adiw	r28, 0x20	; 32
    2996:	e6 e0       	ldi	r30, 0x06	; 6
    2998:	0c 94 17 34 	jmp	0x682e	; 0x682e <__epilogue_restores__+0x18>

0000299c <__addsf3>:
    299c:	a0 e2       	ldi	r26, 0x20	; 32
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e4 ed       	ldi	r30, 0xD4	; 212
    29a2:	f4 e1       	ldi	r31, 0x14	; 20
    29a4:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__prologue_saves__+0x18>
    29a8:	69 83       	std	Y+1, r22	; 0x01
    29aa:	7a 83       	std	Y+2, r23	; 0x02
    29ac:	8b 83       	std	Y+3, r24	; 0x03
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	2d 83       	std	Y+5, r18	; 0x05
    29b2:	3e 83       	std	Y+6, r19	; 0x06
    29b4:	4f 83       	std	Y+7, r20	; 0x07
    29b6:	58 87       	std	Y+8, r21	; 0x08
    29b8:	f9 e0       	ldi	r31, 0x09	; 9
    29ba:	ef 2e       	mov	r14, r31
    29bc:	f1 2c       	mov	r15, r1
    29be:	ec 0e       	add	r14, r28
    29c0:	fd 1e       	adc	r15, r29
    29c2:	ce 01       	movw	r24, r28
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	b7 01       	movw	r22, r14
    29c8:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    29cc:	8e 01       	movw	r16, r28
    29ce:	0f 5e       	subi	r16, 0xEF	; 239
    29d0:	1f 4f       	sbci	r17, 0xFF	; 255
    29d2:	ce 01       	movw	r24, r28
    29d4:	05 96       	adiw	r24, 0x05	; 5
    29d6:	b8 01       	movw	r22, r16
    29d8:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    29dc:	c7 01       	movw	r24, r14
    29de:	b8 01       	movw	r22, r16
    29e0:	ae 01       	movw	r20, r28
    29e2:	47 5e       	subi	r20, 0xE7	; 231
    29e4:	5f 4f       	sbci	r21, 0xFF	; 255
    29e6:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_fpadd_parts>
    29ea:	0e 94 2a 19 	call	0x3254	; 0x3254 <__pack_f>
    29ee:	a0 96       	adiw	r28, 0x20	; 32
    29f0:	e6 e0       	ldi	r30, 0x06	; 6
    29f2:	0c 94 17 34 	jmp	0x682e	; 0x682e <__epilogue_restores__+0x18>

000029f6 <__mulsf3>:
    29f6:	a0 e2       	ldi	r26, 0x20	; 32
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e1 e0       	ldi	r30, 0x01	; 1
    29fc:	f5 e1       	ldi	r31, 0x15	; 21
    29fe:	0c 94 ef 33 	jmp	0x67de	; 0x67de <__prologue_saves__>
    2a02:	69 83       	std	Y+1, r22	; 0x01
    2a04:	7a 83       	std	Y+2, r23	; 0x02
    2a06:	8b 83       	std	Y+3, r24	; 0x03
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	2d 83       	std	Y+5, r18	; 0x05
    2a0c:	3e 83       	std	Y+6, r19	; 0x06
    2a0e:	4f 83       	std	Y+7, r20	; 0x07
    2a10:	58 87       	std	Y+8, r21	; 0x08
    2a12:	ce 01       	movw	r24, r28
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	be 01       	movw	r22, r28
    2a18:	67 5f       	subi	r22, 0xF7	; 247
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2a20:	ce 01       	movw	r24, r28
    2a22:	05 96       	adiw	r24, 0x05	; 5
    2a24:	be 01       	movw	r22, r28
    2a26:	6f 5e       	subi	r22, 0xEF	; 239
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2a2e:	99 85       	ldd	r25, Y+9	; 0x09
    2a30:	92 30       	cpi	r25, 0x02	; 2
    2a32:	88 f0       	brcs	.+34     	; 0x2a56 <__mulsf3+0x60>
    2a34:	89 89       	ldd	r24, Y+17	; 0x11
    2a36:	82 30       	cpi	r24, 0x02	; 2
    2a38:	c8 f0       	brcs	.+50     	; 0x2a6c <__mulsf3+0x76>
    2a3a:	94 30       	cpi	r25, 0x04	; 4
    2a3c:	19 f4       	brne	.+6      	; 0x2a44 <__mulsf3+0x4e>
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	51 f4       	brne	.+20     	; 0x2a56 <__mulsf3+0x60>
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <__mulsf3+0x56>
    2a44:	84 30       	cpi	r24, 0x04	; 4
    2a46:	29 f4       	brne	.+10     	; 0x2a52 <__mulsf3+0x5c>
    2a48:	92 30       	cpi	r25, 0x02	; 2
    2a4a:	81 f4       	brne	.+32     	; 0x2a6c <__mulsf3+0x76>
    2a4c:	80 e6       	ldi	r24, 0x60	; 96
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	c6 c0       	rjmp	.+396    	; 0x2bde <__mulsf3+0x1e8>
    2a52:	92 30       	cpi	r25, 0x02	; 2
    2a54:	49 f4       	brne	.+18     	; 0x2a68 <__mulsf3+0x72>
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a5c:	98 13       	cpse	r25, r24
    2a5e:	21 e0       	ldi	r18, 0x01	; 1
    2a60:	2a 87       	std	Y+10, r18	; 0x0a
    2a62:	ce 01       	movw	r24, r28
    2a64:	09 96       	adiw	r24, 0x09	; 9
    2a66:	bb c0       	rjmp	.+374    	; 0x2bde <__mulsf3+0x1e8>
    2a68:	82 30       	cpi	r24, 0x02	; 2
    2a6a:	49 f4       	brne	.+18     	; 0x2a7e <__mulsf3+0x88>
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	8a 89       	ldd	r24, Y+18	; 0x12
    2a72:	98 13       	cpse	r25, r24
    2a74:	21 e0       	ldi	r18, 0x01	; 1
    2a76:	2a 8b       	std	Y+18, r18	; 0x12
    2a78:	ce 01       	movw	r24, r28
    2a7a:	41 96       	adiw	r24, 0x11	; 17
    2a7c:	b0 c0       	rjmp	.+352    	; 0x2bde <__mulsf3+0x1e8>
    2a7e:	2d 84       	ldd	r2, Y+13	; 0x0d
    2a80:	3e 84       	ldd	r3, Y+14	; 0x0e
    2a82:	4f 84       	ldd	r4, Y+15	; 0x0f
    2a84:	58 88       	ldd	r5, Y+16	; 0x10
    2a86:	6d 88       	ldd	r6, Y+21	; 0x15
    2a88:	7e 88       	ldd	r7, Y+22	; 0x16
    2a8a:	8f 88       	ldd	r8, Y+23	; 0x17
    2a8c:	98 8c       	ldd	r9, Y+24	; 0x18
    2a8e:	ee 24       	eor	r14, r14
    2a90:	ff 24       	eor	r15, r15
    2a92:	87 01       	movw	r16, r14
    2a94:	aa 24       	eor	r10, r10
    2a96:	bb 24       	eor	r11, r11
    2a98:	65 01       	movw	r12, r10
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	e0 e0       	ldi	r30, 0x00	; 0
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	c1 01       	movw	r24, r2
    2aa8:	81 70       	andi	r24, 0x01	; 1
    2aaa:	90 70       	andi	r25, 0x00	; 0
    2aac:	89 2b       	or	r24, r25
    2aae:	e9 f0       	breq	.+58     	; 0x2aea <__mulsf3+0xf4>
    2ab0:	e6 0c       	add	r14, r6
    2ab2:	f7 1c       	adc	r15, r7
    2ab4:	08 1d       	adc	r16, r8
    2ab6:	19 1d       	adc	r17, r9
    2ab8:	9a 01       	movw	r18, r20
    2aba:	ab 01       	movw	r20, r22
    2abc:	2a 0d       	add	r18, r10
    2abe:	3b 1d       	adc	r19, r11
    2ac0:	4c 1d       	adc	r20, r12
    2ac2:	5d 1d       	adc	r21, r13
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e0       	ldi	r26, 0x00	; 0
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e6 14       	cp	r14, r6
    2ace:	f7 04       	cpc	r15, r7
    2ad0:	08 05       	cpc	r16, r8
    2ad2:	19 05       	cpc	r17, r9
    2ad4:	20 f4       	brcc	.+8      	; 0x2ade <__mulsf3+0xe8>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a0 e0       	ldi	r26, 0x00	; 0
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	ba 01       	movw	r22, r20
    2ae0:	a9 01       	movw	r20, r18
    2ae2:	48 0f       	add	r20, r24
    2ae4:	59 1f       	adc	r21, r25
    2ae6:	6a 1f       	adc	r22, r26
    2ae8:	7b 1f       	adc	r23, r27
    2aea:	aa 0c       	add	r10, r10
    2aec:	bb 1c       	adc	r11, r11
    2aee:	cc 1c       	adc	r12, r12
    2af0:	dd 1c       	adc	r13, r13
    2af2:	97 fe       	sbrs	r9, 7
    2af4:	08 c0       	rjmp	.+16     	; 0x2b06 <__mulsf3+0x110>
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	a8 2a       	or	r10, r24
    2b00:	b9 2a       	or	r11, r25
    2b02:	ca 2a       	or	r12, r26
    2b04:	db 2a       	or	r13, r27
    2b06:	31 96       	adiw	r30, 0x01	; 1
    2b08:	e0 32       	cpi	r30, 0x20	; 32
    2b0a:	f1 05       	cpc	r31, r1
    2b0c:	49 f0       	breq	.+18     	; 0x2b20 <__mulsf3+0x12a>
    2b0e:	66 0c       	add	r6, r6
    2b10:	77 1c       	adc	r7, r7
    2b12:	88 1c       	adc	r8, r8
    2b14:	99 1c       	adc	r9, r9
    2b16:	56 94       	lsr	r5
    2b18:	47 94       	ror	r4
    2b1a:	37 94       	ror	r3
    2b1c:	27 94       	ror	r2
    2b1e:	c3 cf       	rjmp	.-122    	; 0x2aa6 <__mulsf3+0xb0>
    2b20:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b22:	ea 89       	ldd	r30, Y+18	; 0x12
    2b24:	2b 89       	ldd	r18, Y+19	; 0x13
    2b26:	3c 89       	ldd	r19, Y+20	; 0x14
    2b28:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b2c:	28 0f       	add	r18, r24
    2b2e:	39 1f       	adc	r19, r25
    2b30:	2e 5f       	subi	r18, 0xFE	; 254
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	17 c0       	rjmp	.+46     	; 0x2b64 <__mulsf3+0x16e>
    2b36:	ca 01       	movw	r24, r20
    2b38:	81 70       	andi	r24, 0x01	; 1
    2b3a:	90 70       	andi	r25, 0x00	; 0
    2b3c:	89 2b       	or	r24, r25
    2b3e:	61 f0       	breq	.+24     	; 0x2b58 <__mulsf3+0x162>
    2b40:	16 95       	lsr	r17
    2b42:	07 95       	ror	r16
    2b44:	f7 94       	ror	r15
    2b46:	e7 94       	ror	r14
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e0       	ldi	r26, 0x00	; 0
    2b4e:	b0 e8       	ldi	r27, 0x80	; 128
    2b50:	e8 2a       	or	r14, r24
    2b52:	f9 2a       	or	r15, r25
    2b54:	0a 2b       	or	r16, r26
    2b56:	1b 2b       	or	r17, r27
    2b58:	76 95       	lsr	r23
    2b5a:	67 95       	ror	r22
    2b5c:	57 95       	ror	r21
    2b5e:	47 95       	ror	r20
    2b60:	2f 5f       	subi	r18, 0xFF	; 255
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	77 fd       	sbrc	r23, 7
    2b66:	e7 cf       	rjmp	.-50     	; 0x2b36 <__mulsf3+0x140>
    2b68:	0c c0       	rjmp	.+24     	; 0x2b82 <__mulsf3+0x18c>
    2b6a:	44 0f       	add	r20, r20
    2b6c:	55 1f       	adc	r21, r21
    2b6e:	66 1f       	adc	r22, r22
    2b70:	77 1f       	adc	r23, r23
    2b72:	17 fd       	sbrc	r17, 7
    2b74:	41 60       	ori	r20, 0x01	; 1
    2b76:	ee 0c       	add	r14, r14
    2b78:	ff 1c       	adc	r15, r15
    2b7a:	00 1f       	adc	r16, r16
    2b7c:	11 1f       	adc	r17, r17
    2b7e:	21 50       	subi	r18, 0x01	; 1
    2b80:	30 40       	sbci	r19, 0x00	; 0
    2b82:	40 30       	cpi	r20, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	59 07       	cpc	r21, r25
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	69 07       	cpc	r22, r25
    2b8c:	90 e4       	ldi	r25, 0x40	; 64
    2b8e:	79 07       	cpc	r23, r25
    2b90:	60 f3       	brcs	.-40     	; 0x2b6a <__mulsf3+0x174>
    2b92:	2b 8f       	std	Y+27, r18	; 0x1b
    2b94:	3c 8f       	std	Y+28, r19	; 0x1c
    2b96:	db 01       	movw	r26, r22
    2b98:	ca 01       	movw	r24, r20
    2b9a:	8f 77       	andi	r24, 0x7F	; 127
    2b9c:	90 70       	andi	r25, 0x00	; 0
    2b9e:	a0 70       	andi	r26, 0x00	; 0
    2ba0:	b0 70       	andi	r27, 0x00	; 0
    2ba2:	80 34       	cpi	r24, 0x40	; 64
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	a1 05       	cpc	r26, r1
    2ba8:	b1 05       	cpc	r27, r1
    2baa:	61 f4       	brne	.+24     	; 0x2bc4 <__mulsf3+0x1ce>
    2bac:	47 fd       	sbrc	r20, 7
    2bae:	0a c0       	rjmp	.+20     	; 0x2bc4 <__mulsf3+0x1ce>
    2bb0:	e1 14       	cp	r14, r1
    2bb2:	f1 04       	cpc	r15, r1
    2bb4:	01 05       	cpc	r16, r1
    2bb6:	11 05       	cpc	r17, r1
    2bb8:	29 f0       	breq	.+10     	; 0x2bc4 <__mulsf3+0x1ce>
    2bba:	40 5c       	subi	r20, 0xC0	; 192
    2bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbe:	6f 4f       	sbci	r22, 0xFF	; 255
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	40 78       	andi	r20, 0x80	; 128
    2bc4:	1a 8e       	std	Y+26, r1	; 0x1a
    2bc6:	fe 17       	cp	r31, r30
    2bc8:	11 f0       	breq	.+4      	; 0x2bce <__mulsf3+0x1d8>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	8a 8f       	std	Y+26, r24	; 0x1a
    2bce:	4d 8f       	std	Y+29, r20	; 0x1d
    2bd0:	5e 8f       	std	Y+30, r21	; 0x1e
    2bd2:	6f 8f       	std	Y+31, r22	; 0x1f
    2bd4:	78 a3       	std	Y+32, r23	; 0x20
    2bd6:	83 e0       	ldi	r24, 0x03	; 3
    2bd8:	89 8f       	std	Y+25, r24	; 0x19
    2bda:	ce 01       	movw	r24, r28
    2bdc:	49 96       	adiw	r24, 0x19	; 25
    2bde:	0e 94 2a 19 	call	0x3254	; 0x3254 <__pack_f>
    2be2:	a0 96       	adiw	r28, 0x20	; 32
    2be4:	e2 e1       	ldi	r30, 0x12	; 18
    2be6:	0c 94 0b 34 	jmp	0x6816	; 0x6816 <__epilogue_restores__>

00002bea <__divsf3>:
    2bea:	a8 e1       	ldi	r26, 0x18	; 24
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	eb ef       	ldi	r30, 0xFB	; 251
    2bf0:	f5 e1       	ldi	r31, 0x15	; 21
    2bf2:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__prologue_saves__+0x10>
    2bf6:	69 83       	std	Y+1, r22	; 0x01
    2bf8:	7a 83       	std	Y+2, r23	; 0x02
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	2d 83       	std	Y+5, r18	; 0x05
    2c00:	3e 83       	std	Y+6, r19	; 0x06
    2c02:	4f 83       	std	Y+7, r20	; 0x07
    2c04:	58 87       	std	Y+8, r21	; 0x08
    2c06:	b9 e0       	ldi	r27, 0x09	; 9
    2c08:	eb 2e       	mov	r14, r27
    2c0a:	f1 2c       	mov	r15, r1
    2c0c:	ec 0e       	add	r14, r28
    2c0e:	fd 1e       	adc	r15, r29
    2c10:	ce 01       	movw	r24, r28
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	b7 01       	movw	r22, r14
    2c16:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2c1a:	8e 01       	movw	r16, r28
    2c1c:	0f 5e       	subi	r16, 0xEF	; 239
    2c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c20:	ce 01       	movw	r24, r28
    2c22:	05 96       	adiw	r24, 0x05	; 5
    2c24:	b8 01       	movw	r22, r16
    2c26:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2c2a:	29 85       	ldd	r18, Y+9	; 0x09
    2c2c:	22 30       	cpi	r18, 0x02	; 2
    2c2e:	08 f4       	brcc	.+2      	; 0x2c32 <__divsf3+0x48>
    2c30:	7e c0       	rjmp	.+252    	; 0x2d2e <__divsf3+0x144>
    2c32:	39 89       	ldd	r19, Y+17	; 0x11
    2c34:	32 30       	cpi	r19, 0x02	; 2
    2c36:	10 f4       	brcc	.+4      	; 0x2c3c <__divsf3+0x52>
    2c38:	b8 01       	movw	r22, r16
    2c3a:	7c c0       	rjmp	.+248    	; 0x2d34 <__divsf3+0x14a>
    2c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c3e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c40:	89 27       	eor	r24, r25
    2c42:	8a 87       	std	Y+10, r24	; 0x0a
    2c44:	24 30       	cpi	r18, 0x04	; 4
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <__divsf3+0x62>
    2c48:	22 30       	cpi	r18, 0x02	; 2
    2c4a:	31 f4       	brne	.+12     	; 0x2c58 <__divsf3+0x6e>
    2c4c:	23 17       	cp	r18, r19
    2c4e:	09 f0       	breq	.+2      	; 0x2c52 <__divsf3+0x68>
    2c50:	6e c0       	rjmp	.+220    	; 0x2d2e <__divsf3+0x144>
    2c52:	60 e6       	ldi	r22, 0x60	; 96
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	6e c0       	rjmp	.+220    	; 0x2d34 <__divsf3+0x14a>
    2c58:	34 30       	cpi	r19, 0x04	; 4
    2c5a:	39 f4       	brne	.+14     	; 0x2c6a <__divsf3+0x80>
    2c5c:	1d 86       	std	Y+13, r1	; 0x0d
    2c5e:	1e 86       	std	Y+14, r1	; 0x0e
    2c60:	1f 86       	std	Y+15, r1	; 0x0f
    2c62:	18 8a       	std	Y+16, r1	; 0x10
    2c64:	1c 86       	std	Y+12, r1	; 0x0c
    2c66:	1b 86       	std	Y+11, r1	; 0x0b
    2c68:	04 c0       	rjmp	.+8      	; 0x2c72 <__divsf3+0x88>
    2c6a:	32 30       	cpi	r19, 0x02	; 2
    2c6c:	21 f4       	brne	.+8      	; 0x2c76 <__divsf3+0x8c>
    2c6e:	84 e0       	ldi	r24, 0x04	; 4
    2c70:	89 87       	std	Y+9, r24	; 0x09
    2c72:	b7 01       	movw	r22, r14
    2c74:	5f c0       	rjmp	.+190    	; 0x2d34 <__divsf3+0x14a>
    2c76:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c78:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7e:	28 1b       	sub	r18, r24
    2c80:	39 0b       	sbc	r19, r25
    2c82:	3c 87       	std	Y+12, r19	; 0x0c
    2c84:	2b 87       	std	Y+11, r18	; 0x0b
    2c86:	ed 84       	ldd	r14, Y+13	; 0x0d
    2c88:	fe 84       	ldd	r15, Y+14	; 0x0e
    2c8a:	0f 85       	ldd	r16, Y+15	; 0x0f
    2c8c:	18 89       	ldd	r17, Y+16	; 0x10
    2c8e:	ad 88       	ldd	r10, Y+21	; 0x15
    2c90:	be 88       	ldd	r11, Y+22	; 0x16
    2c92:	cf 88       	ldd	r12, Y+23	; 0x17
    2c94:	d8 8c       	ldd	r13, Y+24	; 0x18
    2c96:	ea 14       	cp	r14, r10
    2c98:	fb 04       	cpc	r15, r11
    2c9a:	0c 05       	cpc	r16, r12
    2c9c:	1d 05       	cpc	r17, r13
    2c9e:	40 f4       	brcc	.+16     	; 0x2cb0 <__divsf3+0xc6>
    2ca0:	ee 0c       	add	r14, r14
    2ca2:	ff 1c       	adc	r15, r15
    2ca4:	00 1f       	adc	r16, r16
    2ca6:	11 1f       	adc	r17, r17
    2ca8:	21 50       	subi	r18, 0x01	; 1
    2caa:	30 40       	sbci	r19, 0x00	; 0
    2cac:	3c 87       	std	Y+12, r19	; 0x0c
    2cae:	2b 87       	std	Y+11, r18	; 0x0b
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	a0 e0       	ldi	r26, 0x00	; 0
    2cbe:	b0 e4       	ldi	r27, 0x40	; 64
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	ea 14       	cp	r14, r10
    2cc6:	fb 04       	cpc	r15, r11
    2cc8:	0c 05       	cpc	r16, r12
    2cca:	1d 05       	cpc	r17, r13
    2ccc:	40 f0       	brcs	.+16     	; 0x2cde <__divsf3+0xf4>
    2cce:	28 2b       	or	r18, r24
    2cd0:	39 2b       	or	r19, r25
    2cd2:	4a 2b       	or	r20, r26
    2cd4:	5b 2b       	or	r21, r27
    2cd6:	ea 18       	sub	r14, r10
    2cd8:	fb 08       	sbc	r15, r11
    2cda:	0c 09       	sbc	r16, r12
    2cdc:	1d 09       	sbc	r17, r13
    2cde:	b6 95       	lsr	r27
    2ce0:	a7 95       	ror	r26
    2ce2:	97 95       	ror	r25
    2ce4:	87 95       	ror	r24
    2ce6:	ee 0c       	add	r14, r14
    2ce8:	ff 1c       	adc	r15, r15
    2cea:	00 1f       	adc	r16, r16
    2cec:	11 1f       	adc	r17, r17
    2cee:	6f 5f       	subi	r22, 0xFF	; 255
    2cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf2:	6f 31       	cpi	r22, 0x1F	; 31
    2cf4:	71 05       	cpc	r23, r1
    2cf6:	31 f7       	brne	.-52     	; 0x2cc4 <__divsf3+0xda>
    2cf8:	da 01       	movw	r26, r20
    2cfa:	c9 01       	movw	r24, r18
    2cfc:	8f 77       	andi	r24, 0x7F	; 127
    2cfe:	90 70       	andi	r25, 0x00	; 0
    2d00:	a0 70       	andi	r26, 0x00	; 0
    2d02:	b0 70       	andi	r27, 0x00	; 0
    2d04:	80 34       	cpi	r24, 0x40	; 64
    2d06:	91 05       	cpc	r25, r1
    2d08:	a1 05       	cpc	r26, r1
    2d0a:	b1 05       	cpc	r27, r1
    2d0c:	61 f4       	brne	.+24     	; 0x2d26 <__divsf3+0x13c>
    2d0e:	27 fd       	sbrc	r18, 7
    2d10:	0a c0       	rjmp	.+20     	; 0x2d26 <__divsf3+0x13c>
    2d12:	e1 14       	cp	r14, r1
    2d14:	f1 04       	cpc	r15, r1
    2d16:	01 05       	cpc	r16, r1
    2d18:	11 05       	cpc	r17, r1
    2d1a:	29 f0       	breq	.+10     	; 0x2d26 <__divsf3+0x13c>
    2d1c:	20 5c       	subi	r18, 0xC0	; 192
    2d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d20:	4f 4f       	sbci	r20, 0xFF	; 255
    2d22:	5f 4f       	sbci	r21, 0xFF	; 255
    2d24:	20 78       	andi	r18, 0x80	; 128
    2d26:	2d 87       	std	Y+13, r18	; 0x0d
    2d28:	3e 87       	std	Y+14, r19	; 0x0e
    2d2a:	4f 87       	std	Y+15, r20	; 0x0f
    2d2c:	58 8b       	std	Y+16, r21	; 0x10
    2d2e:	be 01       	movw	r22, r28
    2d30:	67 5f       	subi	r22, 0xF7	; 247
    2d32:	7f 4f       	sbci	r23, 0xFF	; 255
    2d34:	cb 01       	movw	r24, r22
    2d36:	0e 94 2a 19 	call	0x3254	; 0x3254 <__pack_f>
    2d3a:	68 96       	adiw	r28, 0x18	; 24
    2d3c:	ea e0       	ldi	r30, 0x0A	; 10
    2d3e:	0c 94 13 34 	jmp	0x6826	; 0x6826 <__epilogue_restores__+0x10>

00002d42 <__gtsf2>:
    2d42:	a8 e1       	ldi	r26, 0x18	; 24
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e7 ea       	ldi	r30, 0xA7	; 167
    2d48:	f6 e1       	ldi	r31, 0x16	; 22
    2d4a:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__prologue_saves__+0x18>
    2d4e:	69 83       	std	Y+1, r22	; 0x01
    2d50:	7a 83       	std	Y+2, r23	; 0x02
    2d52:	8b 83       	std	Y+3, r24	; 0x03
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	2d 83       	std	Y+5, r18	; 0x05
    2d58:	3e 83       	std	Y+6, r19	; 0x06
    2d5a:	4f 83       	std	Y+7, r20	; 0x07
    2d5c:	58 87       	std	Y+8, r21	; 0x08
    2d5e:	89 e0       	ldi	r24, 0x09	; 9
    2d60:	e8 2e       	mov	r14, r24
    2d62:	f1 2c       	mov	r15, r1
    2d64:	ec 0e       	add	r14, r28
    2d66:	fd 1e       	adc	r15, r29
    2d68:	ce 01       	movw	r24, r28
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	b7 01       	movw	r22, r14
    2d6e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2d72:	8e 01       	movw	r16, r28
    2d74:	0f 5e       	subi	r16, 0xEF	; 239
    2d76:	1f 4f       	sbci	r17, 0xFF	; 255
    2d78:	ce 01       	movw	r24, r28
    2d7a:	05 96       	adiw	r24, 0x05	; 5
    2d7c:	b8 01       	movw	r22, r16
    2d7e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	82 30       	cpi	r24, 0x02	; 2
    2d86:	40 f0       	brcs	.+16     	; 0x2d98 <__gtsf2+0x56>
    2d88:	89 89       	ldd	r24, Y+17	; 0x11
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	28 f0       	brcs	.+10     	; 0x2d98 <__gtsf2+0x56>
    2d8e:	c7 01       	movw	r24, r14
    2d90:	b8 01       	movw	r22, r16
    2d92:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__fpcmp_parts_f>
    2d96:	01 c0       	rjmp	.+2      	; 0x2d9a <__gtsf2+0x58>
    2d98:	8f ef       	ldi	r24, 0xFF	; 255
    2d9a:	68 96       	adiw	r28, 0x18	; 24
    2d9c:	e6 e0       	ldi	r30, 0x06	; 6
    2d9e:	0c 94 17 34 	jmp	0x682e	; 0x682e <__epilogue_restores__+0x18>

00002da2 <__gesf2>:
    2da2:	a8 e1       	ldi	r26, 0x18	; 24
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e7 ed       	ldi	r30, 0xD7	; 215
    2da8:	f6 e1       	ldi	r31, 0x16	; 22
    2daa:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__prologue_saves__+0x18>
    2dae:	69 83       	std	Y+1, r22	; 0x01
    2db0:	7a 83       	std	Y+2, r23	; 0x02
    2db2:	8b 83       	std	Y+3, r24	; 0x03
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	2d 83       	std	Y+5, r18	; 0x05
    2db8:	3e 83       	std	Y+6, r19	; 0x06
    2dba:	4f 83       	std	Y+7, r20	; 0x07
    2dbc:	58 87       	std	Y+8, r21	; 0x08
    2dbe:	89 e0       	ldi	r24, 0x09	; 9
    2dc0:	e8 2e       	mov	r14, r24
    2dc2:	f1 2c       	mov	r15, r1
    2dc4:	ec 0e       	add	r14, r28
    2dc6:	fd 1e       	adc	r15, r29
    2dc8:	ce 01       	movw	r24, r28
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	b7 01       	movw	r22, r14
    2dce:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2dd2:	8e 01       	movw	r16, r28
    2dd4:	0f 5e       	subi	r16, 0xEF	; 239
    2dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd8:	ce 01       	movw	r24, r28
    2dda:	05 96       	adiw	r24, 0x05	; 5
    2ddc:	b8 01       	movw	r22, r16
    2dde:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2de2:	89 85       	ldd	r24, Y+9	; 0x09
    2de4:	82 30       	cpi	r24, 0x02	; 2
    2de6:	40 f0       	brcs	.+16     	; 0x2df8 <__gesf2+0x56>
    2de8:	89 89       	ldd	r24, Y+17	; 0x11
    2dea:	82 30       	cpi	r24, 0x02	; 2
    2dec:	28 f0       	brcs	.+10     	; 0x2df8 <__gesf2+0x56>
    2dee:	c7 01       	movw	r24, r14
    2df0:	b8 01       	movw	r22, r16
    2df2:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__fpcmp_parts_f>
    2df6:	01 c0       	rjmp	.+2      	; 0x2dfa <__gesf2+0x58>
    2df8:	8f ef       	ldi	r24, 0xFF	; 255
    2dfa:	68 96       	adiw	r28, 0x18	; 24
    2dfc:	e6 e0       	ldi	r30, 0x06	; 6
    2dfe:	0c 94 17 34 	jmp	0x682e	; 0x682e <__epilogue_restores__+0x18>

00002e02 <__ltsf2>:
    2e02:	a8 e1       	ldi	r26, 0x18	; 24
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e7 e0       	ldi	r30, 0x07	; 7
    2e08:	f7 e1       	ldi	r31, 0x17	; 23
    2e0a:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__prologue_saves__+0x18>
    2e0e:	69 83       	std	Y+1, r22	; 0x01
    2e10:	7a 83       	std	Y+2, r23	; 0x02
    2e12:	8b 83       	std	Y+3, r24	; 0x03
    2e14:	9c 83       	std	Y+4, r25	; 0x04
    2e16:	2d 83       	std	Y+5, r18	; 0x05
    2e18:	3e 83       	std	Y+6, r19	; 0x06
    2e1a:	4f 83       	std	Y+7, r20	; 0x07
    2e1c:	58 87       	std	Y+8, r21	; 0x08
    2e1e:	89 e0       	ldi	r24, 0x09	; 9
    2e20:	e8 2e       	mov	r14, r24
    2e22:	f1 2c       	mov	r15, r1
    2e24:	ec 0e       	add	r14, r28
    2e26:	fd 1e       	adc	r15, r29
    2e28:	ce 01       	movw	r24, r28
    2e2a:	01 96       	adiw	r24, 0x01	; 1
    2e2c:	b7 01       	movw	r22, r14
    2e2e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2e32:	8e 01       	movw	r16, r28
    2e34:	0f 5e       	subi	r16, 0xEF	; 239
    2e36:	1f 4f       	sbci	r17, 0xFF	; 255
    2e38:	ce 01       	movw	r24, r28
    2e3a:	05 96       	adiw	r24, 0x05	; 5
    2e3c:	b8 01       	movw	r22, r16
    2e3e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2e42:	89 85       	ldd	r24, Y+9	; 0x09
    2e44:	82 30       	cpi	r24, 0x02	; 2
    2e46:	40 f0       	brcs	.+16     	; 0x2e58 <__ltsf2+0x56>
    2e48:	89 89       	ldd	r24, Y+17	; 0x11
    2e4a:	82 30       	cpi	r24, 0x02	; 2
    2e4c:	28 f0       	brcs	.+10     	; 0x2e58 <__ltsf2+0x56>
    2e4e:	c7 01       	movw	r24, r14
    2e50:	b8 01       	movw	r22, r16
    2e52:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__fpcmp_parts_f>
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <__ltsf2+0x58>
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	68 96       	adiw	r28, 0x18	; 24
    2e5c:	e6 e0       	ldi	r30, 0x06	; 6
    2e5e:	0c 94 17 34 	jmp	0x682e	; 0x682e <__epilogue_restores__+0x18>

00002e62 <__floatsisf>:
    2e62:	a8 e0       	ldi	r26, 0x08	; 8
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e7 e3       	ldi	r30, 0x37	; 55
    2e68:	f7 e1       	ldi	r31, 0x17	; 23
    2e6a:	0c 94 f8 33 	jmp	0x67f0	; 0x67f0 <__prologue_saves__+0x12>
    2e6e:	9b 01       	movw	r18, r22
    2e70:	ac 01       	movw	r20, r24
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	da 01       	movw	r26, r20
    2e78:	c9 01       	movw	r24, r18
    2e7a:	88 27       	eor	r24, r24
    2e7c:	b7 fd       	sbrc	r27, 7
    2e7e:	83 95       	inc	r24
    2e80:	99 27       	eor	r25, r25
    2e82:	aa 27       	eor	r26, r26
    2e84:	bb 27       	eor	r27, r27
    2e86:	b8 2e       	mov	r11, r24
    2e88:	21 15       	cp	r18, r1
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	41 05       	cpc	r20, r1
    2e8e:	51 05       	cpc	r21, r1
    2e90:	19 f4       	brne	.+6      	; 0x2e98 <__floatsisf+0x36>
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	3a c0       	rjmp	.+116    	; 0x2f0c <__floatsisf+0xaa>
    2e98:	88 23       	and	r24, r24
    2e9a:	a9 f0       	breq	.+42     	; 0x2ec6 <__floatsisf+0x64>
    2e9c:	20 30       	cpi	r18, 0x00	; 0
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	38 07       	cpc	r19, r24
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	48 07       	cpc	r20, r24
    2ea6:	80 e8       	ldi	r24, 0x80	; 128
    2ea8:	58 07       	cpc	r21, r24
    2eaa:	29 f4       	brne	.+10     	; 0x2eb6 <__floatsisf+0x54>
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	9f ec       	ldi	r25, 0xCF	; 207
    2eb4:	30 c0       	rjmp	.+96     	; 0x2f16 <__floatsisf+0xb4>
    2eb6:	ee 24       	eor	r14, r14
    2eb8:	ff 24       	eor	r15, r15
    2eba:	87 01       	movw	r16, r14
    2ebc:	e2 1a       	sub	r14, r18
    2ebe:	f3 0a       	sbc	r15, r19
    2ec0:	04 0b       	sbc	r16, r20
    2ec2:	15 0b       	sbc	r17, r21
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <__floatsisf+0x68>
    2ec6:	79 01       	movw	r14, r18
    2ec8:	8a 01       	movw	r16, r20
    2eca:	8e e1       	ldi	r24, 0x1E	; 30
    2ecc:	c8 2e       	mov	r12, r24
    2ece:	d1 2c       	mov	r13, r1
    2ed0:	dc 82       	std	Y+4, r13	; 0x04
    2ed2:	cb 82       	std	Y+3, r12	; 0x03
    2ed4:	ed 82       	std	Y+5, r14	; 0x05
    2ed6:	fe 82       	std	Y+6, r15	; 0x06
    2ed8:	0f 83       	std	Y+7, r16	; 0x07
    2eda:	18 87       	std	Y+8, r17	; 0x08
    2edc:	c8 01       	movw	r24, r16
    2ede:	b7 01       	movw	r22, r14
    2ee0:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__clzsi2>
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	18 16       	cp	r1, r24
    2ee8:	19 06       	cpc	r1, r25
    2eea:	84 f4       	brge	.+32     	; 0x2f0c <__floatsisf+0xaa>
    2eec:	08 2e       	mov	r0, r24
    2eee:	04 c0       	rjmp	.+8      	; 0x2ef8 <__floatsisf+0x96>
    2ef0:	ee 0c       	add	r14, r14
    2ef2:	ff 1c       	adc	r15, r15
    2ef4:	00 1f       	adc	r16, r16
    2ef6:	11 1f       	adc	r17, r17
    2ef8:	0a 94       	dec	r0
    2efa:	d2 f7       	brpl	.-12     	; 0x2ef0 <__floatsisf+0x8e>
    2efc:	ed 82       	std	Y+5, r14	; 0x05
    2efe:	fe 82       	std	Y+6, r15	; 0x06
    2f00:	0f 83       	std	Y+7, r16	; 0x07
    2f02:	18 87       	std	Y+8, r17	; 0x08
    2f04:	c8 1a       	sub	r12, r24
    2f06:	d9 0a       	sbc	r13, r25
    2f08:	dc 82       	std	Y+4, r13	; 0x04
    2f0a:	cb 82       	std	Y+3, r12	; 0x03
    2f0c:	ba 82       	std	Y+2, r11	; 0x02
    2f0e:	ce 01       	movw	r24, r28
    2f10:	01 96       	adiw	r24, 0x01	; 1
    2f12:	0e 94 2a 19 	call	0x3254	; 0x3254 <__pack_f>
    2f16:	28 96       	adiw	r28, 0x08	; 8
    2f18:	e9 e0       	ldi	r30, 0x09	; 9
    2f1a:	0c 94 14 34 	jmp	0x6828	; 0x6828 <__epilogue_restores__+0x12>

00002f1e <__fixsfsi>:
    2f1e:	ac e0       	ldi	r26, 0x0C	; 12
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e5 e9       	ldi	r30, 0x95	; 149
    2f24:	f7 e1       	ldi	r31, 0x17	; 23
    2f26:	0c 94 ff 33 	jmp	0x67fe	; 0x67fe <__prologue_saves__+0x20>
    2f2a:	69 83       	std	Y+1, r22	; 0x01
    2f2c:	7a 83       	std	Y+2, r23	; 0x02
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	ce 01       	movw	r24, r28
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	be 01       	movw	r22, r28
    2f38:	6b 5f       	subi	r22, 0xFB	; 251
    2f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__unpack_f>
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	82 30       	cpi	r24, 0x02	; 2
    2f44:	61 f1       	breq	.+88     	; 0x2f9e <__fixsfsi+0x80>
    2f46:	82 30       	cpi	r24, 0x02	; 2
    2f48:	50 f1       	brcs	.+84     	; 0x2f9e <__fixsfsi+0x80>
    2f4a:	84 30       	cpi	r24, 0x04	; 4
    2f4c:	21 f4       	brne	.+8      	; 0x2f56 <__fixsfsi+0x38>
    2f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f50:	88 23       	and	r24, r24
    2f52:	51 f1       	breq	.+84     	; 0x2fa8 <__fixsfsi+0x8a>
    2f54:	2e c0       	rjmp	.+92     	; 0x2fb2 <__fixsfsi+0x94>
    2f56:	2f 81       	ldd	r18, Y+7	; 0x07
    2f58:	38 85       	ldd	r19, Y+8	; 0x08
    2f5a:	37 fd       	sbrc	r19, 7
    2f5c:	20 c0       	rjmp	.+64     	; 0x2f9e <__fixsfsi+0x80>
    2f5e:	6e 81       	ldd	r22, Y+6	; 0x06
    2f60:	2f 31       	cpi	r18, 0x1F	; 31
    2f62:	31 05       	cpc	r19, r1
    2f64:	1c f0       	brlt	.+6      	; 0x2f6c <__fixsfsi+0x4e>
    2f66:	66 23       	and	r22, r22
    2f68:	f9 f0       	breq	.+62     	; 0x2fa8 <__fixsfsi+0x8a>
    2f6a:	23 c0       	rjmp	.+70     	; 0x2fb2 <__fixsfsi+0x94>
    2f6c:	8e e1       	ldi	r24, 0x1E	; 30
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	82 1b       	sub	r24, r18
    2f72:	93 0b       	sbc	r25, r19
    2f74:	29 85       	ldd	r18, Y+9	; 0x09
    2f76:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f78:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f7a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f7c:	04 c0       	rjmp	.+8      	; 0x2f86 <__fixsfsi+0x68>
    2f7e:	56 95       	lsr	r21
    2f80:	47 95       	ror	r20
    2f82:	37 95       	ror	r19
    2f84:	27 95       	ror	r18
    2f86:	8a 95       	dec	r24
    2f88:	d2 f7       	brpl	.-12     	; 0x2f7e <__fixsfsi+0x60>
    2f8a:	66 23       	and	r22, r22
    2f8c:	b1 f0       	breq	.+44     	; 0x2fba <__fixsfsi+0x9c>
    2f8e:	50 95       	com	r21
    2f90:	40 95       	com	r20
    2f92:	30 95       	com	r19
    2f94:	21 95       	neg	r18
    2f96:	3f 4f       	sbci	r19, 0xFF	; 255
    2f98:	4f 4f       	sbci	r20, 0xFF	; 255
    2f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f9c:	0e c0       	rjmp	.+28     	; 0x2fba <__fixsfsi+0x9c>
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	09 c0       	rjmp	.+18     	; 0x2fba <__fixsfsi+0x9c>
    2fa8:	2f ef       	ldi	r18, 0xFF	; 255
    2faa:	3f ef       	ldi	r19, 0xFF	; 255
    2fac:	4f ef       	ldi	r20, 0xFF	; 255
    2fae:	5f e7       	ldi	r21, 0x7F	; 127
    2fb0:	04 c0       	rjmp	.+8      	; 0x2fba <__fixsfsi+0x9c>
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e0       	ldi	r20, 0x00	; 0
    2fb8:	50 e8       	ldi	r21, 0x80	; 128
    2fba:	b9 01       	movw	r22, r18
    2fbc:	ca 01       	movw	r24, r20
    2fbe:	2c 96       	adiw	r28, 0x0c	; 12
    2fc0:	e2 e0       	ldi	r30, 0x02	; 2
    2fc2:	0c 94 1b 34 	jmp	0x6836	; 0x6836 <__epilogue_restores__+0x20>

00002fc6 <__floatunsisf>:
    2fc6:	a8 e0       	ldi	r26, 0x08	; 8
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e9 ee       	ldi	r30, 0xE9	; 233
    2fcc:	f7 e1       	ldi	r31, 0x17	; 23
    2fce:	0c 94 f7 33 	jmp	0x67ee	; 0x67ee <__prologue_saves__+0x10>
    2fd2:	7b 01       	movw	r14, r22
    2fd4:	8c 01       	movw	r16, r24
    2fd6:	61 15       	cp	r22, r1
    2fd8:	71 05       	cpc	r23, r1
    2fda:	81 05       	cpc	r24, r1
    2fdc:	91 05       	cpc	r25, r1
    2fde:	19 f4       	brne	.+6      	; 0x2fe6 <__floatunsisf+0x20>
    2fe0:	82 e0       	ldi	r24, 0x02	; 2
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	60 c0       	rjmp	.+192    	; 0x30a6 <__floatunsisf+0xe0>
    2fe6:	83 e0       	ldi	r24, 0x03	; 3
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	8e e1       	ldi	r24, 0x1E	; 30
    2fec:	c8 2e       	mov	r12, r24
    2fee:	d1 2c       	mov	r13, r1
    2ff0:	dc 82       	std	Y+4, r13	; 0x04
    2ff2:	cb 82       	std	Y+3, r12	; 0x03
    2ff4:	ed 82       	std	Y+5, r14	; 0x05
    2ff6:	fe 82       	std	Y+6, r15	; 0x06
    2ff8:	0f 83       	std	Y+7, r16	; 0x07
    2ffa:	18 87       	std	Y+8, r17	; 0x08
    2ffc:	c8 01       	movw	r24, r16
    2ffe:	b7 01       	movw	r22, r14
    3000:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__clzsi2>
    3004:	fc 01       	movw	r30, r24
    3006:	31 97       	sbiw	r30, 0x01	; 1
    3008:	f7 ff       	sbrs	r31, 7
    300a:	3b c0       	rjmp	.+118    	; 0x3082 <__floatunsisf+0xbc>
    300c:	22 27       	eor	r18, r18
    300e:	33 27       	eor	r19, r19
    3010:	2e 1b       	sub	r18, r30
    3012:	3f 0b       	sbc	r19, r31
    3014:	57 01       	movw	r10, r14
    3016:	68 01       	movw	r12, r16
    3018:	02 2e       	mov	r0, r18
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <__floatunsisf+0x5e>
    301c:	d6 94       	lsr	r13
    301e:	c7 94       	ror	r12
    3020:	b7 94       	ror	r11
    3022:	a7 94       	ror	r10
    3024:	0a 94       	dec	r0
    3026:	d2 f7       	brpl	.-12     	; 0x301c <__floatunsisf+0x56>
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	50 e0       	ldi	r21, 0x00	; 0
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	a0 e0       	ldi	r26, 0x00	; 0
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <__floatunsisf+0x7c>
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	aa 1f       	adc	r26, r26
    3040:	bb 1f       	adc	r27, r27
    3042:	2a 95       	dec	r18
    3044:	d2 f7       	brpl	.-12     	; 0x303a <__floatunsisf+0x74>
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	a1 09       	sbc	r26, r1
    304a:	b1 09       	sbc	r27, r1
    304c:	8e 21       	and	r24, r14
    304e:	9f 21       	and	r25, r15
    3050:	a0 23       	and	r26, r16
    3052:	b1 23       	and	r27, r17
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	a1 05       	cpc	r26, r1
    3058:	b1 05       	cpc	r27, r1
    305a:	21 f0       	breq	.+8      	; 0x3064 <__floatunsisf+0x9e>
    305c:	41 e0       	ldi	r20, 0x01	; 1
    305e:	50 e0       	ldi	r21, 0x00	; 0
    3060:	60 e0       	ldi	r22, 0x00	; 0
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	4a 29       	or	r20, r10
    3066:	5b 29       	or	r21, r11
    3068:	6c 29       	or	r22, r12
    306a:	7d 29       	or	r23, r13
    306c:	4d 83       	std	Y+5, r20	; 0x05
    306e:	5e 83       	std	Y+6, r21	; 0x06
    3070:	6f 83       	std	Y+7, r22	; 0x07
    3072:	78 87       	std	Y+8, r23	; 0x08
    3074:	8e e1       	ldi	r24, 0x1E	; 30
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	8e 1b       	sub	r24, r30
    307a:	9f 0b       	sbc	r25, r31
    307c:	9c 83       	std	Y+4, r25	; 0x04
    307e:	8b 83       	std	Y+3, r24	; 0x03
    3080:	12 c0       	rjmp	.+36     	; 0x30a6 <__floatunsisf+0xe0>
    3082:	30 97       	sbiw	r30, 0x00	; 0
    3084:	81 f0       	breq	.+32     	; 0x30a6 <__floatunsisf+0xe0>
    3086:	0e 2e       	mov	r0, r30
    3088:	04 c0       	rjmp	.+8      	; 0x3092 <__floatunsisf+0xcc>
    308a:	ee 0c       	add	r14, r14
    308c:	ff 1c       	adc	r15, r15
    308e:	00 1f       	adc	r16, r16
    3090:	11 1f       	adc	r17, r17
    3092:	0a 94       	dec	r0
    3094:	d2 f7       	brpl	.-12     	; 0x308a <__floatunsisf+0xc4>
    3096:	ed 82       	std	Y+5, r14	; 0x05
    3098:	fe 82       	std	Y+6, r15	; 0x06
    309a:	0f 83       	std	Y+7, r16	; 0x07
    309c:	18 87       	std	Y+8, r17	; 0x08
    309e:	ce 1a       	sub	r12, r30
    30a0:	df 0a       	sbc	r13, r31
    30a2:	dc 82       	std	Y+4, r13	; 0x04
    30a4:	cb 82       	std	Y+3, r12	; 0x03
    30a6:	1a 82       	std	Y+2, r1	; 0x02
    30a8:	ce 01       	movw	r24, r28
    30aa:	01 96       	adiw	r24, 0x01	; 1
    30ac:	0e 94 2a 19 	call	0x3254	; 0x3254 <__pack_f>
    30b0:	28 96       	adiw	r28, 0x08	; 8
    30b2:	ea e0       	ldi	r30, 0x0A	; 10
    30b4:	0c 94 13 34 	jmp	0x6826	; 0x6826 <__epilogue_restores__+0x10>

000030b8 <__lshrdi3>:
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	0f 93       	push	r16
    30be:	df 93       	push	r29
    30c0:	cf 93       	push	r28
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	60 97       	sbiw	r28, 0x10	; 16
    30c8:	0f b6       	in	r0, 0x3f	; 63
    30ca:	f8 94       	cli
    30cc:	de bf       	out	0x3e, r29	; 62
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	a8 2f       	mov	r26, r24
    30d4:	00 23       	and	r16, r16
    30d6:	09 f4       	brne	.+2      	; 0x30da <__lshrdi3+0x22>
    30d8:	61 c0       	rjmp	.+194    	; 0x319c <__lshrdi3+0xe4>
    30da:	7e 01       	movw	r14, r28
    30dc:	08 94       	sec
    30de:	e1 1c       	adc	r14, r1
    30e0:	f1 1c       	adc	r15, r1
    30e2:	88 e0       	ldi	r24, 0x08	; 8
    30e4:	f7 01       	movw	r30, r14
    30e6:	11 92       	st	Z+, r1
    30e8:	8a 95       	dec	r24
    30ea:	e9 f7       	brne	.-6      	; 0x30e6 <__lshrdi3+0x2e>
    30ec:	29 83       	std	Y+1, r18	; 0x01
    30ee:	3a 83       	std	Y+2, r19	; 0x02
    30f0:	4b 83       	std	Y+3, r20	; 0x03
    30f2:	5c 83       	std	Y+4, r21	; 0x04
    30f4:	6d 83       	std	Y+5, r22	; 0x05
    30f6:	7e 83       	std	Y+6, r23	; 0x06
    30f8:	af 83       	std	Y+7, r26	; 0x07
    30fa:	98 87       	std	Y+8, r25	; 0x08
    30fc:	80 e2       	ldi	r24, 0x20	; 32
    30fe:	80 1b       	sub	r24, r16
    3100:	e8 2f       	mov	r30, r24
    3102:	ff 27       	eor	r31, r31
    3104:	e7 fd       	sbrc	r30, 7
    3106:	f0 95       	com	r31
    3108:	4d 81       	ldd	r20, Y+5	; 0x05
    310a:	5e 81       	ldd	r21, Y+6	; 0x06
    310c:	6f 81       	ldd	r22, Y+7	; 0x07
    310e:	78 85       	ldd	r23, Y+8	; 0x08
    3110:	18 16       	cp	r1, r24
    3112:	84 f0       	brlt	.+32     	; 0x3134 <__lshrdi3+0x7c>
    3114:	1d 86       	std	Y+13, r1	; 0x0d
    3116:	1e 86       	std	Y+14, r1	; 0x0e
    3118:	1f 86       	std	Y+15, r1	; 0x0f
    311a:	18 8a       	std	Y+16, r1	; 0x10
    311c:	88 27       	eor	r24, r24
    311e:	99 27       	eor	r25, r25
    3120:	8e 1b       	sub	r24, r30
    3122:	9f 0b       	sbc	r25, r31
    3124:	04 c0       	rjmp	.+8      	; 0x312e <__lshrdi3+0x76>
    3126:	76 95       	lsr	r23
    3128:	67 95       	ror	r22
    312a:	57 95       	ror	r21
    312c:	47 95       	ror	r20
    312e:	8a 95       	dec	r24
    3130:	d2 f7       	brpl	.-12     	; 0x3126 <__lshrdi3+0x6e>
    3132:	28 c0       	rjmp	.+80     	; 0x3184 <__lshrdi3+0xcc>
    3134:	20 2f       	mov	r18, r16
    3136:	33 27       	eor	r19, r19
    3138:	27 fd       	sbrc	r18, 7
    313a:	30 95       	com	r19
    313c:	db 01       	movw	r26, r22
    313e:	ca 01       	movw	r24, r20
    3140:	02 2e       	mov	r0, r18
    3142:	04 c0       	rjmp	.+8      	; 0x314c <__lshrdi3+0x94>
    3144:	b6 95       	lsr	r27
    3146:	a7 95       	ror	r26
    3148:	97 95       	ror	r25
    314a:	87 95       	ror	r24
    314c:	0a 94       	dec	r0
    314e:	d2 f7       	brpl	.-12     	; 0x3144 <__lshrdi3+0x8c>
    3150:	8d 87       	std	Y+13, r24	; 0x0d
    3152:	9e 87       	std	Y+14, r25	; 0x0e
    3154:	af 87       	std	Y+15, r26	; 0x0f
    3156:	b8 8b       	std	Y+16, r27	; 0x10
    3158:	04 c0       	rjmp	.+8      	; 0x3162 <__lshrdi3+0xaa>
    315a:	44 0f       	add	r20, r20
    315c:	55 1f       	adc	r21, r21
    315e:	66 1f       	adc	r22, r22
    3160:	77 1f       	adc	r23, r23
    3162:	ea 95       	dec	r30
    3164:	d2 f7       	brpl	.-12     	; 0x315a <__lshrdi3+0xa2>
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	ab 81       	ldd	r26, Y+3	; 0x03
    316c:	bc 81       	ldd	r27, Y+4	; 0x04
    316e:	04 c0       	rjmp	.+8      	; 0x3178 <__lshrdi3+0xc0>
    3170:	b6 95       	lsr	r27
    3172:	a7 95       	ror	r26
    3174:	97 95       	ror	r25
    3176:	87 95       	ror	r24
    3178:	2a 95       	dec	r18
    317a:	d2 f7       	brpl	.-12     	; 0x3170 <__lshrdi3+0xb8>
    317c:	48 2b       	or	r20, r24
    317e:	59 2b       	or	r21, r25
    3180:	6a 2b       	or	r22, r26
    3182:	7b 2b       	or	r23, r27
    3184:	49 87       	std	Y+9, r20	; 0x09
    3186:	5a 87       	std	Y+10, r21	; 0x0a
    3188:	6b 87       	std	Y+11, r22	; 0x0b
    318a:	7c 87       	std	Y+12, r23	; 0x0c
    318c:	29 85       	ldd	r18, Y+9	; 0x09
    318e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3190:	4b 85       	ldd	r20, Y+11	; 0x0b
    3192:	5c 85       	ldd	r21, Y+12	; 0x0c
    3194:	6d 85       	ldd	r22, Y+13	; 0x0d
    3196:	7e 85       	ldd	r23, Y+14	; 0x0e
    3198:	af 85       	ldd	r26, Y+15	; 0x0f
    319a:	98 89       	ldd	r25, Y+16	; 0x10
    319c:	8a 2f       	mov	r24, r26
    319e:	60 96       	adiw	r28, 0x10	; 16
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	0f 91       	pop	r16
    31b0:	ff 90       	pop	r15
    31b2:	ef 90       	pop	r14
    31b4:	08 95       	ret

000031b6 <__clzsi2>:
    31b6:	ef 92       	push	r14
    31b8:	ff 92       	push	r15
    31ba:	0f 93       	push	r16
    31bc:	1f 93       	push	r17
    31be:	7b 01       	movw	r14, r22
    31c0:	8c 01       	movw	r16, r24
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	e8 16       	cp	r14, r24
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	f8 06       	cpc	r15, r24
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	08 07       	cpc	r16, r24
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	18 07       	cpc	r17, r24
    31d2:	88 f4       	brcc	.+34     	; 0x31f6 <__clzsi2+0x40>
    31d4:	8f ef       	ldi	r24, 0xFF	; 255
    31d6:	e8 16       	cp	r14, r24
    31d8:	f1 04       	cpc	r15, r1
    31da:	01 05       	cpc	r16, r1
    31dc:	11 05       	cpc	r17, r1
    31de:	31 f0       	breq	.+12     	; 0x31ec <__clzsi2+0x36>
    31e0:	28 f0       	brcs	.+10     	; 0x31ec <__clzsi2+0x36>
    31e2:	88 e0       	ldi	r24, 0x08	; 8
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	a0 e0       	ldi	r26, 0x00	; 0
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	17 c0       	rjmp	.+46     	; 0x321a <__clzsi2+0x64>
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	a0 e0       	ldi	r26, 0x00	; 0
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	12 c0       	rjmp	.+36     	; 0x321a <__clzsi2+0x64>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	e8 16       	cp	r14, r24
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	f8 06       	cpc	r15, r24
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	08 07       	cpc	r16, r24
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	18 07       	cpc	r17, r24
    3206:	28 f0       	brcs	.+10     	; 0x3212 <__clzsi2+0x5c>
    3208:	88 e1       	ldi	r24, 0x18	; 24
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a0 e0       	ldi	r26, 0x00	; 0
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	04 c0       	rjmp	.+8      	; 0x321a <__clzsi2+0x64>
    3212:	80 e1       	ldi	r24, 0x10	; 16
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	a0 e0       	ldi	r26, 0x00	; 0
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	20 e2       	ldi	r18, 0x20	; 32
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e0       	ldi	r20, 0x00	; 0
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	28 1b       	sub	r18, r24
    3224:	39 0b       	sbc	r19, r25
    3226:	4a 0b       	sbc	r20, r26
    3228:	5b 0b       	sbc	r21, r27
    322a:	04 c0       	rjmp	.+8      	; 0x3234 <__clzsi2+0x7e>
    322c:	16 95       	lsr	r17
    322e:	07 95       	ror	r16
    3230:	f7 94       	ror	r15
    3232:	e7 94       	ror	r14
    3234:	8a 95       	dec	r24
    3236:	d2 f7       	brpl	.-12     	; 0x322c <__clzsi2+0x76>
    3238:	f7 01       	movw	r30, r14
    323a:	e8 59       	subi	r30, 0x98	; 152
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 81       	ld	r24, Z
    3240:	28 1b       	sub	r18, r24
    3242:	31 09       	sbc	r19, r1
    3244:	41 09       	sbc	r20, r1
    3246:	51 09       	sbc	r21, r1
    3248:	c9 01       	movw	r24, r18
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	ff 90       	pop	r15
    3250:	ef 90       	pop	r14
    3252:	08 95       	ret

00003254 <__pack_f>:
    3254:	df 92       	push	r13
    3256:	ef 92       	push	r14
    3258:	ff 92       	push	r15
    325a:	0f 93       	push	r16
    325c:	1f 93       	push	r17
    325e:	fc 01       	movw	r30, r24
    3260:	e4 80       	ldd	r14, Z+4	; 0x04
    3262:	f5 80       	ldd	r15, Z+5	; 0x05
    3264:	06 81       	ldd	r16, Z+6	; 0x06
    3266:	17 81       	ldd	r17, Z+7	; 0x07
    3268:	d1 80       	ldd	r13, Z+1	; 0x01
    326a:	80 81       	ld	r24, Z
    326c:	82 30       	cpi	r24, 0x02	; 2
    326e:	48 f4       	brcc	.+18     	; 0x3282 <__pack_f+0x2e>
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	a0 e1       	ldi	r26, 0x10	; 16
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	e8 2a       	or	r14, r24
    327a:	f9 2a       	or	r15, r25
    327c:	0a 2b       	or	r16, r26
    327e:	1b 2b       	or	r17, r27
    3280:	a5 c0       	rjmp	.+330    	; 0x33cc <__pack_f+0x178>
    3282:	84 30       	cpi	r24, 0x04	; 4
    3284:	09 f4       	brne	.+2      	; 0x3288 <__pack_f+0x34>
    3286:	9f c0       	rjmp	.+318    	; 0x33c6 <__pack_f+0x172>
    3288:	82 30       	cpi	r24, 0x02	; 2
    328a:	21 f4       	brne	.+8      	; 0x3294 <__pack_f+0x40>
    328c:	ee 24       	eor	r14, r14
    328e:	ff 24       	eor	r15, r15
    3290:	87 01       	movw	r16, r14
    3292:	05 c0       	rjmp	.+10     	; 0x329e <__pack_f+0x4a>
    3294:	e1 14       	cp	r14, r1
    3296:	f1 04       	cpc	r15, r1
    3298:	01 05       	cpc	r16, r1
    329a:	11 05       	cpc	r17, r1
    329c:	19 f4       	brne	.+6      	; 0x32a4 <__pack_f+0x50>
    329e:	e0 e0       	ldi	r30, 0x00	; 0
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	96 c0       	rjmp	.+300    	; 0x33d0 <__pack_f+0x17c>
    32a4:	62 81       	ldd	r22, Z+2	; 0x02
    32a6:	73 81       	ldd	r23, Z+3	; 0x03
    32a8:	9f ef       	ldi	r25, 0xFF	; 255
    32aa:	62 38       	cpi	r22, 0x82	; 130
    32ac:	79 07       	cpc	r23, r25
    32ae:	0c f0       	brlt	.+2      	; 0x32b2 <__pack_f+0x5e>
    32b0:	5b c0       	rjmp	.+182    	; 0x3368 <__pack_f+0x114>
    32b2:	22 e8       	ldi	r18, 0x82	; 130
    32b4:	3f ef       	ldi	r19, 0xFF	; 255
    32b6:	26 1b       	sub	r18, r22
    32b8:	37 0b       	sbc	r19, r23
    32ba:	2a 31       	cpi	r18, 0x1A	; 26
    32bc:	31 05       	cpc	r19, r1
    32be:	2c f0       	brlt	.+10     	; 0x32ca <__pack_f+0x76>
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	50 e0       	ldi	r21, 0x00	; 0
    32c8:	2a c0       	rjmp	.+84     	; 0x331e <__pack_f+0xca>
    32ca:	b8 01       	movw	r22, r16
    32cc:	a7 01       	movw	r20, r14
    32ce:	02 2e       	mov	r0, r18
    32d0:	04 c0       	rjmp	.+8      	; 0x32da <__pack_f+0x86>
    32d2:	76 95       	lsr	r23
    32d4:	67 95       	ror	r22
    32d6:	57 95       	ror	r21
    32d8:	47 95       	ror	r20
    32da:	0a 94       	dec	r0
    32dc:	d2 f7       	brpl	.-12     	; 0x32d2 <__pack_f+0x7e>
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	a0 e0       	ldi	r26, 0x00	; 0
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	04 c0       	rjmp	.+8      	; 0x32f0 <__pack_f+0x9c>
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	aa 1f       	adc	r26, r26
    32ee:	bb 1f       	adc	r27, r27
    32f0:	2a 95       	dec	r18
    32f2:	d2 f7       	brpl	.-12     	; 0x32e8 <__pack_f+0x94>
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	a1 09       	sbc	r26, r1
    32f8:	b1 09       	sbc	r27, r1
    32fa:	8e 21       	and	r24, r14
    32fc:	9f 21       	and	r25, r15
    32fe:	a0 23       	and	r26, r16
    3300:	b1 23       	and	r27, r17
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	a1 05       	cpc	r26, r1
    3306:	b1 05       	cpc	r27, r1
    3308:	21 f0       	breq	.+8      	; 0x3312 <__pack_f+0xbe>
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	a0 e0       	ldi	r26, 0x00	; 0
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	9a 01       	movw	r18, r20
    3314:	ab 01       	movw	r20, r22
    3316:	28 2b       	or	r18, r24
    3318:	39 2b       	or	r19, r25
    331a:	4a 2b       	or	r20, r26
    331c:	5b 2b       	or	r21, r27
    331e:	da 01       	movw	r26, r20
    3320:	c9 01       	movw	r24, r18
    3322:	8f 77       	andi	r24, 0x7F	; 127
    3324:	90 70       	andi	r25, 0x00	; 0
    3326:	a0 70       	andi	r26, 0x00	; 0
    3328:	b0 70       	andi	r27, 0x00	; 0
    332a:	80 34       	cpi	r24, 0x40	; 64
    332c:	91 05       	cpc	r25, r1
    332e:	a1 05       	cpc	r26, r1
    3330:	b1 05       	cpc	r27, r1
    3332:	39 f4       	brne	.+14     	; 0x3342 <__pack_f+0xee>
    3334:	27 ff       	sbrs	r18, 7
    3336:	09 c0       	rjmp	.+18     	; 0x334a <__pack_f+0xf6>
    3338:	20 5c       	subi	r18, 0xC0	; 192
    333a:	3f 4f       	sbci	r19, 0xFF	; 255
    333c:	4f 4f       	sbci	r20, 0xFF	; 255
    333e:	5f 4f       	sbci	r21, 0xFF	; 255
    3340:	04 c0       	rjmp	.+8      	; 0x334a <__pack_f+0xf6>
    3342:	21 5c       	subi	r18, 0xC1	; 193
    3344:	3f 4f       	sbci	r19, 0xFF	; 255
    3346:	4f 4f       	sbci	r20, 0xFF	; 255
    3348:	5f 4f       	sbci	r21, 0xFF	; 255
    334a:	e0 e0       	ldi	r30, 0x00	; 0
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	20 30       	cpi	r18, 0x00	; 0
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	3a 07       	cpc	r19, r26
    3354:	a0 e0       	ldi	r26, 0x00	; 0
    3356:	4a 07       	cpc	r20, r26
    3358:	a0 e4       	ldi	r26, 0x40	; 64
    335a:	5a 07       	cpc	r21, r26
    335c:	10 f0       	brcs	.+4      	; 0x3362 <__pack_f+0x10e>
    335e:	e1 e0       	ldi	r30, 0x01	; 1
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	79 01       	movw	r14, r18
    3364:	8a 01       	movw	r16, r20
    3366:	27 c0       	rjmp	.+78     	; 0x33b6 <__pack_f+0x162>
    3368:	60 38       	cpi	r22, 0x80	; 128
    336a:	71 05       	cpc	r23, r1
    336c:	64 f5       	brge	.+88     	; 0x33c6 <__pack_f+0x172>
    336e:	fb 01       	movw	r30, r22
    3370:	e1 58       	subi	r30, 0x81	; 129
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	d8 01       	movw	r26, r16
    3376:	c7 01       	movw	r24, r14
    3378:	8f 77       	andi	r24, 0x7F	; 127
    337a:	90 70       	andi	r25, 0x00	; 0
    337c:	a0 70       	andi	r26, 0x00	; 0
    337e:	b0 70       	andi	r27, 0x00	; 0
    3380:	80 34       	cpi	r24, 0x40	; 64
    3382:	91 05       	cpc	r25, r1
    3384:	a1 05       	cpc	r26, r1
    3386:	b1 05       	cpc	r27, r1
    3388:	39 f4       	brne	.+14     	; 0x3398 <__pack_f+0x144>
    338a:	e7 fe       	sbrs	r14, 7
    338c:	0d c0       	rjmp	.+26     	; 0x33a8 <__pack_f+0x154>
    338e:	80 e4       	ldi	r24, 0x40	; 64
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	a0 e0       	ldi	r26, 0x00	; 0
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	04 c0       	rjmp	.+8      	; 0x33a0 <__pack_f+0x14c>
    3398:	8f e3       	ldi	r24, 0x3F	; 63
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	a0 e0       	ldi	r26, 0x00	; 0
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e8 0e       	add	r14, r24
    33a2:	f9 1e       	adc	r15, r25
    33a4:	0a 1f       	adc	r16, r26
    33a6:	1b 1f       	adc	r17, r27
    33a8:	17 ff       	sbrs	r17, 7
    33aa:	05 c0       	rjmp	.+10     	; 0x33b6 <__pack_f+0x162>
    33ac:	16 95       	lsr	r17
    33ae:	07 95       	ror	r16
    33b0:	f7 94       	ror	r15
    33b2:	e7 94       	ror	r14
    33b4:	31 96       	adiw	r30, 0x01	; 1
    33b6:	87 e0       	ldi	r24, 0x07	; 7
    33b8:	16 95       	lsr	r17
    33ba:	07 95       	ror	r16
    33bc:	f7 94       	ror	r15
    33be:	e7 94       	ror	r14
    33c0:	8a 95       	dec	r24
    33c2:	d1 f7       	brne	.-12     	; 0x33b8 <__pack_f+0x164>
    33c4:	05 c0       	rjmp	.+10     	; 0x33d0 <__pack_f+0x17c>
    33c6:	ee 24       	eor	r14, r14
    33c8:	ff 24       	eor	r15, r15
    33ca:	87 01       	movw	r16, r14
    33cc:	ef ef       	ldi	r30, 0xFF	; 255
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	6e 2f       	mov	r22, r30
    33d2:	67 95       	ror	r22
    33d4:	66 27       	eor	r22, r22
    33d6:	67 95       	ror	r22
    33d8:	90 2f       	mov	r25, r16
    33da:	9f 77       	andi	r25, 0x7F	; 127
    33dc:	d7 94       	ror	r13
    33de:	dd 24       	eor	r13, r13
    33e0:	d7 94       	ror	r13
    33e2:	8e 2f       	mov	r24, r30
    33e4:	86 95       	lsr	r24
    33e6:	49 2f       	mov	r20, r25
    33e8:	46 2b       	or	r20, r22
    33ea:	58 2f       	mov	r21, r24
    33ec:	5d 29       	or	r21, r13
    33ee:	b7 01       	movw	r22, r14
    33f0:	ca 01       	movw	r24, r20
    33f2:	1f 91       	pop	r17
    33f4:	0f 91       	pop	r16
    33f6:	ff 90       	pop	r15
    33f8:	ef 90       	pop	r14
    33fa:	df 90       	pop	r13
    33fc:	08 95       	ret

000033fe <__unpack_f>:
    33fe:	fc 01       	movw	r30, r24
    3400:	db 01       	movw	r26, r22
    3402:	40 81       	ld	r20, Z
    3404:	51 81       	ldd	r21, Z+1	; 0x01
    3406:	22 81       	ldd	r18, Z+2	; 0x02
    3408:	62 2f       	mov	r22, r18
    340a:	6f 77       	andi	r22, 0x7F	; 127
    340c:	70 e0       	ldi	r23, 0x00	; 0
    340e:	22 1f       	adc	r18, r18
    3410:	22 27       	eor	r18, r18
    3412:	22 1f       	adc	r18, r18
    3414:	93 81       	ldd	r25, Z+3	; 0x03
    3416:	89 2f       	mov	r24, r25
    3418:	88 0f       	add	r24, r24
    341a:	82 2b       	or	r24, r18
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	99 1f       	adc	r25, r25
    3422:	99 27       	eor	r25, r25
    3424:	99 1f       	adc	r25, r25
    3426:	11 96       	adiw	r26, 0x01	; 1
    3428:	9c 93       	st	X, r25
    342a:	11 97       	sbiw	r26, 0x01	; 1
    342c:	21 15       	cp	r18, r1
    342e:	31 05       	cpc	r19, r1
    3430:	a9 f5       	brne	.+106    	; 0x349c <__unpack_f+0x9e>
    3432:	41 15       	cp	r20, r1
    3434:	51 05       	cpc	r21, r1
    3436:	61 05       	cpc	r22, r1
    3438:	71 05       	cpc	r23, r1
    343a:	11 f4       	brne	.+4      	; 0x3440 <__unpack_f+0x42>
    343c:	82 e0       	ldi	r24, 0x02	; 2
    343e:	37 c0       	rjmp	.+110    	; 0x34ae <__unpack_f+0xb0>
    3440:	82 e8       	ldi	r24, 0x82	; 130
    3442:	9f ef       	ldi	r25, 0xFF	; 255
    3444:	13 96       	adiw	r26, 0x03	; 3
    3446:	9c 93       	st	X, r25
    3448:	8e 93       	st	-X, r24
    344a:	12 97       	sbiw	r26, 0x02	; 2
    344c:	9a 01       	movw	r18, r20
    344e:	ab 01       	movw	r20, r22
    3450:	67 e0       	ldi	r22, 0x07	; 7
    3452:	22 0f       	add	r18, r18
    3454:	33 1f       	adc	r19, r19
    3456:	44 1f       	adc	r20, r20
    3458:	55 1f       	adc	r21, r21
    345a:	6a 95       	dec	r22
    345c:	d1 f7       	brne	.-12     	; 0x3452 <__unpack_f+0x54>
    345e:	83 e0       	ldi	r24, 0x03	; 3
    3460:	8c 93       	st	X, r24
    3462:	0d c0       	rjmp	.+26     	; 0x347e <__unpack_f+0x80>
    3464:	22 0f       	add	r18, r18
    3466:	33 1f       	adc	r19, r19
    3468:	44 1f       	adc	r20, r20
    346a:	55 1f       	adc	r21, r21
    346c:	12 96       	adiw	r26, 0x02	; 2
    346e:	8d 91       	ld	r24, X+
    3470:	9c 91       	ld	r25, X
    3472:	13 97       	sbiw	r26, 0x03	; 3
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	13 96       	adiw	r26, 0x03	; 3
    3478:	9c 93       	st	X, r25
    347a:	8e 93       	st	-X, r24
    347c:	12 97       	sbiw	r26, 0x02	; 2
    347e:	20 30       	cpi	r18, 0x00	; 0
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	38 07       	cpc	r19, r24
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	48 07       	cpc	r20, r24
    3488:	80 e4       	ldi	r24, 0x40	; 64
    348a:	58 07       	cpc	r21, r24
    348c:	58 f3       	brcs	.-42     	; 0x3464 <__unpack_f+0x66>
    348e:	14 96       	adiw	r26, 0x04	; 4
    3490:	2d 93       	st	X+, r18
    3492:	3d 93       	st	X+, r19
    3494:	4d 93       	st	X+, r20
    3496:	5c 93       	st	X, r21
    3498:	17 97       	sbiw	r26, 0x07	; 7
    349a:	08 95       	ret
    349c:	2f 3f       	cpi	r18, 0xFF	; 255
    349e:	31 05       	cpc	r19, r1
    34a0:	79 f4       	brne	.+30     	; 0x34c0 <__unpack_f+0xc2>
    34a2:	41 15       	cp	r20, r1
    34a4:	51 05       	cpc	r21, r1
    34a6:	61 05       	cpc	r22, r1
    34a8:	71 05       	cpc	r23, r1
    34aa:	19 f4       	brne	.+6      	; 0x34b2 <__unpack_f+0xb4>
    34ac:	84 e0       	ldi	r24, 0x04	; 4
    34ae:	8c 93       	st	X, r24
    34b0:	08 95       	ret
    34b2:	64 ff       	sbrs	r22, 4
    34b4:	03 c0       	rjmp	.+6      	; 0x34bc <__unpack_f+0xbe>
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	8c 93       	st	X, r24
    34ba:	12 c0       	rjmp	.+36     	; 0x34e0 <__unpack_f+0xe2>
    34bc:	1c 92       	st	X, r1
    34be:	10 c0       	rjmp	.+32     	; 0x34e0 <__unpack_f+0xe2>
    34c0:	2f 57       	subi	r18, 0x7F	; 127
    34c2:	30 40       	sbci	r19, 0x00	; 0
    34c4:	13 96       	adiw	r26, 0x03	; 3
    34c6:	3c 93       	st	X, r19
    34c8:	2e 93       	st	-X, r18
    34ca:	12 97       	sbiw	r26, 0x02	; 2
    34cc:	83 e0       	ldi	r24, 0x03	; 3
    34ce:	8c 93       	st	X, r24
    34d0:	87 e0       	ldi	r24, 0x07	; 7
    34d2:	44 0f       	add	r20, r20
    34d4:	55 1f       	adc	r21, r21
    34d6:	66 1f       	adc	r22, r22
    34d8:	77 1f       	adc	r23, r23
    34da:	8a 95       	dec	r24
    34dc:	d1 f7       	brne	.-12     	; 0x34d2 <__unpack_f+0xd4>
    34de:	70 64       	ori	r23, 0x40	; 64
    34e0:	14 96       	adiw	r26, 0x04	; 4
    34e2:	4d 93       	st	X+, r20
    34e4:	5d 93       	st	X+, r21
    34e6:	6d 93       	st	X+, r22
    34e8:	7c 93       	st	X, r23
    34ea:	17 97       	sbiw	r26, 0x07	; 7
    34ec:	08 95       	ret

000034ee <__fpcmp_parts_f>:
    34ee:	1f 93       	push	r17
    34f0:	dc 01       	movw	r26, r24
    34f2:	fb 01       	movw	r30, r22
    34f4:	9c 91       	ld	r25, X
    34f6:	92 30       	cpi	r25, 0x02	; 2
    34f8:	08 f4       	brcc	.+2      	; 0x34fc <__fpcmp_parts_f+0xe>
    34fa:	47 c0       	rjmp	.+142    	; 0x358a <__fpcmp_parts_f+0x9c>
    34fc:	80 81       	ld	r24, Z
    34fe:	82 30       	cpi	r24, 0x02	; 2
    3500:	08 f4       	brcc	.+2      	; 0x3504 <__fpcmp_parts_f+0x16>
    3502:	43 c0       	rjmp	.+134    	; 0x358a <__fpcmp_parts_f+0x9c>
    3504:	94 30       	cpi	r25, 0x04	; 4
    3506:	51 f4       	brne	.+20     	; 0x351c <__fpcmp_parts_f+0x2e>
    3508:	11 96       	adiw	r26, 0x01	; 1
    350a:	1c 91       	ld	r17, X
    350c:	84 30       	cpi	r24, 0x04	; 4
    350e:	99 f5       	brne	.+102    	; 0x3576 <__fpcmp_parts_f+0x88>
    3510:	81 81       	ldd	r24, Z+1	; 0x01
    3512:	68 2f       	mov	r22, r24
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	61 1b       	sub	r22, r17
    3518:	71 09       	sbc	r23, r1
    351a:	3f c0       	rjmp	.+126    	; 0x359a <__fpcmp_parts_f+0xac>
    351c:	84 30       	cpi	r24, 0x04	; 4
    351e:	21 f0       	breq	.+8      	; 0x3528 <__fpcmp_parts_f+0x3a>
    3520:	92 30       	cpi	r25, 0x02	; 2
    3522:	31 f4       	brne	.+12     	; 0x3530 <__fpcmp_parts_f+0x42>
    3524:	82 30       	cpi	r24, 0x02	; 2
    3526:	b9 f1       	breq	.+110    	; 0x3596 <__fpcmp_parts_f+0xa8>
    3528:	81 81       	ldd	r24, Z+1	; 0x01
    352a:	88 23       	and	r24, r24
    352c:	89 f1       	breq	.+98     	; 0x3590 <__fpcmp_parts_f+0xa2>
    352e:	2d c0       	rjmp	.+90     	; 0x358a <__fpcmp_parts_f+0x9c>
    3530:	11 96       	adiw	r26, 0x01	; 1
    3532:	1c 91       	ld	r17, X
    3534:	11 97       	sbiw	r26, 0x01	; 1
    3536:	82 30       	cpi	r24, 0x02	; 2
    3538:	f1 f0       	breq	.+60     	; 0x3576 <__fpcmp_parts_f+0x88>
    353a:	81 81       	ldd	r24, Z+1	; 0x01
    353c:	18 17       	cp	r17, r24
    353e:	d9 f4       	brne	.+54     	; 0x3576 <__fpcmp_parts_f+0x88>
    3540:	12 96       	adiw	r26, 0x02	; 2
    3542:	2d 91       	ld	r18, X+
    3544:	3c 91       	ld	r19, X
    3546:	13 97       	sbiw	r26, 0x03	; 3
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	82 17       	cp	r24, r18
    354e:	93 07       	cpc	r25, r19
    3550:	94 f0       	brlt	.+36     	; 0x3576 <__fpcmp_parts_f+0x88>
    3552:	28 17       	cp	r18, r24
    3554:	39 07       	cpc	r19, r25
    3556:	bc f0       	brlt	.+46     	; 0x3586 <__fpcmp_parts_f+0x98>
    3558:	14 96       	adiw	r26, 0x04	; 4
    355a:	8d 91       	ld	r24, X+
    355c:	9d 91       	ld	r25, X+
    355e:	0d 90       	ld	r0, X+
    3560:	bc 91       	ld	r27, X
    3562:	a0 2d       	mov	r26, r0
    3564:	24 81       	ldd	r18, Z+4	; 0x04
    3566:	35 81       	ldd	r19, Z+5	; 0x05
    3568:	46 81       	ldd	r20, Z+6	; 0x06
    356a:	57 81       	ldd	r21, Z+7	; 0x07
    356c:	28 17       	cp	r18, r24
    356e:	39 07       	cpc	r19, r25
    3570:	4a 07       	cpc	r20, r26
    3572:	5b 07       	cpc	r21, r27
    3574:	18 f4       	brcc	.+6      	; 0x357c <__fpcmp_parts_f+0x8e>
    3576:	11 23       	and	r17, r17
    3578:	41 f0       	breq	.+16     	; 0x358a <__fpcmp_parts_f+0x9c>
    357a:	0a c0       	rjmp	.+20     	; 0x3590 <__fpcmp_parts_f+0xa2>
    357c:	82 17       	cp	r24, r18
    357e:	93 07       	cpc	r25, r19
    3580:	a4 07       	cpc	r26, r20
    3582:	b5 07       	cpc	r27, r21
    3584:	40 f4       	brcc	.+16     	; 0x3596 <__fpcmp_parts_f+0xa8>
    3586:	11 23       	and	r17, r17
    3588:	19 f0       	breq	.+6      	; 0x3590 <__fpcmp_parts_f+0xa2>
    358a:	61 e0       	ldi	r22, 0x01	; 1
    358c:	70 e0       	ldi	r23, 0x00	; 0
    358e:	05 c0       	rjmp	.+10     	; 0x359a <__fpcmp_parts_f+0xac>
    3590:	6f ef       	ldi	r22, 0xFF	; 255
    3592:	7f ef       	ldi	r23, 0xFF	; 255
    3594:	02 c0       	rjmp	.+4      	; 0x359a <__fpcmp_parts_f+0xac>
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	cb 01       	movw	r24, r22
    359c:	1f 91       	pop	r17
    359e:	08 95       	ret

000035a0 <EXINT_enuInit>:

void* EXINT_pvoidParameter[EXINT_NUM] = {NULL, NULL, NULL};
void (*EXINT_pvoidfuncCallBack[EXINT_NUM])(void*) = {NULL, NULL, NULL};


ES_t EXINT_enuInit(EXINT_t* Copy_pstrExIntConfig){
    35a0:	df 93       	push	r29
    35a2:	cf 93       	push	r28
    35a4:	00 d0       	rcall	.+0      	; 0x35a6 <EXINT_enuInit+0x6>
    35a6:	00 d0       	rcall	.+0      	; 0x35a8 <EXINT_enuInit+0x8>
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <EXINT_enuInit+0xa>
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	9c 83       	std	Y+4, r25	; 0x04
    35b0:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pstrExIntConfig != NULL){
    35b6:	8b 81       	ldd	r24, Y+3	; 0x03
    35b8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <EXINT_enuInit+0x20>
    35be:	f8 c0       	rjmp	.+496    	; 0x37b0 <EXINT_enuInit+0x210>
		uint_8 Local_uint8Iterator;
		for(Local_uint8Iterator = 0; Local_uint8Iterator < EXINT_NUM; Local_uint8Iterator++){
    35c0:	19 82       	std	Y+1, r1	; 0x01
    35c2:	f1 c0       	rjmp	.+482    	; 0x37a6 <EXINT_enuInit+0x206>
			if(Copy_pstrExIntConfig[Local_uint8Iterator].Local_uint8INTConfig == EXINT_ENABLED){
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	c9 01       	movw	r24, r18
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	28 0f       	add	r18, r24
    35d2:	39 1f       	adc	r19, r25
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	9c 81       	ldd	r25, Y+4	; 0x04
    35d8:	fc 01       	movw	r30, r24
    35da:	e2 0f       	add	r30, r18
    35dc:	f3 1f       	adc	r31, r19
    35de:	81 81       	ldd	r24, Z+1	; 0x01
    35e0:	80 35       	cpi	r24, 0x50	; 80
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <EXINT_enuInit+0x46>
    35e4:	dd c0       	rjmp	.+442    	; 0x37a0 <EXINT_enuInit+0x200>
				MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC00_BIT);
    35e6:	a5 e5       	ldi	r26, 0x55	; 85
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e5 e5       	ldi	r30, 0x55	; 85
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	8e 7f       	andi	r24, 0xFE	; 254
    35f2:	8c 93       	st	X, r24
				MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC01_BIT);
    35f4:	a5 e5       	ldi	r26, 0x55	; 85
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	e5 e5       	ldi	r30, 0x55	; 85
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	8d 7f       	andi	r24, 0xFD	; 253
    3600:	8c 93       	st	X, r24
				MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC10_BIT);
    3602:	a5 e5       	ldi	r26, 0x55	; 85
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	e5 e5       	ldi	r30, 0x55	; 85
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	8b 7f       	andi	r24, 0xFB	; 251
    360e:	8c 93       	st	X, r24
				MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC11_BIT);
    3610:	a5 e5       	ldi	r26, 0x55	; 85
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	e5 e5       	ldi	r30, 0x55	; 85
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	87 7f       	andi	r24, 0xF7	; 247
    361c:	8c 93       	st	X, r24
				MCUCSR &= ~(EXINT_BIT_MASK << EXINT_ISC2_BIT);
    361e:	a4 e5       	ldi	r26, 0x54	; 84
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	e4 e5       	ldi	r30, 0x54	; 84
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	8f 7b       	andi	r24, 0xBF	; 191
    362a:	8c 93       	st	X, r24
				SREG |= (EXINT_BIT_MASK << EXINT_L_BIT);
    362c:	af e5       	ldi	r26, 0x5F	; 95
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	ef e5       	ldi	r30, 0x5F	; 95
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	80 68       	ori	r24, 0x80	; 128
    3638:	8c 93       	st	X, r24
				switch(Copy_pstrExIntConfig[Local_uint8Iterator].Local_uint8INTID){
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	28 2f       	mov	r18, r24
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	c9 01       	movw	r24, r18
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	28 0f       	add	r18, r24
    3648:	39 1f       	adc	r19, r25
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	fc 01       	movw	r30, r24
    3650:	e2 0f       	add	r30, r18
    3652:	f3 1f       	adc	r31, r19
    3654:	80 81       	ld	r24, Z
    3656:	28 2f       	mov	r18, r24
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	3e 83       	std	Y+6, r19	; 0x06
    365c:	2d 83       	std	Y+5, r18	; 0x05
    365e:	8d 81       	ldd	r24, Y+5	; 0x05
    3660:	9e 81       	ldd	r25, Y+6	; 0x06
    3662:	81 30       	cpi	r24, 0x01	; 1
    3664:	91 05       	cpc	r25, r1
    3666:	81 f1       	breq	.+96     	; 0x36c8 <EXINT_enuInit+0x128>
    3668:	2d 81       	ldd	r18, Y+5	; 0x05
    366a:	3e 81       	ldd	r19, Y+6	; 0x06
    366c:	22 30       	cpi	r18, 0x02	; 2
    366e:	31 05       	cpc	r19, r1
    3670:	09 f4       	brne	.+2      	; 0x3674 <EXINT_enuInit+0xd4>
    3672:	56 c0       	rjmp	.+172    	; 0x3720 <EXINT_enuInit+0x180>
    3674:	8d 81       	ldd	r24, Y+5	; 0x05
    3676:	9e 81       	ldd	r25, Y+6	; 0x06
    3678:	00 97       	sbiw	r24, 0x00	; 0
    367a:	09 f0       	breq	.+2      	; 0x367e <EXINT_enuInit+0xde>
    367c:	8f c0       	rjmp	.+286    	; 0x379c <EXINT_enuInit+0x1fc>
					case EXINT_INT0:
						GICR |= (EXINT_BIT_MASK << EXINT_INT0_BIT);
    367e:	ab e5       	ldi	r26, 0x5B	; 91
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	eb e5       	ldi	r30, 0x5B	; 91
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	80 64       	ori	r24, 0x40	; 64
    368a:	8c 93       	st	X, r24
						MCUCR |= (Copy_pstrExIntConfig[Local_uint8Iterator].Local_uint8TriggerType << EXINT_ISC00_BIT);
    368c:	a5 e5       	ldi	r26, 0x55	; 85
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	e5 e5       	ldi	r30, 0x55	; 85
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	40 81       	ld	r20, Z
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	28 2f       	mov	r18, r24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	c9 01       	movw	r24, r18
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	28 0f       	add	r18, r24
    36a4:	39 1f       	adc	r19, r25
    36a6:	8b 81       	ldd	r24, Y+3	; 0x03
    36a8:	9c 81       	ldd	r25, Y+4	; 0x04
    36aa:	fc 01       	movw	r30, r24
    36ac:	e2 0f       	add	r30, r18
    36ae:	f3 1f       	adc	r31, r19
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	84 2b       	or	r24, r20
    36b4:	8c 93       	st	X, r24
						GIFR |= (EXINT_BIT_MASK << EXINT_INT0_BIT);
    36b6:	aa e5       	ldi	r26, 0x5A	; 90
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	ea e5       	ldi	r30, 0x5A	; 90
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	80 64       	ori	r24, 0x40	; 64
    36c2:	8c 93       	st	X, r24
						Local_enuErrorStates = ES_OK;
    36c4:	1a 82       	std	Y+2, r1	; 0x02
    36c6:	6c c0       	rjmp	.+216    	; 0x37a0 <EXINT_enuInit+0x200>
						break;
					case EXINT_INT1:
						GICR |= (EXINT_BIT_MASK << EXINT_INT1_BIT);
    36c8:	ab e5       	ldi	r26, 0x5B	; 91
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	eb e5       	ldi	r30, 0x5B	; 91
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	80 68       	ori	r24, 0x80	; 128
    36d4:	8c 93       	st	X, r24
						MCUCR |= (Copy_pstrExIntConfig[Local_uint8Iterator].Local_uint8TriggerType << EXINT_ISC10_BIT);
    36d6:	a5 e5       	ldi	r26, 0x55	; 85
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	e5 e5       	ldi	r30, 0x55	; 85
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	48 2f       	mov	r20, r24
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	28 2f       	mov	r18, r24
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	c9 01       	movw	r24, r18
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	28 0f       	add	r18, r24
    36f0:	39 1f       	adc	r19, r25
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	9c 81       	ldd	r25, Y+4	; 0x04
    36f6:	fc 01       	movw	r30, r24
    36f8:	e2 0f       	add	r30, r18
    36fa:	f3 1f       	adc	r31, r19
    36fc:	82 81       	ldd	r24, Z+2	; 0x02
    36fe:	88 2f       	mov	r24, r24
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	84 2b       	or	r24, r20
    370c:	8c 93       	st	X, r24
						GIFR |= (EXINT_BIT_MASK << EXINT_INT1_BIT);
    370e:	aa e5       	ldi	r26, 0x5A	; 90
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	ea e5       	ldi	r30, 0x5A	; 90
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	80 68       	ori	r24, 0x80	; 128
    371a:	8c 93       	st	X, r24
						Local_enuErrorStates = ES_OK;
    371c:	1a 82       	std	Y+2, r1	; 0x02
    371e:	40 c0       	rjmp	.+128    	; 0x37a0 <EXINT_enuInit+0x200>
						break;
					case EXINT_INT2:
						GICR |= (EXINT_BIT_MASK << EXINT_INT2_BIT);
    3720:	ab e5       	ldi	r26, 0x5B	; 91
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	eb e5       	ldi	r30, 0x5B	; 91
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	80 81       	ld	r24, Z
    372a:	80 62       	ori	r24, 0x20	; 32
    372c:	8c 93       	st	X, r24
						if(Copy_pstrExIntConfig[Local_uint8Iterator].Local_uint8TriggerType == EXINT_FALLING_EDGE){
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	28 2f       	mov	r18, r24
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	c9 01       	movw	r24, r18
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	28 0f       	add	r18, r24
    373c:	39 1f       	adc	r19, r25
    373e:	8b 81       	ldd	r24, Y+3	; 0x03
    3740:	9c 81       	ldd	r25, Y+4	; 0x04
    3742:	fc 01       	movw	r30, r24
    3744:	e2 0f       	add	r30, r18
    3746:	f3 1f       	adc	r31, r19
    3748:	82 81       	ldd	r24, Z+2	; 0x02
    374a:	82 30       	cpi	r24, 0x02	; 2
    374c:	39 f4       	brne	.+14     	; 0x375c <EXINT_enuInit+0x1bc>
							MCUCSR |= (EXINT2_FALLING_EDGE << EXINT_ISC2_BIT);
    374e:	e4 e5       	ldi	r30, 0x54	; 84
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	a4 e5       	ldi	r26, 0x54	; 84
    3754:	b0 e0       	ldi	r27, 0x00	; 0
    3756:	8c 91       	ld	r24, X
    3758:	80 83       	st	Z, r24
    375a:	17 c0       	rjmp	.+46     	; 0x378a <EXINT_enuInit+0x1ea>
						}
						else if(Copy_pstrExIntConfig[Local_uint8Iterator].Local_uint8TriggerType == EXINT_RISING_EDGE){
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	28 2f       	mov	r18, r24
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	c9 01       	movw	r24, r18
    3764:	88 0f       	add	r24, r24
    3766:	99 1f       	adc	r25, r25
    3768:	28 0f       	add	r18, r24
    376a:	39 1f       	adc	r19, r25
    376c:	8b 81       	ldd	r24, Y+3	; 0x03
    376e:	9c 81       	ldd	r25, Y+4	; 0x04
    3770:	fc 01       	movw	r30, r24
    3772:	e2 0f       	add	r30, r18
    3774:	f3 1f       	adc	r31, r19
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	83 30       	cpi	r24, 0x03	; 3
    377a:	39 f4       	brne	.+14     	; 0x378a <EXINT_enuInit+0x1ea>
							MCUCSR |= (EXINT2_RISING_EDGE << EXINT_ISC2_BIT);
    377c:	a4 e5       	ldi	r26, 0x54	; 84
    377e:	b0 e0       	ldi	r27, 0x00	; 0
    3780:	e4 e5       	ldi	r30, 0x54	; 84
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	80 64       	ori	r24, 0x40	; 64
    3788:	8c 93       	st	X, r24
						}
						GIFR |= (EXINT_BIT_MASK << EXINT_INT2_BIT);
    378a:	aa e5       	ldi	r26, 0x5A	; 90
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	ea e5       	ldi	r30, 0x5A	; 90
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	80 62       	ori	r24, 0x20	; 32
    3796:	8c 93       	st	X, r24
						Local_enuErrorStates = ES_OK;
    3798:	1a 82       	std	Y+2, r1	; 0x02
    379a:	02 c0       	rjmp	.+4      	; 0x37a0 <EXINT_enuInit+0x200>
						break;
					default:
						Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
    379c:	87 e0       	ldi	r24, 0x07	; 7
    379e:	8a 83       	std	Y+2, r24	; 0x02

ES_t EXINT_enuInit(EXINT_t* Copy_pstrExIntConfig){
	ES_t Local_enuErrorStates = ES_NOK;
	if(Copy_pstrExIntConfig != NULL){
		uint_8 Local_uint8Iterator;
		for(Local_uint8Iterator = 0; Local_uint8Iterator < EXINT_NUM; Local_uint8Iterator++){
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	8f 5f       	subi	r24, 0xFF	; 255
    37a4:	89 83       	std	Y+1, r24	; 0x01
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	83 30       	cpi	r24, 0x03	; 3
    37aa:	08 f4       	brcc	.+2      	; 0x37ae <EXINT_enuInit+0x20e>
    37ac:	0b cf       	rjmp	.-490    	; 0x35c4 <EXINT_enuInit+0x24>
    37ae:	02 c0       	rjmp	.+4      	; 0x37b4 <EXINT_enuInit+0x214>
				}
			}
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    37b0:	82 e0       	ldi	r24, 0x02	; 2
    37b2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorStates;
    37b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    37b6:	26 96       	adiw	r28, 0x06	; 6
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	de bf       	out	0x3e, r29	; 62
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	cd bf       	out	0x3d, r28	; 61
    37c2:	cf 91       	pop	r28
    37c4:	df 91       	pop	r29
    37c6:	08 95       	ret

000037c8 <EXINT_enuIntEnable>:

ES_t EXINT_enuIntEnable(EXINT_t* Copy_pstrExIntConfig, uint_8 Copy_uint8TriggerType){
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	00 d0       	rcall	.+0      	; 0x37ce <EXINT_enuIntEnable+0x6>
    37ce:	00 d0       	rcall	.+0      	; 0x37d0 <EXINT_enuIntEnable+0x8>
    37d0:	00 d0       	rcall	.+0      	; 0x37d2 <EXINT_enuIntEnable+0xa>
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	9b 83       	std	Y+3, r25	; 0x03
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    37da:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pstrExIntConfig != NULL){
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	9b 81       	ldd	r25, Y+3	; 0x03
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	09 f4       	brne	.+2      	; 0x37ea <EXINT_enuIntEnable+0x22>
    37e8:	9f c0       	rjmp	.+318    	; 0x3928 <EXINT_enuIntEnable+0x160>
		SREG |= (EXINT_BIT_MASK << EXINT_L_BIT);
    37ea:	af e5       	ldi	r26, 0x5F	; 95
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	ef e5       	ldi	r30, 0x5F	; 95
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	80 81       	ld	r24, Z
    37f4:	80 68       	ori	r24, 0x80	; 128
    37f6:	8c 93       	st	X, r24
		switch(Copy_pstrExIntConfig->Local_uint8INTID){
    37f8:	ea 81       	ldd	r30, Y+2	; 0x02
    37fa:	fb 81       	ldd	r31, Y+3	; 0x03
    37fc:	80 81       	ld	r24, Z
    37fe:	28 2f       	mov	r18, r24
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	3e 83       	std	Y+6, r19	; 0x06
    3804:	2d 83       	std	Y+5, r18	; 0x05
    3806:	8d 81       	ldd	r24, Y+5	; 0x05
    3808:	9e 81       	ldd	r25, Y+6	; 0x06
    380a:	81 30       	cpi	r24, 0x01	; 1
    380c:	91 05       	cpc	r25, r1
    380e:	89 f1       	breq	.+98     	; 0x3872 <EXINT_enuIntEnable+0xaa>
    3810:	2d 81       	ldd	r18, Y+5	; 0x05
    3812:	3e 81       	ldd	r19, Y+6	; 0x06
    3814:	22 30       	cpi	r18, 0x02	; 2
    3816:	31 05       	cpc	r19, r1
    3818:	09 f4       	brne	.+2      	; 0x381c <EXINT_enuIntEnable+0x54>
    381a:	58 c0       	rjmp	.+176    	; 0x38cc <EXINT_enuIntEnable+0x104>
    381c:	8d 81       	ldd	r24, Y+5	; 0x05
    381e:	9e 81       	ldd	r25, Y+6	; 0x06
    3820:	00 97       	sbiw	r24, 0x00	; 0
    3822:	09 f0       	breq	.+2      	; 0x3826 <EXINT_enuIntEnable+0x5e>
    3824:	7e c0       	rjmp	.+252    	; 0x3922 <EXINT_enuIntEnable+0x15a>
			case EXINT_INT0:
				MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC00_BIT);
    3826:	a5 e5       	ldi	r26, 0x55	; 85
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	e5 e5       	ldi	r30, 0x55	; 85
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	8e 7f       	andi	r24, 0xFE	; 254
    3832:	8c 93       	st	X, r24
				MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC01_BIT);
    3834:	a5 e5       	ldi	r26, 0x55	; 85
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	e5 e5       	ldi	r30, 0x55	; 85
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	8d 7f       	andi	r24, 0xFD	; 253
    3840:	8c 93       	st	X, r24
				GICR |= (EXINT_BIT_MASK << EXINT_INT0_BIT);
    3842:	ab e5       	ldi	r26, 0x5B	; 91
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	eb e5       	ldi	r30, 0x5B	; 91
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	80 64       	ori	r24, 0x40	; 64
    384e:	8c 93       	st	X, r24
				MCUCR |= (Copy_uint8TriggerType << EXINT_ISC00_BIT);
    3850:	a5 e5       	ldi	r26, 0x55	; 85
    3852:	b0 e0       	ldi	r27, 0x00	; 0
    3854:	e5 e5       	ldi	r30, 0x55	; 85
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	90 81       	ld	r25, Z
    385a:	8c 81       	ldd	r24, Y+4	; 0x04
    385c:	89 2b       	or	r24, r25
    385e:	8c 93       	st	X, r24
				GIFR |= (EXINT_BIT_MASK << EXINT_INT0_BIT);
    3860:	aa e5       	ldi	r26, 0x5A	; 90
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	ea e5       	ldi	r30, 0x5A	; 90
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	80 64       	ori	r24, 0x40	; 64
    386c:	8c 93       	st	X, r24
				Local_enuErrorStates = ES_OK;
    386e:	19 82       	std	Y+1, r1	; 0x01
    3870:	5d c0       	rjmp	.+186    	; 0x392c <EXINT_enuIntEnable+0x164>
				break;
			case EXINT_INT1:
				MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC10_BIT);
    3872:	a5 e5       	ldi	r26, 0x55	; 85
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	e5 e5       	ldi	r30, 0x55	; 85
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	8b 7f       	andi	r24, 0xFB	; 251
    387e:	8c 93       	st	X, r24
				MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC11_BIT);
    3880:	a5 e5       	ldi	r26, 0x55	; 85
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e5 e5       	ldi	r30, 0x55	; 85
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	87 7f       	andi	r24, 0xF7	; 247
    388c:	8c 93       	st	X, r24
				GICR |= (EXINT_BIT_MASK << EXINT_INT1_BIT);
    388e:	ab e5       	ldi	r26, 0x5B	; 91
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	eb e5       	ldi	r30, 0x5B	; 91
    3894:	f0 e0       	ldi	r31, 0x00	; 0
    3896:	80 81       	ld	r24, Z
    3898:	80 68       	ori	r24, 0x80	; 128
    389a:	8c 93       	st	X, r24
				MCUCR |= (Copy_uint8TriggerType << EXINT_ISC10_BIT);
    389c:	a5 e5       	ldi	r26, 0x55	; 85
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e5 e5       	ldi	r30, 0x55	; 85
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	28 2f       	mov	r18, r24
    38a8:	8c 81       	ldd	r24, Y+4	; 0x04
    38aa:	88 2f       	mov	r24, r24
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	82 2b       	or	r24, r18
    38b8:	8c 93       	st	X, r24
				GIFR |= (EXINT_BIT_MASK << EXINT_INT1_BIT);
    38ba:	aa e5       	ldi	r26, 0x5A	; 90
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	ea e5       	ldi	r30, 0x5A	; 90
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 81       	ld	r24, Z
    38c4:	80 68       	ori	r24, 0x80	; 128
    38c6:	8c 93       	st	X, r24
				Local_enuErrorStates = ES_OK;
    38c8:	19 82       	std	Y+1, r1	; 0x01
    38ca:	30 c0       	rjmp	.+96     	; 0x392c <EXINT_enuIntEnable+0x164>
				break;
			case EXINT_INT2:
				MCUCSR &= ~(EXINT_BIT_MASK << EXINT_ISC2_BIT);
    38cc:	a4 e5       	ldi	r26, 0x54	; 84
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	e4 e5       	ldi	r30, 0x54	; 84
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	8f 7b       	andi	r24, 0xBF	; 191
    38d8:	8c 93       	st	X, r24
				GICR |= (EXINT_BIT_MASK << EXINT_INT2_BIT);
    38da:	ab e5       	ldi	r26, 0x5B	; 91
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	eb e5       	ldi	r30, 0x5B	; 91
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	80 62       	ori	r24, 0x20	; 32
    38e6:	8c 93       	st	X, r24
				MCUCSR |= (Copy_uint8TriggerType << EXINT_ISC2_BIT);
    38e8:	a4 e5       	ldi	r26, 0x54	; 84
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	e4 e5       	ldi	r30, 0x54	; 84
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	28 2f       	mov	r18, r24
    38f4:	8c 81       	ldd	r24, Y+4	; 0x04
    38f6:	88 2f       	mov	r24, r24
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	00 24       	eor	r0, r0
    38fc:	96 95       	lsr	r25
    38fe:	87 95       	ror	r24
    3900:	07 94       	ror	r0
    3902:	96 95       	lsr	r25
    3904:	87 95       	ror	r24
    3906:	07 94       	ror	r0
    3908:	98 2f       	mov	r25, r24
    390a:	80 2d       	mov	r24, r0
    390c:	82 2b       	or	r24, r18
    390e:	8c 93       	st	X, r24
				GIFR |= (EXINT_BIT_MASK << EXINT_INT2_BIT);
    3910:	aa e5       	ldi	r26, 0x5A	; 90
    3912:	b0 e0       	ldi	r27, 0x00	; 0
    3914:	ea e5       	ldi	r30, 0x5A	; 90
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	80 81       	ld	r24, Z
    391a:	80 62       	ori	r24, 0x20	; 32
    391c:	8c 93       	st	X, r24
				Local_enuErrorStates = ES_OK;
    391e:	19 82       	std	Y+1, r1	; 0x01
    3920:	05 c0       	rjmp	.+10     	; 0x392c <EXINT_enuIntEnable+0x164>
				break;
		default:
			Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
    3922:	87 e0       	ldi	r24, 0x07	; 7
    3924:	89 83       	std	Y+1, r24	; 0x01
    3926:	02 c0       	rjmp	.+4      	; 0x392c <EXINT_enuIntEnable+0x164>
			break;
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    392c:	89 81       	ldd	r24, Y+1	; 0x01
}
    392e:	26 96       	adiw	r28, 0x06	; 6
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	cf 91       	pop	r28
    393c:	df 91       	pop	r29
    393e:	08 95       	ret

00003940 <EXINT_enuIntDisable>:

ES_t EXINT_enuIntDisable(EXINT_t* Copy_pstrExIntConfig){
    3940:	df 93       	push	r29
    3942:	cf 93       	push	r28
    3944:	00 d0       	rcall	.+0      	; 0x3946 <EXINT_enuIntDisable+0x6>
    3946:	00 d0       	rcall	.+0      	; 0x3948 <EXINT_enuIntDisable+0x8>
    3948:	0f 92       	push	r0
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	9b 83       	std	Y+3, r25	; 0x03
    3950:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pstrExIntConfig != NULL){
    3956:	8a 81       	ldd	r24, Y+2	; 0x02
    3958:	9b 81       	ldd	r25, Y+3	; 0x03
    395a:	00 97       	sbiw	r24, 0x00	; 0
    395c:	09 f4       	brne	.+2      	; 0x3960 <EXINT_enuIntDisable+0x20>
    395e:	57 c0       	rjmp	.+174    	; 0x3a0e <EXINT_enuIntDisable+0xce>
		switch(Copy_pstrExIntConfig->Local_uint8INTID){
    3960:	ea 81       	ldd	r30, Y+2	; 0x02
    3962:	fb 81       	ldd	r31, Y+3	; 0x03
    3964:	80 81       	ld	r24, Z
    3966:	28 2f       	mov	r18, r24
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	3d 83       	std	Y+5, r19	; 0x05
    396c:	2c 83       	std	Y+4, r18	; 0x04
    396e:	8c 81       	ldd	r24, Y+4	; 0x04
    3970:	9d 81       	ldd	r25, Y+5	; 0x05
    3972:	81 30       	cpi	r24, 0x01	; 1
    3974:	91 05       	cpc	r25, r1
    3976:	09 f1       	breq	.+66     	; 0x39ba <EXINT_enuIntDisable+0x7a>
    3978:	2c 81       	ldd	r18, Y+4	; 0x04
    397a:	3d 81       	ldd	r19, Y+5	; 0x05
    397c:	22 30       	cpi	r18, 0x02	; 2
    397e:	31 05       	cpc	r19, r1
    3980:	99 f1       	breq	.+102    	; 0x39e8 <EXINT_enuIntDisable+0xa8>
    3982:	8c 81       	ldd	r24, Y+4	; 0x04
    3984:	9d 81       	ldd	r25, Y+5	; 0x05
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	09 f0       	breq	.+2      	; 0x398c <EXINT_enuIntDisable+0x4c>
    398a:	3e c0       	rjmp	.+124    	; 0x3a08 <EXINT_enuIntDisable+0xc8>
		case EXINT_INT0:
			GICR &= ~(EXINT_BIT_MASK << EXINT_INT0_BIT);
    398c:	ab e5       	ldi	r26, 0x5B	; 91
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	eb e5       	ldi	r30, 0x5B	; 91
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	8f 7b       	andi	r24, 0xBF	; 191
    3998:	8c 93       	st	X, r24
			MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC00_BIT);
    399a:	a5 e5       	ldi	r26, 0x55	; 85
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	e5 e5       	ldi	r30, 0x55	; 85
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	8e 7f       	andi	r24, 0xFE	; 254
    39a6:	8c 93       	st	X, r24
			MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC01_BIT);
    39a8:	a5 e5       	ldi	r26, 0x55	; 85
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	e5 e5       	ldi	r30, 0x55	; 85
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	80 81       	ld	r24, Z
    39b2:	8d 7f       	andi	r24, 0xFD	; 253
    39b4:	8c 93       	st	X, r24
			Local_enuErrorStates = ES_OK;
    39b6:	19 82       	std	Y+1, r1	; 0x01
    39b8:	2c c0       	rjmp	.+88     	; 0x3a12 <EXINT_enuIntDisable+0xd2>
			break;
		case EXINT_INT1:
			GICR &= ~(EXINT_BIT_MASK << EXINT_INT1_BIT);
    39ba:	ab e5       	ldi	r26, 0x5B	; 91
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	eb e5       	ldi	r30, 0x5B	; 91
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	80 81       	ld	r24, Z
    39c4:	8f 77       	andi	r24, 0x7F	; 127
    39c6:	8c 93       	st	X, r24
			MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC10_BIT);
    39c8:	a5 e5       	ldi	r26, 0x55	; 85
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	e5 e5       	ldi	r30, 0x55	; 85
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	8b 7f       	andi	r24, 0xFB	; 251
    39d4:	8c 93       	st	X, r24
			MCUCR &= ~(EXINT_BIT_MASK << EXINT_ISC11_BIT);
    39d6:	a5 e5       	ldi	r26, 0x55	; 85
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	e5 e5       	ldi	r30, 0x55	; 85
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	80 81       	ld	r24, Z
    39e0:	87 7f       	andi	r24, 0xF7	; 247
    39e2:	8c 93       	st	X, r24
			Local_enuErrorStates = ES_OK;
    39e4:	19 82       	std	Y+1, r1	; 0x01
    39e6:	15 c0       	rjmp	.+42     	; 0x3a12 <EXINT_enuIntDisable+0xd2>
			break;
		case EXINT_INT2:
			GICR &= ~(EXINT_BIT_MASK << EXINT_INT2_BIT);
    39e8:	ab e5       	ldi	r26, 0x5B	; 91
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	eb e5       	ldi	r30, 0x5B	; 91
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	8f 7d       	andi	r24, 0xDF	; 223
    39f4:	8c 93       	st	X, r24
			MCUCSR &= ~(EXINT_BIT_MASK << EXINT_ISC2_BIT);
    39f6:	a4 e5       	ldi	r26, 0x54	; 84
    39f8:	b0 e0       	ldi	r27, 0x00	; 0
    39fa:	e4 e5       	ldi	r30, 0x54	; 84
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	8f 7b       	andi	r24, 0xBF	; 191
    3a02:	8c 93       	st	X, r24
			Local_enuErrorStates = ES_OK;
    3a04:	19 82       	std	Y+1, r1	; 0x01
    3a06:	05 c0       	rjmp	.+10     	; 0x3a12 <EXINT_enuIntDisable+0xd2>
			break;
		default:
			Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
    3a08:	87 e0       	ldi	r24, 0x07	; 7
    3a0a:	89 83       	std	Y+1, r24	; 0x01
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <EXINT_enuIntDisable+0xd2>
			break;
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3a0e:	82 e0       	ldi	r24, 0x02	; 2
    3a10:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	08 95       	ret

00003a24 <EXINT_enuCallBack>:

ES_t EXINT_enuCallBack(void (*Copy_pvoidfunCall)(void*), void *Copy_pvoidParameter, uint_8 Copy_uint8IntID){
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	28 97       	sbiw	r28, 0x08	; 8
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	9b 83       	std	Y+3, r25	; 0x03
    3a3a:	8a 83       	std	Y+2, r24	; 0x02
    3a3c:	7d 83       	std	Y+5, r23	; 0x05
    3a3e:	6c 83       	std	Y+4, r22	; 0x04
    3a40:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorStates = ES_NOK;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvoidfunCall != NULL && Copy_pvoidParameter != NULL){
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	09 f4       	brne	.+2      	; 0x3a50 <EXINT_enuCallBack+0x2c>
    3a4e:	45 c0       	rjmp	.+138    	; 0x3ada <EXINT_enuCallBack+0xb6>
    3a50:	8c 81       	ldd	r24, Y+4	; 0x04
    3a52:	9d 81       	ldd	r25, Y+5	; 0x05
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	09 f4       	brne	.+2      	; 0x3a5a <EXINT_enuCallBack+0x36>
    3a58:	40 c0       	rjmp	.+128    	; 0x3ada <EXINT_enuCallBack+0xb6>
		switch(Copy_uint8IntID){
    3a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a5c:	28 2f       	mov	r18, r24
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	38 87       	std	Y+8, r19	; 0x08
    3a62:	2f 83       	std	Y+7, r18	; 0x07
    3a64:	8f 81       	ldd	r24, Y+7	; 0x07
    3a66:	98 85       	ldd	r25, Y+8	; 0x08
    3a68:	81 30       	cpi	r24, 0x01	; 1
    3a6a:	91 05       	cpc	r25, r1
    3a6c:	b9 f0       	breq	.+46     	; 0x3a9c <EXINT_enuCallBack+0x78>
    3a6e:	2f 81       	ldd	r18, Y+7	; 0x07
    3a70:	38 85       	ldd	r19, Y+8	; 0x08
    3a72:	22 30       	cpi	r18, 0x02	; 2
    3a74:	31 05       	cpc	r19, r1
    3a76:	01 f1       	breq	.+64     	; 0x3ab8 <EXINT_enuCallBack+0x94>
    3a78:	8f 81       	ldd	r24, Y+7	; 0x07
    3a7a:	98 85       	ldd	r25, Y+8	; 0x08
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	51 f5       	brne	.+84     	; 0x3ad4 <EXINT_enuCallBack+0xb0>
			case EXINT_INT0:
				EXINT_pvoidfuncCallBack[EXINT_INT0] = Copy_pvoidfunCall;
    3a80:	8a 81       	ldd	r24, Y+2	; 0x02
    3a82:	9b 81       	ldd	r25, Y+3	; 0x03
    3a84:	90 93 79 01 	sts	0x0179, r25
    3a88:	80 93 78 01 	sts	0x0178, r24
				EXINT_pvoidParameter[EXINT_INT0] = Copy_pvoidParameter;
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a90:	90 93 73 01 	sts	0x0173, r25
    3a94:	80 93 72 01 	sts	0x0172, r24
				Local_enuErrorStates = ES_OK;
    3a98:	19 82       	std	Y+1, r1	; 0x01
    3a9a:	21 c0       	rjmp	.+66     	; 0x3ade <EXINT_enuCallBack+0xba>
				break;
			case EXINT_INT1:
				EXINT_pvoidfuncCallBack[EXINT_INT1] = Copy_pvoidfunCall;
    3a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa0:	90 93 7b 01 	sts	0x017B, r25
    3aa4:	80 93 7a 01 	sts	0x017A, r24
				EXINT_pvoidParameter[EXINT_INT1] = Copy_pvoidParameter;
    3aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    3aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    3aac:	90 93 75 01 	sts	0x0175, r25
    3ab0:	80 93 74 01 	sts	0x0174, r24
				Local_enuErrorStates = ES_OK;
    3ab4:	19 82       	std	Y+1, r1	; 0x01
    3ab6:	13 c0       	rjmp	.+38     	; 0x3ade <EXINT_enuCallBack+0xba>
				break;
			case EXINT_INT2:
				EXINT_pvoidfuncCallBack[EXINT_INT2] = Copy_pvoidfunCall;
    3ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aba:	9b 81       	ldd	r25, Y+3	; 0x03
    3abc:	90 93 7d 01 	sts	0x017D, r25
    3ac0:	80 93 7c 01 	sts	0x017C, r24
				EXINT_pvoidParameter[EXINT_INT2] = Copy_pvoidParameter;
    3ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ac8:	90 93 77 01 	sts	0x0177, r25
    3acc:	80 93 76 01 	sts	0x0176, r24
				Local_enuErrorStates = ES_OK;
    3ad0:	19 82       	std	Y+1, r1	; 0x01
    3ad2:	05 c0       	rjmp	.+10     	; 0x3ade <EXINT_enuCallBack+0xba>
				break;
			default:
				Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
    3ad4:	87 e0       	ldi	r24, 0x07	; 7
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <EXINT_enuCallBack+0xba>
				break;
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    3ada:	82 e0       	ldi	r24, 0x02	; 2
    3adc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ae0:	28 96       	adiw	r28, 0x08	; 8
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <__vector_1>:

EXINT0_ISR{
    3af2:	1f 92       	push	r1
    3af4:	0f 92       	push	r0
    3af6:	0f b6       	in	r0, 0x3f	; 63
    3af8:	0f 92       	push	r0
    3afa:	11 24       	eor	r1, r1
    3afc:	2f 93       	push	r18
    3afe:	3f 93       	push	r19
    3b00:	4f 93       	push	r20
    3b02:	5f 93       	push	r21
    3b04:	6f 93       	push	r22
    3b06:	7f 93       	push	r23
    3b08:	8f 93       	push	r24
    3b0a:	9f 93       	push	r25
    3b0c:	af 93       	push	r26
    3b0e:	bf 93       	push	r27
    3b10:	ef 93       	push	r30
    3b12:	ff 93       	push	r31
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
	if(EXINT_pvoidfuncCallBack[EXINT_INT0] != NULL && EXINT_pvoidParameter[EXINT_INT0] != NULL){
    3b1c:	80 91 78 01 	lds	r24, 0x0178
    3b20:	90 91 79 01 	lds	r25, 0x0179
    3b24:	00 97       	sbiw	r24, 0x00	; 0
    3b26:	79 f0       	breq	.+30     	; 0x3b46 <__vector_1+0x54>
    3b28:	80 91 72 01 	lds	r24, 0x0172
    3b2c:	90 91 73 01 	lds	r25, 0x0173
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	49 f0       	breq	.+18     	; 0x3b46 <__vector_1+0x54>
		EXINT_pvoidfuncCallBack[EXINT_INT0](EXINT_pvoidParameter[EXINT_INT0]);
    3b34:	e0 91 78 01 	lds	r30, 0x0178
    3b38:	f0 91 79 01 	lds	r31, 0x0179
    3b3c:	80 91 72 01 	lds	r24, 0x0172
    3b40:	90 91 73 01 	lds	r25, 0x0173
    3b44:	09 95       	icall
	}
}
    3b46:	cf 91       	pop	r28
    3b48:	df 91       	pop	r29
    3b4a:	ff 91       	pop	r31
    3b4c:	ef 91       	pop	r30
    3b4e:	bf 91       	pop	r27
    3b50:	af 91       	pop	r26
    3b52:	9f 91       	pop	r25
    3b54:	8f 91       	pop	r24
    3b56:	7f 91       	pop	r23
    3b58:	6f 91       	pop	r22
    3b5a:	5f 91       	pop	r21
    3b5c:	4f 91       	pop	r20
    3b5e:	3f 91       	pop	r19
    3b60:	2f 91       	pop	r18
    3b62:	0f 90       	pop	r0
    3b64:	0f be       	out	0x3f, r0	; 63
    3b66:	0f 90       	pop	r0
    3b68:	1f 90       	pop	r1
    3b6a:	18 95       	reti

00003b6c <__vector_2>:

EXINT1_ISR{
    3b6c:	1f 92       	push	r1
    3b6e:	0f 92       	push	r0
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	0f 92       	push	r0
    3b74:	11 24       	eor	r1, r1
    3b76:	2f 93       	push	r18
    3b78:	3f 93       	push	r19
    3b7a:	4f 93       	push	r20
    3b7c:	5f 93       	push	r21
    3b7e:	6f 93       	push	r22
    3b80:	7f 93       	push	r23
    3b82:	8f 93       	push	r24
    3b84:	9f 93       	push	r25
    3b86:	af 93       	push	r26
    3b88:	bf 93       	push	r27
    3b8a:	ef 93       	push	r30
    3b8c:	ff 93       	push	r31
    3b8e:	df 93       	push	r29
    3b90:	cf 93       	push	r28
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
	if(EXINT_pvoidfuncCallBack[EXINT_INT1] != NULL && EXINT_pvoidParameter[EXINT_INT1] != NULL){
    3b96:	80 91 7a 01 	lds	r24, 0x017A
    3b9a:	90 91 7b 01 	lds	r25, 0x017B
    3b9e:	00 97       	sbiw	r24, 0x00	; 0
    3ba0:	79 f0       	breq	.+30     	; 0x3bc0 <__vector_2+0x54>
    3ba2:	80 91 74 01 	lds	r24, 0x0174
    3ba6:	90 91 75 01 	lds	r25, 0x0175
    3baa:	00 97       	sbiw	r24, 0x00	; 0
    3bac:	49 f0       	breq	.+18     	; 0x3bc0 <__vector_2+0x54>
		EXINT_pvoidfuncCallBack[EXINT_INT1](EXINT_pvoidParameter[EXINT_INT1]);
    3bae:	e0 91 7a 01 	lds	r30, 0x017A
    3bb2:	f0 91 7b 01 	lds	r31, 0x017B
    3bb6:	80 91 74 01 	lds	r24, 0x0174
    3bba:	90 91 75 01 	lds	r25, 0x0175
    3bbe:	09 95       	icall
	}
}
    3bc0:	cf 91       	pop	r28
    3bc2:	df 91       	pop	r29
    3bc4:	ff 91       	pop	r31
    3bc6:	ef 91       	pop	r30
    3bc8:	bf 91       	pop	r27
    3bca:	af 91       	pop	r26
    3bcc:	9f 91       	pop	r25
    3bce:	8f 91       	pop	r24
    3bd0:	7f 91       	pop	r23
    3bd2:	6f 91       	pop	r22
    3bd4:	5f 91       	pop	r21
    3bd6:	4f 91       	pop	r20
    3bd8:	3f 91       	pop	r19
    3bda:	2f 91       	pop	r18
    3bdc:	0f 90       	pop	r0
    3bde:	0f be       	out	0x3f, r0	; 63
    3be0:	0f 90       	pop	r0
    3be2:	1f 90       	pop	r1
    3be4:	18 95       	reti

00003be6 <__vector_3>:

EXINT2_ISR{
    3be6:	1f 92       	push	r1
    3be8:	0f 92       	push	r0
    3bea:	0f b6       	in	r0, 0x3f	; 63
    3bec:	0f 92       	push	r0
    3bee:	11 24       	eor	r1, r1
    3bf0:	2f 93       	push	r18
    3bf2:	3f 93       	push	r19
    3bf4:	4f 93       	push	r20
    3bf6:	5f 93       	push	r21
    3bf8:	6f 93       	push	r22
    3bfa:	7f 93       	push	r23
    3bfc:	8f 93       	push	r24
    3bfe:	9f 93       	push	r25
    3c00:	af 93       	push	r26
    3c02:	bf 93       	push	r27
    3c04:	ef 93       	push	r30
    3c06:	ff 93       	push	r31
    3c08:	df 93       	push	r29
    3c0a:	cf 93       	push	r28
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
	if(EXINT_pvoidfuncCallBack[EXINT_INT2] != NULL && EXINT_pvoidParameter[EXINT_INT2] != NULL){
    3c10:	80 91 7c 01 	lds	r24, 0x017C
    3c14:	90 91 7d 01 	lds	r25, 0x017D
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	79 f0       	breq	.+30     	; 0x3c3a <__vector_3+0x54>
    3c1c:	80 91 76 01 	lds	r24, 0x0176
    3c20:	90 91 77 01 	lds	r25, 0x0177
    3c24:	00 97       	sbiw	r24, 0x00	; 0
    3c26:	49 f0       	breq	.+18     	; 0x3c3a <__vector_3+0x54>
		EXINT_pvoidfuncCallBack[EXINT_INT2](EXINT_pvoidParameter[EXINT_INT2]);
    3c28:	e0 91 7c 01 	lds	r30, 0x017C
    3c2c:	f0 91 7d 01 	lds	r31, 0x017D
    3c30:	80 91 76 01 	lds	r24, 0x0176
    3c34:	90 91 77 01 	lds	r25, 0x0177
    3c38:	09 95       	icall
	}
}
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	ff 91       	pop	r31
    3c40:	ef 91       	pop	r30
    3c42:	bf 91       	pop	r27
    3c44:	af 91       	pop	r26
    3c46:	9f 91       	pop	r25
    3c48:	8f 91       	pop	r24
    3c4a:	7f 91       	pop	r23
    3c4c:	6f 91       	pop	r22
    3c4e:	5f 91       	pop	r21
    3c50:	4f 91       	pop	r20
    3c52:	3f 91       	pop	r19
    3c54:	2f 91       	pop	r18
    3c56:	0f 90       	pop	r0
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	0f 90       	pop	r0
    3c5c:	1f 90       	pop	r1
    3c5e:	18 95       	reti

00003c60 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"



ES_t DIO_enuInit(void){
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	0f 92       	push	r0
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(DIO_PA_PIN0_DIR, DIO_PA_PIN1_DIR, DIO_PA_PIN2_DIR, DIO_PA_PIN3_DIR, DIO_PA_PIN4_DIR, DIO_PA_PIN5_DIR, DIO_PA_PIN6_DIR, DIO_PA_PIN7_DIR);
    3c6e:	ea e3       	ldi	r30, 0x3A	; 58
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	89 ed       	ldi	r24, 0xD9	; 217
    3c74:	80 83       	st	Z, r24
	DDRB = CONC(DIO_PB_PIN0_DIR, DIO_PB_PIN1_DIR, DIO_PB_PIN2_DIR, DIO_PB_PIN3_DIR, DIO_PB_PIN4_DIR, DIO_PB_PIN5_DIR, DIO_PB_PIN6_DIR, DIO_PB_PIN7_DIR);
    3c76:	e7 e3       	ldi	r30, 0x37	; 55
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	89 ed       	ldi	r24, 0xD9	; 217
    3c7c:	80 83       	st	Z, r24
	DDRC = CONC(DIO_PC_PIN0_DIR, DIO_PC_PIN1_DIR, DIO_PC_PIN2_DIR, DIO_PC_PIN3_DIR, DIO_PC_PIN4_DIR, DIO_PC_PIN5_DIR, DIO_PC_PIN6_DIR, DIO_PC_PIN7_DIR);
    3c7e:	e4 e3       	ldi	r30, 0x34	; 52
    3c80:	f0 e0       	ldi	r31, 0x00	; 0
    3c82:	89 ed       	ldi	r24, 0xD9	; 217
    3c84:	80 83       	st	Z, r24
	DDRD = CONC(DIO_PD_PIN0_DIR, DIO_PD_PIN1_DIR, DIO_PD_PIN2_DIR, DIO_PD_PIN3_DIR, DIO_PD_PIN4_DIR, DIO_PD_PIN5_DIR, DIO_PD_PIN6_DIR, DIO_PD_PIN7_DIR);
    3c86:	e1 e3       	ldi	r30, 0x31	; 49
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	89 ed       	ldi	r24, 0xD9	; 217
    3c8c:	80 83       	st	Z, r24

	PORTA = CONC(DIO_PA_PIN0_VAL, DIO_PA_PIN1_VAL, DIO_PA_PIN2_VAL, DIO_PA_PIN3_VAL, DIO_PA_PIN4_VAL, DIO_PA_PIN5_VAL, DIO_PA_PIN6_VAL, DIO_PA_PIN7_VAL);
    3c8e:	eb e3       	ldi	r30, 0x3B	; 59
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	8f e4       	ldi	r24, 0x4F	; 79
    3c94:	80 83       	st	Z, r24
	PORTB = CONC(DIO_PB_PIN0_VAL, DIO_PB_PIN1_VAL, DIO_PB_PIN2_VAL, DIO_PB_PIN3_VAL, DIO_PB_PIN4_VAL, DIO_PB_PIN5_VAL, DIO_PB_PIN6_VAL, DIO_PB_PIN7_VAL);
    3c96:	e8 e3       	ldi	r30, 0x38	; 56
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	8f e9       	ldi	r24, 0x9F	; 159
    3c9c:	80 83       	st	Z, r24
	PORTC = CONC(DIO_PC_PIN0_VAL, DIO_PC_PIN1_VAL, DIO_PC_PIN2_VAL, DIO_PC_PIN3_VAL, DIO_PC_PIN4_VAL, DIO_PC_PIN5_VAL, DIO_PC_PIN6_VAL, DIO_PC_PIN7_VAL);
    3c9e:	e5 e3       	ldi	r30, 0x35	; 53
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	8f e9       	ldi	r24, 0x9F	; 159
    3ca4:	80 83       	st	Z, r24
	PORTD = CONC(DIO_PD_PIN0_VAL, DIO_PD_PIN1_VAL, DIO_PD_PIN2_VAL, DIO_PD_PIN3_VAL, DIO_PD_PIN4_VAL, DIO_PD_PIN5_VAL, DIO_PD_PIN6_VAL, DIO_PD_PIN7_VAL);
    3ca6:	e2 e3       	ldi	r30, 0x32	; 50
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	8f e9       	ldi	r24, 0x9F	; 159
    3cac:	80 83       	st	Z, r24

	return Local_enuErrorState = ES_OK;
    3cae:	19 82       	std	Y+1, r1	; 0x01
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cb2:	0f 90       	pop	r0
    3cb4:	cf 91       	pop	r28
    3cb6:	df 91       	pop	r29
    3cb8:	08 95       	ret

00003cba <DIO_enuSetPortDir>:

ES_t DIO_enuSetPortDir(uint_8 Copy_uint8PortID, uint_8 Copy_uint8Value){
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <DIO_enuSetPortDir+0x6>
    3cc0:	00 d0       	rcall	.+0      	; 0x3cc2 <DIO_enuSetPortDir+0x8>
    3cc2:	0f 92       	push	r0
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	8a 83       	std	Y+2, r24	; 0x02
    3cca:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    3cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd2:	84 30       	cpi	r24, 0x04	; 4
    3cd4:	a0 f5       	brcc	.+104    	; 0x3d3e <DIO_enuSetPortDir+0x84>

		switch(Copy_uint8PortID){
    3cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd8:	28 2f       	mov	r18, r24
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	3d 83       	std	Y+5, r19	; 0x05
    3cde:	2c 83       	std	Y+4, r18	; 0x04
    3ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce4:	81 30       	cpi	r24, 0x01	; 1
    3ce6:	91 05       	cpc	r25, r1
    3ce8:	d1 f0       	breq	.+52     	; 0x3d1e <DIO_enuSetPortDir+0x64>
    3cea:	2c 81       	ldd	r18, Y+4	; 0x04
    3cec:	3d 81       	ldd	r19, Y+5	; 0x05
    3cee:	22 30       	cpi	r18, 0x02	; 2
    3cf0:	31 05       	cpc	r19, r1
    3cf2:	2c f4       	brge	.+10     	; 0x3cfe <DIO_enuSetPortDir+0x44>
    3cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    3cf8:	00 97       	sbiw	r24, 0x00	; 0
    3cfa:	61 f0       	breq	.+24     	; 0x3d14 <DIO_enuSetPortDir+0x5a>
    3cfc:	1e c0       	rjmp	.+60     	; 0x3d3a <DIO_enuSetPortDir+0x80>
    3cfe:	2c 81       	ldd	r18, Y+4	; 0x04
    3d00:	3d 81       	ldd	r19, Y+5	; 0x05
    3d02:	22 30       	cpi	r18, 0x02	; 2
    3d04:	31 05       	cpc	r19, r1
    3d06:	81 f0       	breq	.+32     	; 0x3d28 <DIO_enuSetPortDir+0x6e>
    3d08:	8c 81       	ldd	r24, Y+4	; 0x04
    3d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d0c:	83 30       	cpi	r24, 0x03	; 3
    3d0e:	91 05       	cpc	r25, r1
    3d10:	81 f0       	breq	.+32     	; 0x3d32 <DIO_enuSetPortDir+0x78>
    3d12:	13 c0       	rjmp	.+38     	; 0x3d3a <DIO_enuSetPortDir+0x80>
			case DIO_PORTA:
				DDRA =  Copy_uint8Value;
    3d14:	ea e3       	ldi	r30, 0x3A	; 58
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	80 83       	st	Z, r24
    3d1c:	0e c0       	rjmp	.+28     	; 0x3d3a <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTB:
				DDRB =  Copy_uint8Value;
    3d1e:	e7 e3       	ldi	r30, 0x37	; 55
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	8b 81       	ldd	r24, Y+3	; 0x03
    3d24:	80 83       	st	Z, r24
    3d26:	09 c0       	rjmp	.+18     	; 0x3d3a <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTC:
				DDRC =  Copy_uint8Value;
    3d28:	e4 e3       	ldi	r30, 0x34	; 52
    3d2a:	f0 e0       	ldi	r31, 0x00	; 0
    3d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2e:	80 83       	st	Z, r24
    3d30:	04 c0       	rjmp	.+8      	; 0x3d3a <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTD:
				DDRD =  Copy_uint8Value;
    3d32:	e1 e3       	ldi	r30, 0x31	; 49
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	8b 81       	ldd	r24, Y+3	; 0x03
    3d38:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    3d3a:	19 82       	std	Y+1, r1	; 0x01
    3d3c:	02 c0       	rjmp	.+4      	; 0x3d42 <DIO_enuSetPortDir+0x88>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    3d3e:	83 e0       	ldi	r24, 0x03	; 3
    3d40:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	08 95       	ret

00003d54 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8Value){
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	00 d0       	rcall	.+0      	; 0x3d5a <DIO_enuSetPortValue+0x6>
    3d5a:	00 d0       	rcall	.+0      	; 0x3d5c <DIO_enuSetPortValue+0x8>
    3d5c:	0f 92       	push	r0
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	8a 83       	std	Y+2, r24	; 0x02
    3d64:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	84 30       	cpi	r24, 0x04	; 4
    3d6e:	a0 f5       	brcc	.+104    	; 0x3dd8 <DIO_enuSetPortValue+0x84>

		switch(Copy_uint8PortID){
    3d70:	8a 81       	ldd	r24, Y+2	; 0x02
    3d72:	28 2f       	mov	r18, r24
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	3d 83       	std	Y+5, r19	; 0x05
    3d78:	2c 83       	std	Y+4, r18	; 0x04
    3d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d7e:	81 30       	cpi	r24, 0x01	; 1
    3d80:	91 05       	cpc	r25, r1
    3d82:	d1 f0       	breq	.+52     	; 0x3db8 <DIO_enuSetPortValue+0x64>
    3d84:	2c 81       	ldd	r18, Y+4	; 0x04
    3d86:	3d 81       	ldd	r19, Y+5	; 0x05
    3d88:	22 30       	cpi	r18, 0x02	; 2
    3d8a:	31 05       	cpc	r19, r1
    3d8c:	2c f4       	brge	.+10     	; 0x3d98 <DIO_enuSetPortValue+0x44>
    3d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d90:	9d 81       	ldd	r25, Y+5	; 0x05
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	61 f0       	breq	.+24     	; 0x3dae <DIO_enuSetPortValue+0x5a>
    3d96:	1e c0       	rjmp	.+60     	; 0x3dd4 <DIO_enuSetPortValue+0x80>
    3d98:	2c 81       	ldd	r18, Y+4	; 0x04
    3d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    3d9c:	22 30       	cpi	r18, 0x02	; 2
    3d9e:	31 05       	cpc	r19, r1
    3da0:	81 f0       	breq	.+32     	; 0x3dc2 <DIO_enuSetPortValue+0x6e>
    3da2:	8c 81       	ldd	r24, Y+4	; 0x04
    3da4:	9d 81       	ldd	r25, Y+5	; 0x05
    3da6:	83 30       	cpi	r24, 0x03	; 3
    3da8:	91 05       	cpc	r25, r1
    3daa:	81 f0       	breq	.+32     	; 0x3dcc <DIO_enuSetPortValue+0x78>
    3dac:	13 c0       	rjmp	.+38     	; 0x3dd4 <DIO_enuSetPortValue+0x80>
			case DIO_PORTA:
				PORTA =  Copy_uint8Value;
    3dae:	eb e3       	ldi	r30, 0x3B	; 59
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	80 83       	st	Z, r24
    3db6:	0e c0       	rjmp	.+28     	; 0x3dd4 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTB:
				PORTB =  Copy_uint8Value;
    3db8:	e8 e3       	ldi	r30, 0x38	; 56
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbe:	80 83       	st	Z, r24
    3dc0:	09 c0       	rjmp	.+18     	; 0x3dd4 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTC:
				PORTC =  Copy_uint8Value;
    3dc2:	e5 e3       	ldi	r30, 0x35	; 53
    3dc4:	f0 e0       	ldi	r31, 0x00	; 0
    3dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc8:	80 83       	st	Z, r24
    3dca:	04 c0       	rjmp	.+8      	; 0x3dd4 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTD:
				PORTD =  Copy_uint8Value;
    3dcc:	e2 e3       	ldi	r30, 0x32	; 50
    3dce:	f0 e0       	ldi	r31, 0x00	; 0
    3dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd2:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    3dd4:	19 82       	std	Y+1, r1	; 0x01
    3dd6:	02 c0       	rjmp	.+4      	; 0x3ddc <DIO_enuSetPortValue+0x88>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    3dd8:	83 e0       	ldi	r24, 0x03	; 3
    3dda:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	cf 91       	pop	r28
    3dea:	df 91       	pop	r29
    3dec:	08 95       	ret

00003dee <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(uint_8 Copy_uint8PortID){
    3dee:	df 93       	push	r29
    3df0:	cf 93       	push	r28
    3df2:	00 d0       	rcall	.+0      	; 0x3df4 <DIO_enuTogPortValue+0x6>
    3df4:	00 d0       	rcall	.+0      	; 0x3df6 <DIO_enuTogPortValue+0x8>
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
    3dfa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	84 30       	cpi	r24, 0x04	; 4
    3e04:	08 f0       	brcs	.+2      	; 0x3e08 <DIO_enuTogPortValue+0x1a>
    3e06:	40 c0       	rjmp	.+128    	; 0x3e88 <DIO_enuTogPortValue+0x9a>

		switch(Copy_uint8PortID){
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	28 2f       	mov	r18, r24
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	3c 83       	std	Y+4, r19	; 0x04
    3e10:	2b 83       	std	Y+3, r18	; 0x03
    3e12:	8b 81       	ldd	r24, Y+3	; 0x03
    3e14:	9c 81       	ldd	r25, Y+4	; 0x04
    3e16:	81 30       	cpi	r24, 0x01	; 1
    3e18:	91 05       	cpc	r25, r1
    3e1a:	e9 f0       	breq	.+58     	; 0x3e56 <DIO_enuTogPortValue+0x68>
    3e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    3e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    3e20:	22 30       	cpi	r18, 0x02	; 2
    3e22:	31 05       	cpc	r19, r1
    3e24:	2c f4       	brge	.+10     	; 0x3e30 <DIO_enuTogPortValue+0x42>
    3e26:	8b 81       	ldd	r24, Y+3	; 0x03
    3e28:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2a:	00 97       	sbiw	r24, 0x00	; 0
    3e2c:	61 f0       	breq	.+24     	; 0x3e46 <DIO_enuTogPortValue+0x58>
    3e2e:	2a c0       	rjmp	.+84     	; 0x3e84 <DIO_enuTogPortValue+0x96>
    3e30:	2b 81       	ldd	r18, Y+3	; 0x03
    3e32:	3c 81       	ldd	r19, Y+4	; 0x04
    3e34:	22 30       	cpi	r18, 0x02	; 2
    3e36:	31 05       	cpc	r19, r1
    3e38:	b1 f0       	breq	.+44     	; 0x3e66 <DIO_enuTogPortValue+0x78>
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3e:	83 30       	cpi	r24, 0x03	; 3
    3e40:	91 05       	cpc	r25, r1
    3e42:	c9 f0       	breq	.+50     	; 0x3e76 <DIO_enuTogPortValue+0x88>
    3e44:	1f c0       	rjmp	.+62     	; 0x3e84 <DIO_enuTogPortValue+0x96>
			case DIO_PORTA:
				PORTA = ~PORTA ;
    3e46:	ab e3       	ldi	r26, 0x3B	; 59
    3e48:	b0 e0       	ldi	r27, 0x00	; 0
    3e4a:	eb e3       	ldi	r30, 0x3B	; 59
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	80 81       	ld	r24, Z
    3e50:	80 95       	com	r24
    3e52:	8c 93       	st	X, r24
    3e54:	17 c0       	rjmp	.+46     	; 0x3e84 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTB:
				PORTB =  ~PORTB;
    3e56:	a8 e3       	ldi	r26, 0x38	; 56
    3e58:	b0 e0       	ldi	r27, 0x00	; 0
    3e5a:	e8 e3       	ldi	r30, 0x38	; 56
    3e5c:	f0 e0       	ldi	r31, 0x00	; 0
    3e5e:	80 81       	ld	r24, Z
    3e60:	80 95       	com	r24
    3e62:	8c 93       	st	X, r24
    3e64:	0f c0       	rjmp	.+30     	; 0x3e84 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTC:
				PORTC =  ~PORTC;
    3e66:	a5 e3       	ldi	r26, 0x35	; 53
    3e68:	b0 e0       	ldi	r27, 0x00	; 0
    3e6a:	e5 e3       	ldi	r30, 0x35	; 53
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	80 81       	ld	r24, Z
    3e70:	80 95       	com	r24
    3e72:	8c 93       	st	X, r24
    3e74:	07 c0       	rjmp	.+14     	; 0x3e84 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTD:
				PORTD =  ~PORTD;
    3e76:	a2 e3       	ldi	r26, 0x32	; 50
    3e78:	b0 e0       	ldi	r27, 0x00	; 0
    3e7a:	e2 e3       	ldi	r30, 0x32	; 50
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	80 81       	ld	r24, Z
    3e80:	80 95       	com	r24
    3e82:	8c 93       	st	X, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    3e84:	19 82       	std	Y+1, r1	; 0x01
    3e86:	02 c0       	rjmp	.+4      	; 0x3e8c <DIO_enuTogPortValue+0x9e>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    3e88:	83 e0       	ldi	r24, 0x03	; 3
    3e8a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	cf 91       	pop	r28
    3e98:	df 91       	pop	r29
    3e9a:	08 95       	ret

00003e9c <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(uint_8 Copy_uint8PortID, uint_8 *Copy_uint8Value){
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	00 d0       	rcall	.+0      	; 0x3ea2 <DIO_enuGetPortValue+0x6>
    3ea2:	00 d0       	rcall	.+0      	; 0x3ea4 <DIO_enuGetPortValue+0x8>
    3ea4:	00 d0       	rcall	.+0      	; 0x3ea6 <DIO_enuGetPortValue+0xa>
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	8a 83       	std	Y+2, r24	; 0x02
    3eac:	7c 83       	std	Y+4, r23	; 0x04
    3eae:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	84 30       	cpi	r24, 0x04	; 4
    3eb8:	e0 f5       	brcc	.+120    	; 0x3f32 <DIO_enuGetPortValue+0x96>

		switch(Copy_uint8PortID){
    3eba:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	3e 83       	std	Y+6, r19	; 0x06
    3ec2:	2d 83       	std	Y+5, r18	; 0x05
    3ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec8:	81 30       	cpi	r24, 0x01	; 1
    3eca:	91 05       	cpc	r25, r1
    3ecc:	e1 f0       	breq	.+56     	; 0x3f06 <DIO_enuGetPortValue+0x6a>
    3ece:	2d 81       	ldd	r18, Y+5	; 0x05
    3ed0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ed2:	22 30       	cpi	r18, 0x02	; 2
    3ed4:	31 05       	cpc	r19, r1
    3ed6:	2c f4       	brge	.+10     	; 0x3ee2 <DIO_enuGetPortValue+0x46>
    3ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eda:	9e 81       	ldd	r25, Y+6	; 0x06
    3edc:	00 97       	sbiw	r24, 0x00	; 0
    3ede:	61 f0       	breq	.+24     	; 0x3ef8 <DIO_enuGetPortValue+0x5c>
    3ee0:	26 c0       	rjmp	.+76     	; 0x3f2e <DIO_enuGetPortValue+0x92>
    3ee2:	2d 81       	ldd	r18, Y+5	; 0x05
    3ee4:	3e 81       	ldd	r19, Y+6	; 0x06
    3ee6:	22 30       	cpi	r18, 0x02	; 2
    3ee8:	31 05       	cpc	r19, r1
    3eea:	a1 f0       	breq	.+40     	; 0x3f14 <DIO_enuGetPortValue+0x78>
    3eec:	8d 81       	ldd	r24, Y+5	; 0x05
    3eee:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef0:	83 30       	cpi	r24, 0x03	; 3
    3ef2:	91 05       	cpc	r25, r1
    3ef4:	b1 f0       	breq	.+44     	; 0x3f22 <DIO_enuGetPortValue+0x86>
    3ef6:	1b c0       	rjmp	.+54     	; 0x3f2e <DIO_enuGetPortValue+0x92>
			case DIO_PORTA:
				*Copy_uint8Value = PINA;
    3ef8:	e9 e3       	ldi	r30, 0x39	; 57
    3efa:	f0 e0       	ldi	r31, 0x00	; 0
    3efc:	80 81       	ld	r24, Z
    3efe:	eb 81       	ldd	r30, Y+3	; 0x03
    3f00:	fc 81       	ldd	r31, Y+4	; 0x04
    3f02:	80 83       	st	Z, r24
    3f04:	14 c0       	rjmp	.+40     	; 0x3f2e <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTB:
				*Copy_uint8Value = PINB;
    3f06:	e6 e3       	ldi	r30, 0x36	; 54
    3f08:	f0 e0       	ldi	r31, 0x00	; 0
    3f0a:	80 81       	ld	r24, Z
    3f0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f10:	80 83       	st	Z, r24
    3f12:	0d c0       	rjmp	.+26     	; 0x3f2e <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTC:
				*Copy_uint8Value = PINC;
    3f14:	e3 e3       	ldi	r30, 0x33	; 51
    3f16:	f0 e0       	ldi	r31, 0x00	; 0
    3f18:	80 81       	ld	r24, Z
    3f1a:	eb 81       	ldd	r30, Y+3	; 0x03
    3f1c:	fc 81       	ldd	r31, Y+4	; 0x04
    3f1e:	80 83       	st	Z, r24
    3f20:	06 c0       	rjmp	.+12     	; 0x3f2e <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTD:
				*Copy_uint8Value = PIND;
    3f22:	e0 e3       	ldi	r30, 0x30	; 48
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	80 81       	ld	r24, Z
    3f28:	eb 81       	ldd	r30, Y+3	; 0x03
    3f2a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f2c:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    3f2e:	19 82       	std	Y+1, r1	; 0x01
    3f30:	02 c0       	rjmp	.+4      	; 0x3f36 <DIO_enuGetPortValue+0x9a>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    3f32:	83 e0       	ldi	r24, 0x03	; 3
    3f34:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f38:	26 96       	adiw	r28, 0x06	; 6
    3f3a:	0f b6       	in	r0, 0x3f	; 63
    3f3c:	f8 94       	cli
    3f3e:	de bf       	out	0x3e, r29	; 62
    3f40:	0f be       	out	0x3f, r0	; 63
    3f42:	cd bf       	out	0x3d, r28	; 61
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	08 95       	ret

00003f4a <DIO_enuSetPinDir>:

ES_t DIO_enuSetPinDir(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 Copy_uint8Value){
    3f4a:	df 93       	push	r29
    3f4c:	cf 93       	push	r28
    3f4e:	00 d0       	rcall	.+0      	; 0x3f50 <DIO_enuSetPinDir+0x6>
    3f50:	00 d0       	rcall	.+0      	; 0x3f52 <DIO_enuSetPinDir+0x8>
    3f52:	00 d0       	rcall	.+0      	; 0x3f54 <DIO_enuSetPinDir+0xa>
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
    3f58:	8a 83       	std	Y+2, r24	; 0x02
    3f5a:	6b 83       	std	Y+3, r22	; 0x03
    3f5c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    3f62:	8a 81       	ldd	r24, Y+2	; 0x02
    3f64:	84 30       	cpi	r24, 0x04	; 4
    3f66:	08 f0       	brcs	.+2      	; 0x3f6a <DIO_enuSetPinDir+0x20>
    3f68:	cf c0       	rjmp	.+414    	; 0x4108 <DIO_enuSetPinDir+0x1be>
		if(Copy_uint8PinID <= DIO_PIN7){
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	88 30       	cpi	r24, 0x08	; 8
    3f6e:	08 f0       	brcs	.+2      	; 0x3f72 <DIO_enuSetPinDir+0x28>
    3f70:	c8 c0       	rjmp	.+400    	; 0x4102 <DIO_enuSetPinDir+0x1b8>
			switch(Copy_uint8PortID){
    3f72:	8a 81       	ldd	r24, Y+2	; 0x02
    3f74:	28 2f       	mov	r18, r24
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	3e 83       	std	Y+6, r19	; 0x06
    3f7a:	2d 83       	std	Y+5, r18	; 0x05
    3f7c:	6d 81       	ldd	r22, Y+5	; 0x05
    3f7e:	7e 81       	ldd	r23, Y+6	; 0x06
    3f80:	61 30       	cpi	r22, 0x01	; 1
    3f82:	71 05       	cpc	r23, r1
    3f84:	09 f4       	brne	.+2      	; 0x3f88 <DIO_enuSetPinDir+0x3e>
    3f86:	41 c0       	rjmp	.+130    	; 0x400a <DIO_enuSetPinDir+0xc0>
    3f88:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8c:	82 30       	cpi	r24, 0x02	; 2
    3f8e:	91 05       	cpc	r25, r1
    3f90:	34 f4       	brge	.+12     	; 0x3f9e <DIO_enuSetPinDir+0x54>
    3f92:	2d 81       	ldd	r18, Y+5	; 0x05
    3f94:	3e 81       	ldd	r19, Y+6	; 0x06
    3f96:	21 15       	cp	r18, r1
    3f98:	31 05       	cpc	r19, r1
    3f9a:	71 f0       	breq	.+28     	; 0x3fb8 <DIO_enuSetPinDir+0x6e>
    3f9c:	b0 c0       	rjmp	.+352    	; 0x40fe <DIO_enuSetPinDir+0x1b4>
    3f9e:	6d 81       	ldd	r22, Y+5	; 0x05
    3fa0:	7e 81       	ldd	r23, Y+6	; 0x06
    3fa2:	62 30       	cpi	r22, 0x02	; 2
    3fa4:	71 05       	cpc	r23, r1
    3fa6:	09 f4       	brne	.+2      	; 0x3faa <DIO_enuSetPinDir+0x60>
    3fa8:	59 c0       	rjmp	.+178    	; 0x405c <DIO_enuSetPinDir+0x112>
    3faa:	8d 81       	ldd	r24, Y+5	; 0x05
    3fac:	9e 81       	ldd	r25, Y+6	; 0x06
    3fae:	83 30       	cpi	r24, 0x03	; 3
    3fb0:	91 05       	cpc	r25, r1
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <DIO_enuSetPinDir+0x6c>
    3fb4:	7c c0       	rjmp	.+248    	; 0x40ae <DIO_enuSetPinDir+0x164>
    3fb6:	a3 c0       	rjmp	.+326    	; 0x40fe <DIO_enuSetPinDir+0x1b4>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK << Copy_uint8PinID);
    3fb8:	aa e3       	ldi	r26, 0x3A	; 58
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	ea e3       	ldi	r30, 0x3A	; 58
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	80 81       	ld	r24, Z
    3fc2:	48 2f       	mov	r20, r24
    3fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc6:	28 2f       	mov	r18, r24
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	02 c0       	rjmp	.+4      	; 0x3fd4 <DIO_enuSetPinDir+0x8a>
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	2a 95       	dec	r18
    3fd6:	e2 f7       	brpl	.-8      	; 0x3fd0 <DIO_enuSetPinDir+0x86>
    3fd8:	80 95       	com	r24
    3fda:	84 23       	and	r24, r20
    3fdc:	8c 93       	st	X, r24
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
    3fde:	aa e3       	ldi	r26, 0x3A	; 58
    3fe0:	b0 e0       	ldi	r27, 0x00	; 0
    3fe2:	ea e3       	ldi	r30, 0x3A	; 58
    3fe4:	f0 e0       	ldi	r31, 0x00	; 0
    3fe6:	80 81       	ld	r24, Z
    3fe8:	48 2f       	mov	r20, r24
    3fea:	8c 81       	ldd	r24, Y+4	; 0x04
    3fec:	28 2f       	mov	r18, r24
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff2:	88 2f       	mov	r24, r24
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	b9 01       	movw	r22, r18
    3ff8:	02 c0       	rjmp	.+4      	; 0x3ffe <DIO_enuSetPinDir+0xb4>
    3ffa:	66 0f       	add	r22, r22
    3ffc:	77 1f       	adc	r23, r23
    3ffe:	8a 95       	dec	r24
    4000:	e2 f7       	brpl	.-8      	; 0x3ffa <DIO_enuSetPinDir+0xb0>
    4002:	cb 01       	movw	r24, r22
    4004:	84 2b       	or	r24, r20
    4006:	8c 93       	st	X, r24
    4008:	7a c0       	rjmp	.+244    	; 0x40fe <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK << Copy_uint8PinID);
    400a:	a7 e3       	ldi	r26, 0x37	; 55
    400c:	b0 e0       	ldi	r27, 0x00	; 0
    400e:	e7 e3       	ldi	r30, 0x37	; 55
    4010:	f0 e0       	ldi	r31, 0x00	; 0
    4012:	80 81       	ld	r24, Z
    4014:	48 2f       	mov	r20, r24
    4016:	8b 81       	ldd	r24, Y+3	; 0x03
    4018:	28 2f       	mov	r18, r24
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	81 e0       	ldi	r24, 0x01	; 1
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	02 c0       	rjmp	.+4      	; 0x4026 <DIO_enuSetPinDir+0xdc>
    4022:	88 0f       	add	r24, r24
    4024:	99 1f       	adc	r25, r25
    4026:	2a 95       	dec	r18
    4028:	e2 f7       	brpl	.-8      	; 0x4022 <DIO_enuSetPinDir+0xd8>
    402a:	80 95       	com	r24
    402c:	84 23       	and	r24, r20
    402e:	8c 93       	st	X, r24
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
    4030:	a7 e3       	ldi	r26, 0x37	; 55
    4032:	b0 e0       	ldi	r27, 0x00	; 0
    4034:	e7 e3       	ldi	r30, 0x37	; 55
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	80 81       	ld	r24, Z
    403a:	48 2f       	mov	r20, r24
    403c:	8c 81       	ldd	r24, Y+4	; 0x04
    403e:	28 2f       	mov	r18, r24
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	8b 81       	ldd	r24, Y+3	; 0x03
    4044:	88 2f       	mov	r24, r24
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	b9 01       	movw	r22, r18
    404a:	02 c0       	rjmp	.+4      	; 0x4050 <DIO_enuSetPinDir+0x106>
    404c:	66 0f       	add	r22, r22
    404e:	77 1f       	adc	r23, r23
    4050:	8a 95       	dec	r24
    4052:	e2 f7       	brpl	.-8      	; 0x404c <DIO_enuSetPinDir+0x102>
    4054:	cb 01       	movw	r24, r22
    4056:	84 2b       	or	r24, r20
    4058:	8c 93       	st	X, r24
    405a:	51 c0       	rjmp	.+162    	; 0x40fe <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK << Copy_uint8PinID);
    405c:	a4 e3       	ldi	r26, 0x34	; 52
    405e:	b0 e0       	ldi	r27, 0x00	; 0
    4060:	e4 e3       	ldi	r30, 0x34	; 52
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	80 81       	ld	r24, Z
    4066:	48 2f       	mov	r20, r24
    4068:	8b 81       	ldd	r24, Y+3	; 0x03
    406a:	28 2f       	mov	r18, r24
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	02 c0       	rjmp	.+4      	; 0x4078 <DIO_enuSetPinDir+0x12e>
    4074:	88 0f       	add	r24, r24
    4076:	99 1f       	adc	r25, r25
    4078:	2a 95       	dec	r18
    407a:	e2 f7       	brpl	.-8      	; 0x4074 <DIO_enuSetPinDir+0x12a>
    407c:	80 95       	com	r24
    407e:	84 23       	and	r24, r20
    4080:	8c 93       	st	X, r24
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
    4082:	a4 e3       	ldi	r26, 0x34	; 52
    4084:	b0 e0       	ldi	r27, 0x00	; 0
    4086:	e4 e3       	ldi	r30, 0x34	; 52
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	80 81       	ld	r24, Z
    408c:	48 2f       	mov	r20, r24
    408e:	8c 81       	ldd	r24, Y+4	; 0x04
    4090:	28 2f       	mov	r18, r24
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	88 2f       	mov	r24, r24
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	b9 01       	movw	r22, r18
    409c:	02 c0       	rjmp	.+4      	; 0x40a2 <DIO_enuSetPinDir+0x158>
    409e:	66 0f       	add	r22, r22
    40a0:	77 1f       	adc	r23, r23
    40a2:	8a 95       	dec	r24
    40a4:	e2 f7       	brpl	.-8      	; 0x409e <DIO_enuSetPinDir+0x154>
    40a6:	cb 01       	movw	r24, r22
    40a8:	84 2b       	or	r24, r20
    40aa:	8c 93       	st	X, r24
    40ac:	28 c0       	rjmp	.+80     	; 0x40fe <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
    40ae:	a1 e3       	ldi	r26, 0x31	; 49
    40b0:	b0 e0       	ldi	r27, 0x00	; 0
    40b2:	e1 e3       	ldi	r30, 0x31	; 49
    40b4:	f0 e0       	ldi	r31, 0x00	; 0
    40b6:	80 81       	ld	r24, Z
    40b8:	48 2f       	mov	r20, r24
    40ba:	8b 81       	ldd	r24, Y+3	; 0x03
    40bc:	28 2f       	mov	r18, r24
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	02 c0       	rjmp	.+4      	; 0x40ca <DIO_enuSetPinDir+0x180>
    40c6:	88 0f       	add	r24, r24
    40c8:	99 1f       	adc	r25, r25
    40ca:	2a 95       	dec	r18
    40cc:	e2 f7       	brpl	.-8      	; 0x40c6 <DIO_enuSetPinDir+0x17c>
    40ce:	80 95       	com	r24
    40d0:	84 23       	and	r24, r20
    40d2:	8c 93       	st	X, r24
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
    40d4:	a1 e3       	ldi	r26, 0x31	; 49
    40d6:	b0 e0       	ldi	r27, 0x00	; 0
    40d8:	e1 e3       	ldi	r30, 0x31	; 49
    40da:	f0 e0       	ldi	r31, 0x00	; 0
    40dc:	80 81       	ld	r24, Z
    40de:	48 2f       	mov	r20, r24
    40e0:	8c 81       	ldd	r24, Y+4	; 0x04
    40e2:	28 2f       	mov	r18, r24
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	8b 81       	ldd	r24, Y+3	; 0x03
    40e8:	88 2f       	mov	r24, r24
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	b9 01       	movw	r22, r18
    40ee:	02 c0       	rjmp	.+4      	; 0x40f4 <DIO_enuSetPinDir+0x1aa>
    40f0:	66 0f       	add	r22, r22
    40f2:	77 1f       	adc	r23, r23
    40f4:	8a 95       	dec	r24
    40f6:	e2 f7       	brpl	.-8      	; 0x40f0 <DIO_enuSetPinDir+0x1a6>
    40f8:	cb 01       	movw	r24, r22
    40fa:	84 2b       	or	r24, r20
    40fc:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    40fe:	19 82       	std	Y+1, r1	; 0x01
    4100:	05 c0       	rjmp	.+10     	; 0x410c <DIO_enuSetPinDir+0x1c2>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    4102:	84 e0       	ldi	r24, 0x04	; 4
    4104:	89 83       	std	Y+1, r24	; 0x01
    4106:	02 c0       	rjmp	.+4      	; 0x410c <DIO_enuSetPinDir+0x1c2>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    4108:	83 e0       	ldi	r24, 0x03	; 3
    410a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    410c:	89 81       	ldd	r24, Y+1	; 0x01
}
    410e:	26 96       	adiw	r28, 0x06	; 6
    4110:	0f b6       	in	r0, 0x3f	; 63
    4112:	f8 94       	cli
    4114:	de bf       	out	0x3e, r29	; 62
    4116:	0f be       	out	0x3f, r0	; 63
    4118:	cd bf       	out	0x3d, r28	; 61
    411a:	cf 91       	pop	r28
    411c:	df 91       	pop	r29
    411e:	08 95       	ret

00004120 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 Copy_uint8Value){
    4120:	df 93       	push	r29
    4122:	cf 93       	push	r28
    4124:	00 d0       	rcall	.+0      	; 0x4126 <DIO_enuSetPinValue+0x6>
    4126:	00 d0       	rcall	.+0      	; 0x4128 <DIO_enuSetPinValue+0x8>
    4128:	00 d0       	rcall	.+0      	; 0x412a <DIO_enuSetPinValue+0xa>
    412a:	cd b7       	in	r28, 0x3d	; 61
    412c:	de b7       	in	r29, 0x3e	; 62
    412e:	8a 83       	std	Y+2, r24	; 0x02
    4130:	6b 83       	std	Y+3, r22	; 0x03
    4132:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    4138:	8a 81       	ldd	r24, Y+2	; 0x02
    413a:	84 30       	cpi	r24, 0x04	; 4
    413c:	08 f0       	brcs	.+2      	; 0x4140 <DIO_enuSetPinValue+0x20>
    413e:	cf c0       	rjmp	.+414    	; 0x42de <DIO_enuSetPinValue+0x1be>
		if(Copy_uint8PinID <= DIO_PIN7){
    4140:	8b 81       	ldd	r24, Y+3	; 0x03
    4142:	88 30       	cpi	r24, 0x08	; 8
    4144:	08 f0       	brcs	.+2      	; 0x4148 <DIO_enuSetPinValue+0x28>
    4146:	c8 c0       	rjmp	.+400    	; 0x42d8 <DIO_enuSetPinValue+0x1b8>
			switch(Copy_uint8PortID){
    4148:	8a 81       	ldd	r24, Y+2	; 0x02
    414a:	28 2f       	mov	r18, r24
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	3e 83       	std	Y+6, r19	; 0x06
    4150:	2d 83       	std	Y+5, r18	; 0x05
    4152:	6d 81       	ldd	r22, Y+5	; 0x05
    4154:	7e 81       	ldd	r23, Y+6	; 0x06
    4156:	61 30       	cpi	r22, 0x01	; 1
    4158:	71 05       	cpc	r23, r1
    415a:	09 f4       	brne	.+2      	; 0x415e <DIO_enuSetPinValue+0x3e>
    415c:	41 c0       	rjmp	.+130    	; 0x41e0 <DIO_enuSetPinValue+0xc0>
    415e:	8d 81       	ldd	r24, Y+5	; 0x05
    4160:	9e 81       	ldd	r25, Y+6	; 0x06
    4162:	82 30       	cpi	r24, 0x02	; 2
    4164:	91 05       	cpc	r25, r1
    4166:	34 f4       	brge	.+12     	; 0x4174 <DIO_enuSetPinValue+0x54>
    4168:	2d 81       	ldd	r18, Y+5	; 0x05
    416a:	3e 81       	ldd	r19, Y+6	; 0x06
    416c:	21 15       	cp	r18, r1
    416e:	31 05       	cpc	r19, r1
    4170:	71 f0       	breq	.+28     	; 0x418e <DIO_enuSetPinValue+0x6e>
    4172:	b0 c0       	rjmp	.+352    	; 0x42d4 <DIO_enuSetPinValue+0x1b4>
    4174:	6d 81       	ldd	r22, Y+5	; 0x05
    4176:	7e 81       	ldd	r23, Y+6	; 0x06
    4178:	62 30       	cpi	r22, 0x02	; 2
    417a:	71 05       	cpc	r23, r1
    417c:	09 f4       	brne	.+2      	; 0x4180 <DIO_enuSetPinValue+0x60>
    417e:	59 c0       	rjmp	.+178    	; 0x4232 <DIO_enuSetPinValue+0x112>
    4180:	8d 81       	ldd	r24, Y+5	; 0x05
    4182:	9e 81       	ldd	r25, Y+6	; 0x06
    4184:	83 30       	cpi	r24, 0x03	; 3
    4186:	91 05       	cpc	r25, r1
    4188:	09 f4       	brne	.+2      	; 0x418c <DIO_enuSetPinValue+0x6c>
    418a:	7c c0       	rjmp	.+248    	; 0x4284 <DIO_enuSetPinValue+0x164>
    418c:	a3 c0       	rjmp	.+326    	; 0x42d4 <DIO_enuSetPinValue+0x1b4>
				case DIO_PORTA:
					PORTA &= ~(BIT_MASK << Copy_uint8PinID);
    418e:	ab e3       	ldi	r26, 0x3B	; 59
    4190:	b0 e0       	ldi	r27, 0x00	; 0
    4192:	eb e3       	ldi	r30, 0x3B	; 59
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	80 81       	ld	r24, Z
    4198:	48 2f       	mov	r20, r24
    419a:	8b 81       	ldd	r24, Y+3	; 0x03
    419c:	28 2f       	mov	r18, r24
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <DIO_enuSetPinValue+0x8a>
    41a6:	88 0f       	add	r24, r24
    41a8:	99 1f       	adc	r25, r25
    41aa:	2a 95       	dec	r18
    41ac:	e2 f7       	brpl	.-8      	; 0x41a6 <DIO_enuSetPinValue+0x86>
    41ae:	80 95       	com	r24
    41b0:	84 23       	and	r24, r20
    41b2:	8c 93       	st	X, r24
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
    41b4:	ab e3       	ldi	r26, 0x3B	; 59
    41b6:	b0 e0       	ldi	r27, 0x00	; 0
    41b8:	eb e3       	ldi	r30, 0x3B	; 59
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	80 81       	ld	r24, Z
    41be:	48 2f       	mov	r20, r24
    41c0:	8c 81       	ldd	r24, Y+4	; 0x04
    41c2:	28 2f       	mov	r18, r24
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	8b 81       	ldd	r24, Y+3	; 0x03
    41c8:	88 2f       	mov	r24, r24
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	b9 01       	movw	r22, r18
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <DIO_enuSetPinValue+0xb4>
    41d0:	66 0f       	add	r22, r22
    41d2:	77 1f       	adc	r23, r23
    41d4:	8a 95       	dec	r24
    41d6:	e2 f7       	brpl	.-8      	; 0x41d0 <DIO_enuSetPinValue+0xb0>
    41d8:	cb 01       	movw	r24, r22
    41da:	84 2b       	or	r24, r20
    41dc:	8c 93       	st	X, r24
    41de:	7a c0       	rjmp	.+244    	; 0x42d4 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTB:
					PORTB &= ~(BIT_MASK << Copy_uint8PinID);
    41e0:	a8 e3       	ldi	r26, 0x38	; 56
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	e8 e3       	ldi	r30, 0x38	; 56
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	80 81       	ld	r24, Z
    41ea:	48 2f       	mov	r20, r24
    41ec:	8b 81       	ldd	r24, Y+3	; 0x03
    41ee:	28 2f       	mov	r18, r24
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <DIO_enuSetPinValue+0xdc>
    41f8:	88 0f       	add	r24, r24
    41fa:	99 1f       	adc	r25, r25
    41fc:	2a 95       	dec	r18
    41fe:	e2 f7       	brpl	.-8      	; 0x41f8 <DIO_enuSetPinValue+0xd8>
    4200:	80 95       	com	r24
    4202:	84 23       	and	r24, r20
    4204:	8c 93       	st	X, r24
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
    4206:	a8 e3       	ldi	r26, 0x38	; 56
    4208:	b0 e0       	ldi	r27, 0x00	; 0
    420a:	e8 e3       	ldi	r30, 0x38	; 56
    420c:	f0 e0       	ldi	r31, 0x00	; 0
    420e:	80 81       	ld	r24, Z
    4210:	48 2f       	mov	r20, r24
    4212:	8c 81       	ldd	r24, Y+4	; 0x04
    4214:	28 2f       	mov	r18, r24
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	8b 81       	ldd	r24, Y+3	; 0x03
    421a:	88 2f       	mov	r24, r24
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	b9 01       	movw	r22, r18
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <DIO_enuSetPinValue+0x106>
    4222:	66 0f       	add	r22, r22
    4224:	77 1f       	adc	r23, r23
    4226:	8a 95       	dec	r24
    4228:	e2 f7       	brpl	.-8      	; 0x4222 <DIO_enuSetPinValue+0x102>
    422a:	cb 01       	movw	r24, r22
    422c:	84 2b       	or	r24, r20
    422e:	8c 93       	st	X, r24
    4230:	51 c0       	rjmp	.+162    	; 0x42d4 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTC:
					PORTC &= ~(BIT_MASK << Copy_uint8PinID);
    4232:	a5 e3       	ldi	r26, 0x35	; 53
    4234:	b0 e0       	ldi	r27, 0x00	; 0
    4236:	e5 e3       	ldi	r30, 0x35	; 53
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	48 2f       	mov	r20, r24
    423e:	8b 81       	ldd	r24, Y+3	; 0x03
    4240:	28 2f       	mov	r18, r24
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	02 c0       	rjmp	.+4      	; 0x424e <DIO_enuSetPinValue+0x12e>
    424a:	88 0f       	add	r24, r24
    424c:	99 1f       	adc	r25, r25
    424e:	2a 95       	dec	r18
    4250:	e2 f7       	brpl	.-8      	; 0x424a <DIO_enuSetPinValue+0x12a>
    4252:	80 95       	com	r24
    4254:	84 23       	and	r24, r20
    4256:	8c 93       	st	X, r24
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
    4258:	a5 e3       	ldi	r26, 0x35	; 53
    425a:	b0 e0       	ldi	r27, 0x00	; 0
    425c:	e5 e3       	ldi	r30, 0x35	; 53
    425e:	f0 e0       	ldi	r31, 0x00	; 0
    4260:	80 81       	ld	r24, Z
    4262:	48 2f       	mov	r20, r24
    4264:	8c 81       	ldd	r24, Y+4	; 0x04
    4266:	28 2f       	mov	r18, r24
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	8b 81       	ldd	r24, Y+3	; 0x03
    426c:	88 2f       	mov	r24, r24
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	b9 01       	movw	r22, r18
    4272:	02 c0       	rjmp	.+4      	; 0x4278 <DIO_enuSetPinValue+0x158>
    4274:	66 0f       	add	r22, r22
    4276:	77 1f       	adc	r23, r23
    4278:	8a 95       	dec	r24
    427a:	e2 f7       	brpl	.-8      	; 0x4274 <DIO_enuSetPinValue+0x154>
    427c:	cb 01       	movw	r24, r22
    427e:	84 2b       	or	r24, r20
    4280:	8c 93       	st	X, r24
    4282:	28 c0       	rjmp	.+80     	; 0x42d4 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
    4284:	a2 e3       	ldi	r26, 0x32	; 50
    4286:	b0 e0       	ldi	r27, 0x00	; 0
    4288:	e2 e3       	ldi	r30, 0x32	; 50
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	80 81       	ld	r24, Z
    428e:	48 2f       	mov	r20, r24
    4290:	8b 81       	ldd	r24, Y+3	; 0x03
    4292:	28 2f       	mov	r18, r24
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	02 c0       	rjmp	.+4      	; 0x42a0 <DIO_enuSetPinValue+0x180>
    429c:	88 0f       	add	r24, r24
    429e:	99 1f       	adc	r25, r25
    42a0:	2a 95       	dec	r18
    42a2:	e2 f7       	brpl	.-8      	; 0x429c <DIO_enuSetPinValue+0x17c>
    42a4:	80 95       	com	r24
    42a6:	84 23       	and	r24, r20
    42a8:	8c 93       	st	X, r24
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
    42aa:	a2 e3       	ldi	r26, 0x32	; 50
    42ac:	b0 e0       	ldi	r27, 0x00	; 0
    42ae:	e2 e3       	ldi	r30, 0x32	; 50
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	80 81       	ld	r24, Z
    42b4:	48 2f       	mov	r20, r24
    42b6:	8c 81       	ldd	r24, Y+4	; 0x04
    42b8:	28 2f       	mov	r18, r24
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	8b 81       	ldd	r24, Y+3	; 0x03
    42be:	88 2f       	mov	r24, r24
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	b9 01       	movw	r22, r18
    42c4:	02 c0       	rjmp	.+4      	; 0x42ca <DIO_enuSetPinValue+0x1aa>
    42c6:	66 0f       	add	r22, r22
    42c8:	77 1f       	adc	r23, r23
    42ca:	8a 95       	dec	r24
    42cc:	e2 f7       	brpl	.-8      	; 0x42c6 <DIO_enuSetPinValue+0x1a6>
    42ce:	cb 01       	movw	r24, r22
    42d0:	84 2b       	or	r24, r20
    42d2:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    42d4:	19 82       	std	Y+1, r1	; 0x01
    42d6:	05 c0       	rjmp	.+10     	; 0x42e2 <DIO_enuSetPinValue+0x1c2>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    42d8:	84 e0       	ldi	r24, 0x04	; 4
    42da:	89 83       	std	Y+1, r24	; 0x01
    42dc:	02 c0       	rjmp	.+4      	; 0x42e2 <DIO_enuSetPinValue+0x1c2>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    42de:	83 e0       	ldi	r24, 0x03	; 3
    42e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    42e4:	26 96       	adiw	r28, 0x06	; 6
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	f8 94       	cli
    42ea:	de bf       	out	0x3e, r29	; 62
    42ec:	0f be       	out	0x3f, r0	; 63
    42ee:	cd bf       	out	0x3d, r28	; 61
    42f0:	cf 91       	pop	r28
    42f2:	df 91       	pop	r29
    42f4:	08 95       	ret

000042f6 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID){
    42f6:	df 93       	push	r29
    42f8:	cf 93       	push	r28
    42fa:	00 d0       	rcall	.+0      	; 0x42fc <DIO_enuTogPinValue+0x6>
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <DIO_enuTogPinValue+0x8>
    42fe:	0f 92       	push	r0
    4300:	cd b7       	in	r28, 0x3d	; 61
    4302:	de b7       	in	r29, 0x3e	; 62
    4304:	8a 83       	std	Y+2, r24	; 0x02
    4306:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    430c:	8a 81       	ldd	r24, Y+2	; 0x02
    430e:	84 30       	cpi	r24, 0x04	; 4
    4310:	08 f0       	brcs	.+2      	; 0x4314 <DIO_enuTogPinValue+0x1e>
    4312:	77 c0       	rjmp	.+238    	; 0x4402 <DIO_enuTogPinValue+0x10c>
		if(Copy_uint8PinID <= DIO_PIN7){
    4314:	8b 81       	ldd	r24, Y+3	; 0x03
    4316:	88 30       	cpi	r24, 0x08	; 8
    4318:	08 f0       	brcs	.+2      	; 0x431c <DIO_enuTogPinValue+0x26>
    431a:	70 c0       	rjmp	.+224    	; 0x43fc <DIO_enuTogPinValue+0x106>
			switch(Copy_uint8PortID){
    431c:	8a 81       	ldd	r24, Y+2	; 0x02
    431e:	28 2f       	mov	r18, r24
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	3d 83       	std	Y+5, r19	; 0x05
    4324:	2c 83       	std	Y+4, r18	; 0x04
    4326:	8c 81       	ldd	r24, Y+4	; 0x04
    4328:	9d 81       	ldd	r25, Y+5	; 0x05
    432a:	81 30       	cpi	r24, 0x01	; 1
    432c:	91 05       	cpc	r25, r1
    432e:	49 f1       	breq	.+82     	; 0x4382 <DIO_enuTogPinValue+0x8c>
    4330:	2c 81       	ldd	r18, Y+4	; 0x04
    4332:	3d 81       	ldd	r19, Y+5	; 0x05
    4334:	22 30       	cpi	r18, 0x02	; 2
    4336:	31 05       	cpc	r19, r1
    4338:	2c f4       	brge	.+10     	; 0x4344 <DIO_enuTogPinValue+0x4e>
    433a:	8c 81       	ldd	r24, Y+4	; 0x04
    433c:	9d 81       	ldd	r25, Y+5	; 0x05
    433e:	00 97       	sbiw	r24, 0x00	; 0
    4340:	61 f0       	breq	.+24     	; 0x435a <DIO_enuTogPinValue+0x64>
    4342:	5a c0       	rjmp	.+180    	; 0x43f8 <DIO_enuTogPinValue+0x102>
    4344:	2c 81       	ldd	r18, Y+4	; 0x04
    4346:	3d 81       	ldd	r19, Y+5	; 0x05
    4348:	22 30       	cpi	r18, 0x02	; 2
    434a:	31 05       	cpc	r19, r1
    434c:	71 f1       	breq	.+92     	; 0x43aa <DIO_enuTogPinValue+0xb4>
    434e:	8c 81       	ldd	r24, Y+4	; 0x04
    4350:	9d 81       	ldd	r25, Y+5	; 0x05
    4352:	83 30       	cpi	r24, 0x03	; 3
    4354:	91 05       	cpc	r25, r1
    4356:	e9 f1       	breq	.+122    	; 0x43d2 <DIO_enuTogPinValue+0xdc>
    4358:	4f c0       	rjmp	.+158    	; 0x43f8 <DIO_enuTogPinValue+0x102>
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
    435a:	ab e3       	ldi	r26, 0x3B	; 59
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	eb e3       	ldi	r30, 0x3B	; 59
    4360:	f0 e0       	ldi	r31, 0x00	; 0
    4362:	80 81       	ld	r24, Z
    4364:	48 2f       	mov	r20, r24
    4366:	8b 81       	ldd	r24, Y+3	; 0x03
    4368:	28 2f       	mov	r18, r24
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	02 2e       	mov	r0, r18
    4372:	02 c0       	rjmp	.+4      	; 0x4378 <DIO_enuTogPinValue+0x82>
    4374:	88 0f       	add	r24, r24
    4376:	99 1f       	adc	r25, r25
    4378:	0a 94       	dec	r0
    437a:	e2 f7       	brpl	.-8      	; 0x4374 <DIO_enuTogPinValue+0x7e>
    437c:	84 27       	eor	r24, r20
    437e:	8c 93       	st	X, r24
    4380:	3b c0       	rjmp	.+118    	; 0x43f8 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
    4382:	a8 e3       	ldi	r26, 0x38	; 56
    4384:	b0 e0       	ldi	r27, 0x00	; 0
    4386:	e8 e3       	ldi	r30, 0x38	; 56
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	80 81       	ld	r24, Z
    438c:	48 2f       	mov	r20, r24
    438e:	8b 81       	ldd	r24, Y+3	; 0x03
    4390:	28 2f       	mov	r18, r24
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	02 2e       	mov	r0, r18
    439a:	02 c0       	rjmp	.+4      	; 0x43a0 <DIO_enuTogPinValue+0xaa>
    439c:	88 0f       	add	r24, r24
    439e:	99 1f       	adc	r25, r25
    43a0:	0a 94       	dec	r0
    43a2:	e2 f7       	brpl	.-8      	; 0x439c <DIO_enuTogPinValue+0xa6>
    43a4:	84 27       	eor	r24, r20
    43a6:	8c 93       	st	X, r24
    43a8:	27 c0       	rjmp	.+78     	; 0x43f8 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
    43aa:	a5 e3       	ldi	r26, 0x35	; 53
    43ac:	b0 e0       	ldi	r27, 0x00	; 0
    43ae:	e5 e3       	ldi	r30, 0x35	; 53
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	80 81       	ld	r24, Z
    43b4:	48 2f       	mov	r20, r24
    43b6:	8b 81       	ldd	r24, Y+3	; 0x03
    43b8:	28 2f       	mov	r18, r24
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	02 2e       	mov	r0, r18
    43c2:	02 c0       	rjmp	.+4      	; 0x43c8 <DIO_enuTogPinValue+0xd2>
    43c4:	88 0f       	add	r24, r24
    43c6:	99 1f       	adc	r25, r25
    43c8:	0a 94       	dec	r0
    43ca:	e2 f7       	brpl	.-8      	; 0x43c4 <DIO_enuTogPinValue+0xce>
    43cc:	84 27       	eor	r24, r20
    43ce:	8c 93       	st	X, r24
    43d0:	13 c0       	rjmp	.+38     	; 0x43f8 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
    43d2:	a2 e3       	ldi	r26, 0x32	; 50
    43d4:	b0 e0       	ldi	r27, 0x00	; 0
    43d6:	e2 e3       	ldi	r30, 0x32	; 50
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	80 81       	ld	r24, Z
    43dc:	48 2f       	mov	r20, r24
    43de:	8b 81       	ldd	r24, Y+3	; 0x03
    43e0:	28 2f       	mov	r18, r24
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	02 2e       	mov	r0, r18
    43ea:	02 c0       	rjmp	.+4      	; 0x43f0 <DIO_enuTogPinValue+0xfa>
    43ec:	88 0f       	add	r24, r24
    43ee:	99 1f       	adc	r25, r25
    43f0:	0a 94       	dec	r0
    43f2:	e2 f7       	brpl	.-8      	; 0x43ec <DIO_enuTogPinValue+0xf6>
    43f4:	84 27       	eor	r24, r20
    43f6:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    43f8:	19 82       	std	Y+1, r1	; 0x01
    43fa:	05 c0       	rjmp	.+10     	; 0x4406 <DIO_enuTogPinValue+0x110>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    43fc:	84 e0       	ldi	r24, 0x04	; 4
    43fe:	89 83       	std	Y+1, r24	; 0x01
    4400:	02 c0       	rjmp	.+4      	; 0x4406 <DIO_enuTogPinValue+0x110>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    4402:	83 e0       	ldi	r24, 0x03	; 3
    4404:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4406:	89 81       	ldd	r24, Y+1	; 0x01
}
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	cf 91       	pop	r28
    4414:	df 91       	pop	r29
    4416:	08 95       	ret

00004418 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 *Copy_uint8Value){
    4418:	df 93       	push	r29
    441a:	cf 93       	push	r28
    441c:	cd b7       	in	r28, 0x3d	; 61
    441e:	de b7       	in	r29, 0x3e	; 62
    4420:	27 97       	sbiw	r28, 0x07	; 7
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	f8 94       	cli
    4426:	de bf       	out	0x3e, r29	; 62
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	cd bf       	out	0x3d, r28	; 61
    442c:	8a 83       	std	Y+2, r24	; 0x02
    442e:	6b 83       	std	Y+3, r22	; 0x03
    4430:	5d 83       	std	Y+5, r21	; 0x05
    4432:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    4438:	8a 81       	ldd	r24, Y+2	; 0x02
    443a:	84 30       	cpi	r24, 0x04	; 4
    443c:	08 f0       	brcs	.+2      	; 0x4440 <DIO_enuGetPinValue+0x28>
    443e:	81 c0       	rjmp	.+258    	; 0x4542 <DIO_enuGetPinValue+0x12a>
			if(Copy_uint8PinID <= DIO_PIN7){
    4440:	8b 81       	ldd	r24, Y+3	; 0x03
    4442:	88 30       	cpi	r24, 0x08	; 8
    4444:	08 f0       	brcs	.+2      	; 0x4448 <DIO_enuGetPinValue+0x30>
    4446:	7a c0       	rjmp	.+244    	; 0x453c <DIO_enuGetPinValue+0x124>
				if(Copy_uint8Value != NULL){
    4448:	8c 81       	ldd	r24, Y+4	; 0x04
    444a:	9d 81       	ldd	r25, Y+5	; 0x05
    444c:	00 97       	sbiw	r24, 0x00	; 0
    444e:	09 f4       	brne	.+2      	; 0x4452 <DIO_enuGetPinValue+0x3a>
    4450:	72 c0       	rjmp	.+228    	; 0x4536 <DIO_enuGetPinValue+0x11e>
					switch(Copy_uint8PortID){
    4452:	8a 81       	ldd	r24, Y+2	; 0x02
    4454:	28 2f       	mov	r18, r24
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	3f 83       	std	Y+7, r19	; 0x07
    445a:	2e 83       	std	Y+6, r18	; 0x06
    445c:	4e 81       	ldd	r20, Y+6	; 0x06
    445e:	5f 81       	ldd	r21, Y+7	; 0x07
    4460:	41 30       	cpi	r20, 0x01	; 1
    4462:	51 05       	cpc	r21, r1
    4464:	59 f1       	breq	.+86     	; 0x44bc <DIO_enuGetPinValue+0xa4>
    4466:	8e 81       	ldd	r24, Y+6	; 0x06
    4468:	9f 81       	ldd	r25, Y+7	; 0x07
    446a:	82 30       	cpi	r24, 0x02	; 2
    446c:	91 05       	cpc	r25, r1
    446e:	34 f4       	brge	.+12     	; 0x447c <DIO_enuGetPinValue+0x64>
    4470:	2e 81       	ldd	r18, Y+6	; 0x06
    4472:	3f 81       	ldd	r19, Y+7	; 0x07
    4474:	21 15       	cp	r18, r1
    4476:	31 05       	cpc	r19, r1
    4478:	69 f0       	breq	.+26     	; 0x4494 <DIO_enuGetPinValue+0x7c>
    447a:	5b c0       	rjmp	.+182    	; 0x4532 <DIO_enuGetPinValue+0x11a>
    447c:	4e 81       	ldd	r20, Y+6	; 0x06
    447e:	5f 81       	ldd	r21, Y+7	; 0x07
    4480:	42 30       	cpi	r20, 0x02	; 2
    4482:	51 05       	cpc	r21, r1
    4484:	79 f1       	breq	.+94     	; 0x44e4 <DIO_enuGetPinValue+0xcc>
    4486:	8e 81       	ldd	r24, Y+6	; 0x06
    4488:	9f 81       	ldd	r25, Y+7	; 0x07
    448a:	83 30       	cpi	r24, 0x03	; 3
    448c:	91 05       	cpc	r25, r1
    448e:	09 f4       	brne	.+2      	; 0x4492 <DIO_enuGetPinValue+0x7a>
    4490:	3d c0       	rjmp	.+122    	; 0x450c <DIO_enuGetPinValue+0xf4>
    4492:	4f c0       	rjmp	.+158    	; 0x4532 <DIO_enuGetPinValue+0x11a>
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
    4494:	e9 e3       	ldi	r30, 0x39	; 57
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	28 2f       	mov	r18, r24
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	8b 81       	ldd	r24, Y+3	; 0x03
    44a0:	88 2f       	mov	r24, r24
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	a9 01       	movw	r20, r18
    44a6:	02 c0       	rjmp	.+4      	; 0x44ac <DIO_enuGetPinValue+0x94>
    44a8:	55 95       	asr	r21
    44aa:	47 95       	ror	r20
    44ac:	8a 95       	dec	r24
    44ae:	e2 f7       	brpl	.-8      	; 0x44a8 <DIO_enuGetPinValue+0x90>
    44b0:	ca 01       	movw	r24, r20
    44b2:	81 70       	andi	r24, 0x01	; 1
    44b4:	ec 81       	ldd	r30, Y+4	; 0x04
    44b6:	fd 81       	ldd	r31, Y+5	; 0x05
    44b8:	80 83       	st	Z, r24
    44ba:	3b c0       	rjmp	.+118    	; 0x4532 <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
    44bc:	e6 e3       	ldi	r30, 0x36	; 54
    44be:	f0 e0       	ldi	r31, 0x00	; 0
    44c0:	80 81       	ld	r24, Z
    44c2:	28 2f       	mov	r18, r24
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	8b 81       	ldd	r24, Y+3	; 0x03
    44c8:	88 2f       	mov	r24, r24
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	a9 01       	movw	r20, r18
    44ce:	02 c0       	rjmp	.+4      	; 0x44d4 <DIO_enuGetPinValue+0xbc>
    44d0:	55 95       	asr	r21
    44d2:	47 95       	ror	r20
    44d4:	8a 95       	dec	r24
    44d6:	e2 f7       	brpl	.-8      	; 0x44d0 <DIO_enuGetPinValue+0xb8>
    44d8:	ca 01       	movw	r24, r20
    44da:	81 70       	andi	r24, 0x01	; 1
    44dc:	ec 81       	ldd	r30, Y+4	; 0x04
    44de:	fd 81       	ldd	r31, Y+5	; 0x05
    44e0:	80 83       	st	Z, r24
    44e2:	27 c0       	rjmp	.+78     	; 0x4532 <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
    44e4:	e3 e3       	ldi	r30, 0x33	; 51
    44e6:	f0 e0       	ldi	r31, 0x00	; 0
    44e8:	80 81       	ld	r24, Z
    44ea:	28 2f       	mov	r18, r24
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	8b 81       	ldd	r24, Y+3	; 0x03
    44f0:	88 2f       	mov	r24, r24
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	a9 01       	movw	r20, r18
    44f6:	02 c0       	rjmp	.+4      	; 0x44fc <DIO_enuGetPinValue+0xe4>
    44f8:	55 95       	asr	r21
    44fa:	47 95       	ror	r20
    44fc:	8a 95       	dec	r24
    44fe:	e2 f7       	brpl	.-8      	; 0x44f8 <DIO_enuGetPinValue+0xe0>
    4500:	ca 01       	movw	r24, r20
    4502:	81 70       	andi	r24, 0x01	; 1
    4504:	ec 81       	ldd	r30, Y+4	; 0x04
    4506:	fd 81       	ldd	r31, Y+5	; 0x05
    4508:	80 83       	st	Z, r24
    450a:	13 c0       	rjmp	.+38     	; 0x4532 <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
    450c:	e0 e3       	ldi	r30, 0x30	; 48
    450e:	f0 e0       	ldi	r31, 0x00	; 0
    4510:	80 81       	ld	r24, Z
    4512:	28 2f       	mov	r18, r24
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	8b 81       	ldd	r24, Y+3	; 0x03
    4518:	88 2f       	mov	r24, r24
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	a9 01       	movw	r20, r18
    451e:	02 c0       	rjmp	.+4      	; 0x4524 <DIO_enuGetPinValue+0x10c>
    4520:	55 95       	asr	r21
    4522:	47 95       	ror	r20
    4524:	8a 95       	dec	r24
    4526:	e2 f7       	brpl	.-8      	; 0x4520 <DIO_enuGetPinValue+0x108>
    4528:	ca 01       	movw	r24, r20
    452a:	81 70       	andi	r24, 0x01	; 1
    452c:	ec 81       	ldd	r30, Y+4	; 0x04
    452e:	fd 81       	ldd	r31, Y+5	; 0x05
    4530:	80 83       	st	Z, r24
							break;
					}
					Local_enuErrorState = ES_OK;
    4532:	19 82       	std	Y+1, r1	; 0x01
    4534:	08 c0       	rjmp	.+16     	; 0x4546 <DIO_enuGetPinValue+0x12e>
				}
				else{
					Local_enuErrorState = ES_NULL_POINTER;
    4536:	82 e0       	ldi	r24, 0x02	; 2
    4538:	89 83       	std	Y+1, r24	; 0x01
    453a:	05 c0       	rjmp	.+10     	; 0x4546 <DIO_enuGetPinValue+0x12e>
				}
			}
			else{
				Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    453c:	84 e0       	ldi	r24, 0x04	; 4
    453e:	89 83       	std	Y+1, r24	; 0x01
    4540:	02 c0       	rjmp	.+4      	; 0x4546 <DIO_enuGetPinValue+0x12e>
			}
		}
		else{
			Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    4542:	83 e0       	ldi	r24, 0x03	; 3
    4544:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorState;
    4546:	89 81       	ldd	r24, Y+1	; 0x01
}
    4548:	27 96       	adiw	r28, 0x07	; 7
    454a:	0f b6       	in	r0, 0x3f	; 63
    454c:	f8 94       	cli
    454e:	de bf       	out	0x3e, r29	; 62
    4550:	0f be       	out	0x3f, r0	; 63
    4552:	cd bf       	out	0x3d, r28	; 61
    4554:	cf 91       	pop	r28
    4556:	df 91       	pop	r29
    4558:	08 95       	ret

0000455a <ADC_enuInit>:


static void (*ADC_pfuncForCallBack) (void*) = NULL;
static void *ADC_pvoidParameter = NULL;

ES_t ADC_enuInit(void){
    455a:	df 93       	push	r29
    455c:	cf 93       	push	r28
    455e:	0f 92       	push	r0
    4560:	cd b7       	in	r28, 0x3d	; 61
    4562:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	89 83       	std	Y+1, r24	; 0x01
	/*Switching ON ADC*/
	ADCSRA |= (BIT_MASK1 << ADC_ENABLE_BIT);
    4568:	a6 e2       	ldi	r26, 0x26	; 38
    456a:	b0 e0       	ldi	r27, 0x00	; 0
    456c:	e6 e2       	ldi	r30, 0x26	; 38
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	80 81       	ld	r24, Z
    4572:	80 68       	ori	r24, 0x80	; 128
    4574:	8c 93       	st	X, r24
	/*Initial set Voltage Reference*/
	ADMUX |= (SELECT_ADC_VOLTAGE << ADC_REF_SELECTION_BITS);
    4576:	a7 e2       	ldi	r26, 0x27	; 39
    4578:	b0 e0       	ldi	r27, 0x00	; 0
    457a:	e7 e2       	ldi	r30, 0x27	; 39
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	80 81       	ld	r24, Z
    4580:	80 64       	ori	r24, 0x40	; 64
    4582:	8c 93       	st	X, r24
	/*Initial set Prescaler*/
	ADCSRA |= (SELECT_ADC_PRESCALER << ADC_PRESCALER_BITS);
    4584:	a6 e2       	ldi	r26, 0x26	; 38
    4586:	b0 e0       	ldi	r27, 0x00	; 0
    4588:	e6 e2       	ldi	r30, 0x26	; 38
    458a:	f0 e0       	ldi	r31, 0x00	; 0
    458c:	80 81       	ld	r24, Z
    458e:	83 60       	ori	r24, 0x03	; 3
    4590:	8c 93       	st	X, r24
	/*Initial set ADJUSTMENT*/
#if SELECT_ADC_ADJUSTMENT == ADC_uint8RIGHT_ADJUSTED
	ADMUX &= ~(BIT_MASK1 << ADC_ADLAR_BIT);
    4592:	a7 e2       	ldi	r26, 0x27	; 39
    4594:	b0 e0       	ldi	r27, 0x00	; 0
    4596:	e7 e2       	ldi	r30, 0x27	; 39
    4598:	f0 e0       	ldi	r31, 0x00	; 0
    459a:	80 81       	ld	r24, Z
    459c:	8f 7d       	andi	r24, 0xDF	; 223
    459e:	8c 93       	st	X, r24
	Local_enuErrorStates = ES_OK;
    45a0:	19 82       	std	Y+1, r1	; 0x01
#elif SELECT_ADC_ADJUSTMENT == ADC_uint8LEFT_ADJUSTED
	ADMUX |= (BIT_MASK << ADC_ADLAR_BIT);
	Local_enuErrorStates = ES_OK;
#endif

	return Local_enuErrorStates;
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    45a4:	0f 90       	pop	r0
    45a6:	cf 91       	pop	r28
    45a8:	df 91       	pop	r29
    45aa:	08 95       	ret

000045ac <ADC_enuEnable>:

ES_t ADC_enuEnable(void){
    45ac:	df 93       	push	r29
    45ae:	cf 93       	push	r28
    45b0:	0f 92       	push	r0
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	89 83       	std	Y+1, r24	; 0x01
	if(!((ADCSRA >> ADC_ENABLE_BIT) & BIT_MASK1)){
    45ba:	e6 e2       	ldi	r30, 0x26	; 38
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	80 81       	ld	r24, Z
    45c0:	88 23       	and	r24, r24
    45c2:	4c f0       	brlt	.+18     	; 0x45d6 <ADC_enuEnable+0x2a>
			ADCSRA |= (BIT_MASK1 << ADC_ENABLE_BIT);
    45c4:	a6 e2       	ldi	r26, 0x26	; 38
    45c6:	b0 e0       	ldi	r27, 0x00	; 0
    45c8:	e6 e2       	ldi	r30, 0x26	; 38
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	80 81       	ld	r24, Z
    45ce:	80 68       	ori	r24, 0x80	; 128
    45d0:	8c 93       	st	X, r24
			Local_enuErrorStates = ES_OK;
    45d2:	19 82       	std	Y+1, r1	; 0x01
    45d4:	02 c0       	rjmp	.+4      	; 0x45da <ADC_enuEnable+0x2e>
	}
	else{
			Local_enuErrorStates = ES_ALLREADY_IS_SET;
    45d6:	88 e0       	ldi	r24, 0x08	; 8
    45d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    45da:	89 81       	ldd	r24, Y+1	; 0x01
}
    45dc:	0f 90       	pop	r0
    45de:	cf 91       	pop	r28
    45e0:	df 91       	pop	r29
    45e2:	08 95       	ret

000045e4 <ADC_enuDisable>:

ES_t ADC_enuDisable(void){
    45e4:	df 93       	push	r29
    45e6:	cf 93       	push	r28
    45e8:	0f 92       	push	r0
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    45ee:	81 e0       	ldi	r24, 0x01	; 1
    45f0:	89 83       	std	Y+1, r24	; 0x01
	if(((ADCSRA >> ADC_ENABLE_BIT) & BIT_MASK1)){
    45f2:	e6 e2       	ldi	r30, 0x26	; 38
    45f4:	f0 e0       	ldi	r31, 0x00	; 0
    45f6:	80 81       	ld	r24, Z
    45f8:	88 23       	and	r24, r24
    45fa:	4c f4       	brge	.+18     	; 0x460e <ADC_enuDisable+0x2a>
		ADCSRA &= ~(BIT_MASK1 << ADC_ENABLE_BIT);
    45fc:	a6 e2       	ldi	r26, 0x26	; 38
    45fe:	b0 e0       	ldi	r27, 0x00	; 0
    4600:	e6 e2       	ldi	r30, 0x26	; 38
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	80 81       	ld	r24, Z
    4606:	8f 77       	andi	r24, 0x7F	; 127
    4608:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    460a:	19 82       	std	Y+1, r1	; 0x01
    460c:	02 c0       	rjmp	.+4      	; 0x4612 <ADC_enuDisable+0x2e>
	}
	else{
		Local_enuErrorStates = ES_ALLREADY_IS_CLEARED;
    460e:	89 e0       	ldi	r24, 0x09	; 9
    4610:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    4612:	89 81       	ldd	r24, Y+1	; 0x01
}
    4614:	0f 90       	pop	r0
    4616:	cf 91       	pop	r28
    4618:	df 91       	pop	r29
    461a:	08 95       	ret

0000461c <ADC_enuSetVoltReference>:

ES_t ADC_enuSetVoltReference(uint_8 Copy_uint8Voltage){
    461c:	df 93       	push	r29
    461e:	cf 93       	push	r28
    4620:	00 d0       	rcall	.+0      	; 0x4622 <ADC_enuSetVoltReference+0x6>
    4622:	cd b7       	in	r28, 0x3d	; 61
    4624:	de b7       	in	r29, 0x3e	; 62
    4626:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ~(BIT_MASK2 << ADC_REF_SELECTION_BITS);
    462c:	a7 e2       	ldi	r26, 0x27	; 39
    462e:	b0 e0       	ldi	r27, 0x00	; 0
    4630:	e7 e2       	ldi	r30, 0x27	; 39
    4632:	f0 e0       	ldi	r31, 0x00	; 0
    4634:	80 81       	ld	r24, Z
    4636:	8f 73       	andi	r24, 0x3F	; 63
    4638:	8c 93       	st	X, r24
	ADMUX |= (Copy_uint8Voltage << ADC_REF_SELECTION_BITS);
    463a:	a7 e2       	ldi	r26, 0x27	; 39
    463c:	b0 e0       	ldi	r27, 0x00	; 0
    463e:	e7 e2       	ldi	r30, 0x27	; 39
    4640:	f0 e0       	ldi	r31, 0x00	; 0
    4642:	80 81       	ld	r24, Z
    4644:	28 2f       	mov	r18, r24
    4646:	8a 81       	ldd	r24, Y+2	; 0x02
    4648:	88 2f       	mov	r24, r24
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	00 24       	eor	r0, r0
    464e:	96 95       	lsr	r25
    4650:	87 95       	ror	r24
    4652:	07 94       	ror	r0
    4654:	96 95       	lsr	r25
    4656:	87 95       	ror	r24
    4658:	07 94       	ror	r0
    465a:	98 2f       	mov	r25, r24
    465c:	80 2d       	mov	r24, r0
    465e:	82 2b       	or	r24, r18
    4660:	8c 93       	st	X, r24
	return Local_enuErrorStates =  ES_OK;
    4662:	19 82       	std	Y+1, r1	; 0x01
    4664:	89 81       	ldd	r24, Y+1	; 0x01
}
    4666:	0f 90       	pop	r0
    4668:	0f 90       	pop	r0
    466a:	cf 91       	pop	r28
    466c:	df 91       	pop	r29
    466e:	08 95       	ret

00004670 <ADC_enuSetPrescaler>:

ES_t ADC_enuSetPrescaler(uint_8 Copy_uint8Prescaler){
    4670:	df 93       	push	r29
    4672:	cf 93       	push	r28
    4674:	00 d0       	rcall	.+0      	; 0x4676 <ADC_enuSetPrescaler+0x6>
    4676:	cd b7       	in	r28, 0x3d	; 61
    4678:	de b7       	in	r29, 0x3e	; 62
    467a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA &= ~(BIT_MASK3 << ADC_PRESCALER_BITS);
    4680:	a6 e2       	ldi	r26, 0x26	; 38
    4682:	b0 e0       	ldi	r27, 0x00	; 0
    4684:	e6 e2       	ldi	r30, 0x26	; 38
    4686:	f0 e0       	ldi	r31, 0x00	; 0
    4688:	80 81       	ld	r24, Z
    468a:	88 7f       	andi	r24, 0xF8	; 248
    468c:	8c 93       	st	X, r24
	ADCSRA |= (Copy_uint8Prescaler << ADC_PRESCALER_BITS);
    468e:	a6 e2       	ldi	r26, 0x26	; 38
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	e6 e2       	ldi	r30, 0x26	; 38
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	90 81       	ld	r25, Z
    4698:	8a 81       	ldd	r24, Y+2	; 0x02
    469a:	89 2b       	or	r24, r25
    469c:	8c 93       	st	X, r24
	return Local_enuErrorStates = ES_OK;
    469e:	19 82       	std	Y+1, r1	; 0x01
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    46a2:	0f 90       	pop	r0
    46a4:	0f 90       	pop	r0
    46a6:	cf 91       	pop	r28
    46a8:	df 91       	pop	r29
    46aa:	08 95       	ret

000046ac <ADC_enuSetAdjustment>:

ES_t ADC_enuSetAdjustment(uint_8 Copy_uint8Adjustment){
    46ac:	df 93       	push	r29
    46ae:	cf 93       	push	r28
    46b0:	00 d0       	rcall	.+0      	; 0x46b2 <ADC_enuSetAdjustment+0x6>
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    46b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ~(BIT_MASK1 << ADC_ADLAR_BIT);
    46bc:	a7 e2       	ldi	r26, 0x27	; 39
    46be:	b0 e0       	ldi	r27, 0x00	; 0
    46c0:	e7 e2       	ldi	r30, 0x27	; 39
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	80 81       	ld	r24, Z
    46c6:	8f 7d       	andi	r24, 0xDF	; 223
    46c8:	8c 93       	st	X, r24
	ADMUX |= (Copy_uint8Adjustment << ADC_ADLAR_BIT);
    46ca:	a7 e2       	ldi	r26, 0x27	; 39
    46cc:	b0 e0       	ldi	r27, 0x00	; 0
    46ce:	e7 e2       	ldi	r30, 0x27	; 39
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	80 81       	ld	r24, Z
    46d4:	28 2f       	mov	r18, r24
    46d6:	8a 81       	ldd	r24, Y+2	; 0x02
    46d8:	88 2f       	mov	r24, r24
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	88 0f       	add	r24, r24
    46de:	99 1f       	adc	r25, r25
    46e0:	82 95       	swap	r24
    46e2:	92 95       	swap	r25
    46e4:	90 7f       	andi	r25, 0xF0	; 240
    46e6:	98 27       	eor	r25, r24
    46e8:	80 7f       	andi	r24, 0xF0	; 240
    46ea:	98 27       	eor	r25, r24
    46ec:	82 2b       	or	r24, r18
    46ee:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    46f2:	0f 90       	pop	r0
    46f4:	0f 90       	pop	r0
    46f6:	cf 91       	pop	r28
    46f8:	df 91       	pop	r29
    46fa:	08 95       	ret

000046fc <ADC_enuAutoTriggerEnable>:

ES_t ADC_enuAutoTriggerEnable(void){
    46fc:	df 93       	push	r29
    46fe:	cf 93       	push	r28
    4700:	0f 92       	push	r0
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	89 83       	std	Y+1, r24	; 0x01
	if(!((ADCSRA >> ADC_AUTOTRIGGER_BIT) & BIT_MASK1)){
    470a:	e6 e2       	ldi	r30, 0x26	; 38
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	80 81       	ld	r24, Z
    4710:	82 95       	swap	r24
    4712:	86 95       	lsr	r24
    4714:	87 70       	andi	r24, 0x07	; 7
    4716:	88 2f       	mov	r24, r24
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	81 70       	andi	r24, 0x01	; 1
    471c:	90 70       	andi	r25, 0x00	; 0
    471e:	00 97       	sbiw	r24, 0x00	; 0
    4720:	81 f4       	brne	.+32     	; 0x4742 <ADC_enuAutoTriggerEnable+0x46>
		ADCSRA |= (BIT_MASK1 << ADC_AUTOTRIGGER_BIT);
    4722:	a6 e2       	ldi	r26, 0x26	; 38
    4724:	b0 e0       	ldi	r27, 0x00	; 0
    4726:	e6 e2       	ldi	r30, 0x26	; 38
    4728:	f0 e0       	ldi	r31, 0x00	; 0
    472a:	80 81       	ld	r24, Z
    472c:	80 62       	ori	r24, 0x20	; 32
    472e:	8c 93       	st	X, r24
		ADCSRA |= (BIT_MASK1 << ADC_INTFLAG_BIT);
    4730:	a6 e2       	ldi	r26, 0x26	; 38
    4732:	b0 e0       	ldi	r27, 0x00	; 0
    4734:	e6 e2       	ldi	r30, 0x26	; 38
    4736:	f0 e0       	ldi	r31, 0x00	; 0
    4738:	80 81       	ld	r24, Z
    473a:	80 61       	ori	r24, 0x10	; 16
    473c:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    473e:	19 82       	std	Y+1, r1	; 0x01
    4740:	02 c0       	rjmp	.+4      	; 0x4746 <ADC_enuAutoTriggerEnable+0x4a>
	}
	else{
		Local_enuErrorStates = ES_ALLREADY_IS_SET;
    4742:	88 e0       	ldi	r24, 0x08	; 8
    4744:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    4746:	89 81       	ldd	r24, Y+1	; 0x01
}
    4748:	0f 90       	pop	r0
    474a:	cf 91       	pop	r28
    474c:	df 91       	pop	r29
    474e:	08 95       	ret

00004750 <ADC_enuAutoTriggerDisable>:

ES_t ADC_enuAutoTriggerDisable(void){
    4750:	df 93       	push	r29
    4752:	cf 93       	push	r28
    4754:	0f 92       	push	r0
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	89 83       	std	Y+1, r24	; 0x01
	if(((ADCSRA >> ADC_AUTOTRIGGER_BIT) & BIT_MASK1)){
    475e:	e6 e2       	ldi	r30, 0x26	; 38
    4760:	f0 e0       	ldi	r31, 0x00	; 0
    4762:	80 81       	ld	r24, Z
    4764:	82 95       	swap	r24
    4766:	86 95       	lsr	r24
    4768:	87 70       	andi	r24, 0x07	; 7
    476a:	88 2f       	mov	r24, r24
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	81 70       	andi	r24, 0x01	; 1
    4770:	90 70       	andi	r25, 0x00	; 0
    4772:	88 23       	and	r24, r24
    4774:	49 f0       	breq	.+18     	; 0x4788 <ADC_enuAutoTriggerDisable+0x38>
		ADCSRA &= ~(BIT_MASK1 << ADC_AUTOTRIGGER_BIT);
    4776:	a6 e2       	ldi	r26, 0x26	; 38
    4778:	b0 e0       	ldi	r27, 0x00	; 0
    477a:	e6 e2       	ldi	r30, 0x26	; 38
    477c:	f0 e0       	ldi	r31, 0x00	; 0
    477e:	80 81       	ld	r24, Z
    4780:	8f 7d       	andi	r24, 0xDF	; 223
    4782:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    4784:	19 82       	std	Y+1, r1	; 0x01
    4786:	02 c0       	rjmp	.+4      	; 0x478c <ADC_enuAutoTriggerDisable+0x3c>
	}
	else{
		Local_enuErrorStates = ES_ALLREADY_IS_CLEARED;
    4788:	89 e0       	ldi	r24, 0x09	; 9
    478a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    478c:	89 81       	ldd	r24, Y+1	; 0x01
}
    478e:	0f 90       	pop	r0
    4790:	cf 91       	pop	r28
    4792:	df 91       	pop	r29
    4794:	08 95       	ret

00004796 <ADC_enuTriggerSource>:

ES_t ADC_enuTriggerSource(uint_8 Copy_uint8TriggerSource){
    4796:	df 93       	push	r29
    4798:	cf 93       	push	r28
    479a:	00 d0       	rcall	.+0      	; 0x479c <ADC_enuTriggerSource+0x6>
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	89 83       	std	Y+1, r24	; 0x01
	SFIOR &= ~(BIT_MASK3 << ADC_AUTOTRIGGER_SRC_BITS);
    47a6:	a0 e5       	ldi	r26, 0x50	; 80
    47a8:	b0 e0       	ldi	r27, 0x00	; 0
    47aa:	e0 e5       	ldi	r30, 0x50	; 80
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	80 81       	ld	r24, Z
    47b0:	8f 71       	andi	r24, 0x1F	; 31
    47b2:	8c 93       	st	X, r24
	SFIOR |= (Copy_uint8TriggerSource << ADC_AUTOTRIGGER_SRC_BITS);
    47b4:	a0 e5       	ldi	r26, 0x50	; 80
    47b6:	b0 e0       	ldi	r27, 0x00	; 0
    47b8:	e0 e5       	ldi	r30, 0x50	; 80
    47ba:	f0 e0       	ldi	r31, 0x00	; 0
    47bc:	80 81       	ld	r24, Z
    47be:	28 2f       	mov	r18, r24
    47c0:	8a 81       	ldd	r24, Y+2	; 0x02
    47c2:	88 2f       	mov	r24, r24
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	88 0f       	add	r24, r24
    47c8:	99 1f       	adc	r25, r25
    47ca:	82 95       	swap	r24
    47cc:	92 95       	swap	r25
    47ce:	90 7f       	andi	r25, 0xF0	; 240
    47d0:	98 27       	eor	r25, r24
    47d2:	80 7f       	andi	r24, 0xF0	; 240
    47d4:	98 27       	eor	r25, r24
    47d6:	82 2b       	or	r24, r18
    47d8:	8c 93       	st	X, r24
	return Local_enuErrorStates;
    47da:	89 81       	ldd	r24, Y+1	; 0x01
}
    47dc:	0f 90       	pop	r0
    47de:	0f 90       	pop	r0
    47e0:	cf 91       	pop	r28
    47e2:	df 91       	pop	r29
    47e4:	08 95       	ret

000047e6 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void){
    47e6:	df 93       	push	r29
    47e8:	cf 93       	push	r28
    47ea:	0f 92       	push	r0
    47ec:	cd b7       	in	r28, 0x3d	; 61
    47ee:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	89 83       	std	Y+1, r24	; 0x01
	if(!((ADCSRA >> ADC_STARTCONV_BIT) & BIT_MASK1)){
    47f4:	e6 e2       	ldi	r30, 0x26	; 38
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	80 81       	ld	r24, Z
    47fa:	82 95       	swap	r24
    47fc:	86 95       	lsr	r24
    47fe:	86 95       	lsr	r24
    4800:	83 70       	andi	r24, 0x03	; 3
    4802:	88 2f       	mov	r24, r24
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	81 70       	andi	r24, 0x01	; 1
    4808:	90 70       	andi	r25, 0x00	; 0
    480a:	00 97       	sbiw	r24, 0x00	; 0
    480c:	49 f4       	brne	.+18     	; 0x4820 <ADC_enuStartConversion+0x3a>
		ADCSRA |= (BIT_MASK1 << ADC_STARTCONV_BIT);
    480e:	a6 e2       	ldi	r26, 0x26	; 38
    4810:	b0 e0       	ldi	r27, 0x00	; 0
    4812:	e6 e2       	ldi	r30, 0x26	; 38
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	80 81       	ld	r24, Z
    4818:	80 64       	ori	r24, 0x40	; 64
    481a:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    481c:	19 82       	std	Y+1, r1	; 0x01
    481e:	02 c0       	rjmp	.+4      	; 0x4824 <ADC_enuStartConversion+0x3e>
	}
	else{
		Local_enuErrorStates = ES_ALLREADY_IS_SET;
    4820:	88 e0       	ldi	r24, 0x08	; 8
    4822:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    4824:	89 81       	ldd	r24, Y+1	; 0x01
}
    4826:	0f 90       	pop	r0
    4828:	cf 91       	pop	r28
    482a:	df 91       	pop	r29
    482c:	08 95       	ret

0000482e <ADC_enuWaitOnFlag>:

ES_t ADC_enuWaitOnFlag(void){
    482e:	df 93       	push	r29
    4830:	cf 93       	push	r28
    4832:	0f 92       	push	r0
    4834:	cd b7       	in	r28, 0x3d	; 61
    4836:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	89 83       	std	Y+1, r24	; 0x01

	while(!((ADCSRA >> ADC_INTFLAG_BIT) & BIT_MASK1)); // wait on flag
    483c:	e6 e2       	ldi	r30, 0x26	; 38
    483e:	f0 e0       	ldi	r31, 0x00	; 0
    4840:	80 81       	ld	r24, Z
    4842:	82 95       	swap	r24
    4844:	8f 70       	andi	r24, 0x0F	; 15
    4846:	88 2f       	mov	r24, r24
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	81 70       	andi	r24, 0x01	; 1
    484c:	90 70       	andi	r25, 0x00	; 0
    484e:	00 97       	sbiw	r24, 0x00	; 0
    4850:	a9 f3       	breq	.-22     	; 0x483c <ADC_enuWaitOnFlag+0xe>
	ADCSRA |= (BIT_MASK1 << ADC_INTFLAG_BIT);
    4852:	a6 e2       	ldi	r26, 0x26	; 38
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	e6 e2       	ldi	r30, 0x26	; 38
    4858:	f0 e0       	ldi	r31, 0x00	; 0
    485a:	80 81       	ld	r24, Z
    485c:	80 61       	ori	r24, 0x10	; 16
    485e:	8c 93       	st	X, r24
	Local_enuErrorStates = ES_OK;
    4860:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorStates;
    4862:	89 81       	ldd	r24, Y+1	; 0x01
}
    4864:	0f 90       	pop	r0
    4866:	cf 91       	pop	r28
    4868:	df 91       	pop	r29
    486a:	08 95       	ret

0000486c <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(uint_8 Copy_uint8Channel){
    486c:	df 93       	push	r29
    486e:	cf 93       	push	r28
    4870:	00 d0       	rcall	.+0      	; 0x4872 <ADC_enuSelectChannel+0x6>
    4872:	cd b7       	in	r28, 0x3d	; 61
    4874:	de b7       	in	r29, 0x3e	; 62
    4876:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_uint8Channel <= ADC_MAX_NUM_OF_CHANNELS){	// SELECT CHANNEL
    487c:	8a 81       	ldd	r24, Y+2	; 0x02
    487e:	8e 31       	cpi	r24, 0x1E	; 30
    4880:	88 f4       	brcc	.+34     	; 0x48a4 <ADC_enuSelectChannel+0x38>
		ADMUX &= ~(BIT_MASK5 << ADC_MUX_BITS);
    4882:	a7 e2       	ldi	r26, 0x27	; 39
    4884:	b0 e0       	ldi	r27, 0x00	; 0
    4886:	e7 e2       	ldi	r30, 0x27	; 39
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	80 81       	ld	r24, Z
    488c:	80 7e       	andi	r24, 0xE0	; 224
    488e:	8c 93       	st	X, r24
		ADMUX |= (Copy_uint8Channel << ADC_MUX_BITS);
    4890:	a7 e2       	ldi	r26, 0x27	; 39
    4892:	b0 e0       	ldi	r27, 0x00	; 0
    4894:	e7 e2       	ldi	r30, 0x27	; 39
    4896:	f0 e0       	ldi	r31, 0x00	; 0
    4898:	90 81       	ld	r25, Z
    489a:	8a 81       	ldd	r24, Y+2	; 0x02
    489c:	89 2b       	or	r24, r25
    489e:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    48a0:	19 82       	std	Y+1, r1	; 0x01
    48a2:	02 c0       	rjmp	.+4      	; 0x48a8 <ADC_enuSelectChannel+0x3c>
	}
	else{
		Local_enuErrorStates = ES_CHANNEL_OUT_OF_RANGE;
    48a4:	85 e0       	ldi	r24, 0x05	; 5
    48a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    48a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	cf 91       	pop	r28
    48b0:	df 91       	pop	r29
    48b2:	08 95       	ret

000048b4 <ADC_enuReadValue>:

ES_t ADC_enuReadValue(sint_16* Copy_sint16ADCValue){
    48b4:	df 93       	push	r29
    48b6:	cf 93       	push	r28
    48b8:	00 d0       	rcall	.+0      	; 0x48ba <ADC_enuReadValue+0x6>
    48ba:	0f 92       	push	r0
    48bc:	cd b7       	in	r28, 0x3d	; 61
    48be:	de b7       	in	r29, 0x3e	; 62
    48c0:	9b 83       	std	Y+3, r25	; 0x03
    48c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_sint16ADCValue != NULL){
    48c8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ca:	9b 81       	ldd	r25, Y+3	; 0x03
    48cc:	00 97       	sbiw	r24, 0x00	; 0
    48ce:	69 f1       	breq	.+90     	; 0x492a <ADC_enuReadValue+0x76>
		if(!((ADMUX >> ADC_ADLAR_BIT) & BIT_MASK1)){ // right adjusted
    48d0:	e7 e2       	ldi	r30, 0x27	; 39
    48d2:	f0 e0       	ldi	r31, 0x00	; 0
    48d4:	80 81       	ld	r24, Z
    48d6:	82 95       	swap	r24
    48d8:	86 95       	lsr	r24
    48da:	87 70       	andi	r24, 0x07	; 7
    48dc:	88 2f       	mov	r24, r24
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	81 70       	andi	r24, 0x01	; 1
    48e2:	90 70       	andi	r25, 0x00	; 0
    48e4:	00 97       	sbiw	r24, 0x00	; 0
    48e6:	49 f4       	brne	.+18     	; 0x48fa <ADC_enuReadValue+0x46>
			*Copy_sint16ADCValue = ADC_DATA_REGS;
    48e8:	e4 e2       	ldi	r30, 0x24	; 36
    48ea:	f0 e0       	ldi	r31, 0x00	; 0
    48ec:	80 81       	ld	r24, Z
    48ee:	91 81       	ldd	r25, Z+1	; 0x01
    48f0:	ea 81       	ldd	r30, Y+2	; 0x02
    48f2:	fb 81       	ldd	r31, Y+3	; 0x03
    48f4:	91 83       	std	Z+1, r25	; 0x01
    48f6:	80 83       	st	Z, r24
    48f8:	16 c0       	rjmp	.+44     	; 0x4926 <ADC_enuReadValue+0x72>
		}
		else if(((ADMUX >> ADC_ADLAR_BIT) & BIT_MASK1)){ // left adjusted
    48fa:	e7 e2       	ldi	r30, 0x27	; 39
    48fc:	f0 e0       	ldi	r31, 0x00	; 0
    48fe:	80 81       	ld	r24, Z
    4900:	82 95       	swap	r24
    4902:	86 95       	lsr	r24
    4904:	87 70       	andi	r24, 0x07	; 7
    4906:	88 2f       	mov	r24, r24
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	81 70       	andi	r24, 0x01	; 1
    490c:	90 70       	andi	r25, 0x00	; 0
    490e:	88 23       	and	r24, r24
    4910:	51 f0       	breq	.+20     	; 0x4926 <ADC_enuReadValue+0x72>
			*Copy_sint16ADCValue = ADCH;
    4912:	e5 e2       	ldi	r30, 0x25	; 37
    4914:	f0 e0       	ldi	r31, 0x00	; 0
    4916:	80 81       	ld	r24, Z
    4918:	99 27       	eor	r25, r25
    491a:	87 fd       	sbrc	r24, 7
    491c:	90 95       	com	r25
    491e:	ea 81       	ldd	r30, Y+2	; 0x02
    4920:	fb 81       	ldd	r31, Y+3	; 0x03
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	80 83       	st	Z, r24
		}
			Local_enuErrorStates = ES_OK;
    4926:	19 82       	std	Y+1, r1	; 0x01
    4928:	02 c0       	rjmp	.+4      	; 0x492e <ADC_enuReadValue+0x7a>
	}
	else {
		Local_enuErrorStates = ES_NULL_POINTER;
    492a:	82 e0       	ldi	r24, 0x02	; 2
    492c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    492e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	08 95       	ret

0000493c <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void){
    493c:	df 93       	push	r29
    493e:	cf 93       	push	r28
    4940:	0f 92       	push	r0
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	89 83       	std	Y+1, r24	; 0x01
	if(!((ADCSRA >> ADC_INTENABLE_BIT) & BIT_MASK1)){
    494a:	e6 e2       	ldi	r30, 0x26	; 38
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	80 81       	ld	r24, Z
    4950:	86 95       	lsr	r24
    4952:	86 95       	lsr	r24
    4954:	86 95       	lsr	r24
    4956:	88 2f       	mov	r24, r24
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	81 70       	andi	r24, 0x01	; 1
    495c:	90 70       	andi	r25, 0x00	; 0
    495e:	00 97       	sbiw	r24, 0x00	; 0
    4960:	81 f4       	brne	.+32     	; 0x4982 <ADC_enuEnableInterrupt+0x46>
		ADCSRA |= (BIT_MASK1 << ADC_INTENABLE_BIT);
    4962:	a6 e2       	ldi	r26, 0x26	; 38
    4964:	b0 e0       	ldi	r27, 0x00	; 0
    4966:	e6 e2       	ldi	r30, 0x26	; 38
    4968:	f0 e0       	ldi	r31, 0x00	; 0
    496a:	80 81       	ld	r24, Z
    496c:	88 60       	ori	r24, 0x08	; 8
    496e:	8c 93       	st	X, r24
		SREG |= (BIT_MASK1 << I_BIT);
    4970:	af e5       	ldi	r26, 0x5F	; 95
    4972:	b0 e0       	ldi	r27, 0x00	; 0
    4974:	ef e5       	ldi	r30, 0x5F	; 95
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	80 81       	ld	r24, Z
    497a:	80 68       	ori	r24, 0x80	; 128
    497c:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    497e:	19 82       	std	Y+1, r1	; 0x01
    4980:	02 c0       	rjmp	.+4      	; 0x4986 <ADC_enuEnableInterrupt+0x4a>
	}
	else{
		Local_enuErrorStates = ES_ALLREADY_IS_SET;
    4982:	88 e0       	ldi	r24, 0x08	; 8
    4984:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    4986:	89 81       	ldd	r24, Y+1	; 0x01
}
    4988:	0f 90       	pop	r0
    498a:	cf 91       	pop	r28
    498c:	df 91       	pop	r29
    498e:	08 95       	ret

00004990 <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void){
    4990:	df 93       	push	r29
    4992:	cf 93       	push	r28
    4994:	0f 92       	push	r0
    4996:	cd b7       	in	r28, 0x3d	; 61
    4998:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	89 83       	std	Y+1, r24	; 0x01
	if(((ADCSRA >> ADC_INTENABLE_BIT) & BIT_MASK1)){
    499e:	e6 e2       	ldi	r30, 0x26	; 38
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	80 81       	ld	r24, Z
    49a4:	86 95       	lsr	r24
    49a6:	86 95       	lsr	r24
    49a8:	86 95       	lsr	r24
    49aa:	88 2f       	mov	r24, r24
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	81 70       	andi	r24, 0x01	; 1
    49b0:	90 70       	andi	r25, 0x00	; 0
    49b2:	88 23       	and	r24, r24
    49b4:	49 f0       	breq	.+18     	; 0x49c8 <ADC_enuDisableInterrupt+0x38>
		ADCSRA &= ~(BIT_MASK1 << ADC_INTENABLE_BIT);
    49b6:	a6 e2       	ldi	r26, 0x26	; 38
    49b8:	b0 e0       	ldi	r27, 0x00	; 0
    49ba:	e6 e2       	ldi	r30, 0x26	; 38
    49bc:	f0 e0       	ldi	r31, 0x00	; 0
    49be:	80 81       	ld	r24, Z
    49c0:	87 7f       	andi	r24, 0xF7	; 247
    49c2:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    49c4:	19 82       	std	Y+1, r1	; 0x01
    49c6:	02 c0       	rjmp	.+4      	; 0x49cc <ADC_enuDisableInterrupt+0x3c>
	}
	else{
		Local_enuErrorStates = ES_ALLREADY_IS_CLEARED;
    49c8:	89 e0       	ldi	r24, 0x09	; 9
    49ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    49cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    49ce:	0f 90       	pop	r0
    49d0:	cf 91       	pop	r28
    49d2:	df 91       	pop	r29
    49d4:	08 95       	ret

000049d6 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void (*Copy_pfuncConfig)(void*), void* Copy_voidParameter){
    49d6:	df 93       	push	r29
    49d8:	cf 93       	push	r28
    49da:	00 d0       	rcall	.+0      	; 0x49dc <ADC_enuCallBack+0x6>
    49dc:	00 d0       	rcall	.+0      	; 0x49de <ADC_enuCallBack+0x8>
    49de:	0f 92       	push	r0
    49e0:	cd b7       	in	r28, 0x3d	; 61
    49e2:	de b7       	in	r29, 0x3e	; 62
    49e4:	9b 83       	std	Y+3, r25	; 0x03
    49e6:	8a 83       	std	Y+2, r24	; 0x02
    49e8:	7d 83       	std	Y+5, r23	; 0x05
    49ea:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    49ec:	81 e0       	ldi	r24, 0x01	; 1
    49ee:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pfuncConfig != NULL && Copy_voidParameter != NULL){
    49f0:	8a 81       	ldd	r24, Y+2	; 0x02
    49f2:	9b 81       	ldd	r25, Y+3	; 0x03
    49f4:	00 97       	sbiw	r24, 0x00	; 0
    49f6:	91 f0       	breq	.+36     	; 0x4a1c <ADC_enuCallBack+0x46>
    49f8:	8c 81       	ldd	r24, Y+4	; 0x04
    49fa:	9d 81       	ldd	r25, Y+5	; 0x05
    49fc:	00 97       	sbiw	r24, 0x00	; 0
    49fe:	71 f0       	breq	.+28     	; 0x4a1c <ADC_enuCallBack+0x46>
		ADC_pfuncForCallBack = Copy_pfuncConfig;
    4a00:	8a 81       	ldd	r24, Y+2	; 0x02
    4a02:	9b 81       	ldd	r25, Y+3	; 0x03
    4a04:	90 93 7f 01 	sts	0x017F, r25
    4a08:	80 93 7e 01 	sts	0x017E, r24
		ADC_pvoidParameter = Copy_voidParameter;
    4a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a10:	90 93 81 01 	sts	0x0181, r25
    4a14:	80 93 80 01 	sts	0x0180, r24
		Local_enuErrorStates = ES_OK;
    4a18:	19 82       	std	Y+1, r1	; 0x01
    4a1a:	02 c0       	rjmp	.+4      	; 0x4a20 <ADC_enuCallBack+0x4a>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    4a1c:	82 e0       	ldi	r24, 0x02	; 2
    4a1e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    4a20:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a22:	0f 90       	pop	r0
    4a24:	0f 90       	pop	r0
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	cf 91       	pop	r28
    4a2e:	df 91       	pop	r29
    4a30:	08 95       	ret

00004a32 <__vector_16>:
ADC_ISR{
    4a32:	1f 92       	push	r1
    4a34:	0f 92       	push	r0
    4a36:	0f b6       	in	r0, 0x3f	; 63
    4a38:	0f 92       	push	r0
    4a3a:	11 24       	eor	r1, r1
    4a3c:	2f 93       	push	r18
    4a3e:	3f 93       	push	r19
    4a40:	4f 93       	push	r20
    4a42:	5f 93       	push	r21
    4a44:	6f 93       	push	r22
    4a46:	7f 93       	push	r23
    4a48:	8f 93       	push	r24
    4a4a:	9f 93       	push	r25
    4a4c:	af 93       	push	r26
    4a4e:	bf 93       	push	r27
    4a50:	ef 93       	push	r30
    4a52:	ff 93       	push	r31
    4a54:	df 93       	push	r29
    4a56:	cf 93       	push	r28
    4a58:	cd b7       	in	r28, 0x3d	; 61
    4a5a:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfuncForCallBack != NULL && ADC_pvoidParameter != NULL){
    4a5c:	80 91 7e 01 	lds	r24, 0x017E
    4a60:	90 91 7f 01 	lds	r25, 0x017F
    4a64:	00 97       	sbiw	r24, 0x00	; 0
    4a66:	79 f0       	breq	.+30     	; 0x4a86 <__vector_16+0x54>
    4a68:	80 91 80 01 	lds	r24, 0x0180
    4a6c:	90 91 81 01 	lds	r25, 0x0181
    4a70:	00 97       	sbiw	r24, 0x00	; 0
    4a72:	49 f0       	breq	.+18     	; 0x4a86 <__vector_16+0x54>
		ADC_pfuncForCallBack(ADC_pvoidParameter);
    4a74:	e0 91 7e 01 	lds	r30, 0x017E
    4a78:	f0 91 7f 01 	lds	r31, 0x017F
    4a7c:	80 91 80 01 	lds	r24, 0x0180
    4a80:	90 91 81 01 	lds	r25, 0x0181
    4a84:	09 95       	icall
	}
}
    4a86:	cf 91       	pop	r28
    4a88:	df 91       	pop	r29
    4a8a:	ff 91       	pop	r31
    4a8c:	ef 91       	pop	r30
    4a8e:	bf 91       	pop	r27
    4a90:	af 91       	pop	r26
    4a92:	9f 91       	pop	r25
    4a94:	8f 91       	pop	r24
    4a96:	7f 91       	pop	r23
    4a98:	6f 91       	pop	r22
    4a9a:	5f 91       	pop	r21
    4a9c:	4f 91       	pop	r20
    4a9e:	3f 91       	pop	r19
    4aa0:	2f 91       	pop	r18
    4aa2:	0f 90       	pop	r0
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	0f 90       	pop	r0
    4aa8:	1f 90       	pop	r1
    4aaa:	18 95       	reti

00004aac <LCD_enuInit>:
#include "LCD_priv.h"
#include "LCD_config.h"

#include "util/delay.h"

ES_t LCD_enuInit(void){
    4aac:	df 93       	push	r29
    4aae:	cf 93       	push	r28
    4ab0:	cd b7       	in	r28, 0x3d	; 61
    4ab2:	de b7       	in	r29, 0x3e	; 62
    4ab4:	e9 97       	sbiw	r28, 0x39	; 57
    4ab6:	0f b6       	in	r0, 0x3f	; 63
    4ab8:	f8 94       	cli
    4aba:	de bf       	out	0x3e, r29	; 62
    4abc:	0f be       	out	0x3f, r0	; 63
    4abe:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorStates = ES_NOK;
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(RS_PORT, RS_PIN, OUTPUT);
    4ac4:	82 e0       	ldi	r24, 0x02	; 2
    4ac6:	60 e0       	ldi	r22, 0x00	; 0
    4ac8:	41 e0       	ldi	r20, 0x01	; 1
    4aca:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <DIO_enuSetPinDir>
    4ace:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(RW_PORT, RW_PIN, OUTPUT);
    4ad0:	82 e0       	ldi	r24, 0x02	; 2
    4ad2:	61 e0       	ldi	r22, 0x01	; 1
    4ad4:	41 e0       	ldi	r20, 0x01	; 1
    4ad6:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <DIO_enuSetPinDir>
    4ada:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(EN_PORT, EN_PIN, OUTPUT);
    4adc:	82 e0       	ldi	r24, 0x02	; 2
    4ade:	62 e0       	ldi	r22, 0x02	; 2
    4ae0:	41 e0       	ldi	r20, 0x01	; 1
    4ae2:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <DIO_enuSetPinDir>
    4ae6:	89 af       	std	Y+57, r24	; 0x39

	Local_enuErrorStates = DIO_enuSetPinDir(D7_PORT, D7_PIN, OUTPUT);
    4ae8:	82 e0       	ldi	r24, 0x02	; 2
    4aea:	63 e0       	ldi	r22, 0x03	; 3
    4aec:	41 e0       	ldi	r20, 0x01	; 1
    4aee:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <DIO_enuSetPinDir>
    4af2:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(D6_PORT, D6_PIN, OUTPUT);
    4af4:	82 e0       	ldi	r24, 0x02	; 2
    4af6:	64 e0       	ldi	r22, 0x04	; 4
    4af8:	41 e0       	ldi	r20, 0x01	; 1
    4afa:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <DIO_enuSetPinDir>
    4afe:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(D5_PORT, D5_PIN, OUTPUT);
    4b00:	82 e0       	ldi	r24, 0x02	; 2
    4b02:	65 e0       	ldi	r22, 0x05	; 5
    4b04:	41 e0       	ldi	r20, 0x01	; 1
    4b06:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <DIO_enuSetPinDir>
    4b0a:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinDir(D4_PORT, D4_PIN, OUTPUT);
    4b0c:	82 e0       	ldi	r24, 0x02	; 2
    4b0e:	66 e0       	ldi	r22, 0x06	; 6
    4b10:	41 e0       	ldi	r20, 0x01	; 1
    4b12:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <DIO_enuSetPinDir>
    4b16:	89 af       	std	Y+57, r24	; 0x39
    4b18:	80 e0       	ldi	r24, 0x00	; 0
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	a0 ef       	ldi	r26, 0xF0	; 240
    4b1e:	b1 e4       	ldi	r27, 0x41	; 65
    4b20:	8d ab       	std	Y+53, r24	; 0x35
    4b22:	9e ab       	std	Y+54, r25	; 0x36
    4b24:	af ab       	std	Y+55, r26	; 0x37
    4b26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b28:	6d a9       	ldd	r22, Y+53	; 0x35
    4b2a:	7e a9       	ldd	r23, Y+54	; 0x36
    4b2c:	8f a9       	ldd	r24, Y+55	; 0x37
    4b2e:	98 ad       	ldd	r25, Y+56	; 0x38
    4b30:	20 e0       	ldi	r18, 0x00	; 0
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	4a e7       	ldi	r20, 0x7A	; 122
    4b36:	53 e4       	ldi	r21, 0x43	; 67
    4b38:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4b3c:	dc 01       	movw	r26, r24
    4b3e:	cb 01       	movw	r24, r22
    4b40:	89 ab       	std	Y+49, r24	; 0x31
    4b42:	9a ab       	std	Y+50, r25	; 0x32
    4b44:	ab ab       	std	Y+51, r26	; 0x33
    4b46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4b48:	69 a9       	ldd	r22, Y+49	; 0x31
    4b4a:	7a a9       	ldd	r23, Y+50	; 0x32
    4b4c:	8b a9       	ldd	r24, Y+51	; 0x33
    4b4e:	9c a9       	ldd	r25, Y+52	; 0x34
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	40 e8       	ldi	r20, 0x80	; 128
    4b56:	5f e3       	ldi	r21, 0x3F	; 63
    4b58:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    4b5c:	88 23       	and	r24, r24
    4b5e:	2c f4       	brge	.+10     	; 0x4b6a <LCD_enuInit+0xbe>
		__ticks = 1;
    4b60:	81 e0       	ldi	r24, 0x01	; 1
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	98 ab       	std	Y+48, r25	; 0x30
    4b66:	8f a7       	std	Y+47, r24	; 0x2f
    4b68:	3f c0       	rjmp	.+126    	; 0x4be8 <LCD_enuInit+0x13c>
	else if (__tmp > 65535)
    4b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    4b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    4b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    4b70:	9c a9       	ldd	r25, Y+52	; 0x34
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	3f ef       	ldi	r19, 0xFF	; 255
    4b76:	4f e7       	ldi	r20, 0x7F	; 127
    4b78:	57 e4       	ldi	r21, 0x47	; 71
    4b7a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    4b7e:	18 16       	cp	r1, r24
    4b80:	4c f5       	brge	.+82     	; 0x4bd4 <LCD_enuInit+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b82:	6d a9       	ldd	r22, Y+53	; 0x35
    4b84:	7e a9       	ldd	r23, Y+54	; 0x36
    4b86:	8f a9       	ldd	r24, Y+55	; 0x37
    4b88:	98 ad       	ldd	r25, Y+56	; 0x38
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	40 e2       	ldi	r20, 0x20	; 32
    4b90:	51 e4       	ldi	r21, 0x41	; 65
    4b92:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4b96:	dc 01       	movw	r26, r24
    4b98:	cb 01       	movw	r24, r22
    4b9a:	bc 01       	movw	r22, r24
    4b9c:	cd 01       	movw	r24, r26
    4b9e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	98 ab       	std	Y+48, r25	; 0x30
    4ba8:	8f a7       	std	Y+47, r24	; 0x2f
    4baa:	0f c0       	rjmp	.+30     	; 0x4bca <LCD_enuInit+0x11e>
    4bac:	89 e1       	ldi	r24, 0x19	; 25
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	9e a7       	std	Y+46, r25	; 0x2e
    4bb2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4bb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4bb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4bb8:	01 97       	sbiw	r24, 0x01	; 1
    4bba:	f1 f7       	brne	.-4      	; 0x4bb8 <LCD_enuInit+0x10c>
    4bbc:	9e a7       	std	Y+46, r25	; 0x2e
    4bbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    4bc4:	01 97       	sbiw	r24, 0x01	; 1
    4bc6:	98 ab       	std	Y+48, r25	; 0x30
    4bc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bca:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bcc:	98 a9       	ldd	r25, Y+48	; 0x30
    4bce:	00 97       	sbiw	r24, 0x00	; 0
    4bd0:	69 f7       	brne	.-38     	; 0x4bac <LCD_enuInit+0x100>
    4bd2:	14 c0       	rjmp	.+40     	; 0x4bfc <LCD_enuInit+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd4:	69 a9       	ldd	r22, Y+49	; 0x31
    4bd6:	7a a9       	ldd	r23, Y+50	; 0x32
    4bd8:	8b a9       	ldd	r24, Y+51	; 0x33
    4bda:	9c a9       	ldd	r25, Y+52	; 0x34
    4bdc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4be0:	dc 01       	movw	r26, r24
    4be2:	cb 01       	movw	r24, r22
    4be4:	98 ab       	std	Y+48, r25	; 0x30
    4be6:	8f a7       	std	Y+47, r24	; 0x2f
    4be8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bea:	98 a9       	ldd	r25, Y+48	; 0x30
    4bec:	9c a7       	std	Y+44, r25	; 0x2c
    4bee:	8b a7       	std	Y+43, r24	; 0x2b
    4bf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    4bf4:	01 97       	sbiw	r24, 0x01	; 1
    4bf6:	f1 f7       	brne	.-4      	; 0x4bf4 <LCD_enuInit+0x148>
    4bf8:	9c a7       	std	Y+44, r25	; 0x2c
    4bfa:	8b a7       	std	Y+43, r24	; 0x2b

	Local_enuErrorStates = LCD_enuToSendCommand(0x38);
	_delay_ms(1);

#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = LCD_enuToSendCommand(0x28);
    4bfc:	88 e2       	ldi	r24, 0x28	; 40
    4bfe:	0e 94 24 2b 	call	0x5648	; 0x5648 <LCD_enuToSendCommand>
    4c02:	89 af       	std	Y+57, r24	; 0x39
    4c04:	80 e0       	ldi	r24, 0x00	; 0
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	a0 e8       	ldi	r26, 0x80	; 128
    4c0a:	bf e3       	ldi	r27, 0x3F	; 63
    4c0c:	8f a3       	std	Y+39, r24	; 0x27
    4c0e:	98 a7       	std	Y+40, r25	; 0x28
    4c10:	a9 a7       	std	Y+41, r26	; 0x29
    4c12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c14:	6f a1       	ldd	r22, Y+39	; 0x27
    4c16:	78 a5       	ldd	r23, Y+40	; 0x28
    4c18:	89 a5       	ldd	r24, Y+41	; 0x29
    4c1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	4a e7       	ldi	r20, 0x7A	; 122
    4c22:	53 e4       	ldi	r21, 0x43	; 67
    4c24:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	8b a3       	std	Y+35, r24	; 0x23
    4c2e:	9c a3       	std	Y+36, r25	; 0x24
    4c30:	ad a3       	std	Y+37, r26	; 0x25
    4c32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4c34:	6b a1       	ldd	r22, Y+35	; 0x23
    4c36:	7c a1       	ldd	r23, Y+36	; 0x24
    4c38:	8d a1       	ldd	r24, Y+37	; 0x25
    4c3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c3c:	20 e0       	ldi	r18, 0x00	; 0
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	40 e8       	ldi	r20, 0x80	; 128
    4c42:	5f e3       	ldi	r21, 0x3F	; 63
    4c44:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    4c48:	88 23       	and	r24, r24
    4c4a:	2c f4       	brge	.+10     	; 0x4c56 <LCD_enuInit+0x1aa>
		__ticks = 1;
    4c4c:	81 e0       	ldi	r24, 0x01	; 1
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	9a a3       	std	Y+34, r25	; 0x22
    4c52:	89 a3       	std	Y+33, r24	; 0x21
    4c54:	3f c0       	rjmp	.+126    	; 0x4cd4 <LCD_enuInit+0x228>
	else if (__tmp > 65535)
    4c56:	6b a1       	ldd	r22, Y+35	; 0x23
    4c58:	7c a1       	ldd	r23, Y+36	; 0x24
    4c5a:	8d a1       	ldd	r24, Y+37	; 0x25
    4c5c:	9e a1       	ldd	r25, Y+38	; 0x26
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	3f ef       	ldi	r19, 0xFF	; 255
    4c62:	4f e7       	ldi	r20, 0x7F	; 127
    4c64:	57 e4       	ldi	r21, 0x47	; 71
    4c66:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    4c6a:	18 16       	cp	r1, r24
    4c6c:	4c f5       	brge	.+82     	; 0x4cc0 <LCD_enuInit+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c6e:	6f a1       	ldd	r22, Y+39	; 0x27
    4c70:	78 a5       	ldd	r23, Y+40	; 0x28
    4c72:	89 a5       	ldd	r24, Y+41	; 0x29
    4c74:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e2       	ldi	r20, 0x20	; 32
    4c7c:	51 e4       	ldi	r21, 0x41	; 65
    4c7e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	bc 01       	movw	r22, r24
    4c88:	cd 01       	movw	r24, r26
    4c8a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	9a a3       	std	Y+34, r25	; 0x22
    4c94:	89 a3       	std	Y+33, r24	; 0x21
    4c96:	0f c0       	rjmp	.+30     	; 0x4cb6 <LCD_enuInit+0x20a>
    4c98:	89 e1       	ldi	r24, 0x19	; 25
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	98 a3       	std	Y+32, r25	; 0x20
    4c9e:	8f 8f       	std	Y+31, r24	; 0x1f
    4ca0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ca2:	98 a1       	ldd	r25, Y+32	; 0x20
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	f1 f7       	brne	.-4      	; 0x4ca4 <LCD_enuInit+0x1f8>
    4ca8:	98 a3       	std	Y+32, r25	; 0x20
    4caa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cac:	89 a1       	ldd	r24, Y+33	; 0x21
    4cae:	9a a1       	ldd	r25, Y+34	; 0x22
    4cb0:	01 97       	sbiw	r24, 0x01	; 1
    4cb2:	9a a3       	std	Y+34, r25	; 0x22
    4cb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb6:	89 a1       	ldd	r24, Y+33	; 0x21
    4cb8:	9a a1       	ldd	r25, Y+34	; 0x22
    4cba:	00 97       	sbiw	r24, 0x00	; 0
    4cbc:	69 f7       	brne	.-38     	; 0x4c98 <LCD_enuInit+0x1ec>
    4cbe:	14 c0       	rjmp	.+40     	; 0x4ce8 <LCD_enuInit+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cc0:	6b a1       	ldd	r22, Y+35	; 0x23
    4cc2:	7c a1       	ldd	r23, Y+36	; 0x24
    4cc4:	8d a1       	ldd	r24, Y+37	; 0x25
    4cc6:	9e a1       	ldd	r25, Y+38	; 0x26
    4cc8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ccc:	dc 01       	movw	r26, r24
    4cce:	cb 01       	movw	r24, r22
    4cd0:	9a a3       	std	Y+34, r25	; 0x22
    4cd2:	89 a3       	std	Y+33, r24	; 0x21
    4cd4:	89 a1       	ldd	r24, Y+33	; 0x21
    4cd6:	9a a1       	ldd	r25, Y+34	; 0x22
    4cd8:	9e 8f       	std	Y+30, r25	; 0x1e
    4cda:	8d 8f       	std	Y+29, r24	; 0x1d
    4cdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ce0:	01 97       	sbiw	r24, 0x01	; 1
    4ce2:	f1 f7       	brne	.-4      	; 0x4ce0 <LCD_enuInit+0x234>
    4ce4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ce6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#endif

	Local_enuErrorStates = LCD_enuToSendCommand(0x0f);
    4ce8:	8f e0       	ldi	r24, 0x0F	; 15
    4cea:	0e 94 24 2b 	call	0x5648	; 0x5648 <LCD_enuToSendCommand>
    4cee:	89 af       	std	Y+57, r24	; 0x39
    4cf0:	80 e0       	ldi	r24, 0x00	; 0
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	a0 e8       	ldi	r26, 0x80	; 128
    4cf6:	bf e3       	ldi	r27, 0x3F	; 63
    4cf8:	89 8f       	std	Y+25, r24	; 0x19
    4cfa:	9a 8f       	std	Y+26, r25	; 0x1a
    4cfc:	ab 8f       	std	Y+27, r26	; 0x1b
    4cfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d00:	69 8d       	ldd	r22, Y+25	; 0x19
    4d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	4a e7       	ldi	r20, 0x7A	; 122
    4d0e:	53 e4       	ldi	r21, 0x43	; 67
    4d10:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4d14:	dc 01       	movw	r26, r24
    4d16:	cb 01       	movw	r24, r22
    4d18:	8d 8b       	std	Y+21, r24	; 0x15
    4d1a:	9e 8b       	std	Y+22, r25	; 0x16
    4d1c:	af 8b       	std	Y+23, r26	; 0x17
    4d1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d20:	6d 89       	ldd	r22, Y+21	; 0x15
    4d22:	7e 89       	ldd	r23, Y+22	; 0x16
    4d24:	8f 89       	ldd	r24, Y+23	; 0x17
    4d26:	98 8d       	ldd	r25, Y+24	; 0x18
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	40 e8       	ldi	r20, 0x80	; 128
    4d2e:	5f e3       	ldi	r21, 0x3F	; 63
    4d30:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    4d34:	88 23       	and	r24, r24
    4d36:	2c f4       	brge	.+10     	; 0x4d42 <LCD_enuInit+0x296>
		__ticks = 1;
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	9c 8b       	std	Y+20, r25	; 0x14
    4d3e:	8b 8b       	std	Y+19, r24	; 0x13
    4d40:	3f c0       	rjmp	.+126    	; 0x4dc0 <LCD_enuInit+0x314>
	else if (__tmp > 65535)
    4d42:	6d 89       	ldd	r22, Y+21	; 0x15
    4d44:	7e 89       	ldd	r23, Y+22	; 0x16
    4d46:	8f 89       	ldd	r24, Y+23	; 0x17
    4d48:	98 8d       	ldd	r25, Y+24	; 0x18
    4d4a:	20 e0       	ldi	r18, 0x00	; 0
    4d4c:	3f ef       	ldi	r19, 0xFF	; 255
    4d4e:	4f e7       	ldi	r20, 0x7F	; 127
    4d50:	57 e4       	ldi	r21, 0x47	; 71
    4d52:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    4d56:	18 16       	cp	r1, r24
    4d58:	4c f5       	brge	.+82     	; 0x4dac <LCD_enuInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d5a:	69 8d       	ldd	r22, Y+25	; 0x19
    4d5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d62:	20 e0       	ldi	r18, 0x00	; 0
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	40 e2       	ldi	r20, 0x20	; 32
    4d68:	51 e4       	ldi	r21, 0x41	; 65
    4d6a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4d6e:	dc 01       	movw	r26, r24
    4d70:	cb 01       	movw	r24, r22
    4d72:	bc 01       	movw	r22, r24
    4d74:	cd 01       	movw	r24, r26
    4d76:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	9c 8b       	std	Y+20, r25	; 0x14
    4d80:	8b 8b       	std	Y+19, r24	; 0x13
    4d82:	0f c0       	rjmp	.+30     	; 0x4da2 <LCD_enuInit+0x2f6>
    4d84:	89 e1       	ldi	r24, 0x19	; 25
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	9a 8b       	std	Y+18, r25	; 0x12
    4d8a:	89 8b       	std	Y+17, r24	; 0x11
    4d8c:	89 89       	ldd	r24, Y+17	; 0x11
    4d8e:	9a 89       	ldd	r25, Y+18	; 0x12
    4d90:	01 97       	sbiw	r24, 0x01	; 1
    4d92:	f1 f7       	brne	.-4      	; 0x4d90 <LCD_enuInit+0x2e4>
    4d94:	9a 8b       	std	Y+18, r25	; 0x12
    4d96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d98:	8b 89       	ldd	r24, Y+19	; 0x13
    4d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d9c:	01 97       	sbiw	r24, 0x01	; 1
    4d9e:	9c 8b       	std	Y+20, r25	; 0x14
    4da0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da2:	8b 89       	ldd	r24, Y+19	; 0x13
    4da4:	9c 89       	ldd	r25, Y+20	; 0x14
    4da6:	00 97       	sbiw	r24, 0x00	; 0
    4da8:	69 f7       	brne	.-38     	; 0x4d84 <LCD_enuInit+0x2d8>
    4daa:	14 c0       	rjmp	.+40     	; 0x4dd4 <LCD_enuInit+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dac:	6d 89       	ldd	r22, Y+21	; 0x15
    4dae:	7e 89       	ldd	r23, Y+22	; 0x16
    4db0:	8f 89       	ldd	r24, Y+23	; 0x17
    4db2:	98 8d       	ldd	r25, Y+24	; 0x18
    4db4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4db8:	dc 01       	movw	r26, r24
    4dba:	cb 01       	movw	r24, r22
    4dbc:	9c 8b       	std	Y+20, r25	; 0x14
    4dbe:	8b 8b       	std	Y+19, r24	; 0x13
    4dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    4dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    4dc4:	98 8b       	std	Y+16, r25	; 0x10
    4dc6:	8f 87       	std	Y+15, r24	; 0x0f
    4dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dca:	98 89       	ldd	r25, Y+16	; 0x10
    4dcc:	01 97       	sbiw	r24, 0x01	; 1
    4dce:	f1 f7       	brne	.-4      	; 0x4dcc <LCD_enuInit+0x320>
    4dd0:	98 8b       	std	Y+16, r25	; 0x10
    4dd2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Local_enuErrorStates = LCD_enuToSendCommand(0x01);
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	0e 94 24 2b 	call	0x5648	; 0x5648 <LCD_enuToSendCommand>
    4dda:	89 af       	std	Y+57, r24	; 0x39
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	a0 e0       	ldi	r26, 0x00	; 0
    4de2:	b0 e4       	ldi	r27, 0x40	; 64
    4de4:	8b 87       	std	Y+11, r24	; 0x0b
    4de6:	9c 87       	std	Y+12, r25	; 0x0c
    4de8:	ad 87       	std	Y+13, r26	; 0x0d
    4dea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    4df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	4a e7       	ldi	r20, 0x7A	; 122
    4dfa:	53 e4       	ldi	r21, 0x43	; 67
    4dfc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	8f 83       	std	Y+7, r24	; 0x07
    4e06:	98 87       	std	Y+8, r25	; 0x08
    4e08:	a9 87       	std	Y+9, r26	; 0x09
    4e0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e0e:	78 85       	ldd	r23, Y+8	; 0x08
    4e10:	89 85       	ldd	r24, Y+9	; 0x09
    4e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	40 e8       	ldi	r20, 0x80	; 128
    4e1a:	5f e3       	ldi	r21, 0x3F	; 63
    4e1c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    4e20:	88 23       	and	r24, r24
    4e22:	2c f4       	brge	.+10     	; 0x4e2e <LCD_enuInit+0x382>
		__ticks = 1;
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	9e 83       	std	Y+6, r25	; 0x06
    4e2a:	8d 83       	std	Y+5, r24	; 0x05
    4e2c:	3f c0       	rjmp	.+126    	; 0x4eac <LCD_enuInit+0x400>
	else if (__tmp > 65535)
    4e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e30:	78 85       	ldd	r23, Y+8	; 0x08
    4e32:	89 85       	ldd	r24, Y+9	; 0x09
    4e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	3f ef       	ldi	r19, 0xFF	; 255
    4e3a:	4f e7       	ldi	r20, 0x7F	; 127
    4e3c:	57 e4       	ldi	r21, 0x47	; 71
    4e3e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    4e42:	18 16       	cp	r1, r24
    4e44:	4c f5       	brge	.+82     	; 0x4e98 <LCD_enuInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	40 e2       	ldi	r20, 0x20	; 32
    4e54:	51 e4       	ldi	r21, 0x41	; 65
    4e56:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	cb 01       	movw	r24, r22
    4e5e:	bc 01       	movw	r22, r24
    4e60:	cd 01       	movw	r24, r26
    4e62:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22
    4e6a:	9e 83       	std	Y+6, r25	; 0x06
    4e6c:	8d 83       	std	Y+5, r24	; 0x05
    4e6e:	0f c0       	rjmp	.+30     	; 0x4e8e <LCD_enuInit+0x3e2>
    4e70:	89 e1       	ldi	r24, 0x19	; 25
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	9c 83       	std	Y+4, r25	; 0x04
    4e76:	8b 83       	std	Y+3, r24	; 0x03
    4e78:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e7c:	01 97       	sbiw	r24, 0x01	; 1
    4e7e:	f1 f7       	brne	.-4      	; 0x4e7c <LCD_enuInit+0x3d0>
    4e80:	9c 83       	std	Y+4, r25	; 0x04
    4e82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e84:	8d 81       	ldd	r24, Y+5	; 0x05
    4e86:	9e 81       	ldd	r25, Y+6	; 0x06
    4e88:	01 97       	sbiw	r24, 0x01	; 1
    4e8a:	9e 83       	std	Y+6, r25	; 0x06
    4e8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e90:	9e 81       	ldd	r25, Y+6	; 0x06
    4e92:	00 97       	sbiw	r24, 0x00	; 0
    4e94:	69 f7       	brne	.-38     	; 0x4e70 <LCD_enuInit+0x3c4>
    4e96:	14 c0       	rjmp	.+40     	; 0x4ec0 <LCD_enuInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e98:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9a:	78 85       	ldd	r23, Y+8	; 0x08
    4e9c:	89 85       	ldd	r24, Y+9	; 0x09
    4e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	9e 83       	std	Y+6, r25	; 0x06
    4eaa:	8d 83       	std	Y+5, r24	; 0x05
    4eac:	8d 81       	ldd	r24, Y+5	; 0x05
    4eae:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb0:	9a 83       	std	Y+2, r25	; 0x02
    4eb2:	89 83       	std	Y+1, r24	; 0x01
    4eb4:	89 81       	ldd	r24, Y+1	; 0x01
    4eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	f1 f7       	brne	.-4      	; 0x4eb8 <LCD_enuInit+0x40c>
    4ebc:	9a 83       	std	Y+2, r25	; 0x02
    4ebe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Local_enuErrorStates = LCD_enuToSendCommand(0x06);
    4ec0:	86 e0       	ldi	r24, 0x06	; 6
    4ec2:	0e 94 24 2b 	call	0x5648	; 0x5648 <LCD_enuToSendCommand>
    4ec6:	89 af       	std	Y+57, r24	; 0x39

	return Local_enuErrorStates;
    4ec8:	89 ad       	ldd	r24, Y+57	; 0x39
}
    4eca:	e9 96       	adiw	r28, 0x39	; 57
    4ecc:	0f b6       	in	r0, 0x3f	; 63
    4ece:	f8 94       	cli
    4ed0:	de bf       	out	0x3e, r29	; 62
    4ed2:	0f be       	out	0x3f, r0	; 63
    4ed4:	cd bf       	out	0x3d, r28	; 61
    4ed6:	cf 91       	pop	r28
    4ed8:	df 91       	pop	r29
    4eda:	08 95       	ret

00004edc <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(uint_8 Copy_uint8Command){
    4edc:	df 93       	push	r29
    4ede:	cf 93       	push	r28
    4ee0:	00 d0       	rcall	.+0      	; 0x4ee2 <LCD_enuSendCommand+0x6>
    4ee2:	cd b7       	in	r28, 0x3d	; 61
    4ee4:	de b7       	in	r29, 0x3e	; 62
    4ee6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = LCD_enuToSendCommand(Copy_uint8Command);
    4eec:	8a 81       	ldd	r24, Y+2	; 0x02
    4eee:	0e 94 24 2b 	call	0x5648	; 0x5648 <LCD_enuToSendCommand>
    4ef2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStates = ES_OK;
    4ef4:	19 82       	std	Y+1, r1	; 0x01
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ef8:	0f 90       	pop	r0
    4efa:	0f 90       	pop	r0
    4efc:	cf 91       	pop	r28
    4efe:	df 91       	pop	r29
    4f00:	08 95       	ret

00004f02 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(uint_8 Copy_uint8Data){
    4f02:	df 93       	push	r29
    4f04:	cf 93       	push	r28
    4f06:	00 d0       	rcall	.+0      	; 0x4f08 <LCD_enuDisplayChar+0x6>
    4f08:	cd b7       	in	r28, 0x3d	; 61
    4f0a:	de b7       	in	r29, 0x3e	; 62
    4f0c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    4f0e:	81 e0       	ldi	r24, 0x01	; 1
    4f10:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = LCD_enuSendData(Copy_uint8Data);
    4f12:	8a 81       	ldd	r24, Y+2	; 0x02
    4f14:	0e 94 c2 28 	call	0x5184	; 0x5184 <LCD_enuSendData>
    4f18:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStates;
    4f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f1c:	0f 90       	pop	r0
    4f1e:	0f 90       	pop	r0
    4f20:	cf 91       	pop	r28
    4f22:	df 91       	pop	r29
    4f24:	08 95       	ret

00004f26 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(uint_8* Copy_uint8Data){
    4f26:	df 93       	push	r29
    4f28:	cf 93       	push	r28
    4f2a:	00 d0       	rcall	.+0      	; 0x4f2c <LCD_enuDisplayString+0x6>
    4f2c:	00 d0       	rcall	.+0      	; 0x4f2e <LCD_enuDisplayString+0x8>
    4f2e:	cd b7       	in	r28, 0x3d	; 61
    4f30:	de b7       	in	r29, 0x3e	; 62
    4f32:	9c 83       	std	Y+4, r25	; 0x04
    4f34:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 Local_uint8Iterator = 0;
    4f3a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_uint8Data != NULL){
    4f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f40:	00 97       	sbiw	r24, 0x00	; 0
    4f42:	e1 f0       	breq	.+56     	; 0x4f7c <LCD_enuDisplayString+0x56>
    4f44:	0f c0       	rjmp	.+30     	; 0x4f64 <LCD_enuDisplayString+0x3e>
		while(Copy_uint8Data[Local_uint8Iterator] != '\0'){
			Local_enuErrorStates = LCD_enuSendData(Copy_uint8Data[Local_uint8Iterator]);
    4f46:	89 81       	ldd	r24, Y+1	; 0x01
    4f48:	28 2f       	mov	r18, r24
    4f4a:	30 e0       	ldi	r19, 0x00	; 0
    4f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f50:	fc 01       	movw	r30, r24
    4f52:	e2 0f       	add	r30, r18
    4f54:	f3 1f       	adc	r31, r19
    4f56:	80 81       	ld	r24, Z
    4f58:	0e 94 c2 28 	call	0x5184	; 0x5184 <LCD_enuSendData>
    4f5c:	8a 83       	std	Y+2, r24	; 0x02
			Local_uint8Iterator++;
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	8f 5f       	subi	r24, 0xFF	; 255
    4f62:	89 83       	std	Y+1, r24	; 0x01

ES_t LCD_enuDisplayString(uint_8* Copy_uint8Data){
	ES_t Local_enuErrorStates = ES_NOK;
	uint_8 Local_uint8Iterator = 0;
	if(Copy_uint8Data != NULL){
		while(Copy_uint8Data[Local_uint8Iterator] != '\0'){
    4f64:	89 81       	ldd	r24, Y+1	; 0x01
    4f66:	28 2f       	mov	r18, r24
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f6e:	fc 01       	movw	r30, r24
    4f70:	e2 0f       	add	r30, r18
    4f72:	f3 1f       	adc	r31, r19
    4f74:	80 81       	ld	r24, Z
    4f76:	88 23       	and	r24, r24
    4f78:	31 f7       	brne	.-52     	; 0x4f46 <LCD_enuDisplayString+0x20>
    4f7a:	02 c0       	rjmp	.+4      	; 0x4f80 <LCD_enuDisplayString+0x5a>
			Local_enuErrorStates = LCD_enuSendData(Copy_uint8Data[Local_uint8Iterator]);
			Local_uint8Iterator++;
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    4f7c:	82 e0       	ldi	r24, 0x02	; 2
    4f7e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorStates;
    4f80:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4f82:	0f 90       	pop	r0
    4f84:	0f 90       	pop	r0
    4f86:	0f 90       	pop	r0
    4f88:	0f 90       	pop	r0
    4f8a:	cf 91       	pop	r28
    4f8c:	df 91       	pop	r29
    4f8e:	08 95       	ret

00004f90 <LCD_enuDisplayInteger>:

ES_t LCD_enuDisplayInteger(sint_64 Copy_uint32Data){
    4f90:	af 92       	push	r10
    4f92:	bf 92       	push	r11
    4f94:	cf 92       	push	r12
    4f96:	df 92       	push	r13
    4f98:	ef 92       	push	r14
    4f9a:	ff 92       	push	r15
    4f9c:	0f 93       	push	r16
    4f9e:	1f 93       	push	r17
    4fa0:	df 93       	push	r29
    4fa2:	cf 93       	push	r28
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62
    4fa8:	29 97       	sbiw	r28, 0x09	; 9
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	f8 94       	cli
    4fae:	de bf       	out	0x3e, r29	; 62
    4fb0:	0f be       	out	0x3f, r0	; 63
    4fb2:	cd bf       	out	0x3d, r28	; 61
    4fb4:	2a 83       	std	Y+2, r18	; 0x02
    4fb6:	3b 83       	std	Y+3, r19	; 0x03
    4fb8:	4c 83       	std	Y+4, r20	; 0x04
    4fba:	5d 83       	std	Y+5, r21	; 0x05
    4fbc:	6e 83       	std	Y+6, r22	; 0x06
    4fbe:	7f 83       	std	Y+7, r23	; 0x07
    4fc0:	88 87       	std	Y+8, r24	; 0x08
    4fc2:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorStates = ES_NOK;
    4fc4:	81 e0       	ldi	r24, 0x01	; 1
    4fc6:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = LCD_enuDisplayNumber(Copy_uint32Data);
    4fc8:	aa 80       	ldd	r10, Y+2	; 0x02
    4fca:	bb 80       	ldd	r11, Y+3	; 0x03
    4fcc:	cc 80       	ldd	r12, Y+4	; 0x04
    4fce:	dd 80       	ldd	r13, Y+5	; 0x05
    4fd0:	ee 80       	ldd	r14, Y+6	; 0x06
    4fd2:	ff 80       	ldd	r15, Y+7	; 0x07
    4fd4:	08 85       	ldd	r16, Y+8	; 0x08
    4fd6:	19 85       	ldd	r17, Y+9	; 0x09
    4fd8:	2a 2d       	mov	r18, r10
    4fda:	3b 2d       	mov	r19, r11
    4fdc:	4c 2d       	mov	r20, r12
    4fde:	5d 2d       	mov	r21, r13
    4fe0:	6e 2d       	mov	r22, r14
    4fe2:	7f 2d       	mov	r23, r15
    4fe4:	80 2f       	mov	r24, r16
    4fe6:	91 2f       	mov	r25, r17
    4fe8:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <LCD_enuDisplayNumber>
    4fec:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStates;
    4fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ff0:	29 96       	adiw	r28, 0x09	; 9
    4ff2:	0f b6       	in	r0, 0x3f	; 63
    4ff4:	f8 94       	cli
    4ff6:	de bf       	out	0x3e, r29	; 62
    4ff8:	0f be       	out	0x3f, r0	; 63
    4ffa:	cd bf       	out	0x3d, r28	; 61
    4ffc:	cf 91       	pop	r28
    4ffe:	df 91       	pop	r29
    5000:	1f 91       	pop	r17
    5002:	0f 91       	pop	r16
    5004:	ff 90       	pop	r15
    5006:	ef 90       	pop	r14
    5008:	df 90       	pop	r13
    500a:	cf 90       	pop	r12
    500c:	bf 90       	pop	r11
    500e:	af 90       	pop	r10
    5010:	08 95       	ret

00005012 <LCD_enuDisplayFloat>:

ES_t LCD_enuDisplayFloat(f64 Copy_f64Data){
    5012:	af 92       	push	r10
    5014:	bf 92       	push	r11
    5016:	cf 92       	push	r12
    5018:	df 92       	push	r13
    501a:	ef 92       	push	r14
    501c:	ff 92       	push	r15
    501e:	0f 93       	push	r16
    5020:	1f 93       	push	r17
    5022:	df 93       	push	r29
    5024:	cf 93       	push	r28
    5026:	cd b7       	in	r28, 0x3d	; 61
    5028:	de b7       	in	r29, 0x3e	; 62
    502a:	62 97       	sbiw	r28, 0x12	; 18
    502c:	0f b6       	in	r0, 0x3f	; 63
    502e:	f8 94       	cli
    5030:	de bf       	out	0x3e, r29	; 62
    5032:	0f be       	out	0x3f, r0	; 63
    5034:	cd bf       	out	0x3d, r28	; 61
    5036:	6f 87       	std	Y+15, r22	; 0x0f
    5038:	78 8b       	std	Y+16, r23	; 0x10
    503a:	89 8b       	std	Y+17, r24	; 0x11
    503c:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t Local_enuErrorStates = ES_NOK;
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	8e 87       	std	Y+14, r24	; 0x0e
	uint_64 Local_uint64RealNum;
	f64	Local_f64Fraction;
	if(Copy_f64Data < 0){
    5042:	6f 85       	ldd	r22, Y+15	; 0x0f
    5044:	78 89       	ldd	r23, Y+16	; 0x10
    5046:	89 89       	ldd	r24, Y+17	; 0x11
    5048:	9a 89       	ldd	r25, Y+18	; 0x12
    504a:	20 e0       	ldi	r18, 0x00	; 0
    504c:	30 e0       	ldi	r19, 0x00	; 0
    504e:	40 e0       	ldi	r20, 0x00	; 0
    5050:	50 e0       	ldi	r21, 0x00	; 0
    5052:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5056:	88 23       	and	r24, r24
    5058:	6c f4       	brge	.+26     	; 0x5074 <LCD_enuDisplayFloat+0x62>
		Local_enuErrorStates = LCD_enuSendData('-');
    505a:	8d e2       	ldi	r24, 0x2D	; 45
    505c:	0e 94 c2 28 	call	0x5184	; 0x5184 <LCD_enuSendData>
    5060:	8e 87       	std	Y+14, r24	; 0x0e
		Copy_f64Data *= -1;
    5062:	8f 85       	ldd	r24, Y+15	; 0x0f
    5064:	98 89       	ldd	r25, Y+16	; 0x10
    5066:	a9 89       	ldd	r26, Y+17	; 0x11
    5068:	ba 89       	ldd	r27, Y+18	; 0x12
    506a:	b0 58       	subi	r27, 0x80	; 128
    506c:	8f 87       	std	Y+15, r24	; 0x0f
    506e:	98 8b       	std	Y+16, r25	; 0x10
    5070:	a9 8b       	std	Y+17, r26	; 0x11
    5072:	ba 8b       	std	Y+18, r27	; 0x12
	}

	Local_uint64RealNum = (uint_64) Copy_f64Data;
    5074:	6f 85       	ldd	r22, Y+15	; 0x0f
    5076:	78 89       	ldd	r23, Y+16	; 0x10
    5078:	89 89       	ldd	r24, Y+17	; 0x11
    507a:	9a 89       	ldd	r25, Y+18	; 0x12
    507c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfdi>
    5080:	a2 2e       	mov	r10, r18
    5082:	b3 2e       	mov	r11, r19
    5084:	c4 2e       	mov	r12, r20
    5086:	d5 2e       	mov	r13, r21
    5088:	e6 2e       	mov	r14, r22
    508a:	f7 2e       	mov	r15, r23
    508c:	08 2f       	mov	r16, r24
    508e:	19 2f       	mov	r17, r25
    5090:	ae 82       	std	Y+6, r10	; 0x06
    5092:	bf 82       	std	Y+7, r11	; 0x07
    5094:	c8 86       	std	Y+8, r12	; 0x08
    5096:	d9 86       	std	Y+9, r13	; 0x09
    5098:	ea 86       	std	Y+10, r14	; 0x0a
    509a:	fb 86       	std	Y+11, r15	; 0x0b
    509c:	0c 87       	std	Y+12, r16	; 0x0c
    509e:	1d 87       	std	Y+13, r17	; 0x0d
	Local_f64Fraction = Copy_f64Data - Local_uint64RealNum;
    50a0:	2e 81       	ldd	r18, Y+6	; 0x06
    50a2:	3f 81       	ldd	r19, Y+7	; 0x07
    50a4:	48 85       	ldd	r20, Y+8	; 0x08
    50a6:	59 85       	ldd	r21, Y+9	; 0x09
    50a8:	6a 85       	ldd	r22, Y+10	; 0x0a
    50aa:	7b 85       	ldd	r23, Y+11	; 0x0b
    50ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    50ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    50b0:	0e 94 10 02 	call	0x420	; 0x420 <__floatundisf>
    50b4:	9b 01       	movw	r18, r22
    50b6:	ac 01       	movw	r20, r24
    50b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    50ba:	78 89       	ldd	r23, Y+16	; 0x10
    50bc:	89 89       	ldd	r24, Y+17	; 0x11
    50be:	9a 89       	ldd	r25, Y+18	; 0x12
    50c0:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22
    50c8:	8a 83       	std	Y+2, r24	; 0x02
    50ca:	9b 83       	std	Y+3, r25	; 0x03
    50cc:	ac 83       	std	Y+4, r26	; 0x04
    50ce:	bd 83       	std	Y+5, r27	; 0x05

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_uint64RealNum);
    50d0:	ae 80       	ldd	r10, Y+6	; 0x06
    50d2:	bf 80       	ldd	r11, Y+7	; 0x07
    50d4:	c8 84       	ldd	r12, Y+8	; 0x08
    50d6:	d9 84       	ldd	r13, Y+9	; 0x09
    50d8:	ea 84       	ldd	r14, Y+10	; 0x0a
    50da:	fb 84       	ldd	r15, Y+11	; 0x0b
    50dc:	0c 85       	ldd	r16, Y+12	; 0x0c
    50de:	1d 85       	ldd	r17, Y+13	; 0x0d
    50e0:	2a 2d       	mov	r18, r10
    50e2:	3b 2d       	mov	r19, r11
    50e4:	4c 2d       	mov	r20, r12
    50e6:	5d 2d       	mov	r21, r13
    50e8:	6e 2d       	mov	r22, r14
    50ea:	7f 2d       	mov	r23, r15
    50ec:	80 2f       	mov	r24, r16
    50ee:	91 2f       	mov	r25, r17
    50f0:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <LCD_enuDisplayNumber>
    50f4:	8e 87       	std	Y+14, r24	; 0x0e
	Local_enuErrorStates = LCD_enuSendData('.');
    50f6:	8e e2       	ldi	r24, 0x2E	; 46
    50f8:	0e 94 c2 28 	call	0x5184	; 0x5184 <LCD_enuSendData>
    50fc:	8e 87       	std	Y+14, r24	; 0x0e

	uint_8 Local_uint8Iterator;
	for(Local_uint8Iterator = 0; Local_uint8Iterator < FRACTION_MAX_RANGE; Local_uint8Iterator++)
    50fe:	19 82       	std	Y+1, r1	; 0x01
    5100:	13 c0       	rjmp	.+38     	; 0x5128 <LCD_enuDisplayFloat+0x116>
		Local_f64Fraction *= 10;
    5102:	6a 81       	ldd	r22, Y+2	; 0x02
    5104:	7b 81       	ldd	r23, Y+3	; 0x03
    5106:	8c 81       	ldd	r24, Y+4	; 0x04
    5108:	9d 81       	ldd	r25, Y+5	; 0x05
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	40 e2       	ldi	r20, 0x20	; 32
    5110:	51 e4       	ldi	r21, 0x41	; 65
    5112:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5116:	dc 01       	movw	r26, r24
    5118:	cb 01       	movw	r24, r22
    511a:	8a 83       	std	Y+2, r24	; 0x02
    511c:	9b 83       	std	Y+3, r25	; 0x03
    511e:	ac 83       	std	Y+4, r26	; 0x04
    5120:	bd 83       	std	Y+5, r27	; 0x05

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_uint64RealNum);
	Local_enuErrorStates = LCD_enuSendData('.');

	uint_8 Local_uint8Iterator;
	for(Local_uint8Iterator = 0; Local_uint8Iterator < FRACTION_MAX_RANGE; Local_uint8Iterator++)
    5122:	89 81       	ldd	r24, Y+1	; 0x01
    5124:	8f 5f       	subi	r24, 0xFF	; 255
    5126:	89 83       	std	Y+1, r24	; 0x01
    5128:	89 81       	ldd	r24, Y+1	; 0x01
    512a:	84 30       	cpi	r24, 0x04	; 4
    512c:	50 f3       	brcs	.-44     	; 0x5102 <LCD_enuDisplayFloat+0xf0>
		Local_f64Fraction *= 10;

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_f64Fraction);
    512e:	6a 81       	ldd	r22, Y+2	; 0x02
    5130:	7b 81       	ldd	r23, Y+3	; 0x03
    5132:	8c 81       	ldd	r24, Y+4	; 0x04
    5134:	9d 81       	ldd	r25, Y+5	; 0x05
    5136:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixsfdi>
    513a:	a2 2e       	mov	r10, r18
    513c:	b3 2e       	mov	r11, r19
    513e:	c4 2e       	mov	r12, r20
    5140:	d5 2e       	mov	r13, r21
    5142:	e6 2e       	mov	r14, r22
    5144:	f7 2e       	mov	r15, r23
    5146:	08 2f       	mov	r16, r24
    5148:	19 2f       	mov	r17, r25
    514a:	2a 2d       	mov	r18, r10
    514c:	3b 2d       	mov	r19, r11
    514e:	4c 2d       	mov	r20, r12
    5150:	5d 2d       	mov	r21, r13
    5152:	6e 2d       	mov	r22, r14
    5154:	7f 2d       	mov	r23, r15
    5156:	80 2f       	mov	r24, r16
    5158:	91 2f       	mov	r25, r17
    515a:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <LCD_enuDisplayNumber>
    515e:	8e 87       	std	Y+14, r24	; 0x0e
	return Local_enuErrorStates;
    5160:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    5162:	62 96       	adiw	r28, 0x12	; 18
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	de bf       	out	0x3e, r29	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	cd bf       	out	0x3d, r28	; 61
    516e:	cf 91       	pop	r28
    5170:	df 91       	pop	r29
    5172:	1f 91       	pop	r17
    5174:	0f 91       	pop	r16
    5176:	ff 90       	pop	r15
    5178:	ef 90       	pop	r14
    517a:	df 90       	pop	r13
    517c:	cf 90       	pop	r12
    517e:	bf 90       	pop	r11
    5180:	af 90       	pop	r10
    5182:	08 95       	ret

00005184 <LCD_enuSendData>:

static inline ES_t LCD_enuSendData(uint_8 Copy_uint8Data){
    5184:	df 93       	push	r29
    5186:	cf 93       	push	r28
    5188:	cd b7       	in	r28, 0x3d	; 61
    518a:	de b7       	in	r29, 0x3e	; 62
    518c:	ea 97       	sbiw	r28, 0x3a	; 58
    518e:	0f b6       	in	r0, 0x3f	; 63
    5190:	f8 94       	cli
    5192:	de bf       	out	0x3e, r29	; 62
    5194:	0f be       	out	0x3f, r0	; 63
    5196:	cd bf       	out	0x3d, r28	; 61
    5198:	8a af       	std	Y+58, r24	; 0x3a
	ES_t Local_enuErrorStates = ES_NOK;
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, HIGH);
    519e:	82 e0       	ldi	r24, 0x02	; 2
    51a0:	60 e0       	ldi	r22, 0x00	; 0
    51a2:	41 e0       	ldi	r20, 0x01	; 1
    51a4:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    51a8:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
    51aa:	82 e0       	ldi	r24, 0x02	; 2
    51ac:	61 e0       	ldi	r22, 0x01	; 1
    51ae:	40 e0       	ldi	r20, 0x00	; 0
    51b0:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    51b4:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    51b6:	82 e0       	ldi	r24, 0x02	; 2
    51b8:	62 e0       	ldi	r22, 0x02	; 2
    51ba:	40 e0       	ldi	r20, 0x00	; 0
    51bc:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    51c0:	89 af       	std	Y+57, r24	; 0x39

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 7));
    51c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    51c4:	98 2f       	mov	r25, r24
    51c6:	99 1f       	adc	r25, r25
    51c8:	99 27       	eor	r25, r25
    51ca:	99 1f       	adc	r25, r25
    51cc:	82 e0       	ldi	r24, 0x02	; 2
    51ce:	63 e0       	ldi	r22, 0x03	; 3
    51d0:	49 2f       	mov	r20, r25
    51d2:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    51d6:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 6));
    51d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    51da:	82 95       	swap	r24
    51dc:	86 95       	lsr	r24
    51de:	86 95       	lsr	r24
    51e0:	83 70       	andi	r24, 0x03	; 3
    51e2:	98 2f       	mov	r25, r24
    51e4:	91 70       	andi	r25, 0x01	; 1
    51e6:	82 e0       	ldi	r24, 0x02	; 2
    51e8:	64 e0       	ldi	r22, 0x04	; 4
    51ea:	49 2f       	mov	r20, r25
    51ec:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    51f0:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 5));
    51f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    51f4:	82 95       	swap	r24
    51f6:	86 95       	lsr	r24
    51f8:	87 70       	andi	r24, 0x07	; 7
    51fa:	98 2f       	mov	r25, r24
    51fc:	91 70       	andi	r25, 0x01	; 1
    51fe:	82 e0       	ldi	r24, 0x02	; 2
    5200:	65 e0       	ldi	r22, 0x05	; 5
    5202:	49 2f       	mov	r20, r25
    5204:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5208:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 4));
    520a:	8a ad       	ldd	r24, Y+58	; 0x3a
    520c:	82 95       	swap	r24
    520e:	8f 70       	andi	r24, 0x0F	; 15
    5210:	98 2f       	mov	r25, r24
    5212:	91 70       	andi	r25, 0x01	; 1
    5214:	82 e0       	ldi	r24, 0x02	; 2
    5216:	66 e0       	ldi	r22, 0x06	; 6
    5218:	49 2f       	mov	r20, r25
    521a:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    521e:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK & (Copy_uint8Data >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK & (Copy_uint8Data >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK & (Copy_uint8Data >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK & (Copy_uint8Data >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    5220:	82 e0       	ldi	r24, 0x02	; 2
    5222:	62 e0       	ldi	r22, 0x02	; 2
    5224:	41 e0       	ldi	r20, 0x01	; 1
    5226:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    522a:	89 af       	std	Y+57, r24	; 0x39
    522c:	80 e0       	ldi	r24, 0x00	; 0
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	a0 e2       	ldi	r26, 0x20	; 32
    5232:	b1 e4       	ldi	r27, 0x41	; 65
    5234:	8d ab       	std	Y+53, r24	; 0x35
    5236:	9e ab       	std	Y+54, r25	; 0x36
    5238:	af ab       	std	Y+55, r26	; 0x37
    523a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    523c:	6d a9       	ldd	r22, Y+53	; 0x35
    523e:	7e a9       	ldd	r23, Y+54	; 0x36
    5240:	8f a9       	ldd	r24, Y+55	; 0x37
    5242:	98 ad       	ldd	r25, Y+56	; 0x38
    5244:	20 e0       	ldi	r18, 0x00	; 0
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	4a e7       	ldi	r20, 0x7A	; 122
    524a:	53 e4       	ldi	r21, 0x43	; 67
    524c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5250:	dc 01       	movw	r26, r24
    5252:	cb 01       	movw	r24, r22
    5254:	89 ab       	std	Y+49, r24	; 0x31
    5256:	9a ab       	std	Y+50, r25	; 0x32
    5258:	ab ab       	std	Y+51, r26	; 0x33
    525a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    525c:	69 a9       	ldd	r22, Y+49	; 0x31
    525e:	7a a9       	ldd	r23, Y+50	; 0x32
    5260:	8b a9       	ldd	r24, Y+51	; 0x33
    5262:	9c a9       	ldd	r25, Y+52	; 0x34
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	40 e8       	ldi	r20, 0x80	; 128
    526a:	5f e3       	ldi	r21, 0x3F	; 63
    526c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5270:	88 23       	and	r24, r24
    5272:	2c f4       	brge	.+10     	; 0x527e <LCD_enuSendData+0xfa>
		__ticks = 1;
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	98 ab       	std	Y+48, r25	; 0x30
    527a:	8f a7       	std	Y+47, r24	; 0x2f
    527c:	3f c0       	rjmp	.+126    	; 0x52fc <LCD_enuSendData+0x178>
	else if (__tmp > 65535)
    527e:	69 a9       	ldd	r22, Y+49	; 0x31
    5280:	7a a9       	ldd	r23, Y+50	; 0x32
    5282:	8b a9       	ldd	r24, Y+51	; 0x33
    5284:	9c a9       	ldd	r25, Y+52	; 0x34
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	3f ef       	ldi	r19, 0xFF	; 255
    528a:	4f e7       	ldi	r20, 0x7F	; 127
    528c:	57 e4       	ldi	r21, 0x47	; 71
    528e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    5292:	18 16       	cp	r1, r24
    5294:	4c f5       	brge	.+82     	; 0x52e8 <LCD_enuSendData+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5296:	6d a9       	ldd	r22, Y+53	; 0x35
    5298:	7e a9       	ldd	r23, Y+54	; 0x36
    529a:	8f a9       	ldd	r24, Y+55	; 0x37
    529c:	98 ad       	ldd	r25, Y+56	; 0x38
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	40 e2       	ldi	r20, 0x20	; 32
    52a4:	51 e4       	ldi	r21, 0x41	; 65
    52a6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	bc 01       	movw	r22, r24
    52b0:	cd 01       	movw	r24, r26
    52b2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    52b6:	dc 01       	movw	r26, r24
    52b8:	cb 01       	movw	r24, r22
    52ba:	98 ab       	std	Y+48, r25	; 0x30
    52bc:	8f a7       	std	Y+47, r24	; 0x2f
    52be:	0f c0       	rjmp	.+30     	; 0x52de <LCD_enuSendData+0x15a>
    52c0:	89 e1       	ldi	r24, 0x19	; 25
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	9e a7       	std	Y+46, r25	; 0x2e
    52c6:	8d a7       	std	Y+45, r24	; 0x2d
    52c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    52ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    52cc:	01 97       	sbiw	r24, 0x01	; 1
    52ce:	f1 f7       	brne	.-4      	; 0x52cc <LCD_enuSendData+0x148>
    52d0:	9e a7       	std	Y+46, r25	; 0x2e
    52d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    52d6:	98 a9       	ldd	r25, Y+48	; 0x30
    52d8:	01 97       	sbiw	r24, 0x01	; 1
    52da:	98 ab       	std	Y+48, r25	; 0x30
    52dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52de:	8f a5       	ldd	r24, Y+47	; 0x2f
    52e0:	98 a9       	ldd	r25, Y+48	; 0x30
    52e2:	00 97       	sbiw	r24, 0x00	; 0
    52e4:	69 f7       	brne	.-38     	; 0x52c0 <LCD_enuSendData+0x13c>
    52e6:	14 c0       	rjmp	.+40     	; 0x5310 <LCD_enuSendData+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e8:	69 a9       	ldd	r22, Y+49	; 0x31
    52ea:	7a a9       	ldd	r23, Y+50	; 0x32
    52ec:	8b a9       	ldd	r24, Y+51	; 0x33
    52ee:	9c a9       	ldd	r25, Y+52	; 0x34
    52f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    52f4:	dc 01       	movw	r26, r24
    52f6:	cb 01       	movw	r24, r22
    52f8:	98 ab       	std	Y+48, r25	; 0x30
    52fa:	8f a7       	std	Y+47, r24	; 0x2f
    52fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    52fe:	98 a9       	ldd	r25, Y+48	; 0x30
    5300:	9c a7       	std	Y+44, r25	; 0x2c
    5302:	8b a7       	std	Y+43, r24	; 0x2b
    5304:	8b a5       	ldd	r24, Y+43	; 0x2b
    5306:	9c a5       	ldd	r25, Y+44	; 0x2c
    5308:	01 97       	sbiw	r24, 0x01	; 1
    530a:	f1 f7       	brne	.-4      	; 0x5308 <LCD_enuSendData+0x184>
    530c:	9c a7       	std	Y+44, r25	; 0x2c
    530e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    5310:	82 e0       	ldi	r24, 0x02	; 2
    5312:	62 e0       	ldi	r22, 0x02	; 2
    5314:	40 e0       	ldi	r20, 0x00	; 0
    5316:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    531a:	89 af       	std	Y+57, r24	; 0x39
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	a0 e2       	ldi	r26, 0x20	; 32
    5322:	b1 e4       	ldi	r27, 0x41	; 65
    5324:	8f a3       	std	Y+39, r24	; 0x27
    5326:	98 a7       	std	Y+40, r25	; 0x28
    5328:	a9 a7       	std	Y+41, r26	; 0x29
    532a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    532c:	6f a1       	ldd	r22, Y+39	; 0x27
    532e:	78 a5       	ldd	r23, Y+40	; 0x28
    5330:	89 a5       	ldd	r24, Y+41	; 0x29
    5332:	9a a5       	ldd	r25, Y+42	; 0x2a
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	4a e7       	ldi	r20, 0x7A	; 122
    533a:	53 e4       	ldi	r21, 0x43	; 67
    533c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5340:	dc 01       	movw	r26, r24
    5342:	cb 01       	movw	r24, r22
    5344:	8b a3       	std	Y+35, r24	; 0x23
    5346:	9c a3       	std	Y+36, r25	; 0x24
    5348:	ad a3       	std	Y+37, r26	; 0x25
    534a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    534c:	6b a1       	ldd	r22, Y+35	; 0x23
    534e:	7c a1       	ldd	r23, Y+36	; 0x24
    5350:	8d a1       	ldd	r24, Y+37	; 0x25
    5352:	9e a1       	ldd	r25, Y+38	; 0x26
    5354:	20 e0       	ldi	r18, 0x00	; 0
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	40 e8       	ldi	r20, 0x80	; 128
    535a:	5f e3       	ldi	r21, 0x3F	; 63
    535c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5360:	88 23       	and	r24, r24
    5362:	2c f4       	brge	.+10     	; 0x536e <LCD_enuSendData+0x1ea>
		__ticks = 1;
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	9a a3       	std	Y+34, r25	; 0x22
    536a:	89 a3       	std	Y+33, r24	; 0x21
    536c:	3f c0       	rjmp	.+126    	; 0x53ec <LCD_enuSendData+0x268>
	else if (__tmp > 65535)
    536e:	6b a1       	ldd	r22, Y+35	; 0x23
    5370:	7c a1       	ldd	r23, Y+36	; 0x24
    5372:	8d a1       	ldd	r24, Y+37	; 0x25
    5374:	9e a1       	ldd	r25, Y+38	; 0x26
    5376:	20 e0       	ldi	r18, 0x00	; 0
    5378:	3f ef       	ldi	r19, 0xFF	; 255
    537a:	4f e7       	ldi	r20, 0x7F	; 127
    537c:	57 e4       	ldi	r21, 0x47	; 71
    537e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    5382:	18 16       	cp	r1, r24
    5384:	4c f5       	brge	.+82     	; 0x53d8 <LCD_enuSendData+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5386:	6f a1       	ldd	r22, Y+39	; 0x27
    5388:	78 a5       	ldd	r23, Y+40	; 0x28
    538a:	89 a5       	ldd	r24, Y+41	; 0x29
    538c:	9a a5       	ldd	r25, Y+42	; 0x2a
    538e:	20 e0       	ldi	r18, 0x00	; 0
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	40 e2       	ldi	r20, 0x20	; 32
    5394:	51 e4       	ldi	r21, 0x41	; 65
    5396:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    539a:	dc 01       	movw	r26, r24
    539c:	cb 01       	movw	r24, r22
    539e:	bc 01       	movw	r22, r24
    53a0:	cd 01       	movw	r24, r26
    53a2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	9a a3       	std	Y+34, r25	; 0x22
    53ac:	89 a3       	std	Y+33, r24	; 0x21
    53ae:	0f c0       	rjmp	.+30     	; 0x53ce <LCD_enuSendData+0x24a>
    53b0:	89 e1       	ldi	r24, 0x19	; 25
    53b2:	90 e0       	ldi	r25, 0x00	; 0
    53b4:	98 a3       	std	Y+32, r25	; 0x20
    53b6:	8f 8f       	std	Y+31, r24	; 0x1f
    53b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53ba:	98 a1       	ldd	r25, Y+32	; 0x20
    53bc:	01 97       	sbiw	r24, 0x01	; 1
    53be:	f1 f7       	brne	.-4      	; 0x53bc <LCD_enuSendData+0x238>
    53c0:	98 a3       	std	Y+32, r25	; 0x20
    53c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53c4:	89 a1       	ldd	r24, Y+33	; 0x21
    53c6:	9a a1       	ldd	r25, Y+34	; 0x22
    53c8:	01 97       	sbiw	r24, 0x01	; 1
    53ca:	9a a3       	std	Y+34, r25	; 0x22
    53cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ce:	89 a1       	ldd	r24, Y+33	; 0x21
    53d0:	9a a1       	ldd	r25, Y+34	; 0x22
    53d2:	00 97       	sbiw	r24, 0x00	; 0
    53d4:	69 f7       	brne	.-38     	; 0x53b0 <LCD_enuSendData+0x22c>
    53d6:	14 c0       	rjmp	.+40     	; 0x5400 <LCD_enuSendData+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53d8:	6b a1       	ldd	r22, Y+35	; 0x23
    53da:	7c a1       	ldd	r23, Y+36	; 0x24
    53dc:	8d a1       	ldd	r24, Y+37	; 0x25
    53de:	9e a1       	ldd	r25, Y+38	; 0x26
    53e0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53e4:	dc 01       	movw	r26, r24
    53e6:	cb 01       	movw	r24, r22
    53e8:	9a a3       	std	Y+34, r25	; 0x22
    53ea:	89 a3       	std	Y+33, r24	; 0x21
    53ec:	89 a1       	ldd	r24, Y+33	; 0x21
    53ee:	9a a1       	ldd	r25, Y+34	; 0x22
    53f0:	9e 8f       	std	Y+30, r25	; 0x1e
    53f2:	8d 8f       	std	Y+29, r24	; 0x1d
    53f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53f8:	01 97       	sbiw	r24, 0x01	; 1
    53fa:	f1 f7       	brne	.-4      	; 0x53f8 <LCD_enuSendData+0x274>
    53fc:	9e 8f       	std	Y+30, r25	; 0x1e
    53fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 3));
    5400:	8a ad       	ldd	r24, Y+58	; 0x3a
    5402:	86 95       	lsr	r24
    5404:	86 95       	lsr	r24
    5406:	86 95       	lsr	r24
    5408:	98 2f       	mov	r25, r24
    540a:	91 70       	andi	r25, 0x01	; 1
    540c:	82 e0       	ldi	r24, 0x02	; 2
    540e:	63 e0       	ldi	r22, 0x03	; 3
    5410:	49 2f       	mov	r20, r25
    5412:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5416:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 2));
    5418:	8a ad       	ldd	r24, Y+58	; 0x3a
    541a:	86 95       	lsr	r24
    541c:	86 95       	lsr	r24
    541e:	98 2f       	mov	r25, r24
    5420:	91 70       	andi	r25, 0x01	; 1
    5422:	82 e0       	ldi	r24, 0x02	; 2
    5424:	64 e0       	ldi	r22, 0x04	; 4
    5426:	49 2f       	mov	r20, r25
    5428:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    542c:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 1));
    542e:	8a ad       	ldd	r24, Y+58	; 0x3a
    5430:	86 95       	lsr	r24
    5432:	98 2f       	mov	r25, r24
    5434:	91 70       	andi	r25, 0x01	; 1
    5436:	82 e0       	ldi	r24, 0x02	; 2
    5438:	65 e0       	ldi	r22, 0x05	; 5
    543a:	49 2f       	mov	r20, r25
    543c:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5440:	89 af       	std	Y+57, r24	; 0x39
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 0));
    5442:	8a ad       	ldd	r24, Y+58	; 0x3a
    5444:	98 2f       	mov	r25, r24
    5446:	91 70       	andi	r25, 0x01	; 1
    5448:	82 e0       	ldi	r24, 0x02	; 2
    544a:	66 e0       	ldi	r22, 0x06	; 6
    544c:	49 2f       	mov	r20, r25
    544e:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5452:	89 af       	std	Y+57, r24	; 0x39
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    5454:	82 e0       	ldi	r24, 0x02	; 2
    5456:	62 e0       	ldi	r22, 0x02	; 2
    5458:	41 e0       	ldi	r20, 0x01	; 1
    545a:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    545e:	89 af       	std	Y+57, r24	; 0x39
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	a0 e2       	ldi	r26, 0x20	; 32
    5466:	b1 e4       	ldi	r27, 0x41	; 65
    5468:	89 8f       	std	Y+25, r24	; 0x19
    546a:	9a 8f       	std	Y+26, r25	; 0x1a
    546c:	ab 8f       	std	Y+27, r26	; 0x1b
    546e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5470:	69 8d       	ldd	r22, Y+25	; 0x19
    5472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5478:	20 e0       	ldi	r18, 0x00	; 0
    547a:	30 e0       	ldi	r19, 0x00	; 0
    547c:	4a e7       	ldi	r20, 0x7A	; 122
    547e:	53 e4       	ldi	r21, 0x43	; 67
    5480:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5484:	dc 01       	movw	r26, r24
    5486:	cb 01       	movw	r24, r22
    5488:	8d 8b       	std	Y+21, r24	; 0x15
    548a:	9e 8b       	std	Y+22, r25	; 0x16
    548c:	af 8b       	std	Y+23, r26	; 0x17
    548e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5490:	6d 89       	ldd	r22, Y+21	; 0x15
    5492:	7e 89       	ldd	r23, Y+22	; 0x16
    5494:	8f 89       	ldd	r24, Y+23	; 0x17
    5496:	98 8d       	ldd	r25, Y+24	; 0x18
    5498:	20 e0       	ldi	r18, 0x00	; 0
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	40 e8       	ldi	r20, 0x80	; 128
    549e:	5f e3       	ldi	r21, 0x3F	; 63
    54a0:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    54a4:	88 23       	and	r24, r24
    54a6:	2c f4       	brge	.+10     	; 0x54b2 <LCD_enuSendData+0x32e>
		__ticks = 1;
    54a8:	81 e0       	ldi	r24, 0x01	; 1
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	9c 8b       	std	Y+20, r25	; 0x14
    54ae:	8b 8b       	std	Y+19, r24	; 0x13
    54b0:	3f c0       	rjmp	.+126    	; 0x5530 <LCD_enuSendData+0x3ac>
	else if (__tmp > 65535)
    54b2:	6d 89       	ldd	r22, Y+21	; 0x15
    54b4:	7e 89       	ldd	r23, Y+22	; 0x16
    54b6:	8f 89       	ldd	r24, Y+23	; 0x17
    54b8:	98 8d       	ldd	r25, Y+24	; 0x18
    54ba:	20 e0       	ldi	r18, 0x00	; 0
    54bc:	3f ef       	ldi	r19, 0xFF	; 255
    54be:	4f e7       	ldi	r20, 0x7F	; 127
    54c0:	57 e4       	ldi	r21, 0x47	; 71
    54c2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    54c6:	18 16       	cp	r1, r24
    54c8:	4c f5       	brge	.+82     	; 0x551c <LCD_enuSendData+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54ca:	69 8d       	ldd	r22, Y+25	; 0x19
    54cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	40 e2       	ldi	r20, 0x20	; 32
    54d8:	51 e4       	ldi	r21, 0x41	; 65
    54da:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	bc 01       	movw	r22, r24
    54e4:	cd 01       	movw	r24, r26
    54e6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    54ea:	dc 01       	movw	r26, r24
    54ec:	cb 01       	movw	r24, r22
    54ee:	9c 8b       	std	Y+20, r25	; 0x14
    54f0:	8b 8b       	std	Y+19, r24	; 0x13
    54f2:	0f c0       	rjmp	.+30     	; 0x5512 <LCD_enuSendData+0x38e>
    54f4:	89 e1       	ldi	r24, 0x19	; 25
    54f6:	90 e0       	ldi	r25, 0x00	; 0
    54f8:	9a 8b       	std	Y+18, r25	; 0x12
    54fa:	89 8b       	std	Y+17, r24	; 0x11
    54fc:	89 89       	ldd	r24, Y+17	; 0x11
    54fe:	9a 89       	ldd	r25, Y+18	; 0x12
    5500:	01 97       	sbiw	r24, 0x01	; 1
    5502:	f1 f7       	brne	.-4      	; 0x5500 <LCD_enuSendData+0x37c>
    5504:	9a 8b       	std	Y+18, r25	; 0x12
    5506:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5508:	8b 89       	ldd	r24, Y+19	; 0x13
    550a:	9c 89       	ldd	r25, Y+20	; 0x14
    550c:	01 97       	sbiw	r24, 0x01	; 1
    550e:	9c 8b       	std	Y+20, r25	; 0x14
    5510:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5512:	8b 89       	ldd	r24, Y+19	; 0x13
    5514:	9c 89       	ldd	r25, Y+20	; 0x14
    5516:	00 97       	sbiw	r24, 0x00	; 0
    5518:	69 f7       	brne	.-38     	; 0x54f4 <LCD_enuSendData+0x370>
    551a:	14 c0       	rjmp	.+40     	; 0x5544 <LCD_enuSendData+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    551c:	6d 89       	ldd	r22, Y+21	; 0x15
    551e:	7e 89       	ldd	r23, Y+22	; 0x16
    5520:	8f 89       	ldd	r24, Y+23	; 0x17
    5522:	98 8d       	ldd	r25, Y+24	; 0x18
    5524:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5528:	dc 01       	movw	r26, r24
    552a:	cb 01       	movw	r24, r22
    552c:	9c 8b       	std	Y+20, r25	; 0x14
    552e:	8b 8b       	std	Y+19, r24	; 0x13
    5530:	8b 89       	ldd	r24, Y+19	; 0x13
    5532:	9c 89       	ldd	r25, Y+20	; 0x14
    5534:	98 8b       	std	Y+16, r25	; 0x10
    5536:	8f 87       	std	Y+15, r24	; 0x0f
    5538:	8f 85       	ldd	r24, Y+15	; 0x0f
    553a:	98 89       	ldd	r25, Y+16	; 0x10
    553c:	01 97       	sbiw	r24, 0x01	; 1
    553e:	f1 f7       	brne	.-4      	; 0x553c <LCD_enuSendData+0x3b8>
    5540:	98 8b       	std	Y+16, r25	; 0x10
    5542:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    5544:	82 e0       	ldi	r24, 0x02	; 2
    5546:	62 e0       	ldi	r22, 0x02	; 2
    5548:	40 e0       	ldi	r20, 0x00	; 0
    554a:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    554e:	89 af       	std	Y+57, r24	; 0x39
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	a0 e2       	ldi	r26, 0x20	; 32
    5556:	b1 e4       	ldi	r27, 0x41	; 65
    5558:	8b 87       	std	Y+11, r24	; 0x0b
    555a:	9c 87       	std	Y+12, r25	; 0x0c
    555c:	ad 87       	std	Y+13, r26	; 0x0d
    555e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5560:	6b 85       	ldd	r22, Y+11	; 0x0b
    5562:	7c 85       	ldd	r23, Y+12	; 0x0c
    5564:	8d 85       	ldd	r24, Y+13	; 0x0d
    5566:	9e 85       	ldd	r25, Y+14	; 0x0e
    5568:	20 e0       	ldi	r18, 0x00	; 0
    556a:	30 e0       	ldi	r19, 0x00	; 0
    556c:	4a e7       	ldi	r20, 0x7A	; 122
    556e:	53 e4       	ldi	r21, 0x43	; 67
    5570:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5574:	dc 01       	movw	r26, r24
    5576:	cb 01       	movw	r24, r22
    5578:	8f 83       	std	Y+7, r24	; 0x07
    557a:	98 87       	std	Y+8, r25	; 0x08
    557c:	a9 87       	std	Y+9, r26	; 0x09
    557e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5580:	6f 81       	ldd	r22, Y+7	; 0x07
    5582:	78 85       	ldd	r23, Y+8	; 0x08
    5584:	89 85       	ldd	r24, Y+9	; 0x09
    5586:	9a 85       	ldd	r25, Y+10	; 0x0a
    5588:	20 e0       	ldi	r18, 0x00	; 0
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	40 e8       	ldi	r20, 0x80	; 128
    558e:	5f e3       	ldi	r21, 0x3F	; 63
    5590:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5594:	88 23       	and	r24, r24
    5596:	2c f4       	brge	.+10     	; 0x55a2 <LCD_enuSendData+0x41e>
		__ticks = 1;
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	9e 83       	std	Y+6, r25	; 0x06
    559e:	8d 83       	std	Y+5, r24	; 0x05
    55a0:	3f c0       	rjmp	.+126    	; 0x5620 <LCD_enuSendData+0x49c>
	else if (__tmp > 65535)
    55a2:	6f 81       	ldd	r22, Y+7	; 0x07
    55a4:	78 85       	ldd	r23, Y+8	; 0x08
    55a6:	89 85       	ldd	r24, Y+9	; 0x09
    55a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    55aa:	20 e0       	ldi	r18, 0x00	; 0
    55ac:	3f ef       	ldi	r19, 0xFF	; 255
    55ae:	4f e7       	ldi	r20, 0x7F	; 127
    55b0:	57 e4       	ldi	r21, 0x47	; 71
    55b2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    55b6:	18 16       	cp	r1, r24
    55b8:	4c f5       	brge	.+82     	; 0x560c <LCD_enuSendData+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    55bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    55be:	8d 85       	ldd	r24, Y+13	; 0x0d
    55c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    55c2:	20 e0       	ldi	r18, 0x00	; 0
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	40 e2       	ldi	r20, 0x20	; 32
    55c8:	51 e4       	ldi	r21, 0x41	; 65
    55ca:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    55ce:	dc 01       	movw	r26, r24
    55d0:	cb 01       	movw	r24, r22
    55d2:	bc 01       	movw	r22, r24
    55d4:	cd 01       	movw	r24, r26
    55d6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    55da:	dc 01       	movw	r26, r24
    55dc:	cb 01       	movw	r24, r22
    55de:	9e 83       	std	Y+6, r25	; 0x06
    55e0:	8d 83       	std	Y+5, r24	; 0x05
    55e2:	0f c0       	rjmp	.+30     	; 0x5602 <LCD_enuSendData+0x47e>
    55e4:	89 e1       	ldi	r24, 0x19	; 25
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	9c 83       	std	Y+4, r25	; 0x04
    55ea:	8b 83       	std	Y+3, r24	; 0x03
    55ec:	8b 81       	ldd	r24, Y+3	; 0x03
    55ee:	9c 81       	ldd	r25, Y+4	; 0x04
    55f0:	01 97       	sbiw	r24, 0x01	; 1
    55f2:	f1 f7       	brne	.-4      	; 0x55f0 <LCD_enuSendData+0x46c>
    55f4:	9c 83       	std	Y+4, r25	; 0x04
    55f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55f8:	8d 81       	ldd	r24, Y+5	; 0x05
    55fa:	9e 81       	ldd	r25, Y+6	; 0x06
    55fc:	01 97       	sbiw	r24, 0x01	; 1
    55fe:	9e 83       	std	Y+6, r25	; 0x06
    5600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5602:	8d 81       	ldd	r24, Y+5	; 0x05
    5604:	9e 81       	ldd	r25, Y+6	; 0x06
    5606:	00 97       	sbiw	r24, 0x00	; 0
    5608:	69 f7       	brne	.-38     	; 0x55e4 <LCD_enuSendData+0x460>
    560a:	14 c0       	rjmp	.+40     	; 0x5634 <LCD_enuSendData+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    560c:	6f 81       	ldd	r22, Y+7	; 0x07
    560e:	78 85       	ldd	r23, Y+8	; 0x08
    5610:	89 85       	ldd	r24, Y+9	; 0x09
    5612:	9a 85       	ldd	r25, Y+10	; 0x0a
    5614:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5618:	dc 01       	movw	r26, r24
    561a:	cb 01       	movw	r24, r22
    561c:	9e 83       	std	Y+6, r25	; 0x06
    561e:	8d 83       	std	Y+5, r24	; 0x05
    5620:	8d 81       	ldd	r24, Y+5	; 0x05
    5622:	9e 81       	ldd	r25, Y+6	; 0x06
    5624:	9a 83       	std	Y+2, r25	; 0x02
    5626:	89 83       	std	Y+1, r24	; 0x01
    5628:	89 81       	ldd	r24, Y+1	; 0x01
    562a:	9a 81       	ldd	r25, Y+2	; 0x02
    562c:	01 97       	sbiw	r24, 0x01	; 1
    562e:	f1 f7       	brne	.-4      	; 0x562c <LCD_enuSendData+0x4a8>
    5630:	9a 83       	std	Y+2, r25	; 0x02
    5632:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return Local_enuErrorStates;
    5634:	89 ad       	ldd	r24, Y+57	; 0x39
}
    5636:	ea 96       	adiw	r28, 0x3a	; 58
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	f8 94       	cli
    563c:	de bf       	out	0x3e, r29	; 62
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	cd bf       	out	0x3d, r28	; 61
    5642:	cf 91       	pop	r28
    5644:	df 91       	pop	r29
    5646:	08 95       	ret

00005648 <LCD_enuToSendCommand>:

static inline ES_t LCD_enuToSendCommand(uint_8 Copy_uint8Command){
    5648:	0f 93       	push	r16
    564a:	1f 93       	push	r17
    564c:	df 93       	push	r29
    564e:	cf 93       	push	r28
    5650:	cd b7       	in	r28, 0x3d	; 61
    5652:	de b7       	in	r29, 0x3e	; 62
    5654:	c6 55       	subi	r28, 0x56	; 86
    5656:	d0 40       	sbci	r29, 0x00	; 0
    5658:	0f b6       	in	r0, 0x3f	; 63
    565a:	f8 94       	cli
    565c:	de bf       	out	0x3e, r29	; 62
    565e:	0f be       	out	0x3f, r0	; 63
    5660:	cd bf       	out	0x3d, r28	; 61
    5662:	fe 01       	movw	r30, r28
    5664:	ea 5a       	subi	r30, 0xAA	; 170
    5666:	ff 4f       	sbci	r31, 0xFF	; 255
    5668:	80 83       	st	Z, r24
	ES_t Local_enuErrorStates;
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, LOW);
    566a:	82 e0       	ldi	r24, 0x02	; 2
    566c:	60 e0       	ldi	r22, 0x00	; 0
    566e:	40 e0       	ldi	r20, 0x00	; 0
    5670:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5674:	fe 01       	movw	r30, r28
    5676:	eb 5a       	subi	r30, 0xAB	; 171
    5678:	ff 4f       	sbci	r31, 0xFF	; 255
    567a:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
    567c:	82 e0       	ldi	r24, 0x02	; 2
    567e:	61 e0       	ldi	r22, 0x01	; 1
    5680:	40 e0       	ldi	r20, 0x00	; 0
    5682:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5686:	fe 01       	movw	r30, r28
    5688:	eb 5a       	subi	r30, 0xAB	; 171
    568a:	ff 4f       	sbci	r31, 0xFF	; 255
    568c:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    568e:	82 e0       	ldi	r24, 0x02	; 2
    5690:	62 e0       	ldi	r22, 0x02	; 2
    5692:	40 e0       	ldi	r20, 0x00	; 0
    5694:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5698:	fe 01       	movw	r30, r28
    569a:	eb 5a       	subi	r30, 0xAB	; 171
    569c:	ff 4f       	sbci	r31, 0xFF	; 255
    569e:	80 83       	st	Z, r24

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Command >> 7));
    56a0:	fe 01       	movw	r30, r28
    56a2:	ea 5a       	subi	r30, 0xAA	; 170
    56a4:	ff 4f       	sbci	r31, 0xFF	; 255
    56a6:	80 81       	ld	r24, Z
    56a8:	98 2f       	mov	r25, r24
    56aa:	99 1f       	adc	r25, r25
    56ac:	99 27       	eor	r25, r25
    56ae:	99 1f       	adc	r25, r25
    56b0:	82 e0       	ldi	r24, 0x02	; 2
    56b2:	63 e0       	ldi	r22, 0x03	; 3
    56b4:	49 2f       	mov	r20, r25
    56b6:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    56ba:	fe 01       	movw	r30, r28
    56bc:	eb 5a       	subi	r30, 0xAB	; 171
    56be:	ff 4f       	sbci	r31, 0xFF	; 255
    56c0:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Command >> 6));
    56c2:	fe 01       	movw	r30, r28
    56c4:	ea 5a       	subi	r30, 0xAA	; 170
    56c6:	ff 4f       	sbci	r31, 0xFF	; 255
    56c8:	80 81       	ld	r24, Z
    56ca:	82 95       	swap	r24
    56cc:	86 95       	lsr	r24
    56ce:	86 95       	lsr	r24
    56d0:	83 70       	andi	r24, 0x03	; 3
    56d2:	98 2f       	mov	r25, r24
    56d4:	91 70       	andi	r25, 0x01	; 1
    56d6:	82 e0       	ldi	r24, 0x02	; 2
    56d8:	64 e0       	ldi	r22, 0x04	; 4
    56da:	49 2f       	mov	r20, r25
    56dc:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    56e0:	fe 01       	movw	r30, r28
    56e2:	eb 5a       	subi	r30, 0xAB	; 171
    56e4:	ff 4f       	sbci	r31, 0xFF	; 255
    56e6:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Command >> 5));
    56e8:	fe 01       	movw	r30, r28
    56ea:	ea 5a       	subi	r30, 0xAA	; 170
    56ec:	ff 4f       	sbci	r31, 0xFF	; 255
    56ee:	80 81       	ld	r24, Z
    56f0:	82 95       	swap	r24
    56f2:	86 95       	lsr	r24
    56f4:	87 70       	andi	r24, 0x07	; 7
    56f6:	98 2f       	mov	r25, r24
    56f8:	91 70       	andi	r25, 0x01	; 1
    56fa:	82 e0       	ldi	r24, 0x02	; 2
    56fc:	65 e0       	ldi	r22, 0x05	; 5
    56fe:	49 2f       	mov	r20, r25
    5700:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5704:	fe 01       	movw	r30, r28
    5706:	eb 5a       	subi	r30, 0xAB	; 171
    5708:	ff 4f       	sbci	r31, 0xFF	; 255
    570a:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Command >> 4));
    570c:	fe 01       	movw	r30, r28
    570e:	ea 5a       	subi	r30, 0xAA	; 170
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	80 81       	ld	r24, Z
    5714:	82 95       	swap	r24
    5716:	8f 70       	andi	r24, 0x0F	; 15
    5718:	98 2f       	mov	r25, r24
    571a:	91 70       	andi	r25, 0x01	; 1
    571c:	82 e0       	ldi	r24, 0x02	; 2
    571e:	66 e0       	ldi	r22, 0x06	; 6
    5720:	49 2f       	mov	r20, r25
    5722:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5726:	fe 01       	movw	r30, r28
    5728:	eb 5a       	subi	r30, 0xAB	; 171
    572a:	ff 4f       	sbci	r31, 0xFF	; 255
    572c:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK & (Copy_uint8Command >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK & (Copy_uint8Command >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK & (Copy_uint8Command >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK & (Copy_uint8Command >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	if(Copy_uint8Command == 0x28){
    572e:	fe 01       	movw	r30, r28
    5730:	ea 5a       	subi	r30, 0xAA	; 170
    5732:	ff 4f       	sbci	r31, 0xFF	; 255
    5734:	80 81       	ld	r24, Z
    5736:	88 32       	cpi	r24, 0x28	; 40
    5738:	09 f0       	breq	.+2      	; 0x573c <LCD_enuToSendCommand+0xf4>
    573a:	91 c1       	rjmp	.+802    	; 0x5a5e <LCD_enuToSendCommand+0x416>
		Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    573c:	82 e0       	ldi	r24, 0x02	; 2
    573e:	62 e0       	ldi	r22, 0x02	; 2
    5740:	41 e0       	ldi	r20, 0x01	; 1
    5742:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5746:	fe 01       	movw	r30, r28
    5748:	eb 5a       	subi	r30, 0xAB	; 171
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	80 83       	st	Z, r24
    574e:	fe 01       	movw	r30, r28
    5750:	ef 5a       	subi	r30, 0xAF	; 175
    5752:	ff 4f       	sbci	r31, 0xFF	; 255
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	a0 e2       	ldi	r26, 0x20	; 32
    575a:	b1 e4       	ldi	r27, 0x41	; 65
    575c:	80 83       	st	Z, r24
    575e:	91 83       	std	Z+1, r25	; 0x01
    5760:	a2 83       	std	Z+2, r26	; 0x02
    5762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5764:	8e 01       	movw	r16, r28
    5766:	03 5b       	subi	r16, 0xB3	; 179
    5768:	1f 4f       	sbci	r17, 0xFF	; 255
    576a:	fe 01       	movw	r30, r28
    576c:	ef 5a       	subi	r30, 0xAF	; 175
    576e:	ff 4f       	sbci	r31, 0xFF	; 255
    5770:	60 81       	ld	r22, Z
    5772:	71 81       	ldd	r23, Z+1	; 0x01
    5774:	82 81       	ldd	r24, Z+2	; 0x02
    5776:	93 81       	ldd	r25, Z+3	; 0x03
    5778:	20 e0       	ldi	r18, 0x00	; 0
    577a:	30 e0       	ldi	r19, 0x00	; 0
    577c:	4a e7       	ldi	r20, 0x7A	; 122
    577e:	53 e4       	ldi	r21, 0x43	; 67
    5780:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5784:	dc 01       	movw	r26, r24
    5786:	cb 01       	movw	r24, r22
    5788:	f8 01       	movw	r30, r16
    578a:	80 83       	st	Z, r24
    578c:	91 83       	std	Z+1, r25	; 0x01
    578e:	a2 83       	std	Z+2, r26	; 0x02
    5790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5792:	fe 01       	movw	r30, r28
    5794:	e3 5b       	subi	r30, 0xB3	; 179
    5796:	ff 4f       	sbci	r31, 0xFF	; 255
    5798:	60 81       	ld	r22, Z
    579a:	71 81       	ldd	r23, Z+1	; 0x01
    579c:	82 81       	ldd	r24, Z+2	; 0x02
    579e:	93 81       	ldd	r25, Z+3	; 0x03
    57a0:	20 e0       	ldi	r18, 0x00	; 0
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	40 e8       	ldi	r20, 0x80	; 128
    57a6:	5f e3       	ldi	r21, 0x3F	; 63
    57a8:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    57ac:	88 23       	and	r24, r24
    57ae:	44 f4       	brge	.+16     	; 0x57c0 <LCD_enuToSendCommand+0x178>
		__ticks = 1;
    57b0:	fe 01       	movw	r30, r28
    57b2:	e5 5b       	subi	r30, 0xB5	; 181
    57b4:	ff 4f       	sbci	r31, 0xFF	; 255
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	91 83       	std	Z+1, r25	; 0x01
    57bc:	80 83       	st	Z, r24
    57be:	64 c0       	rjmp	.+200    	; 0x5888 <LCD_enuToSendCommand+0x240>
	else if (__tmp > 65535)
    57c0:	fe 01       	movw	r30, r28
    57c2:	e3 5b       	subi	r30, 0xB3	; 179
    57c4:	ff 4f       	sbci	r31, 0xFF	; 255
    57c6:	60 81       	ld	r22, Z
    57c8:	71 81       	ldd	r23, Z+1	; 0x01
    57ca:	82 81       	ldd	r24, Z+2	; 0x02
    57cc:	93 81       	ldd	r25, Z+3	; 0x03
    57ce:	20 e0       	ldi	r18, 0x00	; 0
    57d0:	3f ef       	ldi	r19, 0xFF	; 255
    57d2:	4f e7       	ldi	r20, 0x7F	; 127
    57d4:	57 e4       	ldi	r21, 0x47	; 71
    57d6:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    57da:	18 16       	cp	r1, r24
    57dc:	0c f0       	brlt	.+2      	; 0x57e0 <LCD_enuToSendCommand+0x198>
    57de:	43 c0       	rjmp	.+134    	; 0x5866 <LCD_enuToSendCommand+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57e0:	fe 01       	movw	r30, r28
    57e2:	ef 5a       	subi	r30, 0xAF	; 175
    57e4:	ff 4f       	sbci	r31, 0xFF	; 255
    57e6:	60 81       	ld	r22, Z
    57e8:	71 81       	ldd	r23, Z+1	; 0x01
    57ea:	82 81       	ldd	r24, Z+2	; 0x02
    57ec:	93 81       	ldd	r25, Z+3	; 0x03
    57ee:	20 e0       	ldi	r18, 0x00	; 0
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	40 e2       	ldi	r20, 0x20	; 32
    57f4:	51 e4       	ldi	r21, 0x41	; 65
    57f6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    57fa:	dc 01       	movw	r26, r24
    57fc:	cb 01       	movw	r24, r22
    57fe:	8e 01       	movw	r16, r28
    5800:	05 5b       	subi	r16, 0xB5	; 181
    5802:	1f 4f       	sbci	r17, 0xFF	; 255
    5804:	bc 01       	movw	r22, r24
    5806:	cd 01       	movw	r24, r26
    5808:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    580c:	dc 01       	movw	r26, r24
    580e:	cb 01       	movw	r24, r22
    5810:	f8 01       	movw	r30, r16
    5812:	91 83       	std	Z+1, r25	; 0x01
    5814:	80 83       	st	Z, r24
    5816:	1f c0       	rjmp	.+62     	; 0x5856 <LCD_enuToSendCommand+0x20e>
    5818:	fe 01       	movw	r30, r28
    581a:	e7 5b       	subi	r30, 0xB7	; 183
    581c:	ff 4f       	sbci	r31, 0xFF	; 255
    581e:	89 e1       	ldi	r24, 0x19	; 25
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	91 83       	std	Z+1, r25	; 0x01
    5824:	80 83       	st	Z, r24
    5826:	fe 01       	movw	r30, r28
    5828:	e7 5b       	subi	r30, 0xB7	; 183
    582a:	ff 4f       	sbci	r31, 0xFF	; 255
    582c:	80 81       	ld	r24, Z
    582e:	91 81       	ldd	r25, Z+1	; 0x01
    5830:	01 97       	sbiw	r24, 0x01	; 1
    5832:	f1 f7       	brne	.-4      	; 0x5830 <LCD_enuToSendCommand+0x1e8>
    5834:	fe 01       	movw	r30, r28
    5836:	e7 5b       	subi	r30, 0xB7	; 183
    5838:	ff 4f       	sbci	r31, 0xFF	; 255
    583a:	91 83       	std	Z+1, r25	; 0x01
    583c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    583e:	de 01       	movw	r26, r28
    5840:	a5 5b       	subi	r26, 0xB5	; 181
    5842:	bf 4f       	sbci	r27, 0xFF	; 255
    5844:	fe 01       	movw	r30, r28
    5846:	e5 5b       	subi	r30, 0xB5	; 181
    5848:	ff 4f       	sbci	r31, 0xFF	; 255
    584a:	80 81       	ld	r24, Z
    584c:	91 81       	ldd	r25, Z+1	; 0x01
    584e:	01 97       	sbiw	r24, 0x01	; 1
    5850:	11 96       	adiw	r26, 0x01	; 1
    5852:	9c 93       	st	X, r25
    5854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5856:	fe 01       	movw	r30, r28
    5858:	e5 5b       	subi	r30, 0xB5	; 181
    585a:	ff 4f       	sbci	r31, 0xFF	; 255
    585c:	80 81       	ld	r24, Z
    585e:	91 81       	ldd	r25, Z+1	; 0x01
    5860:	00 97       	sbiw	r24, 0x00	; 0
    5862:	d1 f6       	brne	.-76     	; 0x5818 <LCD_enuToSendCommand+0x1d0>
    5864:	27 c0       	rjmp	.+78     	; 0x58b4 <LCD_enuToSendCommand+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5866:	8e 01       	movw	r16, r28
    5868:	05 5b       	subi	r16, 0xB5	; 181
    586a:	1f 4f       	sbci	r17, 0xFF	; 255
    586c:	fe 01       	movw	r30, r28
    586e:	e3 5b       	subi	r30, 0xB3	; 179
    5870:	ff 4f       	sbci	r31, 0xFF	; 255
    5872:	60 81       	ld	r22, Z
    5874:	71 81       	ldd	r23, Z+1	; 0x01
    5876:	82 81       	ldd	r24, Z+2	; 0x02
    5878:	93 81       	ldd	r25, Z+3	; 0x03
    587a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    587e:	dc 01       	movw	r26, r24
    5880:	cb 01       	movw	r24, r22
    5882:	f8 01       	movw	r30, r16
    5884:	91 83       	std	Z+1, r25	; 0x01
    5886:	80 83       	st	Z, r24
    5888:	de 01       	movw	r26, r28
    588a:	a9 5b       	subi	r26, 0xB9	; 185
    588c:	bf 4f       	sbci	r27, 0xFF	; 255
    588e:	fe 01       	movw	r30, r28
    5890:	e5 5b       	subi	r30, 0xB5	; 181
    5892:	ff 4f       	sbci	r31, 0xFF	; 255
    5894:	80 81       	ld	r24, Z
    5896:	91 81       	ldd	r25, Z+1	; 0x01
    5898:	8d 93       	st	X+, r24
    589a:	9c 93       	st	X, r25
    589c:	fe 01       	movw	r30, r28
    589e:	e9 5b       	subi	r30, 0xB9	; 185
    58a0:	ff 4f       	sbci	r31, 0xFF	; 255
    58a2:	80 81       	ld	r24, Z
    58a4:	91 81       	ldd	r25, Z+1	; 0x01
    58a6:	01 97       	sbiw	r24, 0x01	; 1
    58a8:	f1 f7       	brne	.-4      	; 0x58a6 <LCD_enuToSendCommand+0x25e>
    58aa:	fe 01       	movw	r30, r28
    58ac:	e9 5b       	subi	r30, 0xB9	; 185
    58ae:	ff 4f       	sbci	r31, 0xFF	; 255
    58b0:	91 83       	std	Z+1, r25	; 0x01
    58b2:	80 83       	st	Z, r24
		_delay_ms(10);
		Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    58b4:	82 e0       	ldi	r24, 0x02	; 2
    58b6:	62 e0       	ldi	r22, 0x02	; 2
    58b8:	40 e0       	ldi	r20, 0x00	; 0
    58ba:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    58be:	fe 01       	movw	r30, r28
    58c0:	eb 5a       	subi	r30, 0xAB	; 171
    58c2:	ff 4f       	sbci	r31, 0xFF	; 255
    58c4:	80 83       	st	Z, r24
    58c6:	fe 01       	movw	r30, r28
    58c8:	ed 5b       	subi	r30, 0xBD	; 189
    58ca:	ff 4f       	sbci	r31, 0xFF	; 255
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	a0 e2       	ldi	r26, 0x20	; 32
    58d2:	b1 e4       	ldi	r27, 0x41	; 65
    58d4:	80 83       	st	Z, r24
    58d6:	91 83       	std	Z+1, r25	; 0x01
    58d8:	a2 83       	std	Z+2, r26	; 0x02
    58da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58dc:	8e 01       	movw	r16, r28
    58de:	01 5c       	subi	r16, 0xC1	; 193
    58e0:	1f 4f       	sbci	r17, 0xFF	; 255
    58e2:	fe 01       	movw	r30, r28
    58e4:	ed 5b       	subi	r30, 0xBD	; 189
    58e6:	ff 4f       	sbci	r31, 0xFF	; 255
    58e8:	60 81       	ld	r22, Z
    58ea:	71 81       	ldd	r23, Z+1	; 0x01
    58ec:	82 81       	ldd	r24, Z+2	; 0x02
    58ee:	93 81       	ldd	r25, Z+3	; 0x03
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	4a e7       	ldi	r20, 0x7A	; 122
    58f6:	53 e4       	ldi	r21, 0x43	; 67
    58f8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    58fc:	dc 01       	movw	r26, r24
    58fe:	cb 01       	movw	r24, r22
    5900:	f8 01       	movw	r30, r16
    5902:	80 83       	st	Z, r24
    5904:	91 83       	std	Z+1, r25	; 0x01
    5906:	a2 83       	std	Z+2, r26	; 0x02
    5908:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    590a:	fe 01       	movw	r30, r28
    590c:	ff 96       	adiw	r30, 0x3f	; 63
    590e:	60 81       	ld	r22, Z
    5910:	71 81       	ldd	r23, Z+1	; 0x01
    5912:	82 81       	ldd	r24, Z+2	; 0x02
    5914:	93 81       	ldd	r25, Z+3	; 0x03
    5916:	20 e0       	ldi	r18, 0x00	; 0
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	40 e8       	ldi	r20, 0x80	; 128
    591c:	5f e3       	ldi	r21, 0x3F	; 63
    591e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5922:	88 23       	and	r24, r24
    5924:	2c f4       	brge	.+10     	; 0x5930 <LCD_enuToSendCommand+0x2e8>
		__ticks = 1;
    5926:	81 e0       	ldi	r24, 0x01	; 1
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	9e af       	std	Y+62, r25	; 0x3e
    592c:	8d af       	std	Y+61, r24	; 0x3d
    592e:	46 c0       	rjmp	.+140    	; 0x59bc <LCD_enuToSendCommand+0x374>
	else if (__tmp > 65535)
    5930:	fe 01       	movw	r30, r28
    5932:	ff 96       	adiw	r30, 0x3f	; 63
    5934:	60 81       	ld	r22, Z
    5936:	71 81       	ldd	r23, Z+1	; 0x01
    5938:	82 81       	ldd	r24, Z+2	; 0x02
    593a:	93 81       	ldd	r25, Z+3	; 0x03
    593c:	20 e0       	ldi	r18, 0x00	; 0
    593e:	3f ef       	ldi	r19, 0xFF	; 255
    5940:	4f e7       	ldi	r20, 0x7F	; 127
    5942:	57 e4       	ldi	r21, 0x47	; 71
    5944:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    5948:	18 16       	cp	r1, r24
    594a:	64 f5       	brge	.+88     	; 0x59a4 <LCD_enuToSendCommand+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    594c:	fe 01       	movw	r30, r28
    594e:	ed 5b       	subi	r30, 0xBD	; 189
    5950:	ff 4f       	sbci	r31, 0xFF	; 255
    5952:	60 81       	ld	r22, Z
    5954:	71 81       	ldd	r23, Z+1	; 0x01
    5956:	82 81       	ldd	r24, Z+2	; 0x02
    5958:	93 81       	ldd	r25, Z+3	; 0x03
    595a:	20 e0       	ldi	r18, 0x00	; 0
    595c:	30 e0       	ldi	r19, 0x00	; 0
    595e:	40 e2       	ldi	r20, 0x20	; 32
    5960:	51 e4       	ldi	r21, 0x41	; 65
    5962:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5966:	dc 01       	movw	r26, r24
    5968:	cb 01       	movw	r24, r22
    596a:	bc 01       	movw	r22, r24
    596c:	cd 01       	movw	r24, r26
    596e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5972:	dc 01       	movw	r26, r24
    5974:	cb 01       	movw	r24, r22
    5976:	9e af       	std	Y+62, r25	; 0x3e
    5978:	8d af       	std	Y+61, r24	; 0x3d
    597a:	0f c0       	rjmp	.+30     	; 0x599a <LCD_enuToSendCommand+0x352>
    597c:	89 e1       	ldi	r24, 0x19	; 25
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	9c af       	std	Y+60, r25	; 0x3c
    5982:	8b af       	std	Y+59, r24	; 0x3b
    5984:	8b ad       	ldd	r24, Y+59	; 0x3b
    5986:	9c ad       	ldd	r25, Y+60	; 0x3c
    5988:	01 97       	sbiw	r24, 0x01	; 1
    598a:	f1 f7       	brne	.-4      	; 0x5988 <LCD_enuToSendCommand+0x340>
    598c:	9c af       	std	Y+60, r25	; 0x3c
    598e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5990:	8d ad       	ldd	r24, Y+61	; 0x3d
    5992:	9e ad       	ldd	r25, Y+62	; 0x3e
    5994:	01 97       	sbiw	r24, 0x01	; 1
    5996:	9e af       	std	Y+62, r25	; 0x3e
    5998:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    599a:	8d ad       	ldd	r24, Y+61	; 0x3d
    599c:	9e ad       	ldd	r25, Y+62	; 0x3e
    599e:	00 97       	sbiw	r24, 0x00	; 0
    59a0:	69 f7       	brne	.-38     	; 0x597c <LCD_enuToSendCommand+0x334>
    59a2:	16 c0       	rjmp	.+44     	; 0x59d0 <LCD_enuToSendCommand+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59a4:	fe 01       	movw	r30, r28
    59a6:	ff 96       	adiw	r30, 0x3f	; 63
    59a8:	60 81       	ld	r22, Z
    59aa:	71 81       	ldd	r23, Z+1	; 0x01
    59ac:	82 81       	ldd	r24, Z+2	; 0x02
    59ae:	93 81       	ldd	r25, Z+3	; 0x03
    59b0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    59b4:	dc 01       	movw	r26, r24
    59b6:	cb 01       	movw	r24, r22
    59b8:	9e af       	std	Y+62, r25	; 0x3e
    59ba:	8d af       	std	Y+61, r24	; 0x3d
    59bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    59be:	9e ad       	ldd	r25, Y+62	; 0x3e
    59c0:	9a af       	std	Y+58, r25	; 0x3a
    59c2:	89 af       	std	Y+57, r24	; 0x39
    59c4:	89 ad       	ldd	r24, Y+57	; 0x39
    59c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    59c8:	01 97       	sbiw	r24, 0x01	; 1
    59ca:	f1 f7       	brne	.-4      	; 0x59c8 <LCD_enuToSendCommand+0x380>
    59cc:	9a af       	std	Y+58, r25	; 0x3a
    59ce:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);
		Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Command >> 7));
    59d0:	fe 01       	movw	r30, r28
    59d2:	ea 5a       	subi	r30, 0xAA	; 170
    59d4:	ff 4f       	sbci	r31, 0xFF	; 255
    59d6:	80 81       	ld	r24, Z
    59d8:	98 2f       	mov	r25, r24
    59da:	99 1f       	adc	r25, r25
    59dc:	99 27       	eor	r25, r25
    59de:	99 1f       	adc	r25, r25
    59e0:	82 e0       	ldi	r24, 0x02	; 2
    59e2:	63 e0       	ldi	r22, 0x03	; 3
    59e4:	49 2f       	mov	r20, r25
    59e6:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    59ea:	fe 01       	movw	r30, r28
    59ec:	eb 5a       	subi	r30, 0xAB	; 171
    59ee:	ff 4f       	sbci	r31, 0xFF	; 255
    59f0:	80 83       	st	Z, r24
		Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Command >> 6));
    59f2:	fe 01       	movw	r30, r28
    59f4:	ea 5a       	subi	r30, 0xAA	; 170
    59f6:	ff 4f       	sbci	r31, 0xFF	; 255
    59f8:	80 81       	ld	r24, Z
    59fa:	82 95       	swap	r24
    59fc:	86 95       	lsr	r24
    59fe:	86 95       	lsr	r24
    5a00:	83 70       	andi	r24, 0x03	; 3
    5a02:	98 2f       	mov	r25, r24
    5a04:	91 70       	andi	r25, 0x01	; 1
    5a06:	82 e0       	ldi	r24, 0x02	; 2
    5a08:	64 e0       	ldi	r22, 0x04	; 4
    5a0a:	49 2f       	mov	r20, r25
    5a0c:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5a10:	fe 01       	movw	r30, r28
    5a12:	eb 5a       	subi	r30, 0xAB	; 171
    5a14:	ff 4f       	sbci	r31, 0xFF	; 255
    5a16:	80 83       	st	Z, r24
		Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Command >> 5));
    5a18:	fe 01       	movw	r30, r28
    5a1a:	ea 5a       	subi	r30, 0xAA	; 170
    5a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1e:	80 81       	ld	r24, Z
    5a20:	82 95       	swap	r24
    5a22:	86 95       	lsr	r24
    5a24:	87 70       	andi	r24, 0x07	; 7
    5a26:	98 2f       	mov	r25, r24
    5a28:	91 70       	andi	r25, 0x01	; 1
    5a2a:	82 e0       	ldi	r24, 0x02	; 2
    5a2c:	65 e0       	ldi	r22, 0x05	; 5
    5a2e:	49 2f       	mov	r20, r25
    5a30:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5a34:	fe 01       	movw	r30, r28
    5a36:	eb 5a       	subi	r30, 0xAB	; 171
    5a38:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3a:	80 83       	st	Z, r24
		Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Command >> 4));
    5a3c:	fe 01       	movw	r30, r28
    5a3e:	ea 5a       	subi	r30, 0xAA	; 170
    5a40:	ff 4f       	sbci	r31, 0xFF	; 255
    5a42:	80 81       	ld	r24, Z
    5a44:	82 95       	swap	r24
    5a46:	8f 70       	andi	r24, 0x0F	; 15
    5a48:	98 2f       	mov	r25, r24
    5a4a:	91 70       	andi	r25, 0x01	; 1
    5a4c:	82 e0       	ldi	r24, 0x02	; 2
    5a4e:	66 e0       	ldi	r22, 0x06	; 6
    5a50:	49 2f       	mov	r20, r25
    5a52:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5a56:	fe 01       	movw	r30, r28
    5a58:	eb 5a       	subi	r30, 0xAB	; 171
    5a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5c:	80 83       	st	Z, r24
	}
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    5a5e:	82 e0       	ldi	r24, 0x02	; 2
    5a60:	62 e0       	ldi	r22, 0x02	; 2
    5a62:	41 e0       	ldi	r20, 0x01	; 1
    5a64:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5a68:	fe 01       	movw	r30, r28
    5a6a:	eb 5a       	subi	r30, 0xAB	; 171
    5a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6e:	80 83       	st	Z, r24
    5a70:	80 e0       	ldi	r24, 0x00	; 0
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	a0 e2       	ldi	r26, 0x20	; 32
    5a76:	b1 e4       	ldi	r27, 0x41	; 65
    5a78:	8d ab       	std	Y+53, r24	; 0x35
    5a7a:	9e ab       	std	Y+54, r25	; 0x36
    5a7c:	af ab       	std	Y+55, r26	; 0x37
    5a7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a80:	6d a9       	ldd	r22, Y+53	; 0x35
    5a82:	7e a9       	ldd	r23, Y+54	; 0x36
    5a84:	8f a9       	ldd	r24, Y+55	; 0x37
    5a86:	98 ad       	ldd	r25, Y+56	; 0x38
    5a88:	20 e0       	ldi	r18, 0x00	; 0
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	4a e7       	ldi	r20, 0x7A	; 122
    5a8e:	53 e4       	ldi	r21, 0x43	; 67
    5a90:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5a94:	dc 01       	movw	r26, r24
    5a96:	cb 01       	movw	r24, r22
    5a98:	89 ab       	std	Y+49, r24	; 0x31
    5a9a:	9a ab       	std	Y+50, r25	; 0x32
    5a9c:	ab ab       	std	Y+51, r26	; 0x33
    5a9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    5aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    5aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    5aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    5aa8:	20 e0       	ldi	r18, 0x00	; 0
    5aaa:	30 e0       	ldi	r19, 0x00	; 0
    5aac:	40 e8       	ldi	r20, 0x80	; 128
    5aae:	5f e3       	ldi	r21, 0x3F	; 63
    5ab0:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5ab4:	88 23       	and	r24, r24
    5ab6:	2c f4       	brge	.+10     	; 0x5ac2 <LCD_enuToSendCommand+0x47a>
		__ticks = 1;
    5ab8:	81 e0       	ldi	r24, 0x01	; 1
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	98 ab       	std	Y+48, r25	; 0x30
    5abe:	8f a7       	std	Y+47, r24	; 0x2f
    5ac0:	3f c0       	rjmp	.+126    	; 0x5b40 <LCD_enuToSendCommand+0x4f8>
	else if (__tmp > 65535)
    5ac2:	69 a9       	ldd	r22, Y+49	; 0x31
    5ac4:	7a a9       	ldd	r23, Y+50	; 0x32
    5ac6:	8b a9       	ldd	r24, Y+51	; 0x33
    5ac8:	9c a9       	ldd	r25, Y+52	; 0x34
    5aca:	20 e0       	ldi	r18, 0x00	; 0
    5acc:	3f ef       	ldi	r19, 0xFF	; 255
    5ace:	4f e7       	ldi	r20, 0x7F	; 127
    5ad0:	57 e4       	ldi	r21, 0x47	; 71
    5ad2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    5ad6:	18 16       	cp	r1, r24
    5ad8:	4c f5       	brge	.+82     	; 0x5b2c <LCD_enuToSendCommand+0x4e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ada:	6d a9       	ldd	r22, Y+53	; 0x35
    5adc:	7e a9       	ldd	r23, Y+54	; 0x36
    5ade:	8f a9       	ldd	r24, Y+55	; 0x37
    5ae0:	98 ad       	ldd	r25, Y+56	; 0x38
    5ae2:	20 e0       	ldi	r18, 0x00	; 0
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	40 e2       	ldi	r20, 0x20	; 32
    5ae8:	51 e4       	ldi	r21, 0x41	; 65
    5aea:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5aee:	dc 01       	movw	r26, r24
    5af0:	cb 01       	movw	r24, r22
    5af2:	bc 01       	movw	r22, r24
    5af4:	cd 01       	movw	r24, r26
    5af6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5afa:	dc 01       	movw	r26, r24
    5afc:	cb 01       	movw	r24, r22
    5afe:	98 ab       	std	Y+48, r25	; 0x30
    5b00:	8f a7       	std	Y+47, r24	; 0x2f
    5b02:	0f c0       	rjmp	.+30     	; 0x5b22 <LCD_enuToSendCommand+0x4da>
    5b04:	89 e1       	ldi	r24, 0x19	; 25
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	9e a7       	std	Y+46, r25	; 0x2e
    5b0a:	8d a7       	std	Y+45, r24	; 0x2d
    5b0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    5b0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5b10:	01 97       	sbiw	r24, 0x01	; 1
    5b12:	f1 f7       	brne	.-4      	; 0x5b10 <LCD_enuToSendCommand+0x4c8>
    5b14:	9e a7       	std	Y+46, r25	; 0x2e
    5b16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b18:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b1a:	98 a9       	ldd	r25, Y+48	; 0x30
    5b1c:	01 97       	sbiw	r24, 0x01	; 1
    5b1e:	98 ab       	std	Y+48, r25	; 0x30
    5b20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b22:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b24:	98 a9       	ldd	r25, Y+48	; 0x30
    5b26:	00 97       	sbiw	r24, 0x00	; 0
    5b28:	69 f7       	brne	.-38     	; 0x5b04 <LCD_enuToSendCommand+0x4bc>
    5b2a:	14 c0       	rjmp	.+40     	; 0x5b54 <LCD_enuToSendCommand+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    5b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    5b30:	8b a9       	ldd	r24, Y+51	; 0x33
    5b32:	9c a9       	ldd	r25, Y+52	; 0x34
    5b34:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b38:	dc 01       	movw	r26, r24
    5b3a:	cb 01       	movw	r24, r22
    5b3c:	98 ab       	std	Y+48, r25	; 0x30
    5b3e:	8f a7       	std	Y+47, r24	; 0x2f
    5b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b42:	98 a9       	ldd	r25, Y+48	; 0x30
    5b44:	9c a7       	std	Y+44, r25	; 0x2c
    5b46:	8b a7       	std	Y+43, r24	; 0x2b
    5b48:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    5b4c:	01 97       	sbiw	r24, 0x01	; 1
    5b4e:	f1 f7       	brne	.-4      	; 0x5b4c <LCD_enuToSendCommand+0x504>
    5b50:	9c a7       	std	Y+44, r25	; 0x2c
    5b52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    5b54:	82 e0       	ldi	r24, 0x02	; 2
    5b56:	62 e0       	ldi	r22, 0x02	; 2
    5b58:	40 e0       	ldi	r20, 0x00	; 0
    5b5a:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5b5e:	fe 01       	movw	r30, r28
    5b60:	eb 5a       	subi	r30, 0xAB	; 171
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	80 83       	st	Z, r24
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	a0 e2       	ldi	r26, 0x20	; 32
    5b6c:	b1 e4       	ldi	r27, 0x41	; 65
    5b6e:	8f a3       	std	Y+39, r24	; 0x27
    5b70:	98 a7       	std	Y+40, r25	; 0x28
    5b72:	a9 a7       	std	Y+41, r26	; 0x29
    5b74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b76:	6f a1       	ldd	r22, Y+39	; 0x27
    5b78:	78 a5       	ldd	r23, Y+40	; 0x28
    5b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    5b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b7e:	20 e0       	ldi	r18, 0x00	; 0
    5b80:	30 e0       	ldi	r19, 0x00	; 0
    5b82:	4a e7       	ldi	r20, 0x7A	; 122
    5b84:	53 e4       	ldi	r21, 0x43	; 67
    5b86:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	8b a3       	std	Y+35, r24	; 0x23
    5b90:	9c a3       	std	Y+36, r25	; 0x24
    5b92:	ad a3       	std	Y+37, r26	; 0x25
    5b94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5b96:	6b a1       	ldd	r22, Y+35	; 0x23
    5b98:	7c a1       	ldd	r23, Y+36	; 0x24
    5b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    5b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    5b9e:	20 e0       	ldi	r18, 0x00	; 0
    5ba0:	30 e0       	ldi	r19, 0x00	; 0
    5ba2:	40 e8       	ldi	r20, 0x80	; 128
    5ba4:	5f e3       	ldi	r21, 0x3F	; 63
    5ba6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5baa:	88 23       	and	r24, r24
    5bac:	2c f4       	brge	.+10     	; 0x5bb8 <LCD_enuToSendCommand+0x570>
		__ticks = 1;
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	9a a3       	std	Y+34, r25	; 0x22
    5bb4:	89 a3       	std	Y+33, r24	; 0x21
    5bb6:	3f c0       	rjmp	.+126    	; 0x5c36 <LCD_enuToSendCommand+0x5ee>
	else if (__tmp > 65535)
    5bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    5bba:	7c a1       	ldd	r23, Y+36	; 0x24
    5bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    5bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    5bc0:	20 e0       	ldi	r18, 0x00	; 0
    5bc2:	3f ef       	ldi	r19, 0xFF	; 255
    5bc4:	4f e7       	ldi	r20, 0x7F	; 127
    5bc6:	57 e4       	ldi	r21, 0x47	; 71
    5bc8:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    5bcc:	18 16       	cp	r1, r24
    5bce:	4c f5       	brge	.+82     	; 0x5c22 <LCD_enuToSendCommand+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    5bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    5bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    5bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5bd8:	20 e0       	ldi	r18, 0x00	; 0
    5bda:	30 e0       	ldi	r19, 0x00	; 0
    5bdc:	40 e2       	ldi	r20, 0x20	; 32
    5bde:	51 e4       	ldi	r21, 0x41	; 65
    5be0:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5be4:	dc 01       	movw	r26, r24
    5be6:	cb 01       	movw	r24, r22
    5be8:	bc 01       	movw	r22, r24
    5bea:	cd 01       	movw	r24, r26
    5bec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	cb 01       	movw	r24, r22
    5bf4:	9a a3       	std	Y+34, r25	; 0x22
    5bf6:	89 a3       	std	Y+33, r24	; 0x21
    5bf8:	0f c0       	rjmp	.+30     	; 0x5c18 <LCD_enuToSendCommand+0x5d0>
    5bfa:	89 e1       	ldi	r24, 0x19	; 25
    5bfc:	90 e0       	ldi	r25, 0x00	; 0
    5bfe:	98 a3       	std	Y+32, r25	; 0x20
    5c00:	8f 8f       	std	Y+31, r24	; 0x1f
    5c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5c04:	98 a1       	ldd	r25, Y+32	; 0x20
    5c06:	01 97       	sbiw	r24, 0x01	; 1
    5c08:	f1 f7       	brne	.-4      	; 0x5c06 <LCD_enuToSendCommand+0x5be>
    5c0a:	98 a3       	std	Y+32, r25	; 0x20
    5c0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    5c10:	9a a1       	ldd	r25, Y+34	; 0x22
    5c12:	01 97       	sbiw	r24, 0x01	; 1
    5c14:	9a a3       	std	Y+34, r25	; 0x22
    5c16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c18:	89 a1       	ldd	r24, Y+33	; 0x21
    5c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    5c1c:	00 97       	sbiw	r24, 0x00	; 0
    5c1e:	69 f7       	brne	.-38     	; 0x5bfa <LCD_enuToSendCommand+0x5b2>
    5c20:	14 c0       	rjmp	.+40     	; 0x5c4a <LCD_enuToSendCommand+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c22:	6b a1       	ldd	r22, Y+35	; 0x23
    5c24:	7c a1       	ldd	r23, Y+36	; 0x24
    5c26:	8d a1       	ldd	r24, Y+37	; 0x25
    5c28:	9e a1       	ldd	r25, Y+38	; 0x26
    5c2a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c2e:	dc 01       	movw	r26, r24
    5c30:	cb 01       	movw	r24, r22
    5c32:	9a a3       	std	Y+34, r25	; 0x22
    5c34:	89 a3       	std	Y+33, r24	; 0x21
    5c36:	89 a1       	ldd	r24, Y+33	; 0x21
    5c38:	9a a1       	ldd	r25, Y+34	; 0x22
    5c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    5c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    5c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c42:	01 97       	sbiw	r24, 0x01	; 1
    5c44:	f1 f7       	brne	.-4      	; 0x5c42 <LCD_enuToSendCommand+0x5fa>
    5c46:	9e 8f       	std	Y+30, r25	; 0x1e
    5c48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Command >> 3));
    5c4a:	fe 01       	movw	r30, r28
    5c4c:	ea 5a       	subi	r30, 0xAA	; 170
    5c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c50:	80 81       	ld	r24, Z
    5c52:	86 95       	lsr	r24
    5c54:	86 95       	lsr	r24
    5c56:	86 95       	lsr	r24
    5c58:	98 2f       	mov	r25, r24
    5c5a:	91 70       	andi	r25, 0x01	; 1
    5c5c:	82 e0       	ldi	r24, 0x02	; 2
    5c5e:	63 e0       	ldi	r22, 0x03	; 3
    5c60:	49 2f       	mov	r20, r25
    5c62:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5c66:	fe 01       	movw	r30, r28
    5c68:	eb 5a       	subi	r30, 0xAB	; 171
    5c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c6c:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Command >> 2));
    5c6e:	fe 01       	movw	r30, r28
    5c70:	ea 5a       	subi	r30, 0xAA	; 170
    5c72:	ff 4f       	sbci	r31, 0xFF	; 255
    5c74:	80 81       	ld	r24, Z
    5c76:	86 95       	lsr	r24
    5c78:	86 95       	lsr	r24
    5c7a:	98 2f       	mov	r25, r24
    5c7c:	91 70       	andi	r25, 0x01	; 1
    5c7e:	82 e0       	ldi	r24, 0x02	; 2
    5c80:	64 e0       	ldi	r22, 0x04	; 4
    5c82:	49 2f       	mov	r20, r25
    5c84:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5c88:	fe 01       	movw	r30, r28
    5c8a:	eb 5a       	subi	r30, 0xAB	; 171
    5c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c8e:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Command >> 1));
    5c90:	fe 01       	movw	r30, r28
    5c92:	ea 5a       	subi	r30, 0xAA	; 170
    5c94:	ff 4f       	sbci	r31, 0xFF	; 255
    5c96:	80 81       	ld	r24, Z
    5c98:	86 95       	lsr	r24
    5c9a:	98 2f       	mov	r25, r24
    5c9c:	91 70       	andi	r25, 0x01	; 1
    5c9e:	82 e0       	ldi	r24, 0x02	; 2
    5ca0:	65 e0       	ldi	r22, 0x05	; 5
    5ca2:	49 2f       	mov	r20, r25
    5ca4:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5ca8:	fe 01       	movw	r30, r28
    5caa:	eb 5a       	subi	r30, 0xAB	; 171
    5cac:	ff 4f       	sbci	r31, 0xFF	; 255
    5cae:	80 83       	st	Z, r24
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Command >> 0));
    5cb0:	fe 01       	movw	r30, r28
    5cb2:	ea 5a       	subi	r30, 0xAA	; 170
    5cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb6:	80 81       	ld	r24, Z
    5cb8:	98 2f       	mov	r25, r24
    5cba:	91 70       	andi	r25, 0x01	; 1
    5cbc:	82 e0       	ldi	r24, 0x02	; 2
    5cbe:	66 e0       	ldi	r22, 0x06	; 6
    5cc0:	49 2f       	mov	r20, r25
    5cc2:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	eb 5a       	subi	r30, 0xAB	; 171
    5cca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ccc:	80 83       	st	Z, r24
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    5cce:	82 e0       	ldi	r24, 0x02	; 2
    5cd0:	62 e0       	ldi	r22, 0x02	; 2
    5cd2:	41 e0       	ldi	r20, 0x01	; 1
    5cd4:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5cd8:	fe 01       	movw	r30, r28
    5cda:	eb 5a       	subi	r30, 0xAB	; 171
    5cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cde:	80 83       	st	Z, r24
    5ce0:	80 e0       	ldi	r24, 0x00	; 0
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	a0 e2       	ldi	r26, 0x20	; 32
    5ce6:	b1 e4       	ldi	r27, 0x41	; 65
    5ce8:	89 8f       	std	Y+25, r24	; 0x19
    5cea:	9a 8f       	std	Y+26, r25	; 0x1a
    5cec:	ab 8f       	std	Y+27, r26	; 0x1b
    5cee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    5cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	30 e0       	ldi	r19, 0x00	; 0
    5cfc:	4a e7       	ldi	r20, 0x7A	; 122
    5cfe:	53 e4       	ldi	r21, 0x43	; 67
    5d00:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5d04:	dc 01       	movw	r26, r24
    5d06:	cb 01       	movw	r24, r22
    5d08:	8d 8b       	std	Y+21, r24	; 0x15
    5d0a:	9e 8b       	std	Y+22, r25	; 0x16
    5d0c:	af 8b       	std	Y+23, r26	; 0x17
    5d0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5d10:	6d 89       	ldd	r22, Y+21	; 0x15
    5d12:	7e 89       	ldd	r23, Y+22	; 0x16
    5d14:	8f 89       	ldd	r24, Y+23	; 0x17
    5d16:	98 8d       	ldd	r25, Y+24	; 0x18
    5d18:	20 e0       	ldi	r18, 0x00	; 0
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	40 e8       	ldi	r20, 0x80	; 128
    5d1e:	5f e3       	ldi	r21, 0x3F	; 63
    5d20:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5d24:	88 23       	and	r24, r24
    5d26:	2c f4       	brge	.+10     	; 0x5d32 <LCD_enuToSendCommand+0x6ea>
		__ticks = 1;
    5d28:	81 e0       	ldi	r24, 0x01	; 1
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	9c 8b       	std	Y+20, r25	; 0x14
    5d2e:	8b 8b       	std	Y+19, r24	; 0x13
    5d30:	3f c0       	rjmp	.+126    	; 0x5db0 <LCD_enuToSendCommand+0x768>
	else if (__tmp > 65535)
    5d32:	6d 89       	ldd	r22, Y+21	; 0x15
    5d34:	7e 89       	ldd	r23, Y+22	; 0x16
    5d36:	8f 89       	ldd	r24, Y+23	; 0x17
    5d38:	98 8d       	ldd	r25, Y+24	; 0x18
    5d3a:	20 e0       	ldi	r18, 0x00	; 0
    5d3c:	3f ef       	ldi	r19, 0xFF	; 255
    5d3e:	4f e7       	ldi	r20, 0x7F	; 127
    5d40:	57 e4       	ldi	r21, 0x47	; 71
    5d42:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    5d46:	18 16       	cp	r1, r24
    5d48:	4c f5       	brge	.+82     	; 0x5d9c <LCD_enuToSendCommand+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    5d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d52:	20 e0       	ldi	r18, 0x00	; 0
    5d54:	30 e0       	ldi	r19, 0x00	; 0
    5d56:	40 e2       	ldi	r20, 0x20	; 32
    5d58:	51 e4       	ldi	r21, 0x41	; 65
    5d5a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5d5e:	dc 01       	movw	r26, r24
    5d60:	cb 01       	movw	r24, r22
    5d62:	bc 01       	movw	r22, r24
    5d64:	cd 01       	movw	r24, r26
    5d66:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d6a:	dc 01       	movw	r26, r24
    5d6c:	cb 01       	movw	r24, r22
    5d6e:	9c 8b       	std	Y+20, r25	; 0x14
    5d70:	8b 8b       	std	Y+19, r24	; 0x13
    5d72:	0f c0       	rjmp	.+30     	; 0x5d92 <LCD_enuToSendCommand+0x74a>
    5d74:	89 e1       	ldi	r24, 0x19	; 25
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	9a 8b       	std	Y+18, r25	; 0x12
    5d7a:	89 8b       	std	Y+17, r24	; 0x11
    5d7c:	89 89       	ldd	r24, Y+17	; 0x11
    5d7e:	9a 89       	ldd	r25, Y+18	; 0x12
    5d80:	01 97       	sbiw	r24, 0x01	; 1
    5d82:	f1 f7       	brne	.-4      	; 0x5d80 <LCD_enuToSendCommand+0x738>
    5d84:	9a 8b       	std	Y+18, r25	; 0x12
    5d86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d88:	8b 89       	ldd	r24, Y+19	; 0x13
    5d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    5d8c:	01 97       	sbiw	r24, 0x01	; 1
    5d8e:	9c 8b       	std	Y+20, r25	; 0x14
    5d90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d92:	8b 89       	ldd	r24, Y+19	; 0x13
    5d94:	9c 89       	ldd	r25, Y+20	; 0x14
    5d96:	00 97       	sbiw	r24, 0x00	; 0
    5d98:	69 f7       	brne	.-38     	; 0x5d74 <LCD_enuToSendCommand+0x72c>
    5d9a:	14 c0       	rjmp	.+40     	; 0x5dc4 <LCD_enuToSendCommand+0x77c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    5d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    5da0:	8f 89       	ldd	r24, Y+23	; 0x17
    5da2:	98 8d       	ldd	r25, Y+24	; 0x18
    5da4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5da8:	dc 01       	movw	r26, r24
    5daa:	cb 01       	movw	r24, r22
    5dac:	9c 8b       	std	Y+20, r25	; 0x14
    5dae:	8b 8b       	std	Y+19, r24	; 0x13
    5db0:	8b 89       	ldd	r24, Y+19	; 0x13
    5db2:	9c 89       	ldd	r25, Y+20	; 0x14
    5db4:	98 8b       	std	Y+16, r25	; 0x10
    5db6:	8f 87       	std	Y+15, r24	; 0x0f
    5db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    5dba:	98 89       	ldd	r25, Y+16	; 0x10
    5dbc:	01 97       	sbiw	r24, 0x01	; 1
    5dbe:	f1 f7       	brne	.-4      	; 0x5dbc <LCD_enuToSendCommand+0x774>
    5dc0:	98 8b       	std	Y+16, r25	; 0x10
    5dc2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    5dc4:	82 e0       	ldi	r24, 0x02	; 2
    5dc6:	62 e0       	ldi	r22, 0x02	; 2
    5dc8:	40 e0       	ldi	r20, 0x00	; 0
    5dca:	0e 94 90 20 	call	0x4120	; 0x4120 <DIO_enuSetPinValue>
    5dce:	fe 01       	movw	r30, r28
    5dd0:	eb 5a       	subi	r30, 0xAB	; 171
    5dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd4:	80 83       	st	Z, r24
    5dd6:	80 e0       	ldi	r24, 0x00	; 0
    5dd8:	90 e0       	ldi	r25, 0x00	; 0
    5dda:	a0 e2       	ldi	r26, 0x20	; 32
    5ddc:	b1 e4       	ldi	r27, 0x41	; 65
    5dde:	8b 87       	std	Y+11, r24	; 0x0b
    5de0:	9c 87       	std	Y+12, r25	; 0x0c
    5de2:	ad 87       	std	Y+13, r26	; 0x0d
    5de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    5de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dee:	20 e0       	ldi	r18, 0x00	; 0
    5df0:	30 e0       	ldi	r19, 0x00	; 0
    5df2:	4a e7       	ldi	r20, 0x7A	; 122
    5df4:	53 e4       	ldi	r21, 0x43	; 67
    5df6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5dfa:	dc 01       	movw	r26, r24
    5dfc:	cb 01       	movw	r24, r22
    5dfe:	8f 83       	std	Y+7, r24	; 0x07
    5e00:	98 87       	std	Y+8, r25	; 0x08
    5e02:	a9 87       	std	Y+9, r26	; 0x09
    5e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e06:	6f 81       	ldd	r22, Y+7	; 0x07
    5e08:	78 85       	ldd	r23, Y+8	; 0x08
    5e0a:	89 85       	ldd	r24, Y+9	; 0x09
    5e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e0e:	20 e0       	ldi	r18, 0x00	; 0
    5e10:	30 e0       	ldi	r19, 0x00	; 0
    5e12:	40 e8       	ldi	r20, 0x80	; 128
    5e14:	5f e3       	ldi	r21, 0x3F	; 63
    5e16:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__ltsf2>
    5e1a:	88 23       	and	r24, r24
    5e1c:	2c f4       	brge	.+10     	; 0x5e28 <LCD_enuToSendCommand+0x7e0>
		__ticks = 1;
    5e1e:	81 e0       	ldi	r24, 0x01	; 1
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	9e 83       	std	Y+6, r25	; 0x06
    5e24:	8d 83       	std	Y+5, r24	; 0x05
    5e26:	3f c0       	rjmp	.+126    	; 0x5ea6 <LCD_enuToSendCommand+0x85e>
	else if (__tmp > 65535)
    5e28:	6f 81       	ldd	r22, Y+7	; 0x07
    5e2a:	78 85       	ldd	r23, Y+8	; 0x08
    5e2c:	89 85       	ldd	r24, Y+9	; 0x09
    5e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	3f ef       	ldi	r19, 0xFF	; 255
    5e34:	4f e7       	ldi	r20, 0x7F	; 127
    5e36:	57 e4       	ldi	r21, 0x47	; 71
    5e38:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gtsf2>
    5e3c:	18 16       	cp	r1, r24
    5e3e:	4c f5       	brge	.+82     	; 0x5e92 <LCD_enuToSendCommand+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e48:	20 e0       	ldi	r18, 0x00	; 0
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	40 e2       	ldi	r20, 0x20	; 32
    5e4e:	51 e4       	ldi	r21, 0x41	; 65
    5e50:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__mulsf3>
    5e54:	dc 01       	movw	r26, r24
    5e56:	cb 01       	movw	r24, r22
    5e58:	bc 01       	movw	r22, r24
    5e5a:	cd 01       	movw	r24, r26
    5e5c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5e60:	dc 01       	movw	r26, r24
    5e62:	cb 01       	movw	r24, r22
    5e64:	9e 83       	std	Y+6, r25	; 0x06
    5e66:	8d 83       	std	Y+5, r24	; 0x05
    5e68:	0f c0       	rjmp	.+30     	; 0x5e88 <LCD_enuToSendCommand+0x840>
    5e6a:	89 e1       	ldi	r24, 0x19	; 25
    5e6c:	90 e0       	ldi	r25, 0x00	; 0
    5e6e:	9c 83       	std	Y+4, r25	; 0x04
    5e70:	8b 83       	std	Y+3, r24	; 0x03
    5e72:	8b 81       	ldd	r24, Y+3	; 0x03
    5e74:	9c 81       	ldd	r25, Y+4	; 0x04
    5e76:	01 97       	sbiw	r24, 0x01	; 1
    5e78:	f1 f7       	brne	.-4      	; 0x5e76 <LCD_enuToSendCommand+0x82e>
    5e7a:	9c 83       	std	Y+4, r25	; 0x04
    5e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e80:	9e 81       	ldd	r25, Y+6	; 0x06
    5e82:	01 97       	sbiw	r24, 0x01	; 1
    5e84:	9e 83       	std	Y+6, r25	; 0x06
    5e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e88:	8d 81       	ldd	r24, Y+5	; 0x05
    5e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    5e8c:	00 97       	sbiw	r24, 0x00	; 0
    5e8e:	69 f7       	brne	.-38     	; 0x5e6a <LCD_enuToSendCommand+0x822>
    5e90:	14 c0       	rjmp	.+40     	; 0x5eba <LCD_enuToSendCommand+0x872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e92:	6f 81       	ldd	r22, Y+7	; 0x07
    5e94:	78 85       	ldd	r23, Y+8	; 0x08
    5e96:	89 85       	ldd	r24, Y+9	; 0x09
    5e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e9a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	9e 83       	std	Y+6, r25	; 0x06
    5ea4:	8d 83       	std	Y+5, r24	; 0x05
    5ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    5eaa:	9a 83       	std	Y+2, r25	; 0x02
    5eac:	89 83       	std	Y+1, r24	; 0x01
    5eae:	89 81       	ldd	r24, Y+1	; 0x01
    5eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb2:	01 97       	sbiw	r24, 0x01	; 1
    5eb4:	f1 f7       	brne	.-4      	; 0x5eb2 <LCD_enuToSendCommand+0x86a>
    5eb6:	9a 83       	std	Y+2, r25	; 0x02
    5eb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	return Local_enuErrorStates;
    5eba:	fe 01       	movw	r30, r28
    5ebc:	eb 5a       	subi	r30, 0xAB	; 171
    5ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec0:	80 81       	ld	r24, Z
}
    5ec2:	ca 5a       	subi	r28, 0xAA	; 170
    5ec4:	df 4f       	sbci	r29, 0xFF	; 255
    5ec6:	0f b6       	in	r0, 0x3f	; 63
    5ec8:	f8 94       	cli
    5eca:	de bf       	out	0x3e, r29	; 62
    5ecc:	0f be       	out	0x3f, r0	; 63
    5ece:	cd bf       	out	0x3d, r28	; 61
    5ed0:	cf 91       	pop	r28
    5ed2:	df 91       	pop	r29
    5ed4:	1f 91       	pop	r17
    5ed6:	0f 91       	pop	r16
    5ed8:	08 95       	ret

00005eda <LCD_enuDisplayNumber>:

static inline ES_t LCD_enuDisplayNumber(sint_64 Copy_uint32Data){
    5eda:	af 92       	push	r10
    5edc:	bf 92       	push	r11
    5ede:	cf 92       	push	r12
    5ee0:	df 92       	push	r13
    5ee2:	ef 92       	push	r14
    5ee4:	ff 92       	push	r15
    5ee6:	0f 93       	push	r16
    5ee8:	1f 93       	push	r17
    5eea:	df 93       	push	r29
    5eec:	cf 93       	push	r28
    5eee:	cd b7       	in	r28, 0x3d	; 61
    5ef0:	de b7       	in	r29, 0x3e	; 62
    5ef2:	ca 56       	subi	r28, 0x6A	; 106
    5ef4:	d0 40       	sbci	r29, 0x00	; 0
    5ef6:	0f b6       	in	r0, 0x3f	; 63
    5ef8:	f8 94       	cli
    5efa:	de bf       	out	0x3e, r29	; 62
    5efc:	0f be       	out	0x3f, r0	; 63
    5efe:	cd bf       	out	0x3d, r28	; 61
    5f00:	2b 87       	std	Y+11, r18	; 0x0b
    5f02:	3c 87       	std	Y+12, r19	; 0x0c
    5f04:	4d 87       	std	Y+13, r20	; 0x0d
    5f06:	5e 87       	std	Y+14, r21	; 0x0e
    5f08:	6f 87       	std	Y+15, r22	; 0x0f
    5f0a:	78 8b       	std	Y+16, r23	; 0x10
    5f0c:	89 8b       	std	Y+17, r24	; 0x11
    5f0e:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t Local_enuErrorStates = ES_NOK;
    5f10:	81 e0       	ldi	r24, 0x01	; 1
    5f12:	8a 87       	std	Y+10, r24	; 0x0a

	uint_8 Local_uint8Digits = 1;
    5f14:	81 e0       	ldi	r24, 0x01	; 1
    5f16:	89 87       	std	Y+9, r24	; 0x09
	sint_64 Local_uint8Dividor = 10;
    5f18:	8a e0       	ldi	r24, 0x0A	; 10
    5f1a:	89 83       	std	Y+1, r24	; 0x01
    5f1c:	1a 82       	std	Y+2, r1	; 0x02
    5f1e:	1b 82       	std	Y+3, r1	; 0x03
    5f20:	1c 82       	std	Y+4, r1	; 0x04
    5f22:	1d 82       	std	Y+5, r1	; 0x05
    5f24:	1e 82       	std	Y+6, r1	; 0x06
    5f26:	1f 82       	std	Y+7, r1	; 0x07
    5f28:	18 86       	std	Y+8, r1	; 0x08

	if(Copy_uint32Data < 0){
    5f2a:	8a 89       	ldd	r24, Y+18	; 0x12
    5f2c:	88 23       	and	r24, r24
    5f2e:	d4 f0       	brlt	.+52     	; 0x5f64 <LCD_enuDisplayNumber+0x8a>
    5f30:	8a 89       	ldd	r24, Y+18	; 0x12
    5f32:	88 23       	and	r24, r24
    5f34:	09 f0       	breq	.+2      	; 0x5f38 <LCD_enuDisplayNumber+0x5e>
    5f36:	38 c3       	rjmp	.+1648   	; 0x65a8 <LCD_enuDisplayNumber+0x6ce>
    5f38:	89 89       	ldd	r24, Y+17	; 0x11
    5f3a:	88 23       	and	r24, r24
    5f3c:	09 f0       	breq	.+2      	; 0x5f40 <LCD_enuDisplayNumber+0x66>
    5f3e:	34 c3       	rjmp	.+1640   	; 0x65a8 <LCD_enuDisplayNumber+0x6ce>
    5f40:	88 89       	ldd	r24, Y+16	; 0x10
    5f42:	88 23       	and	r24, r24
    5f44:	09 f0       	breq	.+2      	; 0x5f48 <LCD_enuDisplayNumber+0x6e>
    5f46:	30 c3       	rjmp	.+1632   	; 0x65a8 <LCD_enuDisplayNumber+0x6ce>
    5f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f4a:	88 23       	and	r24, r24
    5f4c:	09 f0       	breq	.+2      	; 0x5f50 <LCD_enuDisplayNumber+0x76>
    5f4e:	2c c3       	rjmp	.+1624   	; 0x65a8 <LCD_enuDisplayNumber+0x6ce>
    5f50:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f52:	88 23       	and	r24, r24
    5f54:	09 f0       	breq	.+2      	; 0x5f58 <LCD_enuDisplayNumber+0x7e>
    5f56:	28 c3       	rjmp	.+1616   	; 0x65a8 <LCD_enuDisplayNumber+0x6ce>
    5f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f5a:	88 23       	and	r24, r24
    5f5c:	09 f0       	breq	.+2      	; 0x5f60 <LCD_enuDisplayNumber+0x86>
    5f5e:	24 c3       	rjmp	.+1608   	; 0x65a8 <LCD_enuDisplayNumber+0x6ce>
    5f60:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f62:	22 c3       	rjmp	.+1604   	; 0x65a8 <LCD_enuDisplayNumber+0x6ce>
		Local_enuErrorStates = LCD_enuSendData('-');
    5f64:	8d e2       	ldi	r24, 0x2D	; 45
    5f66:	0e 94 c2 28 	call	0x5184	; 0x5184 <LCD_enuSendData>
    5f6a:	8a 87       	std	Y+10, r24	; 0x0a
		Copy_uint32Data *= -1;
    5f6c:	1c 8a       	std	Y+20, r1	; 0x14
    5f6e:	1d 8a       	std	Y+21, r1	; 0x15
    5f70:	1e 8a       	std	Y+22, r1	; 0x16
    5f72:	1f 8a       	std	Y+23, r1	; 0x17
    5f74:	18 8e       	std	Y+24, r1	; 0x18
    5f76:	19 8e       	std	Y+25, r1	; 0x19
    5f78:	1a 8e       	std	Y+26, r1	; 0x1a
    5f7a:	1b 8e       	std	Y+27, r1	; 0x1b
    5f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f7e:	9c 8f       	std	Y+28, r25	; 0x1c
    5f80:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f82:	8d 8f       	std	Y+29, r24	; 0x1d
    5f84:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f86:	9e 8f       	std	Y+30, r25	; 0x1e
    5f88:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f8a:	8f 8f       	std	Y+31, r24	; 0x1f
    5f8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f8e:	98 a3       	std	Y+32, r25	; 0x20
    5f90:	88 89       	ldd	r24, Y+16	; 0x10
    5f92:	89 a3       	std	Y+33, r24	; 0x21
    5f94:	99 89       	ldd	r25, Y+17	; 0x11
    5f96:	9a a3       	std	Y+34, r25	; 0x22
    5f98:	8a 89       	ldd	r24, Y+18	; 0x12
    5f9a:	8b a3       	std	Y+35, r24	; 0x23
    5f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    5f9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5fa0:	98 1b       	sub	r25, r24
    5fa2:	9c a3       	std	Y+36, r25	; 0x24
    5fa4:	91 e0       	ldi	r25, 0x01	; 1
    5fa6:	9c a7       	std	Y+44, r25	; 0x2c
    5fa8:	8c a1       	ldd	r24, Y+36	; 0x24
    5faa:	9c 89       	ldd	r25, Y+20	; 0x14
    5fac:	98 17       	cp	r25, r24
    5fae:	08 f0       	brcs	.+2      	; 0x5fb2 <LCD_enuDisplayNumber+0xd8>
    5fb0:	1c a6       	std	Y+44, r1	; 0x2c
    5fb2:	8d 89       	ldd	r24, Y+21	; 0x15
    5fb4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5fb6:	89 1b       	sub	r24, r25
    5fb8:	8d a3       	std	Y+37, r24	; 0x25
    5fba:	81 e0       	ldi	r24, 0x01	; 1
    5fbc:	8d a7       	std	Y+45, r24	; 0x2d
    5fbe:	9d a1       	ldd	r25, Y+37	; 0x25
    5fc0:	8d 89       	ldd	r24, Y+21	; 0x15
    5fc2:	89 17       	cp	r24, r25
    5fc4:	08 f0       	brcs	.+2      	; 0x5fc8 <LCD_enuDisplayNumber+0xee>
    5fc6:	1d a6       	std	Y+45, r1	; 0x2d
    5fc8:	9d a1       	ldd	r25, Y+37	; 0x25
    5fca:	8c a5       	ldd	r24, Y+44	; 0x2c
    5fcc:	98 1b       	sub	r25, r24
    5fce:	9e a7       	std	Y+46, r25	; 0x2e
    5fd0:	91 e0       	ldi	r25, 0x01	; 1
    5fd2:	9f a7       	std	Y+47, r25	; 0x2f
    5fd4:	8e a5       	ldd	r24, Y+46	; 0x2e
    5fd6:	9d a1       	ldd	r25, Y+37	; 0x25
    5fd8:	98 17       	cp	r25, r24
    5fda:	08 f0       	brcs	.+2      	; 0x5fde <LCD_enuDisplayNumber+0x104>
    5fdc:	1f a6       	std	Y+47, r1	; 0x2f
    5fde:	8d a5       	ldd	r24, Y+45	; 0x2d
    5fe0:	9f a5       	ldd	r25, Y+47	; 0x2f
    5fe2:	89 2b       	or	r24, r25
    5fe4:	8d a7       	std	Y+45, r24	; 0x2d
    5fe6:	8e a5       	ldd	r24, Y+46	; 0x2e
    5fe8:	8d a3       	std	Y+37, r24	; 0x25
    5fea:	9e 89       	ldd	r25, Y+22	; 0x16
    5fec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5fee:	98 1b       	sub	r25, r24
    5ff0:	9e a3       	std	Y+38, r25	; 0x26
    5ff2:	91 e0       	ldi	r25, 0x01	; 1
    5ff4:	98 ab       	std	Y+48, r25	; 0x30
    5ff6:	8e a1       	ldd	r24, Y+38	; 0x26
    5ff8:	9e 89       	ldd	r25, Y+22	; 0x16
    5ffa:	98 17       	cp	r25, r24
    5ffc:	08 f0       	brcs	.+2      	; 0x6000 <LCD_enuDisplayNumber+0x126>
    5ffe:	18 aa       	std	Y+48, r1	; 0x30
    6000:	8e a1       	ldd	r24, Y+38	; 0x26
    6002:	9d a5       	ldd	r25, Y+45	; 0x2d
    6004:	89 1b       	sub	r24, r25
    6006:	89 ab       	std	Y+49, r24	; 0x31
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	8a ab       	std	Y+50, r24	; 0x32
    600c:	99 a9       	ldd	r25, Y+49	; 0x31
    600e:	8e a1       	ldd	r24, Y+38	; 0x26
    6010:	89 17       	cp	r24, r25
    6012:	08 f0       	brcs	.+2      	; 0x6016 <LCD_enuDisplayNumber+0x13c>
    6014:	1a aa       	std	Y+50, r1	; 0x32
    6016:	98 a9       	ldd	r25, Y+48	; 0x30
    6018:	8a a9       	ldd	r24, Y+50	; 0x32
    601a:	98 2b       	or	r25, r24
    601c:	98 ab       	std	Y+48, r25	; 0x30
    601e:	99 a9       	ldd	r25, Y+49	; 0x31
    6020:	9e a3       	std	Y+38, r25	; 0x26
    6022:	8f 89       	ldd	r24, Y+23	; 0x17
    6024:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6026:	89 1b       	sub	r24, r25
    6028:	8f a3       	std	Y+39, r24	; 0x27
    602a:	81 e0       	ldi	r24, 0x01	; 1
    602c:	8b ab       	std	Y+51, r24	; 0x33
    602e:	9f a1       	ldd	r25, Y+39	; 0x27
    6030:	8f 89       	ldd	r24, Y+23	; 0x17
    6032:	89 17       	cp	r24, r25
    6034:	08 f0       	brcs	.+2      	; 0x6038 <LCD_enuDisplayNumber+0x15e>
    6036:	1b aa       	std	Y+51, r1	; 0x33
    6038:	9f a1       	ldd	r25, Y+39	; 0x27
    603a:	88 a9       	ldd	r24, Y+48	; 0x30
    603c:	98 1b       	sub	r25, r24
    603e:	9c ab       	std	Y+52, r25	; 0x34
    6040:	91 e0       	ldi	r25, 0x01	; 1
    6042:	9d ab       	std	Y+53, r25	; 0x35
    6044:	8c a9       	ldd	r24, Y+52	; 0x34
    6046:	9f a1       	ldd	r25, Y+39	; 0x27
    6048:	98 17       	cp	r25, r24
    604a:	08 f0       	brcs	.+2      	; 0x604e <LCD_enuDisplayNumber+0x174>
    604c:	1d aa       	std	Y+53, r1	; 0x35
    604e:	8b a9       	ldd	r24, Y+51	; 0x33
    6050:	9d a9       	ldd	r25, Y+53	; 0x35
    6052:	89 2b       	or	r24, r25
    6054:	8b ab       	std	Y+51, r24	; 0x33
    6056:	8c a9       	ldd	r24, Y+52	; 0x34
    6058:	8f a3       	std	Y+39, r24	; 0x27
    605a:	98 8d       	ldd	r25, Y+24	; 0x18
    605c:	88 a1       	ldd	r24, Y+32	; 0x20
    605e:	98 1b       	sub	r25, r24
    6060:	98 a7       	std	Y+40, r25	; 0x28
    6062:	91 e0       	ldi	r25, 0x01	; 1
    6064:	9e ab       	std	Y+54, r25	; 0x36
    6066:	88 a5       	ldd	r24, Y+40	; 0x28
    6068:	98 8d       	ldd	r25, Y+24	; 0x18
    606a:	98 17       	cp	r25, r24
    606c:	08 f0       	brcs	.+2      	; 0x6070 <LCD_enuDisplayNumber+0x196>
    606e:	1e aa       	std	Y+54, r1	; 0x36
    6070:	88 a5       	ldd	r24, Y+40	; 0x28
    6072:	9b a9       	ldd	r25, Y+51	; 0x33
    6074:	89 1b       	sub	r24, r25
    6076:	8f ab       	std	Y+55, r24	; 0x37
    6078:	81 e0       	ldi	r24, 0x01	; 1
    607a:	88 af       	std	Y+56, r24	; 0x38
    607c:	9f a9       	ldd	r25, Y+55	; 0x37
    607e:	88 a5       	ldd	r24, Y+40	; 0x28
    6080:	89 17       	cp	r24, r25
    6082:	08 f0       	brcs	.+2      	; 0x6086 <LCD_enuDisplayNumber+0x1ac>
    6084:	18 ae       	std	Y+56, r1	; 0x38
    6086:	9e a9       	ldd	r25, Y+54	; 0x36
    6088:	88 ad       	ldd	r24, Y+56	; 0x38
    608a:	98 2b       	or	r25, r24
    608c:	9e ab       	std	Y+54, r25	; 0x36
    608e:	9f a9       	ldd	r25, Y+55	; 0x37
    6090:	98 a7       	std	Y+40, r25	; 0x28
    6092:	89 8d       	ldd	r24, Y+25	; 0x19
    6094:	99 a1       	ldd	r25, Y+33	; 0x21
    6096:	89 1b       	sub	r24, r25
    6098:	89 a7       	std	Y+41, r24	; 0x29
    609a:	81 e0       	ldi	r24, 0x01	; 1
    609c:	89 af       	std	Y+57, r24	; 0x39
    609e:	99 a5       	ldd	r25, Y+41	; 0x29
    60a0:	89 8d       	ldd	r24, Y+25	; 0x19
    60a2:	89 17       	cp	r24, r25
    60a4:	08 f0       	brcs	.+2      	; 0x60a8 <LCD_enuDisplayNumber+0x1ce>
    60a6:	19 ae       	std	Y+57, r1	; 0x39
    60a8:	99 a5       	ldd	r25, Y+41	; 0x29
    60aa:	8e a9       	ldd	r24, Y+54	; 0x36
    60ac:	98 1b       	sub	r25, r24
    60ae:	9a af       	std	Y+58, r25	; 0x3a
    60b0:	91 e0       	ldi	r25, 0x01	; 1
    60b2:	9b af       	std	Y+59, r25	; 0x3b
    60b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    60b6:	99 a5       	ldd	r25, Y+41	; 0x29
    60b8:	98 17       	cp	r25, r24
    60ba:	08 f0       	brcs	.+2      	; 0x60be <LCD_enuDisplayNumber+0x1e4>
    60bc:	1b ae       	std	Y+59, r1	; 0x3b
    60be:	89 ad       	ldd	r24, Y+57	; 0x39
    60c0:	9b ad       	ldd	r25, Y+59	; 0x3b
    60c2:	89 2b       	or	r24, r25
    60c4:	89 af       	std	Y+57, r24	; 0x39
    60c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    60c8:	89 a7       	std	Y+41, r24	; 0x29
    60ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    60cc:	8a a1       	ldd	r24, Y+34	; 0x22
    60ce:	98 1b       	sub	r25, r24
    60d0:	9a a7       	std	Y+42, r25	; 0x2a
    60d2:	91 e0       	ldi	r25, 0x01	; 1
    60d4:	9c af       	std	Y+60, r25	; 0x3c
    60d6:	8a a5       	ldd	r24, Y+42	; 0x2a
    60d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    60da:	98 17       	cp	r25, r24
    60dc:	08 f0       	brcs	.+2      	; 0x60e0 <LCD_enuDisplayNumber+0x206>
    60de:	1c ae       	std	Y+60, r1	; 0x3c
    60e0:	8a a5       	ldd	r24, Y+42	; 0x2a
    60e2:	99 ad       	ldd	r25, Y+57	; 0x39
    60e4:	89 1b       	sub	r24, r25
    60e6:	8d af       	std	Y+61, r24	; 0x3d
    60e8:	81 e0       	ldi	r24, 0x01	; 1
    60ea:	8e af       	std	Y+62, r24	; 0x3e
    60ec:	9d ad       	ldd	r25, Y+61	; 0x3d
    60ee:	8a a5       	ldd	r24, Y+42	; 0x2a
    60f0:	89 17       	cp	r24, r25
    60f2:	08 f0       	brcs	.+2      	; 0x60f6 <LCD_enuDisplayNumber+0x21c>
    60f4:	1e ae       	std	Y+62, r1	; 0x3e
    60f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    60f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    60fa:	98 2b       	or	r25, r24
    60fc:	9c af       	std	Y+60, r25	; 0x3c
    60fe:	9d ad       	ldd	r25, Y+61	; 0x3d
    6100:	9a a7       	std	Y+42, r25	; 0x2a
    6102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6104:	9b a1       	ldd	r25, Y+35	; 0x23
    6106:	89 1b       	sub	r24, r25
    6108:	8b a7       	std	Y+43, r24	; 0x2b
    610a:	8b a5       	ldd	r24, Y+43	; 0x2b
    610c:	9c ad       	ldd	r25, Y+60	; 0x3c
    610e:	89 1b       	sub	r24, r25
    6110:	8b a7       	std	Y+43, r24	; 0x2b
    6112:	8c a1       	ldd	r24, Y+36	; 0x24
    6114:	8b 87       	std	Y+11, r24	; 0x0b
    6116:	9d a1       	ldd	r25, Y+37	; 0x25
    6118:	9c 87       	std	Y+12, r25	; 0x0c
    611a:	8e a1       	ldd	r24, Y+38	; 0x26
    611c:	8d 87       	std	Y+13, r24	; 0x0d
    611e:	9f a1       	ldd	r25, Y+39	; 0x27
    6120:	9e 87       	std	Y+14, r25	; 0x0e
    6122:	88 a5       	ldd	r24, Y+40	; 0x28
    6124:	8f 87       	std	Y+15, r24	; 0x0f
    6126:	99 a5       	ldd	r25, Y+41	; 0x29
    6128:	98 8b       	std	Y+16, r25	; 0x10
    612a:	8a a5       	ldd	r24, Y+42	; 0x2a
    612c:	89 8b       	std	Y+17, r24	; 0x11
    612e:	9b a5       	ldd	r25, Y+43	; 0x2b
    6130:	9a 8b       	std	Y+18, r25	; 0x12
    6132:	3a c2       	rjmp	.+1140   	; 0x65a8 <LCD_enuDisplayNumber+0x6ce>
	}

	while(Copy_uint32Data / Local_uint8Dividor){
		Local_uint8Dividor *= 10;
    6134:	29 81       	ldd	r18, Y+1	; 0x01
    6136:	3a 81       	ldd	r19, Y+2	; 0x02
    6138:	4b 81       	ldd	r20, Y+3	; 0x03
    613a:	5c 81       	ldd	r21, Y+4	; 0x04
    613c:	6d 81       	ldd	r22, Y+5	; 0x05
    613e:	7e 81       	ldd	r23, Y+6	; 0x06
    6140:	8f 81       	ldd	r24, Y+7	; 0x07
    6142:	98 85       	ldd	r25, Y+8	; 0x08
    6144:	a2 2e       	mov	r10, r18
    6146:	b3 2e       	mov	r11, r19
    6148:	c4 2e       	mov	r12, r20
    614a:	d5 2e       	mov	r13, r21
    614c:	e6 2e       	mov	r14, r22
    614e:	f7 2e       	mov	r15, r23
    6150:	08 2f       	mov	r16, r24
    6152:	19 2f       	mov	r17, r25
    6154:	2a 2d       	mov	r18, r10
    6156:	3b 2d       	mov	r19, r11
    6158:	4c 2d       	mov	r20, r12
    615a:	5d 2d       	mov	r21, r13
    615c:	6e 2d       	mov	r22, r14
    615e:	7f 2d       	mov	r23, r15
    6160:	80 2f       	mov	r24, r16
    6162:	91 2f       	mov	r25, r17
    6164:	01 e0       	ldi	r16, 0x01	; 1
    6166:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    616a:	2f af       	std	Y+63, r18	; 0x3f
    616c:	21 96       	adiw	r28, 0x01	; 1
    616e:	3f af       	std	Y+63, r19	; 0x3f
    6170:	21 97       	sbiw	r28, 0x01	; 1
    6172:	22 96       	adiw	r28, 0x02	; 2
    6174:	4f af       	std	Y+63, r20	; 0x3f
    6176:	22 97       	sbiw	r28, 0x02	; 2
    6178:	23 96       	adiw	r28, 0x03	; 3
    617a:	5f af       	std	Y+63, r21	; 0x3f
    617c:	23 97       	sbiw	r28, 0x03	; 3
    617e:	24 96       	adiw	r28, 0x04	; 4
    6180:	6f af       	std	Y+63, r22	; 0x3f
    6182:	24 97       	sbiw	r28, 0x04	; 4
    6184:	25 96       	adiw	r28, 0x05	; 5
    6186:	7f af       	std	Y+63, r23	; 0x3f
    6188:	25 97       	sbiw	r28, 0x05	; 5
    618a:	26 96       	adiw	r28, 0x06	; 6
    618c:	8f af       	std	Y+63, r24	; 0x3f
    618e:	26 97       	sbiw	r28, 0x06	; 6
    6190:	27 96       	adiw	r28, 0x07	; 7
    6192:	9f af       	std	Y+63, r25	; 0x3f
    6194:	27 97       	sbiw	r28, 0x07	; 7
    6196:	2f ad       	ldd	r18, Y+63	; 0x3f
    6198:	21 96       	adiw	r28, 0x01	; 1
    619a:	3f ad       	ldd	r19, Y+63	; 0x3f
    619c:	21 97       	sbiw	r28, 0x01	; 1
    619e:	22 96       	adiw	r28, 0x02	; 2
    61a0:	4f ad       	ldd	r20, Y+63	; 0x3f
    61a2:	22 97       	sbiw	r28, 0x02	; 2
    61a4:	23 96       	adiw	r28, 0x03	; 3
    61a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    61a8:	23 97       	sbiw	r28, 0x03	; 3
    61aa:	24 96       	adiw	r28, 0x04	; 4
    61ac:	6f ad       	ldd	r22, Y+63	; 0x3f
    61ae:	24 97       	sbiw	r28, 0x04	; 4
    61b0:	25 96       	adiw	r28, 0x05	; 5
    61b2:	7f ad       	ldd	r23, Y+63	; 0x3f
    61b4:	25 97       	sbiw	r28, 0x05	; 5
    61b6:	26 96       	adiw	r28, 0x06	; 6
    61b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    61ba:	26 97       	sbiw	r28, 0x06	; 6
    61bc:	27 96       	adiw	r28, 0x07	; 7
    61be:	9f ad       	ldd	r25, Y+63	; 0x3f
    61c0:	27 97       	sbiw	r28, 0x07	; 7
    61c2:	02 e0       	ldi	r16, 0x02	; 2
    61c4:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    61c8:	28 96       	adiw	r28, 0x08	; 8
    61ca:	2f af       	std	Y+63, r18	; 0x3f
    61cc:	28 97       	sbiw	r28, 0x08	; 8
    61ce:	29 96       	adiw	r28, 0x09	; 9
    61d0:	3f af       	std	Y+63, r19	; 0x3f
    61d2:	29 97       	sbiw	r28, 0x09	; 9
    61d4:	2a 96       	adiw	r28, 0x0a	; 10
    61d6:	4f af       	std	Y+63, r20	; 0x3f
    61d8:	2a 97       	sbiw	r28, 0x0a	; 10
    61da:	2b 96       	adiw	r28, 0x0b	; 11
    61dc:	5f af       	std	Y+63, r21	; 0x3f
    61de:	2b 97       	sbiw	r28, 0x0b	; 11
    61e0:	2c 96       	adiw	r28, 0x0c	; 12
    61e2:	6f af       	std	Y+63, r22	; 0x3f
    61e4:	2c 97       	sbiw	r28, 0x0c	; 12
    61e6:	2d 96       	adiw	r28, 0x0d	; 13
    61e8:	7f af       	std	Y+63, r23	; 0x3f
    61ea:	2d 97       	sbiw	r28, 0x0d	; 13
    61ec:	2e 96       	adiw	r28, 0x0e	; 14
    61ee:	8f af       	std	Y+63, r24	; 0x3f
    61f0:	2e 97       	sbiw	r28, 0x0e	; 14
    61f2:	2f 96       	adiw	r28, 0x0f	; 15
    61f4:	9f af       	std	Y+63, r25	; 0x3f
    61f6:	2f 97       	sbiw	r28, 0x0f	; 15
    61f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    61fa:	28 96       	adiw	r28, 0x08	; 8
    61fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    61fe:	28 97       	sbiw	r28, 0x08	; 8
    6200:	89 0f       	add	r24, r25
    6202:	60 96       	adiw	r28, 0x10	; 16
    6204:	8f af       	std	Y+63, r24	; 0x3f
    6206:	60 97       	sbiw	r28, 0x10	; 16
    6208:	81 e0       	ldi	r24, 0x01	; 1
    620a:	68 96       	adiw	r28, 0x18	; 24
    620c:	8f af       	std	Y+63, r24	; 0x3f
    620e:	68 97       	sbiw	r28, 0x18	; 24
    6210:	60 96       	adiw	r28, 0x10	; 16
    6212:	9f ad       	ldd	r25, Y+63	; 0x3f
    6214:	60 97       	sbiw	r28, 0x10	; 16
    6216:	8f ad       	ldd	r24, Y+63	; 0x3f
    6218:	98 17       	cp	r25, r24
    621a:	18 f0       	brcs	.+6      	; 0x6222 <LCD_enuDisplayNumber+0x348>
    621c:	68 96       	adiw	r28, 0x18	; 24
    621e:	1f ae       	std	Y+63, r1	; 0x3f
    6220:	68 97       	sbiw	r28, 0x18	; 24
    6222:	21 96       	adiw	r28, 0x01	; 1
    6224:	9f ad       	ldd	r25, Y+63	; 0x3f
    6226:	21 97       	sbiw	r28, 0x01	; 1
    6228:	29 96       	adiw	r28, 0x09	; 9
    622a:	8f ad       	ldd	r24, Y+63	; 0x3f
    622c:	29 97       	sbiw	r28, 0x09	; 9
    622e:	98 0f       	add	r25, r24
    6230:	61 96       	adiw	r28, 0x11	; 17
    6232:	9f af       	std	Y+63, r25	; 0x3f
    6234:	61 97       	sbiw	r28, 0x11	; 17
    6236:	91 e0       	ldi	r25, 0x01	; 1
    6238:	69 96       	adiw	r28, 0x19	; 25
    623a:	9f af       	std	Y+63, r25	; 0x3f
    623c:	69 97       	sbiw	r28, 0x19	; 25
    623e:	61 96       	adiw	r28, 0x11	; 17
    6240:	8f ad       	ldd	r24, Y+63	; 0x3f
    6242:	61 97       	sbiw	r28, 0x11	; 17
    6244:	21 96       	adiw	r28, 0x01	; 1
    6246:	9f ad       	ldd	r25, Y+63	; 0x3f
    6248:	21 97       	sbiw	r28, 0x01	; 1
    624a:	89 17       	cp	r24, r25
    624c:	18 f0       	brcs	.+6      	; 0x6254 <LCD_enuDisplayNumber+0x37a>
    624e:	69 96       	adiw	r28, 0x19	; 25
    6250:	1f ae       	std	Y+63, r1	; 0x3f
    6252:	69 97       	sbiw	r28, 0x19	; 25
    6254:	68 96       	adiw	r28, 0x18	; 24
    6256:	8f ad       	ldd	r24, Y+63	; 0x3f
    6258:	68 97       	sbiw	r28, 0x18	; 24
    625a:	61 96       	adiw	r28, 0x11	; 17
    625c:	9f ad       	ldd	r25, Y+63	; 0x3f
    625e:	61 97       	sbiw	r28, 0x11	; 17
    6260:	89 0f       	add	r24, r25
    6262:	6a 96       	adiw	r28, 0x1a	; 26
    6264:	8f af       	std	Y+63, r24	; 0x3f
    6266:	6a 97       	sbiw	r28, 0x1a	; 26
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	6b 96       	adiw	r28, 0x1b	; 27
    626c:	8f af       	std	Y+63, r24	; 0x3f
    626e:	6b 97       	sbiw	r28, 0x1b	; 27
    6270:	6a 96       	adiw	r28, 0x1a	; 26
    6272:	9f ad       	ldd	r25, Y+63	; 0x3f
    6274:	6a 97       	sbiw	r28, 0x1a	; 26
    6276:	61 96       	adiw	r28, 0x11	; 17
    6278:	8f ad       	ldd	r24, Y+63	; 0x3f
    627a:	61 97       	sbiw	r28, 0x11	; 17
    627c:	98 17       	cp	r25, r24
    627e:	18 f0       	brcs	.+6      	; 0x6286 <LCD_enuDisplayNumber+0x3ac>
    6280:	6b 96       	adiw	r28, 0x1b	; 27
    6282:	1f ae       	std	Y+63, r1	; 0x3f
    6284:	6b 97       	sbiw	r28, 0x1b	; 27
    6286:	69 96       	adiw	r28, 0x19	; 25
    6288:	9f ad       	ldd	r25, Y+63	; 0x3f
    628a:	69 97       	sbiw	r28, 0x19	; 25
    628c:	6b 96       	adiw	r28, 0x1b	; 27
    628e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6290:	6b 97       	sbiw	r28, 0x1b	; 27
    6292:	98 2b       	or	r25, r24
    6294:	69 96       	adiw	r28, 0x19	; 25
    6296:	9f af       	std	Y+63, r25	; 0x3f
    6298:	69 97       	sbiw	r28, 0x19	; 25
    629a:	6a 96       	adiw	r28, 0x1a	; 26
    629c:	9f ad       	ldd	r25, Y+63	; 0x3f
    629e:	6a 97       	sbiw	r28, 0x1a	; 26
    62a0:	61 96       	adiw	r28, 0x11	; 17
    62a2:	9f af       	std	Y+63, r25	; 0x3f
    62a4:	61 97       	sbiw	r28, 0x11	; 17
    62a6:	22 96       	adiw	r28, 0x02	; 2
    62a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    62aa:	22 97       	sbiw	r28, 0x02	; 2
    62ac:	2a 96       	adiw	r28, 0x0a	; 10
    62ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    62b0:	2a 97       	sbiw	r28, 0x0a	; 10
    62b2:	89 0f       	add	r24, r25
    62b4:	62 96       	adiw	r28, 0x12	; 18
    62b6:	8f af       	std	Y+63, r24	; 0x3f
    62b8:	62 97       	sbiw	r28, 0x12	; 18
    62ba:	81 e0       	ldi	r24, 0x01	; 1
    62bc:	6c 96       	adiw	r28, 0x1c	; 28
    62be:	8f af       	std	Y+63, r24	; 0x3f
    62c0:	6c 97       	sbiw	r28, 0x1c	; 28
    62c2:	62 96       	adiw	r28, 0x12	; 18
    62c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    62c6:	62 97       	sbiw	r28, 0x12	; 18
    62c8:	22 96       	adiw	r28, 0x02	; 2
    62ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    62cc:	22 97       	sbiw	r28, 0x02	; 2
    62ce:	98 17       	cp	r25, r24
    62d0:	18 f0       	brcs	.+6      	; 0x62d8 <LCD_enuDisplayNumber+0x3fe>
    62d2:	6c 96       	adiw	r28, 0x1c	; 28
    62d4:	1f ae       	std	Y+63, r1	; 0x3f
    62d6:	6c 97       	sbiw	r28, 0x1c	; 28
    62d8:	69 96       	adiw	r28, 0x19	; 25
    62da:	9f ad       	ldd	r25, Y+63	; 0x3f
    62dc:	69 97       	sbiw	r28, 0x19	; 25
    62de:	62 96       	adiw	r28, 0x12	; 18
    62e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    62e2:	62 97       	sbiw	r28, 0x12	; 18
    62e4:	98 0f       	add	r25, r24
    62e6:	6d 96       	adiw	r28, 0x1d	; 29
    62e8:	9f af       	std	Y+63, r25	; 0x3f
    62ea:	6d 97       	sbiw	r28, 0x1d	; 29
    62ec:	91 e0       	ldi	r25, 0x01	; 1
    62ee:	6e 96       	adiw	r28, 0x1e	; 30
    62f0:	9f af       	std	Y+63, r25	; 0x3f
    62f2:	6e 97       	sbiw	r28, 0x1e	; 30
    62f4:	6d 96       	adiw	r28, 0x1d	; 29
    62f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    62f8:	6d 97       	sbiw	r28, 0x1d	; 29
    62fa:	62 96       	adiw	r28, 0x12	; 18
    62fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    62fe:	62 97       	sbiw	r28, 0x12	; 18
    6300:	89 17       	cp	r24, r25
    6302:	18 f0       	brcs	.+6      	; 0x630a <LCD_enuDisplayNumber+0x430>
    6304:	6e 96       	adiw	r28, 0x1e	; 30
    6306:	1f ae       	std	Y+63, r1	; 0x3f
    6308:	6e 97       	sbiw	r28, 0x1e	; 30
    630a:	6c 96       	adiw	r28, 0x1c	; 28
    630c:	8f ad       	ldd	r24, Y+63	; 0x3f
    630e:	6c 97       	sbiw	r28, 0x1c	; 28
    6310:	6e 96       	adiw	r28, 0x1e	; 30
    6312:	9f ad       	ldd	r25, Y+63	; 0x3f
    6314:	6e 97       	sbiw	r28, 0x1e	; 30
    6316:	89 2b       	or	r24, r25
    6318:	6c 96       	adiw	r28, 0x1c	; 28
    631a:	8f af       	std	Y+63, r24	; 0x3f
    631c:	6c 97       	sbiw	r28, 0x1c	; 28
    631e:	6d 96       	adiw	r28, 0x1d	; 29
    6320:	8f ad       	ldd	r24, Y+63	; 0x3f
    6322:	6d 97       	sbiw	r28, 0x1d	; 29
    6324:	62 96       	adiw	r28, 0x12	; 18
    6326:	8f af       	std	Y+63, r24	; 0x3f
    6328:	62 97       	sbiw	r28, 0x12	; 18
    632a:	23 96       	adiw	r28, 0x03	; 3
    632c:	9f ad       	ldd	r25, Y+63	; 0x3f
    632e:	23 97       	sbiw	r28, 0x03	; 3
    6330:	2b 96       	adiw	r28, 0x0b	; 11
    6332:	8f ad       	ldd	r24, Y+63	; 0x3f
    6334:	2b 97       	sbiw	r28, 0x0b	; 11
    6336:	98 0f       	add	r25, r24
    6338:	63 96       	adiw	r28, 0x13	; 19
    633a:	9f af       	std	Y+63, r25	; 0x3f
    633c:	63 97       	sbiw	r28, 0x13	; 19
    633e:	91 e0       	ldi	r25, 0x01	; 1
    6340:	6f 96       	adiw	r28, 0x1f	; 31
    6342:	9f af       	std	Y+63, r25	; 0x3f
    6344:	6f 97       	sbiw	r28, 0x1f	; 31
    6346:	63 96       	adiw	r28, 0x13	; 19
    6348:	8f ad       	ldd	r24, Y+63	; 0x3f
    634a:	63 97       	sbiw	r28, 0x13	; 19
    634c:	23 96       	adiw	r28, 0x03	; 3
    634e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6350:	23 97       	sbiw	r28, 0x03	; 3
    6352:	89 17       	cp	r24, r25
    6354:	18 f0       	brcs	.+6      	; 0x635c <LCD_enuDisplayNumber+0x482>
    6356:	6f 96       	adiw	r28, 0x1f	; 31
    6358:	1f ae       	std	Y+63, r1	; 0x3f
    635a:	6f 97       	sbiw	r28, 0x1f	; 31
    635c:	6c 96       	adiw	r28, 0x1c	; 28
    635e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6360:	6c 97       	sbiw	r28, 0x1c	; 28
    6362:	63 96       	adiw	r28, 0x13	; 19
    6364:	9f ad       	ldd	r25, Y+63	; 0x3f
    6366:	63 97       	sbiw	r28, 0x13	; 19
    6368:	89 0f       	add	r24, r25
    636a:	a0 96       	adiw	r28, 0x20	; 32
    636c:	8f af       	std	Y+63, r24	; 0x3f
    636e:	a0 97       	sbiw	r28, 0x20	; 32
    6370:	81 e0       	ldi	r24, 0x01	; 1
    6372:	a1 96       	adiw	r28, 0x21	; 33
    6374:	8f af       	std	Y+63, r24	; 0x3f
    6376:	a1 97       	sbiw	r28, 0x21	; 33
    6378:	a0 96       	adiw	r28, 0x20	; 32
    637a:	9f ad       	ldd	r25, Y+63	; 0x3f
    637c:	a0 97       	sbiw	r28, 0x20	; 32
    637e:	63 96       	adiw	r28, 0x13	; 19
    6380:	8f ad       	ldd	r24, Y+63	; 0x3f
    6382:	63 97       	sbiw	r28, 0x13	; 19
    6384:	98 17       	cp	r25, r24
    6386:	18 f0       	brcs	.+6      	; 0x638e <LCD_enuDisplayNumber+0x4b4>
    6388:	a1 96       	adiw	r28, 0x21	; 33
    638a:	1f ae       	std	Y+63, r1	; 0x3f
    638c:	a1 97       	sbiw	r28, 0x21	; 33
    638e:	6f 96       	adiw	r28, 0x1f	; 31
    6390:	9f ad       	ldd	r25, Y+63	; 0x3f
    6392:	6f 97       	sbiw	r28, 0x1f	; 31
    6394:	a1 96       	adiw	r28, 0x21	; 33
    6396:	8f ad       	ldd	r24, Y+63	; 0x3f
    6398:	a1 97       	sbiw	r28, 0x21	; 33
    639a:	98 2b       	or	r25, r24
    639c:	6f 96       	adiw	r28, 0x1f	; 31
    639e:	9f af       	std	Y+63, r25	; 0x3f
    63a0:	6f 97       	sbiw	r28, 0x1f	; 31
    63a2:	a0 96       	adiw	r28, 0x20	; 32
    63a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    63a6:	a0 97       	sbiw	r28, 0x20	; 32
    63a8:	63 96       	adiw	r28, 0x13	; 19
    63aa:	9f af       	std	Y+63, r25	; 0x3f
    63ac:	63 97       	sbiw	r28, 0x13	; 19
    63ae:	24 96       	adiw	r28, 0x04	; 4
    63b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    63b2:	24 97       	sbiw	r28, 0x04	; 4
    63b4:	2c 96       	adiw	r28, 0x0c	; 12
    63b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    63b8:	2c 97       	sbiw	r28, 0x0c	; 12
    63ba:	89 0f       	add	r24, r25
    63bc:	64 96       	adiw	r28, 0x14	; 20
    63be:	8f af       	std	Y+63, r24	; 0x3f
    63c0:	64 97       	sbiw	r28, 0x14	; 20
    63c2:	81 e0       	ldi	r24, 0x01	; 1
    63c4:	a2 96       	adiw	r28, 0x22	; 34
    63c6:	8f af       	std	Y+63, r24	; 0x3f
    63c8:	a2 97       	sbiw	r28, 0x22	; 34
    63ca:	64 96       	adiw	r28, 0x14	; 20
    63cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    63ce:	64 97       	sbiw	r28, 0x14	; 20
    63d0:	24 96       	adiw	r28, 0x04	; 4
    63d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    63d4:	24 97       	sbiw	r28, 0x04	; 4
    63d6:	98 17       	cp	r25, r24
    63d8:	18 f0       	brcs	.+6      	; 0x63e0 <LCD_enuDisplayNumber+0x506>
    63da:	a2 96       	adiw	r28, 0x22	; 34
    63dc:	1f ae       	std	Y+63, r1	; 0x3f
    63de:	a2 97       	sbiw	r28, 0x22	; 34
    63e0:	6f 96       	adiw	r28, 0x1f	; 31
    63e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    63e4:	6f 97       	sbiw	r28, 0x1f	; 31
    63e6:	64 96       	adiw	r28, 0x14	; 20
    63e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    63ea:	64 97       	sbiw	r28, 0x14	; 20
    63ec:	98 0f       	add	r25, r24
    63ee:	a3 96       	adiw	r28, 0x23	; 35
    63f0:	9f af       	std	Y+63, r25	; 0x3f
    63f2:	a3 97       	sbiw	r28, 0x23	; 35
    63f4:	91 e0       	ldi	r25, 0x01	; 1
    63f6:	a4 96       	adiw	r28, 0x24	; 36
    63f8:	9f af       	std	Y+63, r25	; 0x3f
    63fa:	a4 97       	sbiw	r28, 0x24	; 36
    63fc:	a3 96       	adiw	r28, 0x23	; 35
    63fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    6400:	a3 97       	sbiw	r28, 0x23	; 35
    6402:	64 96       	adiw	r28, 0x14	; 20
    6404:	9f ad       	ldd	r25, Y+63	; 0x3f
    6406:	64 97       	sbiw	r28, 0x14	; 20
    6408:	89 17       	cp	r24, r25
    640a:	18 f0       	brcs	.+6      	; 0x6412 <LCD_enuDisplayNumber+0x538>
    640c:	a4 96       	adiw	r28, 0x24	; 36
    640e:	1f ae       	std	Y+63, r1	; 0x3f
    6410:	a4 97       	sbiw	r28, 0x24	; 36
    6412:	a2 96       	adiw	r28, 0x22	; 34
    6414:	8f ad       	ldd	r24, Y+63	; 0x3f
    6416:	a2 97       	sbiw	r28, 0x22	; 34
    6418:	a4 96       	adiw	r28, 0x24	; 36
    641a:	9f ad       	ldd	r25, Y+63	; 0x3f
    641c:	a4 97       	sbiw	r28, 0x24	; 36
    641e:	89 2b       	or	r24, r25
    6420:	a2 96       	adiw	r28, 0x22	; 34
    6422:	8f af       	std	Y+63, r24	; 0x3f
    6424:	a2 97       	sbiw	r28, 0x22	; 34
    6426:	a3 96       	adiw	r28, 0x23	; 35
    6428:	8f ad       	ldd	r24, Y+63	; 0x3f
    642a:	a3 97       	sbiw	r28, 0x23	; 35
    642c:	64 96       	adiw	r28, 0x14	; 20
    642e:	8f af       	std	Y+63, r24	; 0x3f
    6430:	64 97       	sbiw	r28, 0x14	; 20
    6432:	25 96       	adiw	r28, 0x05	; 5
    6434:	9f ad       	ldd	r25, Y+63	; 0x3f
    6436:	25 97       	sbiw	r28, 0x05	; 5
    6438:	2d 96       	adiw	r28, 0x0d	; 13
    643a:	8f ad       	ldd	r24, Y+63	; 0x3f
    643c:	2d 97       	sbiw	r28, 0x0d	; 13
    643e:	98 0f       	add	r25, r24
    6440:	65 96       	adiw	r28, 0x15	; 21
    6442:	9f af       	std	Y+63, r25	; 0x3f
    6444:	65 97       	sbiw	r28, 0x15	; 21
    6446:	91 e0       	ldi	r25, 0x01	; 1
    6448:	a5 96       	adiw	r28, 0x25	; 37
    644a:	9f af       	std	Y+63, r25	; 0x3f
    644c:	a5 97       	sbiw	r28, 0x25	; 37
    644e:	65 96       	adiw	r28, 0x15	; 21
    6450:	8f ad       	ldd	r24, Y+63	; 0x3f
    6452:	65 97       	sbiw	r28, 0x15	; 21
    6454:	25 96       	adiw	r28, 0x05	; 5
    6456:	9f ad       	ldd	r25, Y+63	; 0x3f
    6458:	25 97       	sbiw	r28, 0x05	; 5
    645a:	89 17       	cp	r24, r25
    645c:	18 f0       	brcs	.+6      	; 0x6464 <LCD_enuDisplayNumber+0x58a>
    645e:	a5 96       	adiw	r28, 0x25	; 37
    6460:	1f ae       	std	Y+63, r1	; 0x3f
    6462:	a5 97       	sbiw	r28, 0x25	; 37
    6464:	a2 96       	adiw	r28, 0x22	; 34
    6466:	8f ad       	ldd	r24, Y+63	; 0x3f
    6468:	a2 97       	sbiw	r28, 0x22	; 34
    646a:	65 96       	adiw	r28, 0x15	; 21
    646c:	9f ad       	ldd	r25, Y+63	; 0x3f
    646e:	65 97       	sbiw	r28, 0x15	; 21
    6470:	89 0f       	add	r24, r25
    6472:	a6 96       	adiw	r28, 0x26	; 38
    6474:	8f af       	std	Y+63, r24	; 0x3f
    6476:	a6 97       	sbiw	r28, 0x26	; 38
    6478:	81 e0       	ldi	r24, 0x01	; 1
    647a:	a7 96       	adiw	r28, 0x27	; 39
    647c:	8f af       	std	Y+63, r24	; 0x3f
    647e:	a7 97       	sbiw	r28, 0x27	; 39
    6480:	a6 96       	adiw	r28, 0x26	; 38
    6482:	9f ad       	ldd	r25, Y+63	; 0x3f
    6484:	a6 97       	sbiw	r28, 0x26	; 38
    6486:	65 96       	adiw	r28, 0x15	; 21
    6488:	8f ad       	ldd	r24, Y+63	; 0x3f
    648a:	65 97       	sbiw	r28, 0x15	; 21
    648c:	98 17       	cp	r25, r24
    648e:	18 f0       	brcs	.+6      	; 0x6496 <LCD_enuDisplayNumber+0x5bc>
    6490:	a7 96       	adiw	r28, 0x27	; 39
    6492:	1f ae       	std	Y+63, r1	; 0x3f
    6494:	a7 97       	sbiw	r28, 0x27	; 39
    6496:	a5 96       	adiw	r28, 0x25	; 37
    6498:	9f ad       	ldd	r25, Y+63	; 0x3f
    649a:	a5 97       	sbiw	r28, 0x25	; 37
    649c:	a7 96       	adiw	r28, 0x27	; 39
    649e:	8f ad       	ldd	r24, Y+63	; 0x3f
    64a0:	a7 97       	sbiw	r28, 0x27	; 39
    64a2:	98 2b       	or	r25, r24
    64a4:	a5 96       	adiw	r28, 0x25	; 37
    64a6:	9f af       	std	Y+63, r25	; 0x3f
    64a8:	a5 97       	sbiw	r28, 0x25	; 37
    64aa:	a6 96       	adiw	r28, 0x26	; 38
    64ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    64ae:	a6 97       	sbiw	r28, 0x26	; 38
    64b0:	65 96       	adiw	r28, 0x15	; 21
    64b2:	9f af       	std	Y+63, r25	; 0x3f
    64b4:	65 97       	sbiw	r28, 0x15	; 21
    64b6:	26 96       	adiw	r28, 0x06	; 6
    64b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    64ba:	26 97       	sbiw	r28, 0x06	; 6
    64bc:	2e 96       	adiw	r28, 0x0e	; 14
    64be:	9f ad       	ldd	r25, Y+63	; 0x3f
    64c0:	2e 97       	sbiw	r28, 0x0e	; 14
    64c2:	89 0f       	add	r24, r25
    64c4:	66 96       	adiw	r28, 0x16	; 22
    64c6:	8f af       	std	Y+63, r24	; 0x3f
    64c8:	66 97       	sbiw	r28, 0x16	; 22
    64ca:	81 e0       	ldi	r24, 0x01	; 1
    64cc:	a8 96       	adiw	r28, 0x28	; 40
    64ce:	8f af       	std	Y+63, r24	; 0x3f
    64d0:	a8 97       	sbiw	r28, 0x28	; 40
    64d2:	66 96       	adiw	r28, 0x16	; 22
    64d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    64d6:	66 97       	sbiw	r28, 0x16	; 22
    64d8:	26 96       	adiw	r28, 0x06	; 6
    64da:	8f ad       	ldd	r24, Y+63	; 0x3f
    64dc:	26 97       	sbiw	r28, 0x06	; 6
    64de:	98 17       	cp	r25, r24
    64e0:	18 f0       	brcs	.+6      	; 0x64e8 <LCD_enuDisplayNumber+0x60e>
    64e2:	a8 96       	adiw	r28, 0x28	; 40
    64e4:	1f ae       	std	Y+63, r1	; 0x3f
    64e6:	a8 97       	sbiw	r28, 0x28	; 40
    64e8:	a5 96       	adiw	r28, 0x25	; 37
    64ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    64ec:	a5 97       	sbiw	r28, 0x25	; 37
    64ee:	66 96       	adiw	r28, 0x16	; 22
    64f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    64f2:	66 97       	sbiw	r28, 0x16	; 22
    64f4:	98 0f       	add	r25, r24
    64f6:	a9 96       	adiw	r28, 0x29	; 41
    64f8:	9f af       	std	Y+63, r25	; 0x3f
    64fa:	a9 97       	sbiw	r28, 0x29	; 41
    64fc:	91 e0       	ldi	r25, 0x01	; 1
    64fe:	aa 96       	adiw	r28, 0x2a	; 42
    6500:	9f af       	std	Y+63, r25	; 0x3f
    6502:	aa 97       	sbiw	r28, 0x2a	; 42
    6504:	a9 96       	adiw	r28, 0x29	; 41
    6506:	8f ad       	ldd	r24, Y+63	; 0x3f
    6508:	a9 97       	sbiw	r28, 0x29	; 41
    650a:	66 96       	adiw	r28, 0x16	; 22
    650c:	9f ad       	ldd	r25, Y+63	; 0x3f
    650e:	66 97       	sbiw	r28, 0x16	; 22
    6510:	89 17       	cp	r24, r25
    6512:	18 f0       	brcs	.+6      	; 0x651a <LCD_enuDisplayNumber+0x640>
    6514:	aa 96       	adiw	r28, 0x2a	; 42
    6516:	1f ae       	std	Y+63, r1	; 0x3f
    6518:	aa 97       	sbiw	r28, 0x2a	; 42
    651a:	a8 96       	adiw	r28, 0x28	; 40
    651c:	8f ad       	ldd	r24, Y+63	; 0x3f
    651e:	a8 97       	sbiw	r28, 0x28	; 40
    6520:	aa 96       	adiw	r28, 0x2a	; 42
    6522:	9f ad       	ldd	r25, Y+63	; 0x3f
    6524:	aa 97       	sbiw	r28, 0x2a	; 42
    6526:	89 2b       	or	r24, r25
    6528:	a8 96       	adiw	r28, 0x28	; 40
    652a:	8f af       	std	Y+63, r24	; 0x3f
    652c:	a8 97       	sbiw	r28, 0x28	; 40
    652e:	a9 96       	adiw	r28, 0x29	; 41
    6530:	8f ad       	ldd	r24, Y+63	; 0x3f
    6532:	a9 97       	sbiw	r28, 0x29	; 41
    6534:	66 96       	adiw	r28, 0x16	; 22
    6536:	8f af       	std	Y+63, r24	; 0x3f
    6538:	66 97       	sbiw	r28, 0x16	; 22
    653a:	27 96       	adiw	r28, 0x07	; 7
    653c:	9f ad       	ldd	r25, Y+63	; 0x3f
    653e:	27 97       	sbiw	r28, 0x07	; 7
    6540:	2f 96       	adiw	r28, 0x0f	; 15
    6542:	8f ad       	ldd	r24, Y+63	; 0x3f
    6544:	2f 97       	sbiw	r28, 0x0f	; 15
    6546:	98 0f       	add	r25, r24
    6548:	67 96       	adiw	r28, 0x17	; 23
    654a:	9f af       	std	Y+63, r25	; 0x3f
    654c:	67 97       	sbiw	r28, 0x17	; 23
    654e:	a8 96       	adiw	r28, 0x28	; 40
    6550:	8f ad       	ldd	r24, Y+63	; 0x3f
    6552:	a8 97       	sbiw	r28, 0x28	; 40
    6554:	67 96       	adiw	r28, 0x17	; 23
    6556:	9f ad       	ldd	r25, Y+63	; 0x3f
    6558:	67 97       	sbiw	r28, 0x17	; 23
    655a:	89 0f       	add	r24, r25
    655c:	67 96       	adiw	r28, 0x17	; 23
    655e:	8f af       	std	Y+63, r24	; 0x3f
    6560:	67 97       	sbiw	r28, 0x17	; 23
    6562:	60 96       	adiw	r28, 0x10	; 16
    6564:	8f ad       	ldd	r24, Y+63	; 0x3f
    6566:	60 97       	sbiw	r28, 0x10	; 16
    6568:	89 83       	std	Y+1, r24	; 0x01
    656a:	61 96       	adiw	r28, 0x11	; 17
    656c:	9f ad       	ldd	r25, Y+63	; 0x3f
    656e:	61 97       	sbiw	r28, 0x11	; 17
    6570:	9a 83       	std	Y+2, r25	; 0x02
    6572:	62 96       	adiw	r28, 0x12	; 18
    6574:	8f ad       	ldd	r24, Y+63	; 0x3f
    6576:	62 97       	sbiw	r28, 0x12	; 18
    6578:	8b 83       	std	Y+3, r24	; 0x03
    657a:	63 96       	adiw	r28, 0x13	; 19
    657c:	9f ad       	ldd	r25, Y+63	; 0x3f
    657e:	63 97       	sbiw	r28, 0x13	; 19
    6580:	9c 83       	std	Y+4, r25	; 0x04
    6582:	64 96       	adiw	r28, 0x14	; 20
    6584:	8f ad       	ldd	r24, Y+63	; 0x3f
    6586:	64 97       	sbiw	r28, 0x14	; 20
    6588:	8d 83       	std	Y+5, r24	; 0x05
    658a:	65 96       	adiw	r28, 0x15	; 21
    658c:	9f ad       	ldd	r25, Y+63	; 0x3f
    658e:	65 97       	sbiw	r28, 0x15	; 21
    6590:	9e 83       	std	Y+6, r25	; 0x06
    6592:	66 96       	adiw	r28, 0x16	; 22
    6594:	8f ad       	ldd	r24, Y+63	; 0x3f
    6596:	66 97       	sbiw	r28, 0x16	; 22
    6598:	8f 83       	std	Y+7, r24	; 0x07
    659a:	67 96       	adiw	r28, 0x17	; 23
    659c:	9f ad       	ldd	r25, Y+63	; 0x3f
    659e:	67 97       	sbiw	r28, 0x17	; 23
    65a0:	98 87       	std	Y+8, r25	; 0x08
		++Local_uint8Digits;
    65a2:	89 85       	ldd	r24, Y+9	; 0x09
    65a4:	8f 5f       	subi	r24, 0xFF	; 255
    65a6:	89 87       	std	Y+9, r24	; 0x09
	if(Copy_uint32Data < 0){
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_uint32Data *= -1;
	}

	while(Copy_uint32Data / Local_uint8Dividor){
    65a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    65aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    65ac:	4d 85       	ldd	r20, Y+13	; 0x0d
    65ae:	5e 85       	ldd	r21, Y+14	; 0x0e
    65b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    65b2:	78 89       	ldd	r23, Y+16	; 0x10
    65b4:	89 89       	ldd	r24, Y+17	; 0x11
    65b6:	9a 89       	ldd	r25, Y+18	; 0x12
    65b8:	a9 80       	ldd	r10, Y+1	; 0x01
    65ba:	ba 80       	ldd	r11, Y+2	; 0x02
    65bc:	cb 80       	ldd	r12, Y+3	; 0x03
    65be:	dc 80       	ldd	r13, Y+4	; 0x04
    65c0:	ed 80       	ldd	r14, Y+5	; 0x05
    65c2:	fe 80       	ldd	r15, Y+6	; 0x06
    65c4:	0f 81       	ldd	r16, Y+7	; 0x07
    65c6:	18 85       	ldd	r17, Y+8	; 0x08
    65c8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divdi3>
    65cc:	a2 2e       	mov	r10, r18
    65ce:	b3 2e       	mov	r11, r19
    65d0:	c4 2e       	mov	r12, r20
    65d2:	d5 2e       	mov	r13, r21
    65d4:	e6 2e       	mov	r14, r22
    65d6:	f7 2e       	mov	r15, r23
    65d8:	08 2f       	mov	r16, r24
    65da:	19 2f       	mov	r17, r25
    65dc:	2a 2d       	mov	r18, r10
    65de:	3b 2d       	mov	r19, r11
    65e0:	4c 2d       	mov	r20, r12
    65e2:	5d 2d       	mov	r21, r13
    65e4:	6e 2d       	mov	r22, r14
    65e6:	7f 2d       	mov	r23, r15
    65e8:	80 2f       	mov	r24, r16
    65ea:	91 2f       	mov	r25, r17
    65ec:	e2 2f       	mov	r30, r18
    65ee:	e3 2b       	or	r30, r19
    65f0:	e4 2b       	or	r30, r20
    65f2:	e5 2b       	or	r30, r21
    65f4:	e6 2b       	or	r30, r22
    65f6:	e7 2b       	or	r30, r23
    65f8:	e8 2b       	or	r30, r24
    65fa:	e9 2b       	or	r30, r25
    65fc:	ee 23       	and	r30, r30
    65fe:	09 f0       	breq	.+2      	; 0x6602 <LCD_enuDisplayNumber+0x728>
    6600:	99 cd       	rjmp	.-1230   	; 0x6134 <LCD_enuDisplayNumber+0x25a>
    6602:	7e c0       	rjmp	.+252    	; 0x6700 <LCD_enuDisplayNumber+0x826>
		Local_uint8Dividor *= 10;
		++Local_uint8Digits;
	}

	while(Local_uint8Digits--){
		Local_uint8Dividor /= 10;
    6604:	a9 80       	ldd	r10, Y+1	; 0x01
    6606:	ba 80       	ldd	r11, Y+2	; 0x02
    6608:	cb 80       	ldd	r12, Y+3	; 0x03
    660a:	dc 80       	ldd	r13, Y+4	; 0x04
    660c:	ed 80       	ldd	r14, Y+5	; 0x05
    660e:	fe 80       	ldd	r15, Y+6	; 0x06
    6610:	0f 81       	ldd	r16, Y+7	; 0x07
    6612:	18 85       	ldd	r17, Y+8	; 0x08
    6614:	2a 2d       	mov	r18, r10
    6616:	3b 2d       	mov	r19, r11
    6618:	4c 2d       	mov	r20, r12
    661a:	5d 2d       	mov	r21, r13
    661c:	6e 2d       	mov	r22, r14
    661e:	7f 2d       	mov	r23, r15
    6620:	80 2f       	mov	r24, r16
    6622:	91 2f       	mov	r25, r17
    6624:	0f 2e       	mov	r0, r31
    6626:	fa e0       	ldi	r31, 0x0A	; 10
    6628:	af 2e       	mov	r10, r31
    662a:	f0 2d       	mov	r31, r0
    662c:	bb 24       	eor	r11, r11
    662e:	cc 24       	eor	r12, r12
    6630:	dd 24       	eor	r13, r13
    6632:	ee 24       	eor	r14, r14
    6634:	ff 24       	eor	r15, r15
    6636:	00 e0       	ldi	r16, 0x00	; 0
    6638:	10 e0       	ldi	r17, 0x00	; 0
    663a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divdi3>
    663e:	a2 2e       	mov	r10, r18
    6640:	b3 2e       	mov	r11, r19
    6642:	c4 2e       	mov	r12, r20
    6644:	d5 2e       	mov	r13, r21
    6646:	e6 2e       	mov	r14, r22
    6648:	f7 2e       	mov	r15, r23
    664a:	08 2f       	mov	r16, r24
    664c:	19 2f       	mov	r17, r25
    664e:	a9 82       	std	Y+1, r10	; 0x01
    6650:	ba 82       	std	Y+2, r11	; 0x02
    6652:	cb 82       	std	Y+3, r12	; 0x03
    6654:	dc 82       	std	Y+4, r13	; 0x04
    6656:	ed 82       	std	Y+5, r14	; 0x05
    6658:	fe 82       	std	Y+6, r15	; 0x06
    665a:	0f 83       	std	Y+7, r16	; 0x07
    665c:	18 87       	std	Y+8, r17	; 0x08
		Local_enuErrorStates = LCD_enuSendData('0' + (Copy_uint32Data / Local_uint8Dividor));
    665e:	2b 85       	ldd	r18, Y+11	; 0x0b
    6660:	3c 85       	ldd	r19, Y+12	; 0x0c
    6662:	4d 85       	ldd	r20, Y+13	; 0x0d
    6664:	5e 85       	ldd	r21, Y+14	; 0x0e
    6666:	6f 85       	ldd	r22, Y+15	; 0x0f
    6668:	78 89       	ldd	r23, Y+16	; 0x10
    666a:	89 89       	ldd	r24, Y+17	; 0x11
    666c:	9a 89       	ldd	r25, Y+18	; 0x12
    666e:	a9 80       	ldd	r10, Y+1	; 0x01
    6670:	ba 80       	ldd	r11, Y+2	; 0x02
    6672:	cb 80       	ldd	r12, Y+3	; 0x03
    6674:	dc 80       	ldd	r13, Y+4	; 0x04
    6676:	ed 80       	ldd	r14, Y+5	; 0x05
    6678:	fe 80       	ldd	r15, Y+6	; 0x06
    667a:	0f 81       	ldd	r16, Y+7	; 0x07
    667c:	18 85       	ldd	r17, Y+8	; 0x08
    667e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divdi3>
    6682:	a2 2e       	mov	r10, r18
    6684:	b3 2e       	mov	r11, r19
    6686:	c4 2e       	mov	r12, r20
    6688:	d5 2e       	mov	r13, r21
    668a:	e6 2e       	mov	r14, r22
    668c:	f7 2e       	mov	r15, r23
    668e:	08 2f       	mov	r16, r24
    6690:	19 2f       	mov	r17, r25
    6692:	2a 2d       	mov	r18, r10
    6694:	3b 2d       	mov	r19, r11
    6696:	4c 2d       	mov	r20, r12
    6698:	5d 2d       	mov	r21, r13
    669a:	6e 2d       	mov	r22, r14
    669c:	7f 2d       	mov	r23, r15
    669e:	80 2f       	mov	r24, r16
    66a0:	91 2f       	mov	r25, r17
    66a2:	82 2f       	mov	r24, r18
    66a4:	80 5d       	subi	r24, 0xD0	; 208
    66a6:	0e 94 c2 28 	call	0x5184	; 0x5184 <LCD_enuSendData>
    66aa:	8a 87       	std	Y+10, r24	; 0x0a
		Copy_uint32Data -= ((Copy_uint32Data / Local_uint8Dividor) * Local_uint8Dividor);
    66ac:	ab 84       	ldd	r10, Y+11	; 0x0b
    66ae:	bc 84       	ldd	r11, Y+12	; 0x0c
    66b0:	cd 84       	ldd	r12, Y+13	; 0x0d
    66b2:	de 84       	ldd	r13, Y+14	; 0x0e
    66b4:	ef 84       	ldd	r14, Y+15	; 0x0f
    66b6:	f8 88       	ldd	r15, Y+16	; 0x10
    66b8:	09 89       	ldd	r16, Y+17	; 0x11
    66ba:	1a 89       	ldd	r17, Y+18	; 0x12
    66bc:	2a 2d       	mov	r18, r10
    66be:	3b 2d       	mov	r19, r11
    66c0:	4c 2d       	mov	r20, r12
    66c2:	5d 2d       	mov	r21, r13
    66c4:	6e 2d       	mov	r22, r14
    66c6:	7f 2d       	mov	r23, r15
    66c8:	80 2f       	mov	r24, r16
    66ca:	91 2f       	mov	r25, r17
    66cc:	a9 80       	ldd	r10, Y+1	; 0x01
    66ce:	ba 80       	ldd	r11, Y+2	; 0x02
    66d0:	cb 80       	ldd	r12, Y+3	; 0x03
    66d2:	dc 80       	ldd	r13, Y+4	; 0x04
    66d4:	ed 80       	ldd	r14, Y+5	; 0x05
    66d6:	fe 80       	ldd	r15, Y+6	; 0x06
    66d8:	0f 81       	ldd	r16, Y+7	; 0x07
    66da:	18 85       	ldd	r17, Y+8	; 0x08
    66dc:	0e 94 14 0b 	call	0x1628	; 0x1628 <__moddi3>
    66e0:	a2 2e       	mov	r10, r18
    66e2:	b3 2e       	mov	r11, r19
    66e4:	c4 2e       	mov	r12, r20
    66e6:	d5 2e       	mov	r13, r21
    66e8:	e6 2e       	mov	r14, r22
    66ea:	f7 2e       	mov	r15, r23
    66ec:	08 2f       	mov	r16, r24
    66ee:	19 2f       	mov	r17, r25
    66f0:	ab 86       	std	Y+11, r10	; 0x0b
    66f2:	bc 86       	std	Y+12, r11	; 0x0c
    66f4:	cd 86       	std	Y+13, r12	; 0x0d
    66f6:	de 86       	std	Y+14, r13	; 0x0e
    66f8:	ef 86       	std	Y+15, r14	; 0x0f
    66fa:	f8 8a       	std	Y+16, r15	; 0x10
    66fc:	09 8b       	std	Y+17, r16	; 0x11
    66fe:	1a 8b       	std	Y+18, r17	; 0x12
	while(Copy_uint32Data / Local_uint8Dividor){
		Local_uint8Dividor *= 10;
		++Local_uint8Digits;
	}

	while(Local_uint8Digits--){
    6700:	89 85       	ldd	r24, Y+9	; 0x09
    6702:	ab 96       	adiw	r28, 0x2b	; 43
    6704:	8f af       	std	Y+63, r24	; 0x3f
    6706:	ab 97       	sbiw	r28, 0x2b	; 43
    6708:	ab 96       	adiw	r28, 0x2b	; 43
    670a:	9f ad       	ldd	r25, Y+63	; 0x3f
    670c:	ab 97       	sbiw	r28, 0x2b	; 43
    670e:	99 23       	and	r25, r25
    6710:	21 f0       	breq	.+8      	; 0x671a <LCD_enuDisplayNumber+0x840>
    6712:	81 e0       	ldi	r24, 0x01	; 1
    6714:	ab 96       	adiw	r28, 0x2b	; 43
    6716:	8f af       	std	Y+63, r24	; 0x3f
    6718:	ab 97       	sbiw	r28, 0x2b	; 43
    671a:	ab 96       	adiw	r28, 0x2b	; 43
    671c:	8f ad       	ldd	r24, Y+63	; 0x3f
    671e:	ab 97       	sbiw	r28, 0x2b	; 43
    6720:	99 85       	ldd	r25, Y+9	; 0x09
    6722:	91 50       	subi	r25, 0x01	; 1
    6724:	99 87       	std	Y+9, r25	; 0x09
    6726:	88 23       	and	r24, r24
    6728:	09 f0       	breq	.+2      	; 0x672c <LCD_enuDisplayNumber+0x852>
    672a:	6c cf       	rjmp	.-296    	; 0x6604 <LCD_enuDisplayNumber+0x72a>
		Local_uint8Dividor /= 10;
		Local_enuErrorStates = LCD_enuSendData('0' + (Copy_uint32Data / Local_uint8Dividor));
		Copy_uint32Data -= ((Copy_uint32Data / Local_uint8Dividor) * Local_uint8Dividor);
	}

	return Local_enuErrorStates;
    672c:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    672e:	c6 59       	subi	r28, 0x96	; 150
    6730:	df 4f       	sbci	r29, 0xFF	; 255
    6732:	0f b6       	in	r0, 0x3f	; 63
    6734:	f8 94       	cli
    6736:	de bf       	out	0x3e, r29	; 62
    6738:	0f be       	out	0x3f, r0	; 63
    673a:	cd bf       	out	0x3d, r28	; 61
    673c:	cf 91       	pop	r28
    673e:	df 91       	pop	r29
    6740:	1f 91       	pop	r17
    6742:	0f 91       	pop	r16
    6744:	ff 90       	pop	r15
    6746:	ef 90       	pop	r14
    6748:	df 90       	pop	r13
    674a:	cf 90       	pop	r12
    674c:	bf 90       	pop	r11
    674e:	af 90       	pop	r10
    6750:	08 95       	ret

00006752 <main>:
#include "../HAL/LCD/LCD_config.h"
#include "../HAL/LCD/LCD_int.h"

#include "util/delay.h"

int main(void){
    6752:	df 93       	push	r29
    6754:	cf 93       	push	r28
    6756:	cd b7       	in	r28, 0x3d	; 61
    6758:	de b7       	in	r29, 0x3e	; 62
    675a:	ff cf       	rjmp	.-2      	; 0x675a <main+0x8>

0000675c <__mulsi3>:
    675c:	62 9f       	mul	r22, r18
    675e:	d0 01       	movw	r26, r0
    6760:	73 9f       	mul	r23, r19
    6762:	f0 01       	movw	r30, r0
    6764:	82 9f       	mul	r24, r18
    6766:	e0 0d       	add	r30, r0
    6768:	f1 1d       	adc	r31, r1
    676a:	64 9f       	mul	r22, r20
    676c:	e0 0d       	add	r30, r0
    676e:	f1 1d       	adc	r31, r1
    6770:	92 9f       	mul	r25, r18
    6772:	f0 0d       	add	r31, r0
    6774:	83 9f       	mul	r24, r19
    6776:	f0 0d       	add	r31, r0
    6778:	74 9f       	mul	r23, r20
    677a:	f0 0d       	add	r31, r0
    677c:	65 9f       	mul	r22, r21
    677e:	f0 0d       	add	r31, r0
    6780:	99 27       	eor	r25, r25
    6782:	72 9f       	mul	r23, r18
    6784:	b0 0d       	add	r27, r0
    6786:	e1 1d       	adc	r30, r1
    6788:	f9 1f       	adc	r31, r25
    678a:	63 9f       	mul	r22, r19
    678c:	b0 0d       	add	r27, r0
    678e:	e1 1d       	adc	r30, r1
    6790:	f9 1f       	adc	r31, r25
    6792:	bd 01       	movw	r22, r26
    6794:	cf 01       	movw	r24, r30
    6796:	11 24       	eor	r1, r1
    6798:	08 95       	ret

0000679a <__udivmodsi4>:
    679a:	a1 e2       	ldi	r26, 0x21	; 33
    679c:	1a 2e       	mov	r1, r26
    679e:	aa 1b       	sub	r26, r26
    67a0:	bb 1b       	sub	r27, r27
    67a2:	fd 01       	movw	r30, r26
    67a4:	0d c0       	rjmp	.+26     	; 0x67c0 <__udivmodsi4_ep>

000067a6 <__udivmodsi4_loop>:
    67a6:	aa 1f       	adc	r26, r26
    67a8:	bb 1f       	adc	r27, r27
    67aa:	ee 1f       	adc	r30, r30
    67ac:	ff 1f       	adc	r31, r31
    67ae:	a2 17       	cp	r26, r18
    67b0:	b3 07       	cpc	r27, r19
    67b2:	e4 07       	cpc	r30, r20
    67b4:	f5 07       	cpc	r31, r21
    67b6:	20 f0       	brcs	.+8      	; 0x67c0 <__udivmodsi4_ep>
    67b8:	a2 1b       	sub	r26, r18
    67ba:	b3 0b       	sbc	r27, r19
    67bc:	e4 0b       	sbc	r30, r20
    67be:	f5 0b       	sbc	r31, r21

000067c0 <__udivmodsi4_ep>:
    67c0:	66 1f       	adc	r22, r22
    67c2:	77 1f       	adc	r23, r23
    67c4:	88 1f       	adc	r24, r24
    67c6:	99 1f       	adc	r25, r25
    67c8:	1a 94       	dec	r1
    67ca:	69 f7       	brne	.-38     	; 0x67a6 <__udivmodsi4_loop>
    67cc:	60 95       	com	r22
    67ce:	70 95       	com	r23
    67d0:	80 95       	com	r24
    67d2:	90 95       	com	r25
    67d4:	9b 01       	movw	r18, r22
    67d6:	ac 01       	movw	r20, r24
    67d8:	bd 01       	movw	r22, r26
    67da:	cf 01       	movw	r24, r30
    67dc:	08 95       	ret

000067de <__prologue_saves__>:
    67de:	2f 92       	push	r2
    67e0:	3f 92       	push	r3
    67e2:	4f 92       	push	r4
    67e4:	5f 92       	push	r5
    67e6:	6f 92       	push	r6
    67e8:	7f 92       	push	r7
    67ea:	8f 92       	push	r8
    67ec:	9f 92       	push	r9
    67ee:	af 92       	push	r10
    67f0:	bf 92       	push	r11
    67f2:	cf 92       	push	r12
    67f4:	df 92       	push	r13
    67f6:	ef 92       	push	r14
    67f8:	ff 92       	push	r15
    67fa:	0f 93       	push	r16
    67fc:	1f 93       	push	r17
    67fe:	cf 93       	push	r28
    6800:	df 93       	push	r29
    6802:	cd b7       	in	r28, 0x3d	; 61
    6804:	de b7       	in	r29, 0x3e	; 62
    6806:	ca 1b       	sub	r28, r26
    6808:	db 0b       	sbc	r29, r27
    680a:	0f b6       	in	r0, 0x3f	; 63
    680c:	f8 94       	cli
    680e:	de bf       	out	0x3e, r29	; 62
    6810:	0f be       	out	0x3f, r0	; 63
    6812:	cd bf       	out	0x3d, r28	; 61
    6814:	09 94       	ijmp

00006816 <__epilogue_restores__>:
    6816:	2a 88       	ldd	r2, Y+18	; 0x12
    6818:	39 88       	ldd	r3, Y+17	; 0x11
    681a:	48 88       	ldd	r4, Y+16	; 0x10
    681c:	5f 84       	ldd	r5, Y+15	; 0x0f
    681e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6820:	7d 84       	ldd	r7, Y+13	; 0x0d
    6822:	8c 84       	ldd	r8, Y+12	; 0x0c
    6824:	9b 84       	ldd	r9, Y+11	; 0x0b
    6826:	aa 84       	ldd	r10, Y+10	; 0x0a
    6828:	b9 84       	ldd	r11, Y+9	; 0x09
    682a:	c8 84       	ldd	r12, Y+8	; 0x08
    682c:	df 80       	ldd	r13, Y+7	; 0x07
    682e:	ee 80       	ldd	r14, Y+6	; 0x06
    6830:	fd 80       	ldd	r15, Y+5	; 0x05
    6832:	0c 81       	ldd	r16, Y+4	; 0x04
    6834:	1b 81       	ldd	r17, Y+3	; 0x03
    6836:	aa 81       	ldd	r26, Y+2	; 0x02
    6838:	b9 81       	ldd	r27, Y+1	; 0x01
    683a:	ce 0f       	add	r28, r30
    683c:	d1 1d       	adc	r29, r1
    683e:	0f b6       	in	r0, 0x3f	; 63
    6840:	f8 94       	cli
    6842:	de bf       	out	0x3e, r29	; 62
    6844:	0f be       	out	0x3f, r0	; 63
    6846:	cd bf       	out	0x3d, r28	; 61
    6848:	ed 01       	movw	r28, r26
    684a:	08 95       	ret

0000684c <_exit>:
    684c:	f8 94       	cli

0000684e <__stop_program>:
    684e:	ff cf       	rjmp	.-2      	; 0x684e <__stop_program>
