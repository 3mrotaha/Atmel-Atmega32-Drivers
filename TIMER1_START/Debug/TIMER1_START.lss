
TIMER1_START.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000023b0  00002444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800168  00800168  0000254c  2**0
                  ALLOC
  3 .stab         00001db8  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000101c  00000000  00000000  00004304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  000054a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  00005674  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  00007800  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  00008a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  00009cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  00009fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__vector_6>
      1c:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_7>
      20:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__vector_8>
      24:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 38       	cpi	r26, 0x80	; 128
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 eb       	ldi	r30, 0xB0	; 176
      78:	f3 e2       	ldi	r31, 0x23	; 35
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <main>
      8a:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <TIMER1_enuInit>:
void *TIMER1_PfuntionsParameters[TIMER1_INTERRUPTS] = {NULL, NULL, NULL, NULL};

uint_32 TIMER1_AsyncOVFs = 0;
uint_32 TIMER1_AsyncPreload = 0;

ES_t TIMER1_enuInit(void){
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
	// SET TIMER1 PRESCALER
	TCCR1B &= ~(BIT_MASK3 << CS10_BIT);
     ddc:	ae e4       	ldi	r26, 0x4E	; 78
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ee e4       	ldi	r30, 0x4E	; 78
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 7f       	andi	r24, 0xF8	; 248
     de8:	8c 93       	st	X, r24
	TCCR1B |= (TIMER1_PRESCALER << CS10_BIT);
     dea:	ae e4       	ldi	r26, 0x4E	; 78
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ee e4       	ldi	r30, 0x4E	; 78
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	82 60       	ori	r24, 0x02	; 2
     df6:	8c 93       	st	X, r24

	// SET TIMER1 COMPARE MATCH A AND B
	TCCR1A &= ~(BIT_MASK4 << COM1B0_BIT);
     df8:	af e4       	ldi	r26, 0x4F	; 79
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ef e4       	ldi	r30, 0x4F	; 79
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8f 70       	andi	r24, 0x0F	; 15
     e04:	8c 93       	st	X, r24
	TCCR1A |= (TIMER1_COMPB_OUTPUT_MODE << COM1B0_BIT);
     e06:	af e4       	ldi	r26, 0x4F	; 79
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ef e4       	ldi	r30, 0x4F	; 79
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8c 93       	st	X, r24
	TCCR1A |= (TIMER1_COMPA_OUTPUT_MODE << COM1A0_BIT);
     e12:	af e4       	ldi	r26, 0x4F	; 79
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	ef e4       	ldi	r30, 0x4F	; 79
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8c 93       	st	X, r24

	// SET WAVE GENERATION MODE
	TCCR1A &= ~(BIT_MASK2 << WGM10_BIT);
     e1e:	af e4       	ldi	r26, 0x4F	; 79
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ef e4       	ldi	r30, 0x4F	; 79
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8c 7f       	andi	r24, 0xFC	; 252
     e2a:	8c 93       	st	X, r24
	TCCR1B &= ~(BIT_MASK2 << WGM12_BIT);
     e2c:	ae e4       	ldi	r26, 0x4E	; 78
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	ee e4       	ldi	r30, 0x4E	; 78
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	87 7e       	andi	r24, 0xE7	; 231
     e38:	8c 93       	st	X, r24
	TCCR1A |= ((TIMER1_WAVE_GEN_MODE & BIT_MASK2) << WGM10_BIT);
     e3a:	af e4       	ldi	r26, 0x4F	; 79
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ef e4       	ldi	r30, 0x4F	; 79
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8c 93       	st	X, r24
	TCCR1B |= (((TIMER1_WAVE_GEN_MODE >> 2) & BIT_MASK2) << WGM12_BIT);
     e46:	ae e4       	ldi	r26, 0x4E	; 78
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ee e4       	ldi	r30, 0x4E	; 78
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8c 93       	st	X, r24

	return Local_enuErrorStates = ES_OK;
     e52:	19 82       	std	Y+1, r1	; 0x01
     e54:	89 81       	ldd	r24, Y+1	; 0x01
}
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <TIMER1_enuSyncDelay>:

ES_t TIMER1_enuSyncDelay(uint_32 Copy_uint32TimeMS){
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	2f 97       	sbiw	r28, 0x0f	; 15
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	9f 87       	std	Y+15, r25	; 0x0f
     e74:	8e 87       	std	Y+14, r24	; 0x0e
	ES_t Local_enuErrorStates = ES_NOK;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	8d 87       	std	Y+13, r24	; 0x0d

	f32 Local_TimeOVF = TIMER1_TOTAL_COUNTS * ((f32)TIMER1_PRESCALER_VALUE/TIMER1_FREQUANCY);
     e7a:	8c ee       	ldi	r24, 0xEC	; 236
     e7c:	91 e1       	ldi	r25, 0x11	; 17
     e7e:	a3 e0       	ldi	r26, 0x03	; 3
     e80:	b4 e4       	ldi	r27, 0x44	; 68
     e82:	89 87       	std	Y+9, r24	; 0x09
     e84:	9a 87       	std	Y+10, r25	; 0x0a
     e86:	ab 87       	std	Y+11, r26	; 0x0b
     e88:	bc 87       	std	Y+12, r27	; 0x0c
	f32 Local_NumOVF = (f32)Copy_uint32TimeMS / Local_TimeOVF;
     e8a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e8c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e8e:	cc 01       	movw	r24, r24
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	bc 01       	movw	r22, r24
     ea2:	cd 01       	movw	r24, r26
     ea4:	29 85       	ldd	r18, Y+9	; 0x09
     ea6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea8:	4b 85       	ldd	r20, Y+11	; 0x0b
     eaa:	5c 85       	ldd	r21, Y+12	; 0x0c
     eac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	af 83       	std	Y+7, r26	; 0x07
     eba:	b8 87       	std	Y+8, r27	; 0x08
	uint_32 Local_NumOVF_int = (uint_32) Local_NumOVF + 1;
     ebc:	6d 81       	ldd	r22, Y+5	; 0x05
     ebe:	7e 81       	ldd	r23, Y+6	; 0x06
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	9c 83       	std	Y+4, r25	; 0x04
     ed0:	8b 83       	std	Y+3, r24	; 0x03
	if((Local_NumOVF - (uint_32) Local_NumOVF)){
     ed2:	6d 81       	ldd	r22, Y+5	; 0x05
     ed4:	7e 81       	ldd	r23, Y+6	; 0x06
     ed6:	8f 81       	ldd	r24, Y+7	; 0x07
     ed8:	98 85       	ldd	r25, Y+8	; 0x08
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	cc 01       	movw	r24, r24
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	6d 81       	ldd	r22, Y+5	; 0x05
     ef6:	7e 81       	ldd	r23, Y+6	; 0x06
     ef8:	8f 81       	ldd	r24, Y+7	; 0x07
     efa:	98 85       	ldd	r25, Y+8	; 0x08
     efc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <TIMER1_enuSyncDelay+0xbc>
     f18:	53 c0       	rjmp	.+166    	; 0xfc0 <TIMER1_enuSyncDelay+0x162>
		uint_16 Local_uint16Preload = TIMER1_TOTAL_COUNTS - (TIMER1_TOTAL_COUNTS * (f32)(Local_NumOVF - (uint_32) Local_NumOVF));
     f1a:	6d 81       	ldd	r22, Y+5	; 0x05
     f1c:	7e 81       	ldd	r23, Y+6	; 0x06
     f1e:	8f 81       	ldd	r24, Y+7	; 0x07
     f20:	98 85       	ldd	r25, Y+8	; 0x08
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	cc 01       	movw	r24, r24
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f38:	9b 01       	movw	r18, r22
     f3a:	ac 01       	movw	r20, r24
     f3c:	6d 81       	ldd	r22, Y+5	; 0x05
     f3e:	7e 81       	ldd	r23, Y+6	; 0x06
     f40:	8f 81       	ldd	r24, Y+7	; 0x07
     f42:	98 85       	ldd	r25, Y+8	; 0x08
     f44:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 ec       	ldi	r21, 0xC7	; 199
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	4f e7       	ldi	r20, 0x7F	; 127
     f6a:	57 e4       	ldi	r21, 0x47	; 71
     f6c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
		TCNT1 = Local_uint16Preload;
     f84:	ec e4       	ldi	r30, 0x4C	; 76
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
     f90:	17 c0       	rjmp	.+46     	; 0xfc0 <TIMER1_enuSyncDelay+0x162>
	}

	while(Local_NumOVF_int){
		while(!((TIFR >> TOV1_BIT) & BIT_MASK1));
     f92:	e8 e5       	ldi	r30, 0x58	; 88
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	86 95       	lsr	r24
     f9a:	86 95       	lsr	r24
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	81 70       	andi	r24, 0x01	; 1
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	a9 f3       	breq	.-22     	; 0xf92 <TIMER1_enuSyncDelay+0x134>
		TIFR |= (BIT_MASK1 << TOV1_BIT);
     fa8:	a8 e5       	ldi	r26, 0x58	; 88
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e8 e5       	ldi	r30, 0x58	; 88
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	84 60       	ori	r24, 0x04	; 4
     fb4:	8c 93       	st	X, r24
		Local_NumOVF_int -= 1;
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	8b 83       	std	Y+3, r24	; 0x03
	if((Local_NumOVF - (uint_32) Local_NumOVF)){
		uint_16 Local_uint16Preload = TIMER1_TOTAL_COUNTS - (TIMER1_TOTAL_COUNTS * (f32)(Local_NumOVF - (uint_32) Local_NumOVF));
		TCNT1 = Local_uint16Preload;
	}

	while(Local_NumOVF_int){
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	29 f7       	brne	.-54     	; 0xf92 <TIMER1_enuSyncDelay+0x134>
		while(!((TIFR >> TOV1_BIT) & BIT_MASK1));
		TIFR |= (BIT_MASK1 << TOV1_BIT);
		Local_NumOVF_int -= 1;
	}

	return Local_enuErrorStates = ES_OK;
     fc8:	1d 86       	std	Y+13, r1	; 0x0d
     fca:	8d 85       	ldd	r24, Y+13	; 0x0d
}
     fcc:	2f 96       	adiw	r28, 0x0f	; 15
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <TIMER1_enuASyncDelay>:

ES_t TIMER1_enuASyncDelay(uint_32 Copy_uint32TimeMS, void (*Copy_pfDelay) (void*), void* Copy_pParameter){
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	63 97       	sbiw	r28, 0x13	; 19
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	9f 87       	std	Y+15, r25	; 0x0f
     ff4:	8e 87       	std	Y+14, r24	; 0x0e
     ff6:	79 8b       	std	Y+17, r23	; 0x11
     ff8:	68 8b       	std	Y+16, r22	; 0x10
     ffa:	5b 8b       	std	Y+19, r21	; 0x13
     ffc:	4a 8b       	std	Y+18, r20	; 0x12
	ES_t Local_enuErrorStates = ES_NOK;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	8d 87       	std	Y+13, r24	; 0x0d
	f32 Local_TimeOVF = TIMER1_TOTAL_COUNTS * ((f32)TIMER1_PRESCALER_VALUE/TIMER1_FREQUANCY);
    1002:	8c ee       	ldi	r24, 0xEC	; 236
    1004:	91 e1       	ldi	r25, 0x11	; 17
    1006:	a3 e0       	ldi	r26, 0x03	; 3
    1008:	b4 e4       	ldi	r27, 0x44	; 68
    100a:	89 87       	std	Y+9, r24	; 0x09
    100c:	9a 87       	std	Y+10, r25	; 0x0a
    100e:	ab 87       	std	Y+11, r26	; 0x0b
    1010:	bc 87       	std	Y+12, r27	; 0x0c
	f32 Local_NumOVF = (f32)Copy_uint32TimeMS / Local_TimeOVF;
    1012:	8e 85       	ldd	r24, Y+14	; 0x0e
    1014:	9f 85       	ldd	r25, Y+15	; 0x0f
    1016:	cc 01       	movw	r24, r24
    1018:	a0 e0       	ldi	r26, 0x00	; 0
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	4b 85       	ldd	r20, Y+11	; 0x0b
    1032:	5c 85       	ldd	r21, Y+12	; 0x0c
    1034:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	af 83       	std	Y+7, r26	; 0x07
    1042:	b8 87       	std	Y+8, r27	; 0x08
	uint_32 Local_NumOVF_int = (uint_32) Local_NumOVF + 1;
    1044:	6d 81       	ldd	r22, Y+5	; 0x05
    1046:	7e 81       	ldd	r23, Y+6	; 0x06
    1048:	8f 81       	ldd	r24, Y+7	; 0x07
    104a:	98 85       	ldd	r25, Y+8	; 0x08
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
	if((Local_NumOVF - (uint_32) Local_NumOVF)){
    105a:	6d 81       	ldd	r22, Y+5	; 0x05
    105c:	7e 81       	ldd	r23, Y+6	; 0x06
    105e:	8f 81       	ldd	r24, Y+7	; 0x07
    1060:	98 85       	ldd	r25, Y+8	; 0x08
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	cc 01       	movw	r24, r24
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	6d 81       	ldd	r22, Y+5	; 0x05
    107e:	7e 81       	ldd	r23, Y+6	; 0x06
    1080:	8f 81       	ldd	r24, Y+7	; 0x07
    1082:	98 85       	ldd	r25, Y+8	; 0x08
    1084:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    109c:	88 23       	and	r24, r24
    109e:	09 f4       	brne	.+2      	; 0x10a2 <TIMER1_enuASyncDelay+0xc4>
    10a0:	41 c0       	rjmp	.+130    	; 0x1124 <TIMER1_enuASyncDelay+0x146>
		uint_16 Local_uint16Preload = TIMER1_TOTAL_COUNTS - (TIMER1_TOTAL_COUNTS * (f32)(Local_NumOVF - (uint_32) Local_NumOVF));
    10a2:	6d 81       	ldd	r22, Y+5	; 0x05
    10a4:	7e 81       	ldd	r23, Y+6	; 0x06
    10a6:	8f 81       	ldd	r24, Y+7	; 0x07
    10a8:	98 85       	ldd	r25, Y+8	; 0x08
    10aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	cc 01       	movw	r24, r24
    10b4:	a0 e0       	ldi	r26, 0x00	; 0
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	6d 81       	ldd	r22, Y+5	; 0x05
    10c6:	7e 81       	ldd	r23, Y+6	; 0x06
    10c8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ca:	98 85       	ldd	r25, Y+8	; 0x08
    10cc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	3f ef       	ldi	r19, 0xFF	; 255
    10dc:	4f e7       	ldi	r20, 0x7F	; 127
    10de:	57 ec       	ldi	r21, 0xC7	; 199
    10e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	57 e4       	ldi	r21, 0x47	; 71
    10f4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
		TCNT1 = Local_uint16Preload;
    110c:	ec e4       	ldi	r30, 0x4C	; 76
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
		TIMER1_AsyncPreload = Local_uint16Preload;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	90 93 7b 01 	sts	0x017B, r25
    1120:	80 93 7a 01 	sts	0x017A, r24
	}

	TIMER1_AsyncOVFs = Local_NumOVF_int;
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	90 93 79 01 	sts	0x0179, r25
    112c:	80 93 78 01 	sts	0x0178, r24
	if(Copy_pfDelay != NULL){
    1130:	88 89       	ldd	r24, Y+16	; 0x10
    1132:	99 89       	ldd	r25, Y+17	; 0x11
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	e1 f0       	breq	.+56     	; 0x1170 <TIMER1_enuASyncDelay+0x192>
		TIMER1_PfInterruptFuncs[TIMER1_OVF_INT] = Copy_pfDelay;
    1138:	88 89       	ldd	r24, Y+16	; 0x10
    113a:	99 89       	ldd	r25, Y+17	; 0x11
    113c:	90 93 69 01 	sts	0x0169, r25
    1140:	80 93 68 01 	sts	0x0168, r24
		TIMER1_PfuntionsParameters[TIMER1_OVF_INT] = Copy_pParameter;
    1144:	8a 89       	ldd	r24, Y+18	; 0x12
    1146:	9b 89       	ldd	r25, Y+19	; 0x13
    1148:	90 93 71 01 	sts	0x0171, r25
    114c:	80 93 70 01 	sts	0x0170, r24
		TIMSK |= (BIT_MASK1 << TOIE1_BIT);
    1150:	a9 e5       	ldi	r26, 0x59	; 89
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e9 e5       	ldi	r30, 0x59	; 89
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	84 60       	ori	r24, 0x04	; 4
    115c:	8c 93       	st	X, r24
		SREG |= (BIT_MASK1 << I_BIT);
    115e:	af e5       	ldi	r26, 0x5F	; 95
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	ef e5       	ldi	r30, 0x5F	; 95
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	80 68       	ori	r24, 0x80	; 128
    116a:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    116c:	1d 86       	std	Y+13, r1	; 0x0d
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <TIMER1_enuASyncDelay+0x196>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	8d 87       	std	Y+13, r24	; 0x0d
	}
	return Local_enuErrorStates;
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1176:	63 96       	adiw	r28, 0x13	; 19
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <TIMER1_enuCompareOutput_OCR1A>:


ES_t TIMER1_enuCompareOutput_OCR1A(uint_16 Copy_uint16CompMatch, uint_8 Copy_CompMode, void (*Copy_pfCTC) (void*), void* Copy_pParameter){
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	28 97       	sbiw	r28, 0x08	; 8
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	9b 83       	std	Y+3, r25	; 0x03
    119e:	8a 83       	std	Y+2, r24	; 0x02
    11a0:	6c 83       	std	Y+4, r22	; 0x04
    11a2:	5e 83       	std	Y+6, r21	; 0x06
    11a4:	4d 83       	std	Y+5, r20	; 0x05
    11a6:	38 87       	std	Y+8, r19	; 0x08
    11a8:	2f 83       	std	Y+7, r18	; 0x07
	ES_t Local_enuErrorStates = ES_NOK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN5, OUTPUT);
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	65 e0       	ldi	r22, 0x05	; 5
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <DIO_enuSetPinDir>
	OCR1A = Copy_uint16CompMatch;
    11b8:	ea e4       	ldi	r30, 0x4A	; 74
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
	TCCR1A |= (Copy_CompMode << COM1A0_BIT);
    11c4:	af e4       	ldi	r26, 0x4F	; 79
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	ef e4       	ldi	r30, 0x4F	; 79
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	28 2f       	mov	r18, r24
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	00 24       	eor	r0, r0
    11d8:	96 95       	lsr	r25
    11da:	87 95       	ror	r24
    11dc:	07 94       	ror	r0
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	07 94       	ror	r0
    11e4:	98 2f       	mov	r25, r24
    11e6:	80 2d       	mov	r24, r0
    11e8:	82 2b       	or	r24, r18
    11ea:	8c 93       	st	X, r24

	if(Copy_pfCTC != NULL){
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	e1 f0       	breq	.+56     	; 0x122c <TIMER1_enuCompareOutput_OCR1A+0xa4>
		TIMER1_PfInterruptFuncs[TIMER1_COMPA_INT] = Copy_pfCTC;
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	90 93 6b 01 	sts	0x016B, r25
    11fc:	80 93 6a 01 	sts	0x016A, r24
		TIMER1_PfuntionsParameters[TIMER1_COMPA_INT] = Copy_pParameter;
    1200:	8f 81       	ldd	r24, Y+7	; 0x07
    1202:	98 85       	ldd	r25, Y+8	; 0x08
    1204:	90 93 73 01 	sts	0x0173, r25
    1208:	80 93 72 01 	sts	0x0172, r24
		TIMSK |= (BIT_MASK1 << OCIE1A_BIT);
    120c:	a9 e5       	ldi	r26, 0x59	; 89
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e9 e5       	ldi	r30, 0x59	; 89
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 61       	ori	r24, 0x10	; 16
    1218:	8c 93       	st	X, r24
		SREG |= (BIT_MASK1 << I_BIT);
    121a:	af e5       	ldi	r26, 0x5F	; 95
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ef e5       	ldi	r30, 0x5F	; 95
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 68       	ori	r24, 0x80	; 128
    1226:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <TIMER1_enuCompareOutput_OCR1A+0xa8>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	28 96       	adiw	r28, 0x08	; 8
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <TIMER1_enuCompareOutput_OCR1B>:

ES_t TIMER1_enuCompareOutput_OCR1B(uint_16 Copy_uint16CompMatch, uint_8 Copy_CompMode, void (*Copy_pfCTC) (void*), void* Copy_pParameter){
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	28 97       	sbiw	r28, 0x08	; 8
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	9b 83       	std	Y+3, r25	; 0x03
    125a:	8a 83       	std	Y+2, r24	; 0x02
    125c:	6c 83       	std	Y+4, r22	; 0x04
    125e:	5e 83       	std	Y+6, r21	; 0x06
    1260:	4d 83       	std	Y+5, r20	; 0x05
    1262:	38 87       	std	Y+8, r19	; 0x08
    1264:	2f 83       	std	Y+7, r18	; 0x07
	ES_t Local_enuErrorStates = ES_NOK;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01

		DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN5, OUTPUT);
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	65 e0       	ldi	r22, 0x05	; 5
    126e:	41 e0       	ldi	r20, 0x01	; 1
    1270:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <DIO_enuSetPinDir>
		OCR1B = Copy_uint16CompMatch;
    1274:	e8 e4       	ldi	r30, 0x48	; 72
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
		TCCR1A |= (Copy_CompMode << COM1B0_BIT);
    1280:	af e4       	ldi	r26, 0x4F	; 79
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef e4       	ldi	r30, 0x4F	; 79
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	28 2f       	mov	r18, r24
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	82 95       	swap	r24
    1294:	92 95       	swap	r25
    1296:	90 7f       	andi	r25, 0xF0	; 240
    1298:	98 27       	eor	r25, r24
    129a:	80 7f       	andi	r24, 0xF0	; 240
    129c:	98 27       	eor	r25, r24
    129e:	82 2b       	or	r24, r18
    12a0:	8c 93       	st	X, r24

		if(Copy_pfCTC != NULL){
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	e1 f0       	breq	.+56     	; 0x12e2 <TIMER1_enuCompareOutput_OCR1B+0x9e>
			TIMER1_PfInterruptFuncs[TIMER1_COMPB_INT] = Copy_pfCTC;
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	90 93 6d 01 	sts	0x016D, r25
    12b2:	80 93 6c 01 	sts	0x016C, r24
			TIMER1_PfuntionsParameters[TIMER1_COMPB_INT] = Copy_pParameter;
    12b6:	8f 81       	ldd	r24, Y+7	; 0x07
    12b8:	98 85       	ldd	r25, Y+8	; 0x08
    12ba:	90 93 75 01 	sts	0x0175, r25
    12be:	80 93 74 01 	sts	0x0174, r24
			TIMSK |= (BIT_MASK1 << OCIE1B_BIT);
    12c2:	a9 e5       	ldi	r26, 0x59	; 89
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e9 e5       	ldi	r30, 0x59	; 89
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	88 60       	ori	r24, 0x08	; 8
    12ce:	8c 93       	st	X, r24
			SREG |= (BIT_MASK1 << I_BIT);
    12d0:	af e5       	ldi	r26, 0x5F	; 95
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ef e5       	ldi	r30, 0x5F	; 95
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 68       	ori	r24, 0x80	; 128
    12dc:	8c 93       	st	X, r24
			Local_enuErrorStates = ES_OK;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <TIMER1_enuCompareOutput_OCR1B+0xa2>
		}
		else{
			Local_enuErrorStates = ES_NULL_POINTER;
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorStates;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e8:	28 96       	adiw	r28, 0x08	; 8
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <TIMER1_enuSetWaveMode>:

ES_t TIMER1_enuSetWaveMode(uint_8 Copy_uint8WaveMode,  uint_16 Copy_uint16TcntTop){
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <TIMER1_enuSetWaveMode+0x6>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <TIMER1_enuSetWaveMode+0x8>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	7c 83       	std	Y+4, r23	; 0x04
    130a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A &= ~(BIT_MASK2 << WGM10_BIT);
    1310:	af e4       	ldi	r26, 0x4F	; 79
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ef e4       	ldi	r30, 0x4F	; 79
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8c 7f       	andi	r24, 0xFC	; 252
    131c:	8c 93       	st	X, r24
	TCCR1B &= ~(BIT_MASK2 << WGM12_BIT);
    131e:	ae e4       	ldi	r26, 0x4E	; 78
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	ee e4       	ldi	r30, 0x4E	; 78
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	87 7e       	andi	r24, 0xE7	; 231
    132a:	8c 93       	st	X, r24
	TCCR1A |= ((Copy_uint8WaveMode & BIT_MASK2) << WGM10_BIT);
    132c:	af e4       	ldi	r26, 0x4F	; 79
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ef e4       	ldi	r30, 0x4F	; 79
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	98 2f       	mov	r25, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	83 70       	andi	r24, 0x03	; 3
    133c:	89 2b       	or	r24, r25
    133e:	8c 93       	st	X, r24
	TCCR1B |= (((Copy_uint8WaveMode >> 2) & BIT_MASK2) << WGM12_BIT);
    1340:	ae e4       	ldi	r26, 0x4E	; 78
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ee e4       	ldi	r30, 0x4E	; 78
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	86 95       	lsr	r24
    1350:	86 95       	lsr	r24
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	83 70       	andi	r24, 0x03	; 3
    1358:	90 70       	andi	r25, 0x00	; 0
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	82 2b       	or	r24, r18
    1368:	8c 93       	st	X, r24
	// Defining the top of tcnt1 by ocr1a or icr1
	if(Copy_uint8WaveMode == PWM_PHASE_AND_FREQUANCY_CORRECT_ICR_TOP ||Copy_uint8WaveMode == PWM_PHASE_CORRECT_ICR_TOP ||
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	88 30       	cpi	r24, 0x08	; 8
    136e:	49 f0       	breq	.+18     	; 0x1382 <TIMER1_enuSetWaveMode+0x88>
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	8a 30       	cpi	r24, 0x0A	; 10
    1374:	31 f0       	breq	.+12     	; 0x1382 <TIMER1_enuSetWaveMode+0x88>
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	8e 30       	cpi	r24, 0x0E	; 14
    137a:	19 f0       	breq	.+6      	; 0x1382 <TIMER1_enuSetWaveMode+0x88>
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	8c 30       	cpi	r24, 0x0C	; 12
    1380:	41 f4       	brne	.+16     	; 0x1392 <TIMER1_enuSetWaveMode+0x98>
			Copy_uint8WaveMode == FAST_PWM_ICR_TOP ||Copy_uint8WaveMode == CTC_MODE_ICR_TOP){
		// Defining the Top by ICR1
		ICR1 = Copy_uint16TcntTop;
    1382:	e6 e4       	ldi	r30, 0x46	; 70
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	80 83       	st	Z, r24
		Local_enuErrorStates = ES_OK;
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	16 c0       	rjmp	.+44     	; 0x13be <TIMER1_enuSetWaveMode+0xc4>
	}
	else if(Copy_uint8WaveMode == CTC_MODE_OCR_TOP || Copy_uint8WaveMode == PWM_PHASE_AND_FREQUANCY_CORRECT_OCR_TOP ||
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	49 f0       	breq	.+18     	; 0x13aa <TIMER1_enuSetWaveMode+0xb0>
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	89 30       	cpi	r24, 0x09	; 9
    139c:	31 f0       	breq	.+12     	; 0x13aa <TIMER1_enuSetWaveMode+0xb0>
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	8b 30       	cpi	r24, 0x0B	; 11
    13a2:	19 f0       	breq	.+6      	; 0x13aa <TIMER1_enuSetWaveMode+0xb0>
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	8f 30       	cpi	r24, 0x0F	; 15
    13a8:	41 f4       	brne	.+16     	; 0x13ba <TIMER1_enuSetWaveMode+0xc0>
			Copy_uint8WaveMode == PWM_PHASE_CORRECT_OCR_TOP || Copy_uint8WaveMode == FAST_PWM_OCR_TOP){
		// Defining the Top by OCR1A
		OCR1A = Copy_uint16TcntTop;
    13aa:	ea e4       	ldi	r30, 0x4A	; 74
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	91 83       	std	Z+1, r25	; 0x01
    13b4:	80 83       	st	Z, r24
		Local_enuErrorStates = ES_OK;
    13b6:	19 82       	std	Y+1, r1	; 0x01
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <TIMER1_enuSetWaveMode+0xc4>
	}
	else{
		Local_enuErrorStates = ES_TOP_IS_NOT_SELECTED;
    13ba:	8a e0       	ldi	r24, 0x0A	; 10
    13bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    13be:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <TIMER1_enuGeneratePWM_OC1A>:

ES_t TIMER1_enuGeneratePWM_OC1A(uint_16 Copy_uint16OCRAValue, uint_8 Copy_uint8CompMode){
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <TIMER1_enuGeneratePWM_OC1A+0x6>
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <TIMER1_enuGeneratePWM_OC1A+0x8>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	9b 83       	std	Y+3, r25	; 0x03
    13dc:	8a 83       	std	Y+2, r24	; 0x02
    13de:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN5, OUTPUT);
    13e4:	83 e0       	ldi	r24, 0x03	; 3
    13e6:	65 e0       	ldi	r22, 0x05	; 5
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <DIO_enuSetPinDir>
    13ee:	89 83       	std	Y+1, r24	; 0x01

	OCR1A = Copy_uint16OCRAValue;
    13f0:	ea e4       	ldi	r30, 0x4A	; 74
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	91 83       	std	Z+1, r25	; 0x01
    13fa:	80 83       	st	Z, r24

	TCCR1A &= ~(BIT_MASK2 << COM1A0_BIT);
    13fc:	af e4       	ldi	r26, 0x4F	; 79
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ef e4       	ldi	r30, 0x4F	; 79
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8f 73       	andi	r24, 0x3F	; 63
    1408:	8c 93       	st	X, r24
	TCCR1A |= (Copy_uint8CompMode << COM1A0_BIT);
    140a:	af e4       	ldi	r26, 0x4F	; 79
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	ef e4       	ldi	r30, 0x4F	; 79
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	00 24       	eor	r0, r0
    141e:	96 95       	lsr	r25
    1420:	87 95       	ror	r24
    1422:	07 94       	ror	r0
    1424:	96 95       	lsr	r25
    1426:	87 95       	ror	r24
    1428:	07 94       	ror	r0
    142a:	98 2f       	mov	r25, r24
    142c:	80 2d       	mov	r24, r0
    142e:	82 2b       	or	r24, r18
    1430:	8c 93       	st	X, r24

	return Local_enuErrorStates;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <TIMER1_enuGeneratePWM_OC1B>:

ES_t TIMER1_enuGeneratePWM_OC1B(uint_16 Copy_uint16OCRBValue, uint_8 Copy_uint8CompMode){
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <TIMER1_enuGeneratePWM_OC1B+0x6>
    1448:	00 d0       	rcall	.+0      	; 0x144a <TIMER1_enuGeneratePWM_OC1B+0x8>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	9b 83       	std	Y+3, r25	; 0x03
    1450:	8a 83       	std	Y+2, r24	; 0x02
    1452:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN4, OUTPUT);
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	64 e0       	ldi	r22, 0x04	; 4
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <DIO_enuSetPinDir>
    1462:	89 83       	std	Y+1, r24	; 0x01

	OCR1B = Copy_uint16OCRBValue;
    1464:	e8 e4       	ldi	r30, 0x48	; 72
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	80 83       	st	Z, r24

	TCCR1A &= ~(BIT_MASK2 << COM1B0_BIT);
    1470:	af e4       	ldi	r26, 0x4F	; 79
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ef e4       	ldi	r30, 0x4F	; 79
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	8f 7c       	andi	r24, 0xCF	; 207
    147c:	8c 93       	st	X, r24
	TCCR1A |= (Copy_uint8CompMode << COM1B0_BIT);
    147e:	af e4       	ldi	r26, 0x4F	; 79
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ef e4       	ldi	r30, 0x4F	; 79
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	28 2f       	mov	r18, r24
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	82 95       	swap	r24
    1492:	92 95       	swap	r25
    1494:	90 7f       	andi	r25, 0xF0	; 240
    1496:	98 27       	eor	r25, r24
    1498:	80 7f       	andi	r24, 0xF0	; 240
    149a:	98 27       	eor	r25, r24
    149c:	82 2b       	or	r24, r18
    149e:	8c 93       	st	X, r24

	return Local_enuErrorStates;
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <TIMER1_enuCTC_OC1A>:

ES_t TIMER1_enuCTC_OC1A(uint_16 Copy_uint16OCRAValue, uint_8 Copy_uint8CompMode){
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <TIMER1_enuCTC_OC1A+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <TIMER1_enuCTC_OC1A+0x8>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	9b 83       	std	Y+3, r25	; 0x03
    14be:	8a 83       	std	Y+2, r24	; 0x02
    14c0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN5, OUTPUT);
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	65 e0       	ldi	r22, 0x05	; 5
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <DIO_enuSetPinDir>
    14d0:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A &= ~(BIT_MASK2 << COM1A0_BIT);
    14d2:	af e4       	ldi	r26, 0x4F	; 79
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ef e4       	ldi	r30, 0x4F	; 79
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8f 73       	andi	r24, 0x3F	; 63
    14de:	8c 93       	st	X, r24
	TCCR1A |= (Copy_uint8CompMode << COM1A0_BIT);
    14e0:	af e4       	ldi	r26, 0x4F	; 79
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ef e4       	ldi	r30, 0x4F	; 79
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	00 24       	eor	r0, r0
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	07 94       	ror	r0
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	07 94       	ror	r0
    1500:	98 2f       	mov	r25, r24
    1502:	80 2d       	mov	r24, r0
    1504:	82 2b       	or	r24, r18
    1506:	8c 93       	st	X, r24

	OCR1A = Copy_uint16OCRAValue;
    1508:	ea e4       	ldi	r30, 0x4A	; 74
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	9b 81       	ldd	r25, Y+3	; 0x03
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24

	return Local_enuErrorState;
    1514:	89 81       	ldd	r24, Y+1	; 0x01
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <TIMER1_enuCTC_OC1B>:

ES_t TIMER1_enuCTC_OC1B(uint_16 Copy_uint16OCRBValue, uint_8 Copy_uint8CompMode){
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <TIMER1_enuCTC_OC1B+0x6>
    152a:	00 d0       	rcall	.+0      	; 0x152c <TIMER1_enuCTC_OC1B+0x8>
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9b 83       	std	Y+3, r25	; 0x03
    1532:	8a 83       	std	Y+2, r24	; 0x02
    1534:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN4, OUTPUT);
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	64 e0       	ldi	r22, 0x04	; 4
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <DIO_enuSetPinDir>
    1544:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A &= ~(BIT_MASK2 << COM1B0_BIT);
    1546:	af e4       	ldi	r26, 0x4F	; 79
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ef e4       	ldi	r30, 0x4F	; 79
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 7c       	andi	r24, 0xCF	; 207
    1552:	8c 93       	st	X, r24
	TCCR1A |= (Copy_uint8CompMode << COM1B0_BIT);
    1554:	af e4       	ldi	r26, 0x4F	; 79
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ef e4       	ldi	r30, 0x4F	; 79
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	28 2f       	mov	r18, r24
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	82 95       	swap	r24
    1568:	92 95       	swap	r25
    156a:	90 7f       	andi	r25, 0xF0	; 240
    156c:	98 27       	eor	r25, r24
    156e:	80 7f       	andi	r24, 0xF0	; 240
    1570:	98 27       	eor	r25, r24
    1572:	82 2b       	or	r24, r18
    1574:	8c 93       	st	X, r24

	OCR1B = Copy_uint16OCRBValue;
    1576:	e8 e4       	ldi	r30, 0x48	; 72
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	9b 81       	ldd	r25, Y+3	; 0x03
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24

	return Local_enuErrorState;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <TIMER1_enuInputCaptureEnable>:

ES_t TIMER1_enuInputCaptureEnable(uint_8 Copy_uint8NoiseCanceller, uint_8 Copy_uint8Edge){
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <TIMER1_enuInputCaptureEnable+0x6>
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates =  ES_NOK;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinDir(DIO_uint8_PORTD, DIO_uint8_PIN6, INPUT);
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	66 e0       	ldi	r22, 0x06	; 6
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <DIO_enuSetPinDir>
    15b0:	89 83       	std	Y+1, r24	; 0x01
	// Manipulate the Noise Canceller
	TCCR1B &= ~(BIT_MASK1 << ICNC_BIT);
    15b2:	ae e4       	ldi	r26, 0x4E	; 78
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ee e4       	ldi	r30, 0x4E	; 78
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8f 77       	andi	r24, 0x7F	; 127
    15be:	8c 93       	st	X, r24
	TCCR1B |= (Copy_uint8NoiseCanceller << ICNC_BIT);
    15c0:	ae e4       	ldi	r26, 0x4E	; 78
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ee e4       	ldi	r30, 0x4E	; 78
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	28 2f       	mov	r18, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	96 95       	lsr	r25
    15d4:	98 2f       	mov	r25, r24
    15d6:	88 27       	eor	r24, r24
    15d8:	97 95       	ror	r25
    15da:	87 95       	ror	r24
    15dc:	82 2b       	or	r24, r18
    15de:	8c 93       	st	X, r24

	// Detecting the Edge of Input Capture
	TCCR1B &= ~(BIT_MASK1 << ICES1_BIT);
    15e0:	ae e4       	ldi	r26, 0x4E	; 78
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ee e4       	ldi	r30, 0x4E	; 78
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 7b       	andi	r24, 0xBF	; 191
    15ec:	8c 93       	st	X, r24
	TCCR1B |= (Copy_uint8Edge << ICES1_BIT);
    15ee:	ae e4       	ldi	r26, 0x4E	; 78
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ee e4       	ldi	r30, 0x4E	; 78
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	28 2f       	mov	r18, r24
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	00 24       	eor	r0, r0
    1602:	96 95       	lsr	r25
    1604:	87 95       	ror	r24
    1606:	07 94       	ror	r0
    1608:	96 95       	lsr	r25
    160a:	87 95       	ror	r24
    160c:	07 94       	ror	r0
    160e:	98 2f       	mov	r25, r24
    1610:	80 2d       	mov	r24, r0
    1612:	82 2b       	or	r24, r18
    1614:	8c 93       	st	X, r24
	TIFR |= (BIT_MASK1 << ICF1_BIT);
    1616:	a8 e5       	ldi	r26, 0x58	; 88
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e8 e5       	ldi	r30, 0x58	; 88
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 62       	ori	r24, 0x20	; 32
    1622:	8c 93       	st	X, r24

	return Local_enuErrorStates;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <TIMER1_enuGetInputCapture>:

ES_t TIMER1_enuGetInputCapture(uint_16 *Copy_puint16CaptValue){
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <TIMER1_enuGetInputCapture+0x6>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	9b 83       	std	Y+3, r25	; 0x03
    1640:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_puint16CaptValue != NULL){
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	f1 f0       	breq	.+60     	; 0x168a <TIMER1_enuGetInputCapture+0x58>
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <TIMER1_enuGetInputCapture+0x2e>
		while(!((TIFR >> ICF1_BIT) & BIT_MASK1))
			*Copy_puint16CaptValue = ICR1;
    1650:	e6 e4       	ldi	r30, 0x46	; 70
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	91 81       	ldd	r25, Z+1	; 0x01
    1658:	ea 81       	ldd	r30, Y+2	; 0x02
    165a:	fb 81       	ldd	r31, Y+3	; 0x03
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
}

ES_t TIMER1_enuGetInputCapture(uint_16 *Copy_puint16CaptValue){
	ES_t Local_enuErrorStates = ES_NOK;
	if(Copy_puint16CaptValue != NULL){
		while(!((TIFR >> ICF1_BIT) & BIT_MASK1))
    1660:	e8 e5       	ldi	r30, 0x58	; 88
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	82 95       	swap	r24
    1668:	86 95       	lsr	r24
    166a:	87 70       	andi	r24, 0x07	; 7
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	90 70       	andi	r25, 0x00	; 0
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	61 f3       	breq	.-40     	; 0x1650 <TIMER1_enuGetInputCapture+0x1e>
			*Copy_puint16CaptValue = ICR1;
		TIFR |= (BIT_MASK1 << ICF1_BIT);
    1678:	a8 e5       	ldi	r26, 0x58	; 88
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e8 e5       	ldi	r30, 0x58	; 88
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 62       	ori	r24, 0x20	; 32
    1684:	8c 93       	st	X, r24
		Local_enuErrorStates = ES_OK;
    1686:	19 82       	std	Y+1, r1	; 0x01
    1688:	02 c0       	rjmp	.+4      	; 0x168e <TIMER1_enuGetInputCapture+0x5c>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    168e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <TIMER1_enuCallBack>:


ES_t TIMER1_enuCallBack(void (*Copy_PfFunctionConfig)(void*), void* Copy_Pparameter, uint_8 Copy_uint8InterruptType){
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <TIMER1_enuCallBack+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <TIMER1_enuCallBack+0x8>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <TIMER1_enuCallBack+0xa>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	9b 83       	std	Y+3, r25	; 0x03
    16ac:	8a 83       	std	Y+2, r24	; 0x02
    16ae:	7d 83       	std	Y+5, r23	; 0x05
    16b0:	6c 83       	std	Y+4, r22	; 0x04
    16b2:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorStates = ES_NOK;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PfFunctionConfig != NULL){
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	09 f4       	brne	.+2      	; 0x16c2 <TIMER1_enuCallBack+0x26>
    16c0:	76 c0       	rjmp	.+236    	; 0x17ae <TIMER1_enuCallBack+0x112>
		SREG |= (BIT_MASK1 << I_BIT);
    16c2:	af e5       	ldi	r26, 0x5F	; 95
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	ef e5       	ldi	r30, 0x5F	; 95
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	80 68       	ori	r24, 0x80	; 128
    16ce:	8c 93       	st	X, r24
		if(Copy_uint8InterruptType == TIMER1_COMPA_INT){
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	09 f5       	brne	.+66     	; 0x1718 <TIMER1_enuCallBack+0x7c>
			TIMER1_PfInterruptFuncs[Copy_uint8InterruptType] = Copy_PfFunctionConfig;
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	fc 01       	movw	r30, r24
    16e2:	e8 59       	subi	r30, 0x98	; 152
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
			TIMER1_PfuntionsParameters[Copy_uint8InterruptType] = Copy_Pparameter;
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	fc 01       	movw	r30, r24
    16fa:	e0 59       	subi	r30, 0x90	; 144
    16fc:	fe 4f       	sbci	r31, 0xFE	; 254
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
			TIMSK |= (BIT_MASK1 << OCIE1A_BIT);
    1706:	a9 e5       	ldi	r26, 0x59	; 89
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e9 e5       	ldi	r30, 0x59	; 89
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 61       	ori	r24, 0x10	; 16
    1712:	8c 93       	st	X, r24
			Local_enuErrorStates = ES_OK;
    1714:	19 82       	std	Y+1, r1	; 0x01
    1716:	4d c0       	rjmp	.+154    	; 0x17b2 <TIMER1_enuCallBack+0x116>
		}
		else if(Copy_uint8InterruptType == TIMER1_COMPB_INT){
    1718:	8e 81       	ldd	r24, Y+6	; 0x06
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	09 f5       	brne	.+66     	; 0x1760 <TIMER1_enuCallBack+0xc4>
			TIMER1_PfInterruptFuncs[Copy_uint8InterruptType] = Copy_PfFunctionConfig;
    171e:	8e 81       	ldd	r24, Y+6	; 0x06
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	fc 01       	movw	r30, r24
    172a:	e8 59       	subi	r30, 0x98	; 152
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	9b 81       	ldd	r25, Y+3	; 0x03
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	80 83       	st	Z, r24
			TIMER1_PfuntionsParameters[Copy_uint8InterruptType] = Copy_Pparameter;
    1736:	8e 81       	ldd	r24, Y+6	; 0x06
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	fc 01       	movw	r30, r24
    1742:	e0 59       	subi	r30, 0x90	; 144
    1744:	fe 4f       	sbci	r31, 0xFE	; 254
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
			TIMSK |= (BIT_MASK1 << OCIE1B_BIT);
    174e:	a9 e5       	ldi	r26, 0x59	; 89
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e9 e5       	ldi	r30, 0x59	; 89
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	88 60       	ori	r24, 0x08	; 8
    175a:	8c 93       	st	X, r24
			Local_enuErrorStates = ES_OK;
    175c:	19 82       	std	Y+1, r1	; 0x01
    175e:	29 c0       	rjmp	.+82     	; 0x17b2 <TIMER1_enuCallBack+0x116>
		}
		else if (Copy_uint8InterruptType == TIMER1_ICR_INT) {
    1760:	8e 81       	ldd	r24, Y+6	; 0x06
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	09 f5       	brne	.+66     	; 0x17a8 <TIMER1_enuCallBack+0x10c>
			TIMER1_PfInterruptFuncs[Copy_uint8InterruptType] = Copy_PfFunctionConfig;
    1766:	8e 81       	ldd	r24, Y+6	; 0x06
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	fc 01       	movw	r30, r24
    1772:	e8 59       	subi	r30, 0x98	; 152
    1774:	fe 4f       	sbci	r31, 0xFE	; 254
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	9b 81       	ldd	r25, Y+3	; 0x03
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
			TIMER1_PfuntionsParameters[Copy_uint8InterruptType] = Copy_Pparameter;
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	fc 01       	movw	r30, r24
    178a:	e0 59       	subi	r30, 0x90	; 144
    178c:	fe 4f       	sbci	r31, 0xFE	; 254
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	80 83       	st	Z, r24
			TIMSK |= (BIT_MASK1 << TICIE1_BIT);
    1796:	a9 e5       	ldi	r26, 0x59	; 89
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e9 e5       	ldi	r30, 0x59	; 89
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	80 62       	ori	r24, 0x20	; 32
    17a2:	8c 93       	st	X, r24
			Local_enuErrorStates = ES_OK;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <TIMER1_enuCallBack+0x116>
		}
		else{
			Local_enuErrorStates = ES_CALL_OUT_OF_RANGE;
    17a8:	8b e0       	ldi	r24, 0x0B	; 11
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <TIMER1_enuCallBack+0x116>
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b4:	26 96       	adiw	r28, 0x06	; 6
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <__vector_9>:

ISR(TIMER1_OVF_VECT){
    17c6:	1f 92       	push	r1
    17c8:	0f 92       	push	r0
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	0f 92       	push	r0
    17ce:	11 24       	eor	r1, r1
    17d0:	2f 93       	push	r18
    17d2:	3f 93       	push	r19
    17d4:	4f 93       	push	r20
    17d6:	5f 93       	push	r21
    17d8:	6f 93       	push	r22
    17da:	7f 93       	push	r23
    17dc:	8f 93       	push	r24
    17de:	9f 93       	push	r25
    17e0:	af 93       	push	r26
    17e2:	bf 93       	push	r27
    17e4:	ef 93       	push	r30
    17e6:	ff 93       	push	r31
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
	static uint_32 Local_uint32countOVF = 0;
	if(TIMER1_PfInterruptFuncs[TIMER1_OVF_INT] != NULL){
    17f0:	80 91 68 01 	lds	r24, 0x0168
    17f4:	90 91 69 01 	lds	r25, 0x0169
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	49 f1       	breq	.+82     	; 0x184e <__vector_9+0x88>
		Local_uint32countOVF++;
    17fc:	80 91 7c 01 	lds	r24, 0x017C
    1800:	90 91 7d 01 	lds	r25, 0x017D
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	90 93 7d 01 	sts	0x017D, r25
    180a:	80 93 7c 01 	sts	0x017C, r24
		if(Local_uint32countOVF == TIMER1_AsyncOVFs){
    180e:	20 91 7c 01 	lds	r18, 0x017C
    1812:	30 91 7d 01 	lds	r19, 0x017D
    1816:	80 91 78 01 	lds	r24, 0x0178
    181a:	90 91 79 01 	lds	r25, 0x0179
    181e:	28 17       	cp	r18, r24
    1820:	39 07       	cpc	r19, r25
    1822:	a9 f4       	brne	.+42     	; 0x184e <__vector_9+0x88>
			TIMER1_PfInterruptFuncs[TIMER1_OVF_INT](TIMER1_PfuntionsParameters[TIMER1_OVF_INT]);
    1824:	e0 91 68 01 	lds	r30, 0x0168
    1828:	f0 91 69 01 	lds	r31, 0x0169
    182c:	80 91 70 01 	lds	r24, 0x0170
    1830:	90 91 71 01 	lds	r25, 0x0171
    1834:	09 95       	icall
			Local_uint32countOVF = 0;
    1836:	10 92 7d 01 	sts	0x017D, r1
    183a:	10 92 7c 01 	sts	0x017C, r1
			TCNT1 = TIMER1_AsyncPreload;
    183e:	ec e4       	ldi	r30, 0x4C	; 76
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 91 7a 01 	lds	r24, 0x017A
    1846:	90 91 7b 01 	lds	r25, 0x017B
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	80 83       	st	Z, r24
		}
	}
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__vector_7>:

ISR(TIMER1_COMPA_VECT){
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_PfInterruptFuncs[TIMER1_COMPA_INT] != NULL){
    189e:	80 91 6a 01 	lds	r24, 0x016A
    18a2:	90 91 6b 01 	lds	r25, 0x016B
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	49 f0       	breq	.+18     	; 0x18bc <__vector_7+0x48>
		TIMER1_PfInterruptFuncs[TIMER1_COMPA_INT](TIMER1_PfuntionsParameters[TIMER1_COMPA_INT]);
    18aa:	e0 91 6a 01 	lds	r30, 0x016A
    18ae:	f0 91 6b 01 	lds	r31, 0x016B
    18b2:	80 91 72 01 	lds	r24, 0x0172
    18b6:	90 91 73 01 	lds	r25, 0x0173
    18ba:	09 95       	icall
	}
}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	ff 91       	pop	r31
    18c2:	ef 91       	pop	r30
    18c4:	bf 91       	pop	r27
    18c6:	af 91       	pop	r26
    18c8:	9f 91       	pop	r25
    18ca:	8f 91       	pop	r24
    18cc:	7f 91       	pop	r23
    18ce:	6f 91       	pop	r22
    18d0:	5f 91       	pop	r21
    18d2:	4f 91       	pop	r20
    18d4:	3f 91       	pop	r19
    18d6:	2f 91       	pop	r18
    18d8:	0f 90       	pop	r0
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	0f 90       	pop	r0
    18de:	1f 90       	pop	r1
    18e0:	18 95       	reti

000018e2 <__vector_8>:

ISR(TIMER1_COMPB_VECT){
    18e2:	1f 92       	push	r1
    18e4:	0f 92       	push	r0
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	0f 92       	push	r0
    18ea:	11 24       	eor	r1, r1
    18ec:	2f 93       	push	r18
    18ee:	3f 93       	push	r19
    18f0:	4f 93       	push	r20
    18f2:	5f 93       	push	r21
    18f4:	6f 93       	push	r22
    18f6:	7f 93       	push	r23
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	ef 93       	push	r30
    1902:	ff 93       	push	r31
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_PfInterruptFuncs[TIMER1_COMPB_INT] != NULL){
    190c:	80 91 6c 01 	lds	r24, 0x016C
    1910:	90 91 6d 01 	lds	r25, 0x016D
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	49 f0       	breq	.+18     	; 0x192a <__vector_8+0x48>
		TIMER1_PfInterruptFuncs[TIMER1_COMPB_INT](TIMER1_PfuntionsParameters[TIMER1_COMPB_INT]);
    1918:	e0 91 6c 01 	lds	r30, 0x016C
    191c:	f0 91 6d 01 	lds	r31, 0x016D
    1920:	80 91 74 01 	lds	r24, 0x0174
    1924:	90 91 75 01 	lds	r25, 0x0175
    1928:	09 95       	icall
	}
}
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	ff 91       	pop	r31
    1930:	ef 91       	pop	r30
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	7f 91       	pop	r23
    193c:	6f 91       	pop	r22
    193e:	5f 91       	pop	r21
    1940:	4f 91       	pop	r20
    1942:	3f 91       	pop	r19
    1944:	2f 91       	pop	r18
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <__vector_6>:

ISR(TIMER1_CAPT_VECT){
    1950:	1f 92       	push	r1
    1952:	0f 92       	push	r0
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	0f 92       	push	r0
    1958:	11 24       	eor	r1, r1
    195a:	2f 93       	push	r18
    195c:	3f 93       	push	r19
    195e:	4f 93       	push	r20
    1960:	5f 93       	push	r21
    1962:	6f 93       	push	r22
    1964:	7f 93       	push	r23
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_PfInterruptFuncs[TIMER1_ICR_INT] != NULL){
    197a:	80 91 6e 01 	lds	r24, 0x016E
    197e:	90 91 6f 01 	lds	r25, 0x016F
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	49 f0       	breq	.+18     	; 0x1998 <__vector_6+0x48>
		TIMER1_PfInterruptFuncs[TIMER1_ICR_INT](TIMER1_PfuntionsParameters[TIMER1_ICR_INT]);
    1986:	e0 91 6e 01 	lds	r30, 0x016E
    198a:	f0 91 6f 01 	lds	r31, 0x016F
    198e:	80 91 76 01 	lds	r24, 0x0176
    1992:	90 91 77 01 	lds	r25, 0x0177
    1996:	09 95       	icall
	}
}
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	ff 91       	pop	r31
    199e:	ef 91       	pop	r30
    19a0:	bf 91       	pop	r27
    19a2:	af 91       	pop	r26
    19a4:	9f 91       	pop	r25
    19a6:	8f 91       	pop	r24
    19a8:	7f 91       	pop	r23
    19aa:	6f 91       	pop	r22
    19ac:	5f 91       	pop	r21
    19ae:	4f 91       	pop	r20
    19b0:	3f 91       	pop	r19
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"



ES_t DIO_enuInit(void){
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(DIO_PA_PIN0_DIR, DIO_PA_PIN1_DIR, DIO_PA_PIN2_DIR, DIO_PA_PIN3_DIR, DIO_PA_PIN4_DIR, DIO_PA_PIN5_DIR, DIO_PA_PIN6_DIR, DIO_PA_PIN7_DIR);
    19cc:	ea e3       	ldi	r30, 0x3A	; 58
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	89 ed       	ldi	r24, 0xD9	; 217
    19d2:	80 83       	st	Z, r24
	DDRB = CONC(DIO_PB_PIN0_DIR, DIO_PB_PIN1_DIR, DIO_PB_PIN2_DIR, DIO_PB_PIN3_DIR, DIO_PB_PIN4_DIR, DIO_PB_PIN5_DIR, DIO_PB_PIN6_DIR, DIO_PB_PIN7_DIR);
    19d4:	e7 e3       	ldi	r30, 0x37	; 55
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	89 ed       	ldi	r24, 0xD9	; 217
    19da:	80 83       	st	Z, r24
	DDRC = CONC(DIO_PC_PIN0_DIR, DIO_PC_PIN1_DIR, DIO_PC_PIN2_DIR, DIO_PC_PIN3_DIR, DIO_PC_PIN4_DIR, DIO_PC_PIN5_DIR, DIO_PC_PIN6_DIR, DIO_PC_PIN7_DIR);
    19dc:	e4 e3       	ldi	r30, 0x34	; 52
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	89 ed       	ldi	r24, 0xD9	; 217
    19e2:	80 83       	st	Z, r24
	DDRD = CONC(DIO_PD_PIN0_DIR, DIO_PD_PIN1_DIR, DIO_PD_PIN2_DIR, DIO_PD_PIN3_DIR, DIO_PD_PIN4_DIR, DIO_PD_PIN5_DIR, DIO_PD_PIN6_DIR, DIO_PD_PIN7_DIR);
    19e4:	e1 e3       	ldi	r30, 0x31	; 49
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	89 ed       	ldi	r24, 0xD9	; 217
    19ea:	80 83       	st	Z, r24

	PORTA = CONC(DIO_PA_PIN0_VAL, DIO_PA_PIN1_VAL, DIO_PA_PIN2_VAL, DIO_PA_PIN3_VAL, DIO_PA_PIN4_VAL, DIO_PA_PIN5_VAL, DIO_PA_PIN6_VAL, DIO_PA_PIN7_VAL);
    19ec:	eb e3       	ldi	r30, 0x3B	; 59
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	8f e4       	ldi	r24, 0x4F	; 79
    19f2:	80 83       	st	Z, r24
	PORTB = CONC(DIO_PB_PIN0_VAL, DIO_PB_PIN1_VAL, DIO_PB_PIN2_VAL, DIO_PB_PIN3_VAL, DIO_PB_PIN4_VAL, DIO_PB_PIN5_VAL, DIO_PB_PIN6_VAL, DIO_PB_PIN7_VAL);
    19f4:	e8 e3       	ldi	r30, 0x38	; 56
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	8f e9       	ldi	r24, 0x9F	; 159
    19fa:	80 83       	st	Z, r24
	PORTC = CONC(DIO_PC_PIN0_VAL, DIO_PC_PIN1_VAL, DIO_PC_PIN2_VAL, DIO_PC_PIN3_VAL, DIO_PC_PIN4_VAL, DIO_PC_PIN5_VAL, DIO_PC_PIN6_VAL, DIO_PC_PIN7_VAL);
    19fc:	e5 e3       	ldi	r30, 0x35	; 53
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8f e9       	ldi	r24, 0x9F	; 159
    1a02:	80 83       	st	Z, r24
	PORTD = CONC(DIO_PD_PIN0_VAL, DIO_PD_PIN1_VAL, DIO_PD_PIN2_VAL, DIO_PD_PIN3_VAL, DIO_PD_PIN4_VAL, DIO_PD_PIN5_VAL, DIO_PD_PIN6_VAL, DIO_PD_PIN7_VAL);
    1a04:	e2 e3       	ldi	r30, 0x32	; 50
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8f e9       	ldi	r24, 0x9F	; 159
    1a0a:	80 83       	st	Z, r24

	return Local_enuErrorState = ES_OK;
    1a0c:	19 82       	std	Y+1, r1	; 0x01
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <DIO_enuSetPortDir>:

ES_t DIO_enuSetPortDir(uint_8 Copy_uint8PortID, uint_8 Copy_uint8Value){
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <DIO_enuSetPortDir+0x6>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <DIO_enuSetPortDir+0x8>
    1a20:	0f 92       	push	r0
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	8a 83       	std	Y+2, r24	; 0x02
    1a28:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	84 30       	cpi	r24, 0x04	; 4
    1a32:	a0 f5       	brcc	.+104    	; 0x1a9c <DIO_enuSetPortDir+0x84>

		switch(Copy_uint8PortID){
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3d 83       	std	Y+5, r19	; 0x05
    1a3c:	2c 83       	std	Y+4, r18	; 0x04
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	9d 81       	ldd	r25, Y+5	; 0x05
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	91 05       	cpc	r25, r1
    1a46:	d1 f0       	breq	.+52     	; 0x1a7c <DIO_enuSetPortDir+0x64>
    1a48:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <DIO_enuSetPortDir+0x44>
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	9d 81       	ldd	r25, Y+5	; 0x05
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <DIO_enuSetPortDir+0x5a>
    1a5a:	1e c0       	rjmp	.+60     	; 0x1a98 <DIO_enuSetPortDir+0x80>
    1a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	81 f0       	breq	.+32     	; 0x1a86 <DIO_enuSetPortDir+0x6e>
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	81 f0       	breq	.+32     	; 0x1a90 <DIO_enuSetPortDir+0x78>
    1a70:	13 c0       	rjmp	.+38     	; 0x1a98 <DIO_enuSetPortDir+0x80>
			case DIO_PORTA:
				DDRA =  Copy_uint8Value;
    1a72:	ea e3       	ldi	r30, 0x3A	; 58
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	80 83       	st	Z, r24
    1a7a:	0e c0       	rjmp	.+28     	; 0x1a98 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTB:
				DDRB =  Copy_uint8Value;
    1a7c:	e7 e3       	ldi	r30, 0x37	; 55
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	80 83       	st	Z, r24
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTC:
				DDRC =  Copy_uint8Value;
    1a86:	e4 e3       	ldi	r30, 0x34	; 52
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	80 83       	st	Z, r24
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <DIO_enuSetPortDir+0x80>
				break;
			case DIO_PORTD:
				DDRD =  Copy_uint8Value;
    1a90:	e1 e3       	ldi	r30, 0x31	; 49
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    1a98:	19 82       	std	Y+1, r1	; 0x01
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <DIO_enuSetPortDir+0x88>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8Value){
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <DIO_enuSetPortValue+0x6>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <DIO_enuSetPortValue+0x8>
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
    1ac2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	a0 f5       	brcc	.+104    	; 0x1b36 <DIO_enuSetPortValue+0x84>

		switch(Copy_uint8PortID){
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	3d 83       	std	Y+5, r19	; 0x05
    1ad6:	2c 83       	std	Y+4, r18	; 0x04
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	9d 81       	ldd	r25, Y+5	; 0x05
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	91 05       	cpc	r25, r1
    1ae0:	d1 f0       	breq	.+52     	; 0x1b16 <DIO_enuSetPortValue+0x64>
    1ae2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae6:	22 30       	cpi	r18, 0x02	; 2
    1ae8:	31 05       	cpc	r19, r1
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <DIO_enuSetPortValue+0x44>
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	9d 81       	ldd	r25, Y+5	; 0x05
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	61 f0       	breq	.+24     	; 0x1b0c <DIO_enuSetPortValue+0x5a>
    1af4:	1e c0       	rjmp	.+60     	; 0x1b32 <DIO_enuSetPortValue+0x80>
    1af6:	2c 81       	ldd	r18, Y+4	; 0x04
    1af8:	3d 81       	ldd	r19, Y+5	; 0x05
    1afa:	22 30       	cpi	r18, 0x02	; 2
    1afc:	31 05       	cpc	r19, r1
    1afe:	81 f0       	breq	.+32     	; 0x1b20 <DIO_enuSetPortValue+0x6e>
    1b00:	8c 81       	ldd	r24, Y+4	; 0x04
    1b02:	9d 81       	ldd	r25, Y+5	; 0x05
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	91 05       	cpc	r25, r1
    1b08:	81 f0       	breq	.+32     	; 0x1b2a <DIO_enuSetPortValue+0x78>
    1b0a:	13 c0       	rjmp	.+38     	; 0x1b32 <DIO_enuSetPortValue+0x80>
			case DIO_PORTA:
				PORTA =  Copy_uint8Value;
    1b0c:	eb e3       	ldi	r30, 0x3B	; 59
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	80 83       	st	Z, r24
    1b14:	0e c0       	rjmp	.+28     	; 0x1b32 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTB:
				PORTB =  Copy_uint8Value;
    1b16:	e8 e3       	ldi	r30, 0x38	; 56
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	80 83       	st	Z, r24
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTC:
				PORTC =  Copy_uint8Value;
    1b20:	e5 e3       	ldi	r30, 0x35	; 53
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	80 83       	st	Z, r24
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <DIO_enuSetPortValue+0x80>
				break;
			case DIO_PORTD:
				PORTD =  Copy_uint8Value;
    1b2a:	e2 e3       	ldi	r30, 0x32	; 50
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    1b32:	19 82       	std	Y+1, r1	; 0x01
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_enuSetPortValue+0x88>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(uint_8 Copy_uint8PortID){
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <DIO_enuTogPortValue+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <DIO_enuTogPortValue+0x8>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	84 30       	cpi	r24, 0x04	; 4
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <DIO_enuTogPortValue+0x1a>
    1b64:	40 c0       	rjmp	.+128    	; 0x1be6 <DIO_enuTogPortValue+0x9a>

		switch(Copy_uint8PortID){
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3c 83       	std	Y+4, r19	; 0x04
    1b6e:	2b 83       	std	Y+3, r18	; 0x03
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	e9 f0       	breq	.+58     	; 0x1bb4 <DIO_enuTogPortValue+0x68>
    1b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7e:	22 30       	cpi	r18, 0x02	; 2
    1b80:	31 05       	cpc	r19, r1
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <DIO_enuTogPortValue+0x42>
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	61 f0       	breq	.+24     	; 0x1ba4 <DIO_enuTogPortValue+0x58>
    1b8c:	2a c0       	rjmp	.+84     	; 0x1be2 <DIO_enuTogPortValue+0x96>
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	3c 81       	ldd	r19, Y+4	; 0x04
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	b1 f0       	breq	.+44     	; 0x1bc4 <DIO_enuTogPortValue+0x78>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	c9 f0       	breq	.+50     	; 0x1bd4 <DIO_enuTogPortValue+0x88>
    1ba2:	1f c0       	rjmp	.+62     	; 0x1be2 <DIO_enuTogPortValue+0x96>
			case DIO_PORTA:
				PORTA = ~PORTA ;
    1ba4:	ab e3       	ldi	r26, 0x3B	; 59
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	eb e3       	ldi	r30, 0x3B	; 59
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 95       	com	r24
    1bb0:	8c 93       	st	X, r24
    1bb2:	17 c0       	rjmp	.+46     	; 0x1be2 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTB:
				PORTB =  ~PORTB;
    1bb4:	a8 e3       	ldi	r26, 0x38	; 56
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e8 e3       	ldi	r30, 0x38	; 56
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	80 95       	com	r24
    1bc0:	8c 93       	st	X, r24
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTC:
				PORTC =  ~PORTC;
    1bc4:	a5 e3       	ldi	r26, 0x35	; 53
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e5 e3       	ldi	r30, 0x35	; 53
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	80 95       	com	r24
    1bd0:	8c 93       	st	X, r24
    1bd2:	07 c0       	rjmp	.+14     	; 0x1be2 <DIO_enuTogPortValue+0x96>
				break;
			case DIO_PORTD:
				PORTD =  ~PORTD;
    1bd4:	a2 e3       	ldi	r26, 0x32	; 50
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e2 e3       	ldi	r30, 0x32	; 50
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 95       	com	r24
    1be0:	8c 93       	st	X, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    1be2:	19 82       	std	Y+1, r1	; 0x01
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <DIO_enuTogPortValue+0x9e>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1be6:	83 e0       	ldi	r24, 0x03	; 3
    1be8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(uint_8 Copy_uint8PortID, uint_8 *Copy_uint8Value){
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <DIO_enuGetPortValue+0x6>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <DIO_enuGetPortValue+0x8>
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <DIO_enuGetPortValue+0xa>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	8a 83       	std	Y+2, r24	; 0x02
    1c0a:	7c 83       	std	Y+4, r23	; 0x04
    1c0c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	84 30       	cpi	r24, 0x04	; 4
    1c16:	e0 f5       	brcc	.+120    	; 0x1c90 <DIO_enuGetPortValue+0x96>

		switch(Copy_uint8PortID){
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	3e 83       	std	Y+6, r19	; 0x06
    1c20:	2d 83       	std	Y+5, r18	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	91 05       	cpc	r25, r1
    1c2a:	e1 f0       	breq	.+56     	; 0x1c64 <DIO_enuGetPortValue+0x6a>
    1c2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <DIO_enuGetPortValue+0x46>
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <DIO_enuGetPortValue+0x5c>
    1c3e:	26 c0       	rjmp	.+76     	; 0x1c8c <DIO_enuGetPortValue+0x92>
    1c40:	2d 81       	ldd	r18, Y+5	; 0x05
    1c42:	3e 81       	ldd	r19, Y+6	; 0x06
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	a1 f0       	breq	.+40     	; 0x1c72 <DIO_enuGetPortValue+0x78>
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	91 05       	cpc	r25, r1
    1c52:	b1 f0       	breq	.+44     	; 0x1c80 <DIO_enuGetPortValue+0x86>
    1c54:	1b c0       	rjmp	.+54     	; 0x1c8c <DIO_enuGetPortValue+0x92>
			case DIO_PORTA:
				*Copy_uint8Value = PINA;
    1c56:	e9 e3       	ldi	r30, 0x39	; 57
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c60:	80 83       	st	Z, r24
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTB:
				*Copy_uint8Value = PINB;
    1c64:	e6 e3       	ldi	r30, 0x36	; 54
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6e:	80 83       	st	Z, r24
    1c70:	0d c0       	rjmp	.+26     	; 0x1c8c <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTC:
				*Copy_uint8Value = PINC;
    1c72:	e3 e3       	ldi	r30, 0x33	; 51
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7c:	80 83       	st	Z, r24
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <DIO_enuGetPortValue+0x92>
				break;
			case DIO_PORTD:
				*Copy_uint8Value = PIND;
    1c80:	e0 e3       	ldi	r30, 0x30	; 48
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	eb 81       	ldd	r30, Y+3	; 0x03
    1c88:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8a:	80 83       	st	Z, r24
				break;
		}

		Local_enuErrorState = ES_OK;
    1c8c:	19 82       	std	Y+1, r1	; 0x01
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <DIO_enuGetPortValue+0x9a>
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1c90:	83 e0       	ldi	r24, 0x03	; 3
    1c92:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c96:	26 96       	adiw	r28, 0x06	; 6
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <DIO_enuSetPinDir>:

ES_t DIO_enuSetPinDir(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 Copy_uint8Value){
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <DIO_enuSetPinDir+0x6>
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <DIO_enuSetPinDir+0x8>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DIO_enuSetPinDir+0xa>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	8a 83       	std	Y+2, r24	; 0x02
    1cb8:	6b 83       	std	Y+3, r22	; 0x03
    1cba:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <DIO_enuSetPinDir+0x20>
    1cc6:	cf c0       	rjmp	.+414    	; 0x1e66 <DIO_enuSetPinDir+0x1be>
		if(Copy_uint8PinID <= DIO_PIN7){
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	88 30       	cpi	r24, 0x08	; 8
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <DIO_enuSetPinDir+0x28>
    1cce:	c8 c0       	rjmp	.+400    	; 0x1e60 <DIO_enuSetPinDir+0x1b8>
			switch(Copy_uint8PortID){
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3e 83       	std	Y+6, r19	; 0x06
    1cd8:	2d 83       	std	Y+5, r18	; 0x05
    1cda:	6d 81       	ldd	r22, Y+5	; 0x05
    1cdc:	7e 81       	ldd	r23, Y+6	; 0x06
    1cde:	61 30       	cpi	r22, 0x01	; 1
    1ce0:	71 05       	cpc	r23, r1
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <DIO_enuSetPinDir+0x3e>
    1ce4:	41 c0       	rjmp	.+130    	; 0x1d68 <DIO_enuSetPinDir+0xc0>
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	82 30       	cpi	r24, 0x02	; 2
    1cec:	91 05       	cpc	r25, r1
    1cee:	34 f4       	brge	.+12     	; 0x1cfc <DIO_enuSetPinDir+0x54>
    1cf0:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf2:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf4:	21 15       	cp	r18, r1
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	71 f0       	breq	.+28     	; 0x1d16 <DIO_enuSetPinDir+0x6e>
    1cfa:	b0 c0       	rjmp	.+352    	; 0x1e5c <DIO_enuSetPinDir+0x1b4>
    1cfc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cfe:	7e 81       	ldd	r23, Y+6	; 0x06
    1d00:	62 30       	cpi	r22, 0x02	; 2
    1d02:	71 05       	cpc	r23, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <DIO_enuSetPinDir+0x60>
    1d06:	59 c0       	rjmp	.+178    	; 0x1dba <DIO_enuSetPinDir+0x112>
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	83 30       	cpi	r24, 0x03	; 3
    1d0e:	91 05       	cpc	r25, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <DIO_enuSetPinDir+0x6c>
    1d12:	7c c0       	rjmp	.+248    	; 0x1e0c <DIO_enuSetPinDir+0x164>
    1d14:	a3 c0       	rjmp	.+326    	; 0x1e5c <DIO_enuSetPinDir+0x1b4>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK << Copy_uint8PinID);
    1d16:	aa e3       	ldi	r26, 0x3A	; 58
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	ea e3       	ldi	r30, 0x3A	; 58
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <DIO_enuSetPinDir+0x8a>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	2a 95       	dec	r18
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <DIO_enuSetPinDir+0x86>
    1d36:	80 95       	com	r24
    1d38:	84 23       	and	r24, r20
    1d3a:	8c 93       	st	X, r24
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
    1d3c:	aa e3       	ldi	r26, 0x3A	; 58
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ea e3       	ldi	r30, 0x3A	; 58
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	b9 01       	movw	r22, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <DIO_enuSetPinDir+0xb4>
    1d58:	66 0f       	add	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	8a 95       	dec	r24
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <DIO_enuSetPinDir+0xb0>
    1d60:	cb 01       	movw	r24, r22
    1d62:	84 2b       	or	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	7a c0       	rjmp	.+244    	; 0x1e5c <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK << Copy_uint8PinID);
    1d68:	a7 e3       	ldi	r26, 0x37	; 55
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e7 e3       	ldi	r30, 0x37	; 55
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <DIO_enuSetPinDir+0xdc>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	2a 95       	dec	r18
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <DIO_enuSetPinDir+0xd8>
    1d88:	80 95       	com	r24
    1d8a:	84 23       	and	r24, r20
    1d8c:	8c 93       	st	X, r24
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
    1d8e:	a7 e3       	ldi	r26, 0x37	; 55
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e7 e3       	ldi	r30, 0x37	; 55
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	b9 01       	movw	r22, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_enuSetPinDir+0x106>
    1daa:	66 0f       	add	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	8a 95       	dec	r24
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <DIO_enuSetPinDir+0x102>
    1db2:	cb 01       	movw	r24, r22
    1db4:	84 2b       	or	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	51 c0       	rjmp	.+162    	; 0x1e5c <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK << Copy_uint8PinID);
    1dba:	a4 e3       	ldi	r26, 0x34	; 52
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e4 e3       	ldi	r30, 0x34	; 52
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_enuSetPinDir+0x12e>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	2a 95       	dec	r18
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <DIO_enuSetPinDir+0x12a>
    1dda:	80 95       	com	r24
    1ddc:	84 23       	and	r24, r20
    1dde:	8c 93       	st	X, r24
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
    1de0:	a4 e3       	ldi	r26, 0x34	; 52
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e4 e3       	ldi	r30, 0x34	; 52
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	b9 01       	movw	r22, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_enuSetPinDir+0x158>
    1dfc:	66 0f       	add	r22, r22
    1dfe:	77 1f       	adc	r23, r23
    1e00:	8a 95       	dec	r24
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <DIO_enuSetPinDir+0x154>
    1e04:	cb 01       	movw	r24, r22
    1e06:	84 2b       	or	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	28 c0       	rjmp	.+80     	; 0x1e5c <DIO_enuSetPinDir+0x1b4>
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
    1e0c:	a1 e3       	ldi	r26, 0x31	; 49
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e1 e3       	ldi	r30, 0x31	; 49
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <DIO_enuSetPinDir+0x180>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	2a 95       	dec	r18
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <DIO_enuSetPinDir+0x17c>
    1e2c:	80 95       	com	r24
    1e2e:	84 23       	and	r24, r20
    1e30:	8c 93       	st	X, r24
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
    1e32:	a1 e3       	ldi	r26, 0x31	; 49
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e1 e3       	ldi	r30, 0x31	; 49
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	b9 01       	movw	r22, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_enuSetPinDir+0x1aa>
    1e4e:	66 0f       	add	r22, r22
    1e50:	77 1f       	adc	r23, r23
    1e52:	8a 95       	dec	r24
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <DIO_enuSetPinDir+0x1a6>
    1e56:	cb 01       	movw	r24, r22
    1e58:	84 2b       	or	r24, r20
    1e5a:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    1e5c:	19 82       	std	Y+1, r1	; 0x01
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <DIO_enuSetPinDir+0x1c2>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    1e60:	84 e0       	ldi	r24, 0x04	; 4
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <DIO_enuSetPinDir+0x1c2>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6c:	26 96       	adiw	r28, 0x06	; 6
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 Copy_uint8Value){
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <DIO_enuSetPinValue+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <DIO_enuSetPinValue+0x8>
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <DIO_enuSetPinValue+0xa>
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
    1e8e:	6b 83       	std	Y+3, r22	; 0x03
    1e90:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	84 30       	cpi	r24, 0x04	; 4
    1e9a:	08 f0       	brcs	.+2      	; 0x1e9e <DIO_enuSetPinValue+0x20>
    1e9c:	cf c0       	rjmp	.+414    	; 0x203c <DIO_enuSetPinValue+0x1be>
		if(Copy_uint8PinID <= DIO_PIN7){
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	88 30       	cpi	r24, 0x08	; 8
    1ea2:	08 f0       	brcs	.+2      	; 0x1ea6 <DIO_enuSetPinValue+0x28>
    1ea4:	c8 c0       	rjmp	.+400    	; 0x2036 <DIO_enuSetPinValue+0x1b8>
			switch(Copy_uint8PortID){
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	3e 83       	std	Y+6, r19	; 0x06
    1eae:	2d 83       	std	Y+5, r18	; 0x05
    1eb0:	6d 81       	ldd	r22, Y+5	; 0x05
    1eb2:	7e 81       	ldd	r23, Y+6	; 0x06
    1eb4:	61 30       	cpi	r22, 0x01	; 1
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <DIO_enuSetPinValue+0x3e>
    1eba:	41 c0       	rjmp	.+130    	; 0x1f3e <DIO_enuSetPinValue+0xc0>
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	34 f4       	brge	.+12     	; 0x1ed2 <DIO_enuSetPinValue+0x54>
    1ec6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ec8:	3e 81       	ldd	r19, Y+6	; 0x06
    1eca:	21 15       	cp	r18, r1
    1ecc:	31 05       	cpc	r19, r1
    1ece:	71 f0       	breq	.+28     	; 0x1eec <DIO_enuSetPinValue+0x6e>
    1ed0:	b0 c0       	rjmp	.+352    	; 0x2032 <DIO_enuSetPinValue+0x1b4>
    1ed2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ed4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ed6:	62 30       	cpi	r22, 0x02	; 2
    1ed8:	71 05       	cpc	r23, r1
    1eda:	09 f4       	brne	.+2      	; 0x1ede <DIO_enuSetPinValue+0x60>
    1edc:	59 c0       	rjmp	.+178    	; 0x1f90 <DIO_enuSetPinValue+0x112>
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <DIO_enuSetPinValue+0x6c>
    1ee8:	7c c0       	rjmp	.+248    	; 0x1fe2 <DIO_enuSetPinValue+0x164>
    1eea:	a3 c0       	rjmp	.+326    	; 0x2032 <DIO_enuSetPinValue+0x1b4>
				case DIO_PORTA:
					PORTA &= ~(BIT_MASK << Copy_uint8PinID);
    1eec:	ab e3       	ldi	r26, 0x3B	; 59
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	eb e3       	ldi	r30, 0x3B	; 59
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <DIO_enuSetPinValue+0x8a>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	2a 95       	dec	r18
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <DIO_enuSetPinValue+0x86>
    1f0c:	80 95       	com	r24
    1f0e:	84 23       	and	r24, r20
    1f10:	8c 93       	st	X, r24
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
    1f12:	ab e3       	ldi	r26, 0x3B	; 59
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	eb e3       	ldi	r30, 0x3B	; 59
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	88 2f       	mov	r24, r24
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	b9 01       	movw	r22, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <DIO_enuSetPinValue+0xb4>
    1f2e:	66 0f       	add	r22, r22
    1f30:	77 1f       	adc	r23, r23
    1f32:	8a 95       	dec	r24
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <DIO_enuSetPinValue+0xb0>
    1f36:	cb 01       	movw	r24, r22
    1f38:	84 2b       	or	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	7a c0       	rjmp	.+244    	; 0x2032 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTB:
					PORTB &= ~(BIT_MASK << Copy_uint8PinID);
    1f3e:	a8 e3       	ldi	r26, 0x38	; 56
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e8 e3       	ldi	r30, 0x38	; 56
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	48 2f       	mov	r20, r24
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <DIO_enuSetPinValue+0xdc>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	2a 95       	dec	r18
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <DIO_enuSetPinValue+0xd8>
    1f5e:	80 95       	com	r24
    1f60:	84 23       	and	r24, r20
    1f62:	8c 93       	st	X, r24
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
    1f64:	a8 e3       	ldi	r26, 0x38	; 56
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e8 e3       	ldi	r30, 0x38	; 56
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_enuSetPinValue+0x106>
    1f80:	66 0f       	add	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_enuSetPinValue+0x102>
    1f88:	cb 01       	movw	r24, r22
    1f8a:	84 2b       	or	r24, r20
    1f8c:	8c 93       	st	X, r24
    1f8e:	51 c0       	rjmp	.+162    	; 0x2032 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTC:
					PORTC &= ~(BIT_MASK << Copy_uint8PinID);
    1f90:	a5 e3       	ldi	r26, 0x35	; 53
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e5 e3       	ldi	r30, 0x35	; 53
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	48 2f       	mov	r20, r24
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <DIO_enuSetPinValue+0x12e>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	2a 95       	dec	r18
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <DIO_enuSetPinValue+0x12a>
    1fb0:	80 95       	com	r24
    1fb2:	84 23       	and	r24, r20
    1fb4:	8c 93       	st	X, r24
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
    1fb6:	a5 e3       	ldi	r26, 0x35	; 53
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e5 e3       	ldi	r30, 0x35	; 53
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	b9 01       	movw	r22, r18
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <DIO_enuSetPinValue+0x158>
    1fd2:	66 0f       	add	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	8a 95       	dec	r24
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <DIO_enuSetPinValue+0x154>
    1fda:	cb 01       	movw	r24, r22
    1fdc:	84 2b       	or	r24, r20
    1fde:	8c 93       	st	X, r24
    1fe0:	28 c0       	rjmp	.+80     	; 0x2032 <DIO_enuSetPinValue+0x1b4>
					break;
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
    1fe2:	a2 e3       	ldi	r26, 0x32	; 50
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e2 e3       	ldi	r30, 0x32	; 50
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	48 2f       	mov	r20, r24
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <DIO_enuSetPinValue+0x180>
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	2a 95       	dec	r18
    2000:	e2 f7       	brpl	.-8      	; 0x1ffa <DIO_enuSetPinValue+0x17c>
    2002:	80 95       	com	r24
    2004:	84 23       	and	r24, r20
    2006:	8c 93       	st	X, r24
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
    2008:	a2 e3       	ldi	r26, 0x32	; 50
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e2 e3       	ldi	r30, 0x32	; 50
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	48 2f       	mov	r20, r24
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	88 2f       	mov	r24, r24
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	b9 01       	movw	r22, r18
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <DIO_enuSetPinValue+0x1aa>
    2024:	66 0f       	add	r22, r22
    2026:	77 1f       	adc	r23, r23
    2028:	8a 95       	dec	r24
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <DIO_enuSetPinValue+0x1a6>
    202c:	cb 01       	movw	r24, r22
    202e:	84 2b       	or	r24, r20
    2030:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    2032:	19 82       	std	Y+1, r1	; 0x01
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <DIO_enuSetPinValue+0x1c2>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    2036:	84 e0       	ldi	r24, 0x04	; 4
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <DIO_enuSetPinValue+0x1c2>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2040:	89 81       	ldd	r24, Y+1	; 0x01
}
    2042:	26 96       	adiw	r28, 0x06	; 6
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID){
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	00 d0       	rcall	.+0      	; 0x205a <DIO_enuTogPinValue+0x6>
    205a:	00 d0       	rcall	.+0      	; 0x205c <DIO_enuTogPinValue+0x8>
    205c:	0f 92       	push	r0
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	84 30       	cpi	r24, 0x04	; 4
    206e:	08 f0       	brcs	.+2      	; 0x2072 <DIO_enuTogPinValue+0x1e>
    2070:	77 c0       	rjmp	.+238    	; 0x2160 <DIO_enuTogPinValue+0x10c>
		if(Copy_uint8PinID <= DIO_PIN7){
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	88 30       	cpi	r24, 0x08	; 8
    2076:	08 f0       	brcs	.+2      	; 0x207a <DIO_enuTogPinValue+0x26>
    2078:	70 c0       	rjmp	.+224    	; 0x215a <DIO_enuTogPinValue+0x106>
			switch(Copy_uint8PortID){
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	3d 83       	std	Y+5, r19	; 0x05
    2082:	2c 83       	std	Y+4, r18	; 0x04
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	9d 81       	ldd	r25, Y+5	; 0x05
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	91 05       	cpc	r25, r1
    208c:	49 f1       	breq	.+82     	; 0x20e0 <DIO_enuTogPinValue+0x8c>
    208e:	2c 81       	ldd	r18, Y+4	; 0x04
    2090:	3d 81       	ldd	r19, Y+5	; 0x05
    2092:	22 30       	cpi	r18, 0x02	; 2
    2094:	31 05       	cpc	r19, r1
    2096:	2c f4       	brge	.+10     	; 0x20a2 <DIO_enuTogPinValue+0x4e>
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	61 f0       	breq	.+24     	; 0x20b8 <DIO_enuTogPinValue+0x64>
    20a0:	5a c0       	rjmp	.+180    	; 0x2156 <DIO_enuTogPinValue+0x102>
    20a2:	2c 81       	ldd	r18, Y+4	; 0x04
    20a4:	3d 81       	ldd	r19, Y+5	; 0x05
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	71 f1       	breq	.+92     	; 0x2108 <DIO_enuTogPinValue+0xb4>
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	83 30       	cpi	r24, 0x03	; 3
    20b2:	91 05       	cpc	r25, r1
    20b4:	e9 f1       	breq	.+122    	; 0x2130 <DIO_enuTogPinValue+0xdc>
    20b6:	4f c0       	rjmp	.+158    	; 0x2156 <DIO_enuTogPinValue+0x102>
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
    20b8:	ab e3       	ldi	r26, 0x3B	; 59
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	eb e3       	ldi	r30, 0x3B	; 59
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	48 2f       	mov	r20, r24
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	02 2e       	mov	r0, r18
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <DIO_enuTogPinValue+0x82>
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <DIO_enuTogPinValue+0x7e>
    20da:	84 27       	eor	r24, r20
    20dc:	8c 93       	st	X, r24
    20de:	3b c0       	rjmp	.+118    	; 0x2156 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
    20e0:	a8 e3       	ldi	r26, 0x38	; 56
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e8 e3       	ldi	r30, 0x38	; 56
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	48 2f       	mov	r20, r24
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 2e       	mov	r0, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <DIO_enuTogPinValue+0xaa>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	0a 94       	dec	r0
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <DIO_enuTogPinValue+0xa6>
    2102:	84 27       	eor	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	27 c0       	rjmp	.+78     	; 0x2156 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
    2108:	a5 e3       	ldi	r26, 0x35	; 53
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e5 e3       	ldi	r30, 0x35	; 53
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	48 2f       	mov	r20, r24
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	02 2e       	mov	r0, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <DIO_enuTogPinValue+0xd2>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <DIO_enuTogPinValue+0xce>
    212a:	84 27       	eor	r24, r20
    212c:	8c 93       	st	X, r24
    212e:	13 c0       	rjmp	.+38     	; 0x2156 <DIO_enuTogPinValue+0x102>
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
    2130:	a2 e3       	ldi	r26, 0x32	; 50
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e2 e3       	ldi	r30, 0x32	; 50
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	48 2f       	mov	r20, r24
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	02 2e       	mov	r0, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <DIO_enuTogPinValue+0xfa>
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	0a 94       	dec	r0
    2150:	e2 f7       	brpl	.-8      	; 0x214a <DIO_enuTogPinValue+0xf6>
    2152:	84 27       	eor	r24, r20
    2154:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorState = ES_OK;
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	05 c0       	rjmp	.+10     	; 0x2164 <DIO_enuTogPinValue+0x110>
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    215a:	84 e0       	ldi	r24, 0x04	; 4
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <DIO_enuTogPinValue+0x110>
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(uint_8 Copy_uint8PortID, uint_8 Copy_uint8PinID, uint_8 *Copy_uint8Value){
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	27 97       	sbiw	r28, 0x07	; 7
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	8a 83       	std	Y+2, r24	; 0x02
    218c:	6b 83       	std	Y+3, r22	; 0x03
    218e:	5d 83       	std	Y+5, r21	; 0x05
    2190:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_uint8PortID <= DIO_PORTD){
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	84 30       	cpi	r24, 0x04	; 4
    219a:	08 f0       	brcs	.+2      	; 0x219e <DIO_enuGetPinValue+0x28>
    219c:	81 c0       	rjmp	.+258    	; 0x22a0 <DIO_enuGetPinValue+0x12a>
			if(Copy_uint8PinID <= DIO_PIN7){
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	88 30       	cpi	r24, 0x08	; 8
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <DIO_enuGetPinValue+0x30>
    21a4:	7a c0       	rjmp	.+244    	; 0x229a <DIO_enuGetPinValue+0x124>
				if(Copy_uint8Value != NULL){
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04
    21a8:	9d 81       	ldd	r25, Y+5	; 0x05
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <DIO_enuGetPinValue+0x3a>
    21ae:	72 c0       	rjmp	.+228    	; 0x2294 <DIO_enuGetPinValue+0x11e>
					switch(Copy_uint8PortID){
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	3f 83       	std	Y+7, r19	; 0x07
    21b8:	2e 83       	std	Y+6, r18	; 0x06
    21ba:	4e 81       	ldd	r20, Y+6	; 0x06
    21bc:	5f 81       	ldd	r21, Y+7	; 0x07
    21be:	41 30       	cpi	r20, 0x01	; 1
    21c0:	51 05       	cpc	r21, r1
    21c2:	59 f1       	breq	.+86     	; 0x221a <DIO_enuGetPinValue+0xa4>
    21c4:	8e 81       	ldd	r24, Y+6	; 0x06
    21c6:	9f 81       	ldd	r25, Y+7	; 0x07
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	91 05       	cpc	r25, r1
    21cc:	34 f4       	brge	.+12     	; 0x21da <DIO_enuGetPinValue+0x64>
    21ce:	2e 81       	ldd	r18, Y+6	; 0x06
    21d0:	3f 81       	ldd	r19, Y+7	; 0x07
    21d2:	21 15       	cp	r18, r1
    21d4:	31 05       	cpc	r19, r1
    21d6:	69 f0       	breq	.+26     	; 0x21f2 <DIO_enuGetPinValue+0x7c>
    21d8:	5b c0       	rjmp	.+182    	; 0x2290 <DIO_enuGetPinValue+0x11a>
    21da:	4e 81       	ldd	r20, Y+6	; 0x06
    21dc:	5f 81       	ldd	r21, Y+7	; 0x07
    21de:	42 30       	cpi	r20, 0x02	; 2
    21e0:	51 05       	cpc	r21, r1
    21e2:	79 f1       	breq	.+94     	; 0x2242 <DIO_enuGetPinValue+0xcc>
    21e4:	8e 81       	ldd	r24, Y+6	; 0x06
    21e6:	9f 81       	ldd	r25, Y+7	; 0x07
    21e8:	83 30       	cpi	r24, 0x03	; 3
    21ea:	91 05       	cpc	r25, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <DIO_enuGetPinValue+0x7a>
    21ee:	3d c0       	rjmp	.+122    	; 0x226a <DIO_enuGetPinValue+0xf4>
    21f0:	4f c0       	rjmp	.+158    	; 0x2290 <DIO_enuGetPinValue+0x11a>
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
    21f2:	e9 e3       	ldi	r30, 0x39	; 57
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a9 01       	movw	r20, r18
    2204:	02 c0       	rjmp	.+4      	; 0x220a <DIO_enuGetPinValue+0x94>
    2206:	55 95       	asr	r21
    2208:	47 95       	ror	r20
    220a:	8a 95       	dec	r24
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <DIO_enuGetPinValue+0x90>
    220e:	ca 01       	movw	r24, r20
    2210:	81 70       	andi	r24, 0x01	; 1
    2212:	ec 81       	ldd	r30, Y+4	; 0x04
    2214:	fd 81       	ldd	r31, Y+5	; 0x05
    2216:	80 83       	st	Z, r24
    2218:	3b c0       	rjmp	.+118    	; 0x2290 <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
    221a:	e6 e3       	ldi	r30, 0x36	; 54
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a9 01       	movw	r20, r18
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <DIO_enuGetPinValue+0xbc>
    222e:	55 95       	asr	r21
    2230:	47 95       	ror	r20
    2232:	8a 95       	dec	r24
    2234:	e2 f7       	brpl	.-8      	; 0x222e <DIO_enuGetPinValue+0xb8>
    2236:	ca 01       	movw	r24, r20
    2238:	81 70       	andi	r24, 0x01	; 1
    223a:	ec 81       	ldd	r30, Y+4	; 0x04
    223c:	fd 81       	ldd	r31, Y+5	; 0x05
    223e:	80 83       	st	Z, r24
    2240:	27 c0       	rjmp	.+78     	; 0x2290 <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
    2242:	e3 e3       	ldi	r30, 0x33	; 51
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a9 01       	movw	r20, r18
    2254:	02 c0       	rjmp	.+4      	; 0x225a <DIO_enuGetPinValue+0xe4>
    2256:	55 95       	asr	r21
    2258:	47 95       	ror	r20
    225a:	8a 95       	dec	r24
    225c:	e2 f7       	brpl	.-8      	; 0x2256 <DIO_enuGetPinValue+0xe0>
    225e:	ca 01       	movw	r24, r20
    2260:	81 70       	andi	r24, 0x01	; 1
    2262:	ec 81       	ldd	r30, Y+4	; 0x04
    2264:	fd 81       	ldd	r31, Y+5	; 0x05
    2266:	80 83       	st	Z, r24
    2268:	13 c0       	rjmp	.+38     	; 0x2290 <DIO_enuGetPinValue+0x11a>
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
    226a:	e0 e3       	ldi	r30, 0x30	; 48
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a9 01       	movw	r20, r18
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <DIO_enuGetPinValue+0x10c>
    227e:	55 95       	asr	r21
    2280:	47 95       	ror	r20
    2282:	8a 95       	dec	r24
    2284:	e2 f7       	brpl	.-8      	; 0x227e <DIO_enuGetPinValue+0x108>
    2286:	ca 01       	movw	r24, r20
    2288:	81 70       	andi	r24, 0x01	; 1
    228a:	ec 81       	ldd	r30, Y+4	; 0x04
    228c:	fd 81       	ldd	r31, Y+5	; 0x05
    228e:	80 83       	st	Z, r24
							break;
					}
					Local_enuErrorState = ES_OK;
    2290:	19 82       	std	Y+1, r1	; 0x01
    2292:	08 c0       	rjmp	.+16     	; 0x22a4 <DIO_enuGetPinValue+0x12e>
				}
				else{
					Local_enuErrorState = ES_NULL_POINTER;
    2294:	82 e0       	ldi	r24, 0x02	; 2
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <DIO_enuGetPinValue+0x12e>
				}
			}
			else{
				Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <DIO_enuGetPinValue+0x12e>
			}
		}
		else{
			Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorState;
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a6:	27 96       	adiw	r28, 0x07	; 7
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <main>:

void tog(void);
void tog2(void);
void tog3(void);
uint_16 ICR_value;
int main(void){
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	TIMER1_enuInit();
    22c0:	0e 94 e7 06 	call	0xdce	; 0xdce <TIMER1_enuInit>

	DIO_enuSetPortDir(DIO_uint8_PORTC, 0xff);
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	6f ef       	ldi	r22, 0xFF	; 255
    22c8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <DIO_enuSetPortDir>
	DIO_enuSetPortDir(DIO_uint8_PORTA, 0xff);
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	6f ef       	ldi	r22, 0xFF	; 255
    22d0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <DIO_enuSetPortDir>

	TIMER1_enuInputCaptureEnable(0, 1);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	0e 94 c9 0a 	call	0x1592	; 0x1592 <TIMER1_enuInputCaptureEnable>


	TIMER1_enuCallBack(&tog, NULL, TIMER1_ICR_INT);
    22dc:	8a e7       	ldi	r24, 0x7A	; 122
    22de:	91 e1       	ldi	r25, 0x11	; 17
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	43 e0       	ldi	r20, 0x03	; 3
    22e6:	0e 94 4e 0b 	call	0x169c	; 0x169c <TIMER1_enuCallBack>
	//TIMER1_enuASyncDelay(1500, &tog2, NULL);
//	TIMER1_enuSetWaveMode(PWM_PHASE_AND_FREQUANCY_CORRECT_OCR_TOP, 600);
//	TIMER1_enuGeneratePWM_OC1B(250, CLEAR_OC1B_ON_COMPARE_MATCH);
	while(1){

	TIMER1_enuGetInputCapture(&ICR_value);
    22ea:	8e e7       	ldi	r24, 0x7E	; 126
    22ec:	91 e0       	ldi	r25, 0x01	; 1
    22ee:	0e 94 19 0b 	call	0x1632	; 0x1632 <TIMER1_enuGetInputCapture>
    22f2:	fb cf       	rjmp	.-10     	; 0x22ea <main+0x32>

000022f4 <tog>:
	}

	return 0;
}

void tog(void){
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPortValue(DIO_uint8_PORTC, ICR_value);
    22fc:	80 91 7e 01 	lds	r24, 0x017E
    2300:	90 91 7f 01 	lds	r25, 0x017F
    2304:	98 2f       	mov	r25, r24
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	69 2f       	mov	r22, r25
    230a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_enuSetPortValue>
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <tog2>:
void tog2(void){
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	DIO_enuTogPortValue(DIO_uint8_PORTC);
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuTogPortValue>
}
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <tog3>:
void tog3(void){
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPortValue(DIO_uint8_PORTC, 0xf1);
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	61 ef       	ldi	r22, 0xF1	; 241
    2334:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <DIO_enuSetPortValue>
}
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <__prologue_saves__>:
    233e:	2f 92       	push	r2
    2340:	3f 92       	push	r3
    2342:	4f 92       	push	r4
    2344:	5f 92       	push	r5
    2346:	6f 92       	push	r6
    2348:	7f 92       	push	r7
    234a:	8f 92       	push	r8
    234c:	9f 92       	push	r9
    234e:	af 92       	push	r10
    2350:	bf 92       	push	r11
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	ca 1b       	sub	r28, r26
    2368:	db 0b       	sbc	r29, r27
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	09 94       	ijmp

00002376 <__epilogue_restores__>:
    2376:	2a 88       	ldd	r2, Y+18	; 0x12
    2378:	39 88       	ldd	r3, Y+17	; 0x11
    237a:	48 88       	ldd	r4, Y+16	; 0x10
    237c:	5f 84       	ldd	r5, Y+15	; 0x0f
    237e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2380:	7d 84       	ldd	r7, Y+13	; 0x0d
    2382:	8c 84       	ldd	r8, Y+12	; 0x0c
    2384:	9b 84       	ldd	r9, Y+11	; 0x0b
    2386:	aa 84       	ldd	r10, Y+10	; 0x0a
    2388:	b9 84       	ldd	r11, Y+9	; 0x09
    238a:	c8 84       	ldd	r12, Y+8	; 0x08
    238c:	df 80       	ldd	r13, Y+7	; 0x07
    238e:	ee 80       	ldd	r14, Y+6	; 0x06
    2390:	fd 80       	ldd	r15, Y+5	; 0x05
    2392:	0c 81       	ldd	r16, Y+4	; 0x04
    2394:	1b 81       	ldd	r17, Y+3	; 0x03
    2396:	aa 81       	ldd	r26, Y+2	; 0x02
    2398:	b9 81       	ldd	r27, Y+1	; 0x01
    239a:	ce 0f       	add	r28, r30
    239c:	d1 1d       	adc	r29, r1
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	ed 01       	movw	r28, r26
    23aa:	08 95       	ret

000023ac <_exit>:
    23ac:	f8 94       	cli

000023ae <__stop_program>:
    23ae:	ff cf       	rjmp	.-2      	; 0x23ae <__stop_program>
