
play_with_timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000099c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c18  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ea  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 04 	call	0x94e	; 0x94e <main>
  64:	0c 94 cc 04 	jmp	0x998	; 0x998 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
  76:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(DIO_PA_PIN7_DIR, DIO_PA_PIN6_DIR, DIO_PA_PIN5_DIR, DIO_PA_PIN4_DIR, DIO_PA_PIN3_DIR, DIO_PA_PIN2_DIR, DIO_PA_PIN1_DIR, DIO_PA_PIN0_DIR);
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	80 83       	st	Z, r24
	DDRB = CONC(DIO_PB_PIN7_DIR, DIO_PB_PIN6_DIR, DIO_PB_PIN5_DIR, DIO_PB_PIN4_DIR, DIO_PB_PIN3_DIR, DIO_PB_PIN2_DIR, DIO_PB_PIN1_DIR, DIO_PB_PIN0_DIR);
  80:	e7 e3       	ldi	r30, 0x37	; 55
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	8f e7       	ldi	r24, 0x7F	; 127
  86:	80 83       	st	Z, r24
	DDRC = CONC(DIO_PC_PIN7_DIR, DIO_PC_PIN6_DIR, DIO_PC_PIN5_DIR, DIO_PC_PIN4_DIR, DIO_PC_PIN3_DIR, DIO_PC_PIN2_DIR, DIO_PC_PIN1_DIR, DIO_PC_PIN0_DIR);
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	8a ef       	ldi	r24, 0xFA	; 250
  8e:	80 83       	st	Z, r24
	DDRD = CONC(DIO_PD_PIN7_DIR, DIO_PD_PIN6_DIR, DIO_PD_PIN5_DIR, DIO_PD_PIN4_DIR, DIO_PD_PIN3_DIR, DIO_PD_PIN2_DIR, DIO_PD_PIN1_DIR, DIO_PD_PIN0_DIR);
  90:	e1 e3       	ldi	r30, 0x31	; 49
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	8f e7       	ldi	r24, 0x7F	; 127
  96:	80 83       	st	Z, r24

	PORTA = CONC(DIO_PA_PIN7_VAL, DIO_PA_PIN6_VAL, DIO_PA_PIN5_VAL, DIO_PA_PIN4_VAL, DIO_PA_PIN3_VAL, DIO_PA_PIN2_VAL, DIO_PA_PIN1_VAL, DIO_PA_PIN0_VAL);
  98:	eb e3       	ldi	r30, 0x3B	; 59
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	PORTB = CONC(DIO_PB_PIN7_VAL, DIO_PB_PIN6_VAL, DIO_PB_PIN5_VAL, DIO_PB_PIN4_VAL, DIO_PB_PIN3_VAL, DIO_PB_PIN2_VAL, DIO_PB_PIN1_VAL, DIO_PB_PIN0_VAL);
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	PORTC = CONC(DIO_PC_PIN7_VAL, DIO_PC_PIN6_VAL, DIO_PC_PIN5_VAL, DIO_PC_PIN4_VAL, DIO_PC_PIN3_VAL, DIO_PC_PIN2_VAL, DIO_PC_PIN1_VAL, DIO_PC_PIN0_VAL);
  a4:	e5 e3       	ldi	r30, 0x35	; 53
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
	PORTD = CONC(DIO_PD_PIN7_VAL, DIO_PD_PIN6_VAL, DIO_PD_PIN5_VAL, DIO_PD_PIN4_VAL, DIO_PD_PIN3_VAL, DIO_PD_PIN2_VAL, DIO_PD_PIN1_VAL, DIO_PD_PIN0_VAL);
  aa:	e2 e3       	ldi	r30, 0x32	; 50
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	Local_enuErrorStates = ES_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStates;
  b4:	89 81       	ldd	r24, Y+1	; 0x01
}
  b6:	0f 90       	pop	r0
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <DIO_enuSetPortDir>:

ES_t DIO_enuSetPortDir(u8 Copy_PortID, u8 Copy_PortDir){
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <DIO_enuSetPortDir+0x6>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DIO_enuSetPortDir+0x8>
  c6:	0f 92       	push	r0
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	8a 83       	std	Y+2, r24	; 0x02
  ce:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
  d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	a8 f5       	brcc	.+106    	; 0x142 <DIO_enuSetPortDir+0x84>
		switch(Copy_PortID){
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	3d 83       	std	Y+5, r19	; 0x05
  e0:	2c 83       	std	Y+4, r18	; 0x04
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	9d 81       	ldd	r25, Y+5	; 0x05
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	91 05       	cpc	r25, r1
  ea:	d1 f0       	breq	.+52     	; 0x120 <DIO_enuSetPortDir+0x62>
  ec:	2c 81       	ldd	r18, Y+4	; 0x04
  ee:	3d 81       	ldd	r19, Y+5	; 0x05
  f0:	22 30       	cpi	r18, 0x02	; 2
  f2:	31 05       	cpc	r19, r1
  f4:	2c f4       	brge	.+10     	; 0x100 <DIO_enuSetPortDir+0x42>
  f6:	8c 81       	ldd	r24, Y+4	; 0x04
  f8:	9d 81       	ldd	r25, Y+5	; 0x05
  fa:	00 97       	sbiw	r24, 0x00	; 0
  fc:	61 f0       	breq	.+24     	; 0x116 <DIO_enuSetPortDir+0x58>
  fe:	1e c0       	rjmp	.+60     	; 0x13c <DIO_enuSetPortDir+0x7e>
 100:	2c 81       	ldd	r18, Y+4	; 0x04
 102:	3d 81       	ldd	r19, Y+5	; 0x05
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	31 05       	cpc	r19, r1
 108:	81 f0       	breq	.+32     	; 0x12a <DIO_enuSetPortDir+0x6c>
 10a:	8c 81       	ldd	r24, Y+4	; 0x04
 10c:	9d 81       	ldd	r25, Y+5	; 0x05
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	91 05       	cpc	r25, r1
 112:	81 f0       	breq	.+32     	; 0x134 <DIO_enuSetPortDir+0x76>
 114:	13 c0       	rjmp	.+38     	; 0x13c <DIO_enuSetPortDir+0x7e>
			case DIO_PORTA:
				DDRA = Copy_PortDir;
 116:	ea e3       	ldi	r30, 0x3A	; 58
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	80 83       	st	Z, r24
 11e:	0e c0       	rjmp	.+28     	; 0x13c <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTB:
				DDRB = Copy_PortDir;
 120:	e7 e3       	ldi	r30, 0x37	; 55
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	80 83       	st	Z, r24
 128:	09 c0       	rjmp	.+18     	; 0x13c <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTC:
				DDRC = Copy_PortDir;
 12a:	e4 e3       	ldi	r30, 0x34	; 52
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	80 83       	st	Z, r24
 132:	04 c0       	rjmp	.+8      	; 0x13c <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTD:
				DDRD = Copy_PortDir;
 134:	e1 e3       	ldi	r30, 0x31	; 49
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	89 83       	std	Y+1, r24	; 0x01
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_enuSetPortDir+0x88>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
 146:	89 81       	ldd	r24, Y+1	; 0x01
}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	cf 91       	pop	r28
 154:	df 91       	pop	r29
 156:	08 95       	ret

00000158 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_PortID, u8 Copy_PortValue){
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	00 d0       	rcall	.+0      	; 0x15e <DIO_enuSetPortValue+0x6>
 15e:	00 d0       	rcall	.+0      	; 0x160 <DIO_enuSetPortValue+0x8>
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	8a 83       	std	Y+2, r24	; 0x02
 168:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
 16a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	a8 f5       	brcc	.+106    	; 0x1dc <DIO_enuSetPortValue+0x84>
		switch(Copy_PortID){
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	3d 83       	std	Y+5, r19	; 0x05
 17a:	2c 83       	std	Y+4, r18	; 0x04
 17c:	8c 81       	ldd	r24, Y+4	; 0x04
 17e:	9d 81       	ldd	r25, Y+5	; 0x05
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 05       	cpc	r25, r1
 184:	d1 f0       	breq	.+52     	; 0x1ba <DIO_enuSetPortValue+0x62>
 186:	2c 81       	ldd	r18, Y+4	; 0x04
 188:	3d 81       	ldd	r19, Y+5	; 0x05
 18a:	22 30       	cpi	r18, 0x02	; 2
 18c:	31 05       	cpc	r19, r1
 18e:	2c f4       	brge	.+10     	; 0x19a <DIO_enuSetPortValue+0x42>
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	9d 81       	ldd	r25, Y+5	; 0x05
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	61 f0       	breq	.+24     	; 0x1b0 <DIO_enuSetPortValue+0x58>
 198:	1e c0       	rjmp	.+60     	; 0x1d6 <DIO_enuSetPortValue+0x7e>
 19a:	2c 81       	ldd	r18, Y+4	; 0x04
 19c:	3d 81       	ldd	r19, Y+5	; 0x05
 19e:	22 30       	cpi	r18, 0x02	; 2
 1a0:	31 05       	cpc	r19, r1
 1a2:	81 f0       	breq	.+32     	; 0x1c4 <DIO_enuSetPortValue+0x6c>
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	9d 81       	ldd	r25, Y+5	; 0x05
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	91 05       	cpc	r25, r1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <DIO_enuSetPortValue+0x76>
 1ae:	13 c0       	rjmp	.+38     	; 0x1d6 <DIO_enuSetPortValue+0x7e>
			case DIO_PORTA:
				PORTA = Copy_PortValue;
 1b0:	eb e3       	ldi	r30, 0x3B	; 59
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	80 83       	st	Z, r24
 1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_PortValue;
 1ba:	e8 e3       	ldi	r30, 0x38	; 56
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	80 83       	st	Z, r24
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_PortValue;
 1c4:	e5 e3       	ldi	r30, 0x35	; 53
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	80 83       	st	Z, r24
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_PortValue;
 1ce:	e2 e3       	ldi	r30, 0x32	; 50
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_enuSetPortValue+0x88>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	cf 91       	pop	r28
 1ee:	df 91       	pop	r29
 1f0:	08 95       	ret

000001f2 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_PortID, u8 *Copy_PortVal){
 1f2:	df 93       	push	r29
 1f4:	cf 93       	push	r28
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <DIO_enuGetPortValue+0x6>
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <DIO_enuGetPortValue+0x8>
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <DIO_enuGetPortValue+0xa>
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	8a 83       	std	Y+2, r24	; 0x02
 202:	7c 83       	std	Y+4, r23	; 0x04
 204:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
 206:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	e8 f5       	brcc	.+122    	; 0x288 <DIO_enuGetPortValue+0x96>
		switch(Copy_PortID){
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	3e 83       	std	Y+6, r19	; 0x06
 216:	2d 83       	std	Y+5, r18	; 0x05
 218:	8d 81       	ldd	r24, Y+5	; 0x05
 21a:	9e 81       	ldd	r25, Y+6	; 0x06
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	91 05       	cpc	r25, r1
 220:	e1 f0       	breq	.+56     	; 0x25a <DIO_enuGetPortValue+0x68>
 222:	2d 81       	ldd	r18, Y+5	; 0x05
 224:	3e 81       	ldd	r19, Y+6	; 0x06
 226:	22 30       	cpi	r18, 0x02	; 2
 228:	31 05       	cpc	r19, r1
 22a:	2c f4       	brge	.+10     	; 0x236 <DIO_enuGetPortValue+0x44>
 22c:	8d 81       	ldd	r24, Y+5	; 0x05
 22e:	9e 81       	ldd	r25, Y+6	; 0x06
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	61 f0       	breq	.+24     	; 0x24c <DIO_enuGetPortValue+0x5a>
 234:	26 c0       	rjmp	.+76     	; 0x282 <DIO_enuGetPortValue+0x90>
 236:	2d 81       	ldd	r18, Y+5	; 0x05
 238:	3e 81       	ldd	r19, Y+6	; 0x06
 23a:	22 30       	cpi	r18, 0x02	; 2
 23c:	31 05       	cpc	r19, r1
 23e:	a1 f0       	breq	.+40     	; 0x268 <DIO_enuGetPortValue+0x76>
 240:	8d 81       	ldd	r24, Y+5	; 0x05
 242:	9e 81       	ldd	r25, Y+6	; 0x06
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	91 05       	cpc	r25, r1
 248:	b1 f0       	breq	.+44     	; 0x276 <DIO_enuGetPortValue+0x84>
 24a:	1b c0       	rjmp	.+54     	; 0x282 <DIO_enuGetPortValue+0x90>
			case DIO_PORTA:
				*Copy_PortVal = PINA;
 24c:	e9 e3       	ldi	r30, 0x39	; 57
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	eb 81       	ldd	r30, Y+3	; 0x03
 254:	fc 81       	ldd	r31, Y+4	; 0x04
 256:	80 83       	st	Z, r24
 258:	14 c0       	rjmp	.+40     	; 0x282 <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTB:
				*Copy_PortVal = PINB;
 25a:	e6 e3       	ldi	r30, 0x36	; 54
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	eb 81       	ldd	r30, Y+3	; 0x03
 262:	fc 81       	ldd	r31, Y+4	; 0x04
 264:	80 83       	st	Z, r24
 266:	0d c0       	rjmp	.+26     	; 0x282 <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTC:
				*Copy_PortVal = PINC;
 268:	e3 e3       	ldi	r30, 0x33	; 51
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	eb 81       	ldd	r30, Y+3	; 0x03
 270:	fc 81       	ldd	r31, Y+4	; 0x04
 272:	80 83       	st	Z, r24
 274:	06 c0       	rjmp	.+12     	; 0x282 <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTD:
				*Copy_PortVal = PIND;
 276:	e0 e3       	ldi	r30, 0x30	; 48
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	eb 81       	ldd	r30, Y+3	; 0x03
 27e:	fc 81       	ldd	r31, Y+4	; 0x04
 280:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_enuGetPortValue+0x9a>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	26 96       	adiw	r28, 0x06	; 6
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_PortID){
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_enuTogPortValue+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_enuTogPortValue+0x8>
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
 2ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
 2b0:	8a 81       	ldd	r24, Y+2	; 0x02
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <DIO_enuTogPortValue+0x18>
 2b6:	41 c0       	rjmp	.+130    	; 0x33a <DIO_enuTogPortValue+0x9a>
		switch(Copy_PortID){
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	3c 83       	std	Y+4, r19	; 0x04
 2c0:	2b 83       	std	Y+3, r18	; 0x03
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	9c 81       	ldd	r25, Y+4	; 0x04
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	91 05       	cpc	r25, r1
 2ca:	e9 f0       	breq	.+58     	; 0x306 <DIO_enuTogPortValue+0x66>
 2cc:	2b 81       	ldd	r18, Y+3	; 0x03
 2ce:	3c 81       	ldd	r19, Y+4	; 0x04
 2d0:	22 30       	cpi	r18, 0x02	; 2
 2d2:	31 05       	cpc	r19, r1
 2d4:	2c f4       	brge	.+10     	; 0x2e0 <DIO_enuTogPortValue+0x40>
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	9c 81       	ldd	r25, Y+4	; 0x04
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	61 f0       	breq	.+24     	; 0x2f6 <DIO_enuTogPortValue+0x56>
 2de:	2a c0       	rjmp	.+84     	; 0x334 <DIO_enuTogPortValue+0x94>
 2e0:	2b 81       	ldd	r18, Y+3	; 0x03
 2e2:	3c 81       	ldd	r19, Y+4	; 0x04
 2e4:	22 30       	cpi	r18, 0x02	; 2
 2e6:	31 05       	cpc	r19, r1
 2e8:	b1 f0       	breq	.+44     	; 0x316 <DIO_enuTogPortValue+0x76>
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	91 05       	cpc	r25, r1
 2f2:	c9 f0       	breq	.+50     	; 0x326 <DIO_enuTogPortValue+0x86>
 2f4:	1f c0       	rjmp	.+62     	; 0x334 <DIO_enuTogPortValue+0x94>
			case DIO_PORTA:
				PORTA = ~PORTA;
 2f6:	ab e3       	ldi	r26, 0x3B	; 59
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	eb e3       	ldi	r30, 0x3B	; 59
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 95       	com	r24
 302:	8c 93       	st	X, r24
 304:	17 c0       	rjmp	.+46     	; 0x334 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
 306:	a8 e3       	ldi	r26, 0x38	; 56
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e8 e3       	ldi	r30, 0x38	; 56
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	80 95       	com	r24
 312:	8c 93       	st	X, r24
 314:	0f c0       	rjmp	.+30     	; 0x334 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
 316:	a5 e3       	ldi	r26, 0x35	; 53
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e5 e3       	ldi	r30, 0x35	; 53
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	80 95       	com	r24
 322:	8c 93       	st	X, r24
 324:	07 c0       	rjmp	.+14     	; 0x334 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
 326:	a2 e3       	ldi	r26, 0x32	; 50
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e2 e3       	ldi	r30, 0x32	; 50
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 95       	com	r24
 332:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	89 83       	std	Y+1, r24	; 0x01
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_enuTogPortValue+0x9e>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
 33e:	89 81       	ldd	r24, Y+1	; 0x01
}
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	cf 91       	pop	r28
 34a:	df 91       	pop	r29
 34c:	08 95       	ret

0000034e <DIO_enuSetPinDir>:

ES_t DIO_enuSetPinDir(u8 Copy_PortID, u8 Copy_PinID, u8 Copy_PinDir){
 34e:	df 93       	push	r29
 350:	cf 93       	push	r28
 352:	00 d0       	rcall	.+0      	; 0x354 <DIO_enuSetPinDir+0x6>
 354:	00 d0       	rcall	.+0      	; 0x356 <DIO_enuSetPinDir+0x8>
 356:	00 d0       	rcall	.+0      	; 0x358 <DIO_enuSetPinDir+0xa>
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	8a 83       	std	Y+2, r24	; 0x02
 35e:	6b 83       	std	Y+3, r22	; 0x03
 360:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
 362:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	84 30       	cpi	r24, 0x04	; 4
 368:	08 f0       	brcs	.+2      	; 0x36c <DIO_enuSetPinDir+0x1e>
 36a:	d0 c0       	rjmp	.+416    	; 0x50c <DIO_enuSetPinDir+0x1be>
		if(Copy_PinID <= DIO_PIN7){
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	88 30       	cpi	r24, 0x08	; 8
 370:	08 f0       	brcs	.+2      	; 0x374 <DIO_enuSetPinDir+0x26>
 372:	c9 c0       	rjmp	.+402    	; 0x506 <DIO_enuSetPinDir+0x1b8>
			switch(Copy_PortID){
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	3e 83       	std	Y+6, r19	; 0x06
 37c:	2d 83       	std	Y+5, r18	; 0x05
 37e:	6d 81       	ldd	r22, Y+5	; 0x05
 380:	7e 81       	ldd	r23, Y+6	; 0x06
 382:	61 30       	cpi	r22, 0x01	; 1
 384:	71 05       	cpc	r23, r1
 386:	09 f4       	brne	.+2      	; 0x38a <DIO_enuSetPinDir+0x3c>
 388:	41 c0       	rjmp	.+130    	; 0x40c <DIO_enuSetPinDir+0xbe>
 38a:	8d 81       	ldd	r24, Y+5	; 0x05
 38c:	9e 81       	ldd	r25, Y+6	; 0x06
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	91 05       	cpc	r25, r1
 392:	34 f4       	brge	.+12     	; 0x3a0 <DIO_enuSetPinDir+0x52>
 394:	2d 81       	ldd	r18, Y+5	; 0x05
 396:	3e 81       	ldd	r19, Y+6	; 0x06
 398:	21 15       	cp	r18, r1
 39a:	31 05       	cpc	r19, r1
 39c:	71 f0       	breq	.+28     	; 0x3ba <DIO_enuSetPinDir+0x6c>
 39e:	b0 c0       	rjmp	.+352    	; 0x500 <DIO_enuSetPinDir+0x1b2>
 3a0:	6d 81       	ldd	r22, Y+5	; 0x05
 3a2:	7e 81       	ldd	r23, Y+6	; 0x06
 3a4:	62 30       	cpi	r22, 0x02	; 2
 3a6:	71 05       	cpc	r23, r1
 3a8:	09 f4       	brne	.+2      	; 0x3ac <DIO_enuSetPinDir+0x5e>
 3aa:	59 c0       	rjmp	.+178    	; 0x45e <DIO_enuSetPinDir+0x110>
 3ac:	8d 81       	ldd	r24, Y+5	; 0x05
 3ae:	9e 81       	ldd	r25, Y+6	; 0x06
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	91 05       	cpc	r25, r1
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <DIO_enuSetPinDir+0x6a>
 3b6:	7c c0       	rjmp	.+248    	; 0x4b0 <DIO_enuSetPinDir+0x162>
 3b8:	a3 c0       	rjmp	.+326    	; 0x500 <DIO_enuSetPinDir+0x1b2>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK_VALUE << Copy_PinID);
 3ba:	aa e3       	ldi	r26, 0x3A	; 58
 3bc:	b0 e0       	ldi	r27, 0x00	; 0
 3be:	ea e3       	ldi	r30, 0x3A	; 58
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	48 2f       	mov	r20, r24
 3c6:	8b 81       	ldd	r24, Y+3	; 0x03
 3c8:	28 2f       	mov	r18, r24
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_enuSetPinDir+0x88>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	2a 95       	dec	r18
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_enuSetPinDir+0x84>
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	8c 93       	st	X, r24
					DDRA |= (Copy_PinDir << Copy_PinID);
 3e0:	aa e3       	ldi	r26, 0x3A	; 58
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	ea e3       	ldi	r30, 0x3A	; 58
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	48 2f       	mov	r20, r24
 3ec:	8c 81       	ldd	r24, Y+4	; 0x04
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	8b 81       	ldd	r24, Y+3	; 0x03
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_enuSetPinDir+0xb2>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_enuSetPinDir+0xae>
 404:	cb 01       	movw	r24, r22
 406:	84 2b       	or	r24, r20
 408:	8c 93       	st	X, r24
 40a:	7a c0       	rjmp	.+244    	; 0x500 <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK_VALUE << Copy_PinID);
 40c:	a7 e3       	ldi	r26, 0x37	; 55
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e7 e3       	ldi	r30, 0x37	; 55
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_enuSetPinDir+0xda>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	2a 95       	dec	r18
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_enuSetPinDir+0xd6>
 42c:	80 95       	com	r24
 42e:	84 23       	and	r24, r20
 430:	8c 93       	st	X, r24
					DDRB |= (Copy_PinDir << Copy_PinID);
 432:	a7 e3       	ldi	r26, 0x37	; 55
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e7 e3       	ldi	r30, 0x37	; 55
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8c 81       	ldd	r24, Y+4	; 0x04
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	88 2f       	mov	r24, r24
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	b9 01       	movw	r22, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_enuSetPinDir+0x104>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	8a 95       	dec	r24
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_enuSetPinDir+0x100>
 456:	cb 01       	movw	r24, r22
 458:	84 2b       	or	r24, r20
 45a:	8c 93       	st	X, r24
 45c:	51 c0       	rjmp	.+162    	; 0x500 <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK_VALUE << Copy_PinID);
 45e:	a4 e3       	ldi	r26, 0x34	; 52
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e4 e3       	ldi	r30, 0x34	; 52
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	48 2f       	mov	r20, r24
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_enuSetPinDir+0x12c>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	2a 95       	dec	r18
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_enuSetPinDir+0x128>
 47e:	80 95       	com	r24
 480:	84 23       	and	r24, r20
 482:	8c 93       	st	X, r24
					DDRC |= (Copy_PinDir << Copy_PinID);
 484:	a4 e3       	ldi	r26, 0x34	; 52
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	e4 e3       	ldi	r30, 0x34	; 52
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	48 2f       	mov	r20, r24
 490:	8c 81       	ldd	r24, Y+4	; 0x04
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	88 2f       	mov	r24, r24
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	b9 01       	movw	r22, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_enuSetPinDir+0x156>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	8a 95       	dec	r24
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_enuSetPinDir+0x152>
 4a8:	cb 01       	movw	r24, r22
 4aa:	84 2b       	or	r24, r20
 4ac:	8c 93       	st	X, r24
 4ae:	28 c0       	rjmp	.+80     	; 0x500 <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK_VALUE << Copy_PinID);
 4b0:	a1 e3       	ldi	r26, 0x31	; 49
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	e1 e3       	ldi	r30, 0x31	; 49
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	48 2f       	mov	r20, r24
 4bc:	8b 81       	ldd	r24, Y+3	; 0x03
 4be:	28 2f       	mov	r18, r24
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_enuSetPinDir+0x17e>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	2a 95       	dec	r18
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_enuSetPinDir+0x17a>
 4d0:	80 95       	com	r24
 4d2:	84 23       	and	r24, r20
 4d4:	8c 93       	st	X, r24
					DDRD |= (Copy_PinDir << Copy_PinID);
 4d6:	a1 e3       	ldi	r26, 0x31	; 49
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	e1 e3       	ldi	r30, 0x31	; 49
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	48 2f       	mov	r20, r24
 4e2:	8c 81       	ldd	r24, Y+4	; 0x04
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	88 2f       	mov	r24, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	b9 01       	movw	r22, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_enuSetPinDir+0x1a8>
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	8a 95       	dec	r24
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_enuSetPinDir+0x1a4>
 4fa:	cb 01       	movw	r24, r22
 4fc:	84 2b       	or	r24, r20
 4fe:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorStates = ES_OK;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	89 83       	std	Y+1, r24	; 0x01
 504:	05 c0       	rjmp	.+10     	; 0x510 <DIO_enuSetPinDir+0x1c2>
		}
		else{
			Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
 506:	84 e0       	ldi	r24, 0x04	; 4
 508:	89 83       	std	Y+1, r24	; 0x01
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_enuSetPinDir+0x1c2>
		}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
 510:	89 81       	ldd	r24, Y+1	; 0x01
}
 512:	26 96       	adiw	r28, 0x06	; 6
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	cf 91       	pop	r28
 520:	df 91       	pop	r29
 522:	08 95       	ret

00000524 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_PortID, u8 Copy_PinID, u8 Copy_PinValue){
 524:	df 93       	push	r29
 526:	cf 93       	push	r28
 528:	00 d0       	rcall	.+0      	; 0x52a <DIO_enuSetPinValue+0x6>
 52a:	00 d0       	rcall	.+0      	; 0x52c <DIO_enuSetPinValue+0x8>
 52c:	00 d0       	rcall	.+0      	; 0x52e <DIO_enuSetPinValue+0xa>
 52e:	cd b7       	in	r28, 0x3d	; 61
 530:	de b7       	in	r29, 0x3e	; 62
 532:	8a 83       	std	Y+2, r24	; 0x02
 534:	6b 83       	std	Y+3, r22	; 0x03
 536:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
 538:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
 53a:	8a 81       	ldd	r24, Y+2	; 0x02
 53c:	84 30       	cpi	r24, 0x04	; 4
 53e:	08 f0       	brcs	.+2      	; 0x542 <DIO_enuSetPinValue+0x1e>
 540:	d0 c0       	rjmp	.+416    	; 0x6e2 <DIO_enuSetPinValue+0x1be>
			if(Copy_PinID <= DIO_PIN7){
 542:	8b 81       	ldd	r24, Y+3	; 0x03
 544:	88 30       	cpi	r24, 0x08	; 8
 546:	08 f0       	brcs	.+2      	; 0x54a <DIO_enuSetPinValue+0x26>
 548:	c9 c0       	rjmp	.+402    	; 0x6dc <DIO_enuSetPinValue+0x1b8>
				switch(Copy_PortID){
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	3e 83       	std	Y+6, r19	; 0x06
 552:	2d 83       	std	Y+5, r18	; 0x05
 554:	6d 81       	ldd	r22, Y+5	; 0x05
 556:	7e 81       	ldd	r23, Y+6	; 0x06
 558:	61 30       	cpi	r22, 0x01	; 1
 55a:	71 05       	cpc	r23, r1
 55c:	09 f4       	brne	.+2      	; 0x560 <DIO_enuSetPinValue+0x3c>
 55e:	41 c0       	rjmp	.+130    	; 0x5e2 <DIO_enuSetPinValue+0xbe>
 560:	8d 81       	ldd	r24, Y+5	; 0x05
 562:	9e 81       	ldd	r25, Y+6	; 0x06
 564:	82 30       	cpi	r24, 0x02	; 2
 566:	91 05       	cpc	r25, r1
 568:	34 f4       	brge	.+12     	; 0x576 <DIO_enuSetPinValue+0x52>
 56a:	2d 81       	ldd	r18, Y+5	; 0x05
 56c:	3e 81       	ldd	r19, Y+6	; 0x06
 56e:	21 15       	cp	r18, r1
 570:	31 05       	cpc	r19, r1
 572:	71 f0       	breq	.+28     	; 0x590 <DIO_enuSetPinValue+0x6c>
 574:	b0 c0       	rjmp	.+352    	; 0x6d6 <DIO_enuSetPinValue+0x1b2>
 576:	6d 81       	ldd	r22, Y+5	; 0x05
 578:	7e 81       	ldd	r23, Y+6	; 0x06
 57a:	62 30       	cpi	r22, 0x02	; 2
 57c:	71 05       	cpc	r23, r1
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_enuSetPinValue+0x5e>
 580:	59 c0       	rjmp	.+178    	; 0x634 <DIO_enuSetPinValue+0x110>
 582:	8d 81       	ldd	r24, Y+5	; 0x05
 584:	9e 81       	ldd	r25, Y+6	; 0x06
 586:	83 30       	cpi	r24, 0x03	; 3
 588:	91 05       	cpc	r25, r1
 58a:	09 f4       	brne	.+2      	; 0x58e <DIO_enuSetPinValue+0x6a>
 58c:	7c c0       	rjmp	.+248    	; 0x686 <DIO_enuSetPinValue+0x162>
 58e:	a3 c0       	rjmp	.+326    	; 0x6d6 <DIO_enuSetPinValue+0x1b2>
					case DIO_PORTA:
						PORTA &= ~(BIT_MASK_VALUE << Copy_PinID);
 590:	ab e3       	ldi	r26, 0x3B	; 59
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	eb e3       	ldi	r30, 0x3B	; 59
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	48 2f       	mov	r20, r24
 59c:	8b 81       	ldd	r24, Y+3	; 0x03
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_enuSetPinValue+0x88>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	2a 95       	dec	r18
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_enuSetPinValue+0x84>
 5b0:	80 95       	com	r24
 5b2:	84 23       	and	r24, r20
 5b4:	8c 93       	st	X, r24
						PORTA |= (Copy_PinValue << Copy_PinID);
 5b6:	ab e3       	ldi	r26, 0x3B	; 59
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	eb e3       	ldi	r30, 0x3B	; 59
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8c 81       	ldd	r24, Y+4	; 0x04
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	88 2f       	mov	r24, r24
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_enuSetPinValue+0xb2>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_enuSetPinValue+0xae>
 5da:	cb 01       	movw	r24, r22
 5dc:	84 2b       	or	r24, r20
 5de:	8c 93       	st	X, r24
 5e0:	7a c0       	rjmp	.+244    	; 0x6d6 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTB:
						PORTB &= ~(BIT_MASK_VALUE << Copy_PinID);
 5e2:	a8 e3       	ldi	r26, 0x38	; 56
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	e8 e3       	ldi	r30, 0x38	; 56
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	48 2f       	mov	r20, r24
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_enuSetPinValue+0xda>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	2a 95       	dec	r18
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_enuSetPinValue+0xd6>
 602:	80 95       	com	r24
 604:	84 23       	and	r24, r20
 606:	8c 93       	st	X, r24
						PORTB |= (Copy_PinValue << Copy_PinID);
 608:	a8 e3       	ldi	r26, 0x38	; 56
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	e8 e3       	ldi	r30, 0x38	; 56
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	48 2f       	mov	r20, r24
 614:	8c 81       	ldd	r24, Y+4	; 0x04
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	8b 81       	ldd	r24, Y+3	; 0x03
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	b9 01       	movw	r22, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_enuSetPinValue+0x104>
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	8a 95       	dec	r24
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_enuSetPinValue+0x100>
 62c:	cb 01       	movw	r24, r22
 62e:	84 2b       	or	r24, r20
 630:	8c 93       	st	X, r24
 632:	51 c0       	rjmp	.+162    	; 0x6d6 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTC:
						PORTC &= ~(BIT_MASK_VALUE << Copy_PinID);
 634:	a5 e3       	ldi	r26, 0x35	; 53
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	e5 e3       	ldi	r30, 0x35	; 53
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	48 2f       	mov	r20, r24
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_enuSetPinValue+0x12c>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	2a 95       	dec	r18
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_enuSetPinValue+0x128>
 654:	80 95       	com	r24
 656:	84 23       	and	r24, r20
 658:	8c 93       	st	X, r24
						PORTC |= (Copy_PinValue << Copy_PinID);
 65a:	a5 e3       	ldi	r26, 0x35	; 53
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e5 e3       	ldi	r30, 0x35	; 53
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	48 2f       	mov	r20, r24
 666:	8c 81       	ldd	r24, Y+4	; 0x04
 668:	28 2f       	mov	r18, r24
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	88 2f       	mov	r24, r24
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	b9 01       	movw	r22, r18
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_enuSetPinValue+0x156>
 676:	66 0f       	add	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	8a 95       	dec	r24
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_enuSetPinValue+0x152>
 67e:	cb 01       	movw	r24, r22
 680:	84 2b       	or	r24, r20
 682:	8c 93       	st	X, r24
 684:	28 c0       	rjmp	.+80     	; 0x6d6 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTD:
						PORTD &= ~(BIT_MASK_VALUE << Copy_PinID);
 686:	a2 e3       	ldi	r26, 0x32	; 50
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e2 e3       	ldi	r30, 0x32	; 50
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	48 2f       	mov	r20, r24
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_enuSetPinValue+0x17e>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	2a 95       	dec	r18
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_enuSetPinValue+0x17a>
 6a6:	80 95       	com	r24
 6a8:	84 23       	and	r24, r20
 6aa:	8c 93       	st	X, r24
						PORTD |= (Copy_PinValue << Copy_PinID);
 6ac:	a2 e3       	ldi	r26, 0x32	; 50
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	e2 e3       	ldi	r30, 0x32	; 50
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	48 2f       	mov	r20, r24
 6b8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	88 2f       	mov	r24, r24
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	b9 01       	movw	r22, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_enuSetPinValue+0x1a8>
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	8a 95       	dec	r24
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_enuSetPinValue+0x1a4>
 6d0:	cb 01       	movw	r24, r22
 6d2:	84 2b       	or	r24, r20
 6d4:	8c 93       	st	X, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	89 83       	std	Y+1, r24	; 0x01
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <DIO_enuSetPinValue+0x1c2>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
 6dc:	84 e0       	ldi	r24, 0x04	; 4
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_enuSetPinValue+0x1c2>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
 6e2:	83 e0       	ldi	r24, 0x03	; 3
 6e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
}
 6e8:	26 96       	adiw	r28, 0x06	; 6
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	cf 91       	pop	r28
 6f6:	df 91       	pop	r29
 6f8:	08 95       	ret

000006fa <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_PortID, u8 Copy_PinID, u8 *Copy_PinVal){
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	27 97       	sbiw	r28, 0x07	; 7
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	8a 83       	std	Y+2, r24	; 0x02
 710:	6b 83       	std	Y+3, r22	; 0x03
 712:	5d 83       	std	Y+5, r21	; 0x05
 714:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
 716:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	84 30       	cpi	r24, 0x04	; 4
 71c:	08 f0       	brcs	.+2      	; 0x720 <DIO_enuGetPinValue+0x26>
 71e:	7a c0       	rjmp	.+244    	; 0x814 <DIO_enuGetPinValue+0x11a>
			if(Copy_PinID <= DIO_PIN7){
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	88 30       	cpi	r24, 0x08	; 8
 724:	08 f0       	brcs	.+2      	; 0x728 <DIO_enuGetPinValue+0x2e>
 726:	73 c0       	rjmp	.+230    	; 0x80e <DIO_enuGetPinValue+0x114>
				switch(Copy_PortID){
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	28 2f       	mov	r18, r24
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	3f 83       	std	Y+7, r19	; 0x07
 730:	2e 83       	std	Y+6, r18	; 0x06
 732:	4e 81       	ldd	r20, Y+6	; 0x06
 734:	5f 81       	ldd	r21, Y+7	; 0x07
 736:	41 30       	cpi	r20, 0x01	; 1
 738:	51 05       	cpc	r21, r1
 73a:	59 f1       	breq	.+86     	; 0x792 <DIO_enuGetPinValue+0x98>
 73c:	8e 81       	ldd	r24, Y+6	; 0x06
 73e:	9f 81       	ldd	r25, Y+7	; 0x07
 740:	82 30       	cpi	r24, 0x02	; 2
 742:	91 05       	cpc	r25, r1
 744:	34 f4       	brge	.+12     	; 0x752 <DIO_enuGetPinValue+0x58>
 746:	2e 81       	ldd	r18, Y+6	; 0x06
 748:	3f 81       	ldd	r19, Y+7	; 0x07
 74a:	21 15       	cp	r18, r1
 74c:	31 05       	cpc	r19, r1
 74e:	69 f0       	breq	.+26     	; 0x76a <DIO_enuGetPinValue+0x70>
 750:	5b c0       	rjmp	.+182    	; 0x808 <DIO_enuGetPinValue+0x10e>
 752:	4e 81       	ldd	r20, Y+6	; 0x06
 754:	5f 81       	ldd	r21, Y+7	; 0x07
 756:	42 30       	cpi	r20, 0x02	; 2
 758:	51 05       	cpc	r21, r1
 75a:	79 f1       	breq	.+94     	; 0x7ba <DIO_enuGetPinValue+0xc0>
 75c:	8e 81       	ldd	r24, Y+6	; 0x06
 75e:	9f 81       	ldd	r25, Y+7	; 0x07
 760:	83 30       	cpi	r24, 0x03	; 3
 762:	91 05       	cpc	r25, r1
 764:	09 f4       	brne	.+2      	; 0x768 <DIO_enuGetPinValue+0x6e>
 766:	3d c0       	rjmp	.+122    	; 0x7e2 <DIO_enuGetPinValue+0xe8>
 768:	4f c0       	rjmp	.+158    	; 0x808 <DIO_enuGetPinValue+0x10e>
					case DIO_PORTA:
						*Copy_PinVal = ((PINA >> Copy_PinID) & BIT_MASK_VALUE);
 76a:	e9 e3       	ldi	r30, 0x39	; 57
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	28 2f       	mov	r18, r24
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	8b 81       	ldd	r24, Y+3	; 0x03
 776:	88 2f       	mov	r24, r24
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	a9 01       	movw	r20, r18
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_enuGetPinValue+0x88>
 77e:	55 95       	asr	r21
 780:	47 95       	ror	r20
 782:	8a 95       	dec	r24
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_enuGetPinValue+0x84>
 786:	ca 01       	movw	r24, r20
 788:	81 70       	andi	r24, 0x01	; 1
 78a:	ec 81       	ldd	r30, Y+4	; 0x04
 78c:	fd 81       	ldd	r31, Y+5	; 0x05
 78e:	80 83       	st	Z, r24
 790:	3b c0       	rjmp	.+118    	; 0x808 <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTB:
						*Copy_PinVal = ((PINB >> Copy_PinID) & BIT_MASK_VALUE);
 792:	e6 e3       	ldi	r30, 0x36	; 54
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	28 2f       	mov	r18, r24
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	88 2f       	mov	r24, r24
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	a9 01       	movw	r20, r18
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_enuGetPinValue+0xb0>
 7a6:	55 95       	asr	r21
 7a8:	47 95       	ror	r20
 7aa:	8a 95       	dec	r24
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_enuGetPinValue+0xac>
 7ae:	ca 01       	movw	r24, r20
 7b0:	81 70       	andi	r24, 0x01	; 1
 7b2:	ec 81       	ldd	r30, Y+4	; 0x04
 7b4:	fd 81       	ldd	r31, Y+5	; 0x05
 7b6:	80 83       	st	Z, r24
 7b8:	27 c0       	rjmp	.+78     	; 0x808 <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTC:
						*Copy_PinVal = ((PINC >> Copy_PinID) & BIT_MASK_VALUE);
 7ba:	e3 e3       	ldi	r30, 0x33	; 51
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	28 2f       	mov	r18, r24
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	88 2f       	mov	r24, r24
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	a9 01       	movw	r20, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_enuGetPinValue+0xd8>
 7ce:	55 95       	asr	r21
 7d0:	47 95       	ror	r20
 7d2:	8a 95       	dec	r24
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_enuGetPinValue+0xd4>
 7d6:	ca 01       	movw	r24, r20
 7d8:	81 70       	andi	r24, 0x01	; 1
 7da:	ec 81       	ldd	r30, Y+4	; 0x04
 7dc:	fd 81       	ldd	r31, Y+5	; 0x05
 7de:	80 83       	st	Z, r24
 7e0:	13 c0       	rjmp	.+38     	; 0x808 <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTD:
						*Copy_PinVal = ((PIND >> Copy_PinID) & BIT_MASK_VALUE);
 7e2:	e0 e3       	ldi	r30, 0x30	; 48
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	8b 81       	ldd	r24, Y+3	; 0x03
 7ee:	88 2f       	mov	r24, r24
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	a9 01       	movw	r20, r18
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_enuGetPinValue+0x100>
 7f6:	55 95       	asr	r21
 7f8:	47 95       	ror	r20
 7fa:	8a 95       	dec	r24
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_enuGetPinValue+0xfc>
 7fe:	ca 01       	movw	r24, r20
 800:	81 70       	andi	r24, 0x01	; 1
 802:	ec 81       	ldd	r30, Y+4	; 0x04
 804:	fd 81       	ldd	r31, Y+5	; 0x05
 806:	80 83       	st	Z, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	89 83       	std	Y+1, r24	; 0x01
 80c:	05 c0       	rjmp	.+10     	; 0x818 <DIO_enuGetPinValue+0x11e>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
 80e:	84 e0       	ldi	r24, 0x04	; 4
 810:	89 83       	std	Y+1, r24	; 0x01
 812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_enuGetPinValue+0x11e>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
 814:	83 e0       	ldi	r24, 0x03	; 3
 816:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
 818:	89 81       	ldd	r24, Y+1	; 0x01
}
 81a:	27 96       	adiw	r28, 0x07	; 7
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	de bf       	out	0x3e, r29	; 62
 822:	0f be       	out	0x3f, r0	; 63
 824:	cd bf       	out	0x3d, r28	; 61
 826:	cf 91       	pop	r28
 828:	df 91       	pop	r29
 82a:	08 95       	ret

0000082c <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_PortID, u8 Copy_PinID){
 82c:	df 93       	push	r29
 82e:	cf 93       	push	r28
 830:	00 d0       	rcall	.+0      	; 0x832 <DIO_enuTogPinValue+0x6>
 832:	00 d0       	rcall	.+0      	; 0x834 <DIO_enuTogPinValue+0x8>
 834:	0f 92       	push	r0
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	8a 83       	std	Y+2, r24	; 0x02
 83c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
 83e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
 840:	8a 81       	ldd	r24, Y+2	; 0x02
 842:	84 30       	cpi	r24, 0x04	; 4
 844:	08 f0       	brcs	.+2      	; 0x848 <DIO_enuTogPinValue+0x1c>
 846:	78 c0       	rjmp	.+240    	; 0x938 <__stack+0xd9>
			if(Copy_PinID <= DIO_PIN7){
 848:	8b 81       	ldd	r24, Y+3	; 0x03
 84a:	88 30       	cpi	r24, 0x08	; 8
 84c:	08 f0       	brcs	.+2      	; 0x850 <DIO_enuTogPinValue+0x24>
 84e:	71 c0       	rjmp	.+226    	; 0x932 <__stack+0xd3>
				switch(Copy_PortID){
 850:	8a 81       	ldd	r24, Y+2	; 0x02
 852:	28 2f       	mov	r18, r24
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	3d 83       	std	Y+5, r19	; 0x05
 858:	2c 83       	std	Y+4, r18	; 0x04
 85a:	8c 81       	ldd	r24, Y+4	; 0x04
 85c:	9d 81       	ldd	r25, Y+5	; 0x05
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	91 05       	cpc	r25, r1
 862:	49 f1       	breq	.+82     	; 0x8b6 <__stack+0x57>
 864:	2c 81       	ldd	r18, Y+4	; 0x04
 866:	3d 81       	ldd	r19, Y+5	; 0x05
 868:	22 30       	cpi	r18, 0x02	; 2
 86a:	31 05       	cpc	r19, r1
 86c:	2c f4       	brge	.+10     	; 0x878 <__stack+0x19>
 86e:	8c 81       	ldd	r24, Y+4	; 0x04
 870:	9d 81       	ldd	r25, Y+5	; 0x05
 872:	00 97       	sbiw	r24, 0x00	; 0
 874:	61 f0       	breq	.+24     	; 0x88e <__stack+0x2f>
 876:	5a c0       	rjmp	.+180    	; 0x92c <__stack+0xcd>
 878:	2c 81       	ldd	r18, Y+4	; 0x04
 87a:	3d 81       	ldd	r19, Y+5	; 0x05
 87c:	22 30       	cpi	r18, 0x02	; 2
 87e:	31 05       	cpc	r19, r1
 880:	71 f1       	breq	.+92     	; 0x8de <__stack+0x7f>
 882:	8c 81       	ldd	r24, Y+4	; 0x04
 884:	9d 81       	ldd	r25, Y+5	; 0x05
 886:	83 30       	cpi	r24, 0x03	; 3
 888:	91 05       	cpc	r25, r1
 88a:	e9 f1       	breq	.+122    	; 0x906 <__stack+0xa7>
 88c:	4f c0       	rjmp	.+158    	; 0x92c <__stack+0xcd>
					case DIO_PORTA:
						PORTA ^= (BIT_MASK_VALUE << Copy_PinID);
 88e:	ab e3       	ldi	r26, 0x3B	; 59
 890:	b0 e0       	ldi	r27, 0x00	; 0
 892:	eb e3       	ldi	r30, 0x3B	; 59
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	48 2f       	mov	r20, r24
 89a:	8b 81       	ldd	r24, Y+3	; 0x03
 89c:	28 2f       	mov	r18, r24
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 2e       	mov	r0, r18
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__stack+0x4d>
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	0a 94       	dec	r0
 8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <__stack+0x49>
 8b0:	84 27       	eor	r24, r20
 8b2:	8c 93       	st	X, r24
 8b4:	3b c0       	rjmp	.+118    	; 0x92c <__stack+0xcd>
						break;
					case DIO_PORTB:
						PORTB ^= (BIT_MASK_VALUE << Copy_PinID);
 8b6:	a8 e3       	ldi	r26, 0x38	; 56
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e8 e3       	ldi	r30, 0x38	; 56
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	48 2f       	mov	r20, r24
 8c2:	8b 81       	ldd	r24, Y+3	; 0x03
 8c4:	28 2f       	mov	r18, r24
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	02 2e       	mov	r0, r18
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	0a 94       	dec	r0
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	84 27       	eor	r24, r20
 8da:	8c 93       	st	X, r24
 8dc:	27 c0       	rjmp	.+78     	; 0x92c <__stack+0xcd>
						break;
					case DIO_PORTC:
						PORTC ^= (BIT_MASK_VALUE << Copy_PinID);
 8de:	a5 e3       	ldi	r26, 0x35	; 53
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	e5 e3       	ldi	r30, 0x35	; 53
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	48 2f       	mov	r20, r24
 8ea:	8b 81       	ldd	r24, Y+3	; 0x03
 8ec:	28 2f       	mov	r18, r24
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	02 2e       	mov	r0, r18
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	0a 94       	dec	r0
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__stack+0x99>
 900:	84 27       	eor	r24, r20
 902:	8c 93       	st	X, r24
 904:	13 c0       	rjmp	.+38     	; 0x92c <__stack+0xcd>
						break;
					case DIO_PORTD:
						PORTD ^= (BIT_MASK_VALUE << Copy_PinID);
 906:	a2 e3       	ldi	r26, 0x32	; 50
 908:	b0 e0       	ldi	r27, 0x00	; 0
 90a:	e2 e3       	ldi	r30, 0x32	; 50
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	48 2f       	mov	r20, r24
 912:	8b 81       	ldd	r24, Y+3	; 0x03
 914:	28 2f       	mov	r18, r24
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	02 2e       	mov	r0, r18
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	0a 94       	dec	r0
 926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0xc1>
 928:	84 27       	eor	r24, r20
 92a:	8c 93       	st	X, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	89 83       	std	Y+1, r24	; 0x01
 930:	05 c0       	rjmp	.+10     	; 0x93c <__stack+0xdd>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
 932:	84 e0       	ldi	r24, 0x04	; 4
 934:	89 83       	std	Y+1, r24	; 0x01
 936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0xdd>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
 938:	83 e0       	ldi	r24, 0x03	; 3
 93a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
 93c:	89 81       	ldd	r24, Y+1	; 0x01
}
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	0f 90       	pop	r0
 946:	0f 90       	pop	r0
 948:	cf 91       	pop	r28
 94a:	df 91       	pop	r29
 94c:	08 95       	ret

0000094e <main>:
#include "DIO/DIO_int.h"

#include "Registers.h"


int main(void){
 94e:	df 93       	push	r29
 950:	cf 93       	push	r28
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62

	// NORMAL MODE TIMER 0
	DIO_enuSetPinDir(DIO_PORTA, DIO_PIN6, OUTPUT);
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	66 e0       	ldi	r22, 0x06	; 6
 95a:	41 e0       	ldi	r20, 0x01	; 1
 95c:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_enuSetPinDir>

	while(1){
		TCCR0 |= 0x01;
 960:	a3 e5       	ldi	r26, 0x53	; 83
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e3 e5       	ldi	r30, 0x53	; 83
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	81 60       	ori	r24, 0x01	; 1
 96c:	8c 93       	st	X, r24
		TCNT0 = 0xF2;
 96e:	e2 e5       	ldi	r30, 0x52	; 82
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	82 ef       	ldi	r24, 0xF2	; 242
 974:	80 83       	st	Z, r24
		while(!(TIFR & 1));
 976:	e8 e5       	ldi	r30, 0x58	; 88
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	88 2f       	mov	r24, r24
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	81 70       	andi	r24, 0x01	; 1
 982:	90 70       	andi	r25, 0x00	; 0
 984:	00 97       	sbiw	r24, 0x00	; 0
 986:	b9 f3       	breq	.-18     	; 0x976 <main+0x28>

		TCCR0 = 0;
 988:	e3 e5       	ldi	r30, 0x53	; 83
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	10 82       	st	Z, r1

		DIO_enuTogPinValue(DIO_PORTA, DIO_PIN6);
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	66 e0       	ldi	r22, 0x06	; 6
 992:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_enuTogPinValue>
 996:	e4 cf       	rjmp	.-56     	; 0x960 <main+0x12>

00000998 <_exit>:
 998:	f8 94       	cli

0000099a <__stop_program>:
 99a:	ff cf       	rjmp	.-2      	; 0x99a <__stop_program>
