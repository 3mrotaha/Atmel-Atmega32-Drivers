
SimpleCALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  000033e6  0000347a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800196  00800196  000035b0  2**0
                  ALLOC
  3 .stab         00002e8c  00000000  00000000  000035b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f8  00000000  00000000  0000643c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  000077f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  00007a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000b55e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c80c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000c9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000cce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d6f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <main>
      8a:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e7       	ldi	r22, 0x7D	; 125
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 df 19 	jmp	0x33be	; 0x33be <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	eb 57       	subi	r30, 0x7B	; 123
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
     e62:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(DIO_PA_PIN7_DIR, DIO_PA_PIN6_DIR, DIO_PA_PIN5_DIR, DIO_PA_PIN4_DIR, DIO_PA_PIN3_DIR, DIO_PA_PIN2_DIR, DIO_PA_PIN1_DIR, DIO_PA_PIN0_DIR);
     e64:	ea e3       	ldi	r30, 0x3A	; 58
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	80 83       	st	Z, r24
	DDRB = CONC(DIO_PB_PIN7_DIR, DIO_PB_PIN6_DIR, DIO_PB_PIN5_DIR, DIO_PB_PIN4_DIR, DIO_PB_PIN3_DIR, DIO_PB_PIN2_DIR, DIO_PB_PIN1_DIR, DIO_PB_PIN0_DIR);
     e6c:	e7 e3       	ldi	r30, 0x37	; 55
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	8f e7       	ldi	r24, 0x7F	; 127
     e72:	80 83       	st	Z, r24
	DDRC = CONC(DIO_PC_PIN7_DIR, DIO_PC_PIN6_DIR, DIO_PC_PIN5_DIR, DIO_PC_PIN4_DIR, DIO_PC_PIN3_DIR, DIO_PC_PIN2_DIR, DIO_PC_PIN1_DIR, DIO_PC_PIN0_DIR);
     e74:	e4 e3       	ldi	r30, 0x34	; 52
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	8a ef       	ldi	r24, 0xFA	; 250
     e7a:	80 83       	st	Z, r24
	DDRD = CONC(DIO_PD_PIN7_DIR, DIO_PD_PIN6_DIR, DIO_PD_PIN5_DIR, DIO_PD_PIN4_DIR, DIO_PD_PIN3_DIR, DIO_PD_PIN2_DIR, DIO_PD_PIN1_DIR, DIO_PD_PIN0_DIR);
     e7c:	e1 e3       	ldi	r30, 0x31	; 49
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	8f e7       	ldi	r24, 0x7F	; 127
     e82:	80 83       	st	Z, r24

	PORTA = CONC(DIO_PA_PIN7_VAL, DIO_PA_PIN6_VAL, DIO_PA_PIN5_VAL, DIO_PA_PIN4_VAL, DIO_PA_PIN3_VAL, DIO_PA_PIN2_VAL, DIO_PA_PIN1_VAL, DIO_PA_PIN0_VAL);
     e84:	eb e3       	ldi	r30, 0x3B	; 59
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	10 82       	st	Z, r1
	PORTB = CONC(DIO_PB_PIN7_VAL, DIO_PB_PIN6_VAL, DIO_PB_PIN5_VAL, DIO_PB_PIN4_VAL, DIO_PB_PIN3_VAL, DIO_PB_PIN2_VAL, DIO_PB_PIN1_VAL, DIO_PB_PIN0_VAL);
     e8a:	e8 e3       	ldi	r30, 0x38	; 56
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	10 82       	st	Z, r1
	PORTC = CONC(DIO_PC_PIN7_VAL, DIO_PC_PIN6_VAL, DIO_PC_PIN5_VAL, DIO_PC_PIN4_VAL, DIO_PC_PIN3_VAL, DIO_PC_PIN2_VAL, DIO_PC_PIN1_VAL, DIO_PC_PIN0_VAL);
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	10 82       	st	Z, r1
	PORTD = CONC(DIO_PD_PIN7_VAL, DIO_PD_PIN6_VAL, DIO_PD_PIN5_VAL, DIO_PD_PIN4_VAL, DIO_PD_PIN3_VAL, DIO_PD_PIN2_VAL, DIO_PD_PIN1_VAL, DIO_PD_PIN0_VAL);
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	10 82       	st	Z, r1
	Local_enuErrorStates = ES_OK;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStates;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <DIO_enuSetPortDir>:

ES_t DIO_enuSetPortDir(u8 Copy_PortID, u8 Copy_PortDir){
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <DIO_enuSetPortDir+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <DIO_enuSetPortDir+0x8>
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	8a 83       	std	Y+2, r24	; 0x02
     eba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     ebc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	84 30       	cpi	r24, 0x04	; 4
     ec2:	a8 f5       	brcc	.+106    	; 0xf2e <DIO_enuSetPortDir+0x84>
		switch(Copy_PortID){
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3d 83       	std	Y+5, r19	; 0x05
     ecc:	2c 83       	std	Y+4, r18	; 0x04
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	91 05       	cpc	r25, r1
     ed6:	d1 f0       	breq	.+52     	; 0xf0c <DIO_enuSetPortDir+0x62>
     ed8:	2c 81       	ldd	r18, Y+4	; 0x04
     eda:	3d 81       	ldd	r19, Y+5	; 0x05
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	2c f4       	brge	.+10     	; 0xeec <DIO_enuSetPortDir+0x42>
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	61 f0       	breq	.+24     	; 0xf02 <DIO_enuSetPortDir+0x58>
     eea:	1e c0       	rjmp	.+60     	; 0xf28 <DIO_enuSetPortDir+0x7e>
     eec:	2c 81       	ldd	r18, Y+4	; 0x04
     eee:	3d 81       	ldd	r19, Y+5	; 0x05
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	81 f0       	breq	.+32     	; 0xf16 <DIO_enuSetPortDir+0x6c>
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	83 30       	cpi	r24, 0x03	; 3
     efc:	91 05       	cpc	r25, r1
     efe:	81 f0       	breq	.+32     	; 0xf20 <DIO_enuSetPortDir+0x76>
     f00:	13 c0       	rjmp	.+38     	; 0xf28 <DIO_enuSetPortDir+0x7e>
			case DIO_PORTA:
				DDRA = Copy_PortDir;
     f02:	ea e3       	ldi	r30, 0x3A	; 58
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	80 83       	st	Z, r24
     f0a:	0e c0       	rjmp	.+28     	; 0xf28 <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTB:
				DDRB = Copy_PortDir;
     f0c:	e7 e3       	ldi	r30, 0x37	; 55
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	80 83       	st	Z, r24
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTC:
				DDRC = Copy_PortDir;
     f16:	e4 e3       	ldi	r30, 0x34	; 52
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	80 83       	st	Z, r24
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTD:
				DDRD = Copy_PortDir;
     f20:	e1 e3       	ldi	r30, 0x31	; 49
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_enuSetPortDir+0x88>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_PortID, u8 Copy_PortValue){
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <DIO_enuSetPortValue+0x6>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <DIO_enuSetPortValue+0x8>
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     f56:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	a8 f5       	brcc	.+106    	; 0xfc8 <DIO_enuSetPortValue+0x84>
		switch(Copy_PortID){
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3d 83       	std	Y+5, r19	; 0x05
     f66:	2c 83       	std	Y+4, r18	; 0x04
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	d1 f0       	breq	.+52     	; 0xfa6 <DIO_enuSetPortValue+0x62>
     f72:	2c 81       	ldd	r18, Y+4	; 0x04
     f74:	3d 81       	ldd	r19, Y+5	; 0x05
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	2c f4       	brge	.+10     	; 0xf86 <DIO_enuSetPortValue+0x42>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	61 f0       	breq	.+24     	; 0xf9c <DIO_enuSetPortValue+0x58>
     f84:	1e c0       	rjmp	.+60     	; 0xfc2 <DIO_enuSetPortValue+0x7e>
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	81 f0       	breq	.+32     	; 0xfb0 <DIO_enuSetPortValue+0x6c>
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	81 f0       	breq	.+32     	; 0xfba <DIO_enuSetPortValue+0x76>
     f9a:	13 c0       	rjmp	.+38     	; 0xfc2 <DIO_enuSetPortValue+0x7e>
			case DIO_PORTA:
				PORTA = Copy_PortValue;
     f9c:	eb e3       	ldi	r30, 0x3B	; 59
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	80 83       	st	Z, r24
     fa4:	0e c0       	rjmp	.+28     	; 0xfc2 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_PortValue;
     fa6:	e8 e3       	ldi	r30, 0x38	; 56
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	80 83       	st	Z, r24
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_PortValue;
     fb0:	e5 e3       	ldi	r30, 0x35	; 53
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	80 83       	st	Z, r24
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_PortValue;
     fba:	e2 e3       	ldi	r30, 0x32	; 50
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_enuSetPortValue+0x88>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_PortID, u8 *Copy_PortVal){
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_enuGetPortValue+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_enuGetPortValue+0x8>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <DIO_enuGetPortValue+0xa>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	7c 83       	std	Y+4, r23	; 0x04
     ff0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
     ff2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	84 30       	cpi	r24, 0x04	; 4
     ff8:	e8 f5       	brcc	.+122    	; 0x1074 <DIO_enuGetPortValue+0x96>
		switch(Copy_PortID){
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3e 83       	std	Y+6, r19	; 0x06
    1002:	2d 83       	std	Y+5, r18	; 0x05
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	e1 f0       	breq	.+56     	; 0x1046 <DIO_enuGetPortValue+0x68>
    100e:	2d 81       	ldd	r18, Y+5	; 0x05
    1010:	3e 81       	ldd	r19, Y+6	; 0x06
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	2c f4       	brge	.+10     	; 0x1022 <DIO_enuGetPortValue+0x44>
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	61 f0       	breq	.+24     	; 0x1038 <DIO_enuGetPortValue+0x5a>
    1020:	26 c0       	rjmp	.+76     	; 0x106e <DIO_enuGetPortValue+0x90>
    1022:	2d 81       	ldd	r18, Y+5	; 0x05
    1024:	3e 81       	ldd	r19, Y+6	; 0x06
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	a1 f0       	breq	.+40     	; 0x1054 <DIO_enuGetPortValue+0x76>
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	b1 f0       	breq	.+44     	; 0x1062 <DIO_enuGetPortValue+0x84>
    1036:	1b c0       	rjmp	.+54     	; 0x106e <DIO_enuGetPortValue+0x90>
			case DIO_PORTA:
				*Copy_PortVal = PINA;
    1038:	e9 e3       	ldi	r30, 0x39	; 57
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	eb 81       	ldd	r30, Y+3	; 0x03
    1040:	fc 81       	ldd	r31, Y+4	; 0x04
    1042:	80 83       	st	Z, r24
    1044:	14 c0       	rjmp	.+40     	; 0x106e <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTB:
				*Copy_PortVal = PINB;
    1046:	e6 e3       	ldi	r30, 0x36	; 54
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	eb 81       	ldd	r30, Y+3	; 0x03
    104e:	fc 81       	ldd	r31, Y+4	; 0x04
    1050:	80 83       	st	Z, r24
    1052:	0d c0       	rjmp	.+26     	; 0x106e <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTC:
				*Copy_PortVal = PINC;
    1054:	e3 e3       	ldi	r30, 0x33	; 51
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	eb 81       	ldd	r30, Y+3	; 0x03
    105c:	fc 81       	ldd	r31, Y+4	; 0x04
    105e:	80 83       	st	Z, r24
    1060:	06 c0       	rjmp	.+12     	; 0x106e <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTD:
				*Copy_PortVal = PIND;
    1062:	e0 e3       	ldi	r30, 0x30	; 48
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	eb 81       	ldd	r30, Y+3	; 0x03
    106a:	fc 81       	ldd	r31, Y+4	; 0x04
    106c:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_enuGetPortValue+0x9a>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1078:	89 81       	ldd	r24, Y+1	; 0x01
}
    107a:	26 96       	adiw	r28, 0x06	; 6
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_PortID){
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	00 d0       	rcall	.+0      	; 0x1092 <DIO_enuTogPortValue+0x6>
    1092:	00 d0       	rcall	.+0      	; 0x1094 <DIO_enuTogPortValue+0x8>
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    109a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <DIO_enuTogPortValue+0x18>
    10a2:	41 c0       	rjmp	.+130    	; 0x1126 <DIO_enuTogPortValue+0x9a>
		switch(Copy_PortID){
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3c 83       	std	Y+4, r19	; 0x04
    10ac:	2b 83       	std	Y+3, r18	; 0x03
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	e9 f0       	breq	.+58     	; 0x10f2 <DIO_enuTogPortValue+0x66>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <DIO_enuTogPortValue+0x40>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <DIO_enuTogPortValue+0x56>
    10ca:	2a c0       	rjmp	.+84     	; 0x1120 <DIO_enuTogPortValue+0x94>
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	3c 81       	ldd	r19, Y+4	; 0x04
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	b1 f0       	breq	.+44     	; 0x1102 <DIO_enuTogPortValue+0x76>
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	c9 f0       	breq	.+50     	; 0x1112 <DIO_enuTogPortValue+0x86>
    10e0:	1f c0       	rjmp	.+62     	; 0x1120 <DIO_enuTogPortValue+0x94>
			case DIO_PORTA:
				PORTA = ~PORTA;
    10e2:	ab e3       	ldi	r26, 0x3B	; 59
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	eb e3       	ldi	r30, 0x3B	; 59
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 95       	com	r24
    10ee:	8c 93       	st	X, r24
    10f0:	17 c0       	rjmp	.+46     	; 0x1120 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
    10f2:	a8 e3       	ldi	r26, 0x38	; 56
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e8 e3       	ldi	r30, 0x38	; 56
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	80 95       	com	r24
    10fe:	8c 93       	st	X, r24
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    1102:	a5 e3       	ldi	r26, 0x35	; 53
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e3       	ldi	r30, 0x35	; 53
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 95       	com	r24
    110e:	8c 93       	st	X, r24
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    1112:	a2 e3       	ldi	r26, 0x32	; 50
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e2 e3       	ldi	r30, 0x32	; 50
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	80 95       	com	r24
    111e:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_enuTogPortValue+0x9e>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <DIO_enuSetPinDir>:

ES_t DIO_enuSetPinDir(u8 Copy_PortID, u8 Copy_PinID, u8 Copy_PinDir){
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_enuSetPinDir+0x6>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_enuSetPinDir+0x8>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_enuSetPinDir+0xa>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	6b 83       	std	Y+3, r22	; 0x03
    114c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    114e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	08 f0       	brcs	.+2      	; 0x1158 <DIO_enuSetPinDir+0x1e>
    1156:	d0 c0       	rjmp	.+416    	; 0x12f8 <DIO_enuSetPinDir+0x1be>
		if(Copy_PinID <= DIO_PIN7){
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	08 f0       	brcs	.+2      	; 0x1160 <DIO_enuSetPinDir+0x26>
    115e:	c9 c0       	rjmp	.+402    	; 0x12f2 <DIO_enuSetPinDir+0x1b8>
			switch(Copy_PortID){
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3e 83       	std	Y+6, r19	; 0x06
    1168:	2d 83       	std	Y+5, r18	; 0x05
    116a:	6d 81       	ldd	r22, Y+5	; 0x05
    116c:	7e 81       	ldd	r23, Y+6	; 0x06
    116e:	61 30       	cpi	r22, 0x01	; 1
    1170:	71 05       	cpc	r23, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <DIO_enuSetPinDir+0x3c>
    1174:	41 c0       	rjmp	.+130    	; 0x11f8 <DIO_enuSetPinDir+0xbe>
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	82 30       	cpi	r24, 0x02	; 2
    117c:	91 05       	cpc	r25, r1
    117e:	34 f4       	brge	.+12     	; 0x118c <DIO_enuSetPinDir+0x52>
    1180:	2d 81       	ldd	r18, Y+5	; 0x05
    1182:	3e 81       	ldd	r19, Y+6	; 0x06
    1184:	21 15       	cp	r18, r1
    1186:	31 05       	cpc	r19, r1
    1188:	71 f0       	breq	.+28     	; 0x11a6 <DIO_enuSetPinDir+0x6c>
    118a:	b0 c0       	rjmp	.+352    	; 0x12ec <DIO_enuSetPinDir+0x1b2>
    118c:	6d 81       	ldd	r22, Y+5	; 0x05
    118e:	7e 81       	ldd	r23, Y+6	; 0x06
    1190:	62 30       	cpi	r22, 0x02	; 2
    1192:	71 05       	cpc	r23, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <DIO_enuSetPinDir+0x5e>
    1196:	59 c0       	rjmp	.+178    	; 0x124a <DIO_enuSetPinDir+0x110>
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <DIO_enuSetPinDir+0x6a>
    11a2:	7c c0       	rjmp	.+248    	; 0x129c <DIO_enuSetPinDir+0x162>
    11a4:	a3 c0       	rjmp	.+326    	; 0x12ec <DIO_enuSetPinDir+0x1b2>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK_VALUE << Copy_PinID);
    11a6:	aa e3       	ldi	r26, 0x3A	; 58
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ea e3       	ldi	r30, 0x3A	; 58
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_enuSetPinDir+0x88>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	2a 95       	dec	r18
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_enuSetPinDir+0x84>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
					DDRA |= (Copy_PinDir << Copy_PinID);
    11cc:	aa e3       	ldi	r26, 0x3A	; 58
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ea e3       	ldi	r30, 0x3A	; 58
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	b9 01       	movw	r22, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_enuSetPinDir+0xb2>
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	8a 95       	dec	r24
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_enuSetPinDir+0xae>
    11f0:	cb 01       	movw	r24, r22
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	7a c0       	rjmp	.+244    	; 0x12ec <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK_VALUE << Copy_PinID);
    11f8:	a7 e3       	ldi	r26, 0x37	; 55
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e7 e3       	ldi	r30, 0x37	; 55
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_enuSetPinDir+0xda>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	2a 95       	dec	r18
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_enuSetPinDir+0xd6>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
					DDRB |= (Copy_PinDir << Copy_PinID);
    121e:	a7 e3       	ldi	r26, 0x37	; 55
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e7 e3       	ldi	r30, 0x37	; 55
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_enuSetPinDir+0x104>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_enuSetPinDir+0x100>
    1242:	cb 01       	movw	r24, r22
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	51 c0       	rjmp	.+162    	; 0x12ec <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK_VALUE << Copy_PinID);
    124a:	a4 e3       	ldi	r26, 0x34	; 52
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e4 e3       	ldi	r30, 0x34	; 52
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_enuSetPinDir+0x12c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	2a 95       	dec	r18
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_enuSetPinDir+0x128>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
					DDRC |= (Copy_PinDir << Copy_PinID);
    1270:	a4 e3       	ldi	r26, 0x34	; 52
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e4 e3       	ldi	r30, 0x34	; 52
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	b9 01       	movw	r22, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_enuSetPinDir+0x156>
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_enuSetPinDir+0x152>
    1294:	cb 01       	movw	r24, r22
    1296:	84 2b       	or	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	28 c0       	rjmp	.+80     	; 0x12ec <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK_VALUE << Copy_PinID);
    129c:	a1 e3       	ldi	r26, 0x31	; 49
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_enuSetPinDir+0x17e>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	2a 95       	dec	r18
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_enuSetPinDir+0x17a>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
					DDRD |= (Copy_PinDir << Copy_PinID);
    12c2:	a1 e3       	ldi	r26, 0x31	; 49
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e1 e3       	ldi	r30, 0x31	; 49
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	b9 01       	movw	r22, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_enuSetPinDir+0x1a8>
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	8a 95       	dec	r24
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_enuSetPinDir+0x1a4>
    12e6:	cb 01       	movw	r24, r22
    12e8:	84 2b       	or	r24, r20
    12ea:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorStates = ES_OK;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <DIO_enuSetPinDir+0x1c2>
		}
		else{
			Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_enuSetPinDir+0x1c2>
		}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fe:	26 96       	adiw	r28, 0x06	; 6
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_PortID, u8 Copy_PinID, u8 Copy_PinValue){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <DIO_enuSetPinValue+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <DIO_enuSetPinValue+0x8>
    1318:	00 d0       	rcall	.+0      	; 0x131a <DIO_enuSetPinValue+0xa>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	8a 83       	std	Y+2, r24	; 0x02
    1320:	6b 83       	std	Y+3, r22	; 0x03
    1322:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1324:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	08 f0       	brcs	.+2      	; 0x132e <DIO_enuSetPinValue+0x1e>
    132c:	d0 c0       	rjmp	.+416    	; 0x14ce <DIO_enuSetPinValue+0x1be>
			if(Copy_PinID <= DIO_PIN7){
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 30       	cpi	r24, 0x08	; 8
    1332:	08 f0       	brcs	.+2      	; 0x1336 <DIO_enuSetPinValue+0x26>
    1334:	c9 c0       	rjmp	.+402    	; 0x14c8 <DIO_enuSetPinValue+0x1b8>
				switch(Copy_PortID){
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3e 83       	std	Y+6, r19	; 0x06
    133e:	2d 83       	std	Y+5, r18	; 0x05
    1340:	6d 81       	ldd	r22, Y+5	; 0x05
    1342:	7e 81       	ldd	r23, Y+6	; 0x06
    1344:	61 30       	cpi	r22, 0x01	; 1
    1346:	71 05       	cpc	r23, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <DIO_enuSetPinValue+0x3c>
    134a:	41 c0       	rjmp	.+130    	; 0x13ce <DIO_enuSetPinValue+0xbe>
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	91 05       	cpc	r25, r1
    1354:	34 f4       	brge	.+12     	; 0x1362 <DIO_enuSetPinValue+0x52>
    1356:	2d 81       	ldd	r18, Y+5	; 0x05
    1358:	3e 81       	ldd	r19, Y+6	; 0x06
    135a:	21 15       	cp	r18, r1
    135c:	31 05       	cpc	r19, r1
    135e:	71 f0       	breq	.+28     	; 0x137c <DIO_enuSetPinValue+0x6c>
    1360:	b0 c0       	rjmp	.+352    	; 0x14c2 <DIO_enuSetPinValue+0x1b2>
    1362:	6d 81       	ldd	r22, Y+5	; 0x05
    1364:	7e 81       	ldd	r23, Y+6	; 0x06
    1366:	62 30       	cpi	r22, 0x02	; 2
    1368:	71 05       	cpc	r23, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <DIO_enuSetPinValue+0x5e>
    136c:	59 c0       	rjmp	.+178    	; 0x1420 <DIO_enuSetPinValue+0x110>
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	91 05       	cpc	r25, r1
    1376:	09 f4       	brne	.+2      	; 0x137a <DIO_enuSetPinValue+0x6a>
    1378:	7c c0       	rjmp	.+248    	; 0x1472 <DIO_enuSetPinValue+0x162>
    137a:	a3 c0       	rjmp	.+326    	; 0x14c2 <DIO_enuSetPinValue+0x1b2>
					case DIO_PORTA:
						PORTA &= ~(BIT_MASK_VALUE << Copy_PinID);
    137c:	ab e3       	ldi	r26, 0x3B	; 59
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_enuSetPinValue+0x88>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	2a 95       	dec	r18
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_enuSetPinValue+0x84>
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8c 93       	st	X, r24
						PORTA |= (Copy_PinValue << Copy_PinID);
    13a2:	ab e3       	ldi	r26, 0x3B	; 59
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	eb e3       	ldi	r30, 0x3B	; 59
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	b9 01       	movw	r22, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_enuSetPinValue+0xb2>
    13be:	66 0f       	add	r22, r22
    13c0:	77 1f       	adc	r23, r23
    13c2:	8a 95       	dec	r24
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_enuSetPinValue+0xae>
    13c6:	cb 01       	movw	r24, r22
    13c8:	84 2b       	or	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	7a c0       	rjmp	.+244    	; 0x14c2 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTB:
						PORTB &= ~(BIT_MASK_VALUE << Copy_PinID);
    13ce:	a8 e3       	ldi	r26, 0x38	; 56
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e8 e3       	ldi	r30, 0x38	; 56
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_enuSetPinValue+0xda>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	2a 95       	dec	r18
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_enuSetPinValue+0xd6>
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8c 93       	st	X, r24
						PORTB |= (Copy_PinValue << Copy_PinID);
    13f4:	a8 e3       	ldi	r26, 0x38	; 56
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e8 e3       	ldi	r30, 0x38	; 56
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	b9 01       	movw	r22, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_enuSetPinValue+0x104>
    1410:	66 0f       	add	r22, r22
    1412:	77 1f       	adc	r23, r23
    1414:	8a 95       	dec	r24
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_enuSetPinValue+0x100>
    1418:	cb 01       	movw	r24, r22
    141a:	84 2b       	or	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	51 c0       	rjmp	.+162    	; 0x14c2 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTC:
						PORTC &= ~(BIT_MASK_VALUE << Copy_PinID);
    1420:	a5 e3       	ldi	r26, 0x35	; 53
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e3       	ldi	r30, 0x35	; 53
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_enuSetPinValue+0x12c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	2a 95       	dec	r18
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_enuSetPinValue+0x128>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
						PORTC |= (Copy_PinValue << Copy_PinID);
    1446:	a5 e3       	ldi	r26, 0x35	; 53
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e5 e3       	ldi	r30, 0x35	; 53
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_enuSetPinValue+0x156>
    1462:	66 0f       	add	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_enuSetPinValue+0x152>
    146a:	cb 01       	movw	r24, r22
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	28 c0       	rjmp	.+80     	; 0x14c2 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTD:
						PORTD &= ~(BIT_MASK_VALUE << Copy_PinID);
    1472:	a2 e3       	ldi	r26, 0x32	; 50
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e2 e3       	ldi	r30, 0x32	; 50
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_enuSetPinValue+0x17e>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	2a 95       	dec	r18
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_enuSetPinValue+0x17a>
    1492:	80 95       	com	r24
    1494:	84 23       	and	r24, r20
    1496:	8c 93       	st	X, r24
						PORTD |= (Copy_PinValue << Copy_PinID);
    1498:	a2 e3       	ldi	r26, 0x32	; 50
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e3       	ldi	r30, 0x32	; 50
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	b9 01       	movw	r22, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_enuSetPinValue+0x1a8>
    14b4:	66 0f       	add	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	8a 95       	dec	r24
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_enuSetPinValue+0x1a4>
    14bc:	cb 01       	movw	r24, r22
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	05 c0       	rjmp	.+10     	; 0x14d2 <DIO_enuSetPinValue+0x1c2>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
    14c8:	84 e0       	ldi	r24, 0x04	; 4
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_enuSetPinValue+0x1c2>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    14ce:	83 e0       	ldi	r24, 0x03	; 3
    14d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	26 96       	adiw	r28, 0x06	; 6
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_PortID, u8 Copy_PinID, u8 *Copy_PinVal){
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	27 97       	sbiw	r28, 0x07	; 7
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	6b 83       	std	Y+3, r22	; 0x03
    14fe:	5d 83       	std	Y+5, r21	; 0x05
    1500:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1502:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	08 f0       	brcs	.+2      	; 0x150c <DIO_enuGetPinValue+0x26>
    150a:	7a c0       	rjmp	.+244    	; 0x1600 <DIO_enuGetPinValue+0x11a>
			if(Copy_PinID <= DIO_PIN7){
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 30       	cpi	r24, 0x08	; 8
    1510:	08 f0       	brcs	.+2      	; 0x1514 <DIO_enuGetPinValue+0x2e>
    1512:	73 c0       	rjmp	.+230    	; 0x15fa <DIO_enuGetPinValue+0x114>
				switch(Copy_PortID){
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3f 83       	std	Y+7, r19	; 0x07
    151c:	2e 83       	std	Y+6, r18	; 0x06
    151e:	4e 81       	ldd	r20, Y+6	; 0x06
    1520:	5f 81       	ldd	r21, Y+7	; 0x07
    1522:	41 30       	cpi	r20, 0x01	; 1
    1524:	51 05       	cpc	r21, r1
    1526:	59 f1       	breq	.+86     	; 0x157e <DIO_enuGetPinValue+0x98>
    1528:	8e 81       	ldd	r24, Y+6	; 0x06
    152a:	9f 81       	ldd	r25, Y+7	; 0x07
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	91 05       	cpc	r25, r1
    1530:	34 f4       	brge	.+12     	; 0x153e <DIO_enuGetPinValue+0x58>
    1532:	2e 81       	ldd	r18, Y+6	; 0x06
    1534:	3f 81       	ldd	r19, Y+7	; 0x07
    1536:	21 15       	cp	r18, r1
    1538:	31 05       	cpc	r19, r1
    153a:	69 f0       	breq	.+26     	; 0x1556 <DIO_enuGetPinValue+0x70>
    153c:	5b c0       	rjmp	.+182    	; 0x15f4 <DIO_enuGetPinValue+0x10e>
    153e:	4e 81       	ldd	r20, Y+6	; 0x06
    1540:	5f 81       	ldd	r21, Y+7	; 0x07
    1542:	42 30       	cpi	r20, 0x02	; 2
    1544:	51 05       	cpc	r21, r1
    1546:	79 f1       	breq	.+94     	; 0x15a6 <DIO_enuGetPinValue+0xc0>
    1548:	8e 81       	ldd	r24, Y+6	; 0x06
    154a:	9f 81       	ldd	r25, Y+7	; 0x07
    154c:	83 30       	cpi	r24, 0x03	; 3
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <DIO_enuGetPinValue+0x6e>
    1552:	3d c0       	rjmp	.+122    	; 0x15ce <DIO_enuGetPinValue+0xe8>
    1554:	4f c0       	rjmp	.+158    	; 0x15f4 <DIO_enuGetPinValue+0x10e>
					case DIO_PORTA:
						*Copy_PinVal = ((PINA >> Copy_PinID) & BIT_MASK_VALUE);
    1556:	e9 e3       	ldi	r30, 0x39	; 57
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_enuGetPinValue+0x88>
    156a:	55 95       	asr	r21
    156c:	47 95       	ror	r20
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_enuGetPinValue+0x84>
    1572:	ca 01       	movw	r24, r20
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	ec 81       	ldd	r30, Y+4	; 0x04
    1578:	fd 81       	ldd	r31, Y+5	; 0x05
    157a:	80 83       	st	Z, r24
    157c:	3b c0       	rjmp	.+118    	; 0x15f4 <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTB:
						*Copy_PinVal = ((PINB >> Copy_PinID) & BIT_MASK_VALUE);
    157e:	e6 e3       	ldi	r30, 0x36	; 54
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a9 01       	movw	r20, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_enuGetPinValue+0xb0>
    1592:	55 95       	asr	r21
    1594:	47 95       	ror	r20
    1596:	8a 95       	dec	r24
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_enuGetPinValue+0xac>
    159a:	ca 01       	movw	r24, r20
    159c:	81 70       	andi	r24, 0x01	; 1
    159e:	ec 81       	ldd	r30, Y+4	; 0x04
    15a0:	fd 81       	ldd	r31, Y+5	; 0x05
    15a2:	80 83       	st	Z, r24
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTC:
						*Copy_PinVal = ((PINC >> Copy_PinID) & BIT_MASK_VALUE);
    15a6:	e3 e3       	ldi	r30, 0x33	; 51
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a9 01       	movw	r20, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_enuGetPinValue+0xd8>
    15ba:	55 95       	asr	r21
    15bc:	47 95       	ror	r20
    15be:	8a 95       	dec	r24
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_enuGetPinValue+0xd4>
    15c2:	ca 01       	movw	r24, r20
    15c4:	81 70       	andi	r24, 0x01	; 1
    15c6:	ec 81       	ldd	r30, Y+4	; 0x04
    15c8:	fd 81       	ldd	r31, Y+5	; 0x05
    15ca:	80 83       	st	Z, r24
    15cc:	13 c0       	rjmp	.+38     	; 0x15f4 <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTD:
						*Copy_PinVal = ((PIND >> Copy_PinID) & BIT_MASK_VALUE);
    15ce:	e0 e3       	ldi	r30, 0x30	; 48
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a9 01       	movw	r20, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_enuGetPinValue+0x100>
    15e2:	55 95       	asr	r21
    15e4:	47 95       	ror	r20
    15e6:	8a 95       	dec	r24
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_enuGetPinValue+0xfc>
    15ea:	ca 01       	movw	r24, r20
    15ec:	81 70       	andi	r24, 0x01	; 1
    15ee:	ec 81       	ldd	r30, Y+4	; 0x04
    15f0:	fd 81       	ldd	r31, Y+5	; 0x05
    15f2:	80 83       	st	Z, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <DIO_enuGetPinValue+0x11e>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
    15fa:	84 e0       	ldi	r24, 0x04	; 4
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_enuGetPinValue+0x11e>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1604:	89 81       	ldd	r24, Y+1	; 0x01
}
    1606:	27 96       	adiw	r28, 0x07	; 7
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_PortID, u8 Copy_PinID){
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <DIO_enuTogPinValue+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <DIO_enuTogPinValue+0x8>
    1620:	0f 92       	push	r0
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	8a 83       	std	Y+2, r24	; 0x02
    1628:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    162a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	84 30       	cpi	r24, 0x04	; 4
    1630:	08 f0       	brcs	.+2      	; 0x1634 <DIO_enuTogPinValue+0x1c>
    1632:	78 c0       	rjmp	.+240    	; 0x1724 <DIO_enuTogPinValue+0x10c>
			if(Copy_PinID <= DIO_PIN7){
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 30       	cpi	r24, 0x08	; 8
    1638:	08 f0       	brcs	.+2      	; 0x163c <DIO_enuTogPinValue+0x24>
    163a:	71 c0       	rjmp	.+226    	; 0x171e <DIO_enuTogPinValue+0x106>
				switch(Copy_PortID){
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3d 83       	std	Y+5, r19	; 0x05
    1644:	2c 83       	std	Y+4, r18	; 0x04
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	91 05       	cpc	r25, r1
    164e:	49 f1       	breq	.+82     	; 0x16a2 <DIO_enuTogPinValue+0x8a>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <DIO_enuTogPinValue+0x4c>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	61 f0       	breq	.+24     	; 0x167a <DIO_enuTogPinValue+0x62>
    1662:	5a c0       	rjmp	.+180    	; 0x1718 <DIO_enuTogPinValue+0x100>
    1664:	2c 81       	ldd	r18, Y+4	; 0x04
    1666:	3d 81       	ldd	r19, Y+5	; 0x05
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	71 f1       	breq	.+92     	; 0x16ca <DIO_enuTogPinValue+0xb2>
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	83 30       	cpi	r24, 0x03	; 3
    1674:	91 05       	cpc	r25, r1
    1676:	e9 f1       	breq	.+122    	; 0x16f2 <DIO_enuTogPinValue+0xda>
    1678:	4f c0       	rjmp	.+158    	; 0x1718 <DIO_enuTogPinValue+0x100>
					case DIO_PORTA:
						PORTA ^= (BIT_MASK_VALUE << Copy_PinID);
    167a:	ab e3       	ldi	r26, 0x3B	; 59
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	eb e3       	ldi	r30, 0x3B	; 59
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_enuTogPinValue+0x80>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_enuTogPinValue+0x7c>
    169c:	84 27       	eor	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	3b c0       	rjmp	.+118    	; 0x1718 <DIO_enuTogPinValue+0x100>
						break;
					case DIO_PORTB:
						PORTB ^= (BIT_MASK_VALUE << Copy_PinID);
    16a2:	a8 e3       	ldi	r26, 0x38	; 56
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e8 e3       	ldi	r30, 0x38	; 56
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_enuTogPinValue+0xa8>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_enuTogPinValue+0xa4>
    16c4:	84 27       	eor	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	27 c0       	rjmp	.+78     	; 0x1718 <DIO_enuTogPinValue+0x100>
						break;
					case DIO_PORTC:
						PORTC ^= (BIT_MASK_VALUE << Copy_PinID);
    16ca:	a5 e3       	ldi	r26, 0x35	; 53
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e3       	ldi	r30, 0x35	; 53
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_enuTogPinValue+0xd0>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_enuTogPinValue+0xcc>
    16ec:	84 27       	eor	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	13 c0       	rjmp	.+38     	; 0x1718 <DIO_enuTogPinValue+0x100>
						break;
					case DIO_PORTD:
						PORTD ^= (BIT_MASK_VALUE << Copy_PinID);
    16f2:	a2 e3       	ldi	r26, 0x32	; 50
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e2 e3       	ldi	r30, 0x32	; 50
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_enuTogPinValue+0xf8>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_enuTogPinValue+0xf4>
    1714:	84 27       	eor	r24, r20
    1716:	8c 93       	st	X, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <DIO_enuTogPinValue+0x110>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
    171e:	84 e0       	ldi	r24, 0x04	; 4
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_enuTogPinValue+0x110>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	e9 97       	sbiw	r28, 0x39	; 57
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    174e:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDir(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	62 e0       	ldi	r22, 0x02	; 2
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	65 e0       	ldi	r22, 0x05	; 5
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	67 e0       	ldi	r22, 0x07	; 7
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>

	DIO_enuSetPinDir(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	62 e0       	ldi	r22, 0x02	; 2
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	65 e0       	ldi	r22, 0x05	; 5
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	67 e0       	ldi	r22, 0x07	; 7
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	ac e0       	ldi	r26, 0x0C	; 12
    179c:	b2 e4       	ldi	r27, 0x42	; 66
    179e:	8d ab       	std	Y+53, r24	; 0x35
    17a0:	9e ab       	std	Y+54, r25	; 0x36
    17a2:	af ab       	std	Y+55, r26	; 0x37
    17a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a6:	6d a9       	ldd	r22, Y+53	; 0x35
    17a8:	7e a9       	ldd	r23, Y+54	; 0x36
    17aa:	8f a9       	ldd	r24, Y+55	; 0x37
    17ac:	98 ad       	ldd	r25, Y+56	; 0x38
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	4a e7       	ldi	r20, 0x7A	; 122
    17b4:	53 e4       	ldi	r21, 0x43	; 67
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	89 ab       	std	Y+49, r24	; 0x31
    17c0:	9a ab       	std	Y+50, r25	; 0x32
    17c2:	ab ab       	std	Y+51, r26	; 0x33
    17c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17c6:	69 a9       	ldd	r22, Y+49	; 0x31
    17c8:	7a a9       	ldd	r23, Y+50	; 0x32
    17ca:	8b a9       	ldd	r24, Y+51	; 0x33
    17cc:	9c a9       	ldd	r25, Y+52	; 0x34
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e8       	ldi	r20, 0x80	; 128
    17d4:	5f e3       	ldi	r21, 0x3F	; 63
    17d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    17da:	88 23       	and	r24, r24
    17dc:	2c f4       	brge	.+10     	; 0x17e8 <LCD_enuInit+0xae>
		__ticks = 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	98 ab       	std	Y+48, r25	; 0x30
    17e4:	8f a7       	std	Y+47, r24	; 0x2f
    17e6:	3f c0       	rjmp	.+126    	; 0x1866 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    17e8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ea:	7a a9       	ldd	r23, Y+50	; 0x32
    17ec:	8b a9       	ldd	r24, Y+51	; 0x33
    17ee:	9c a9       	ldd	r25, Y+52	; 0x34
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	4f e7       	ldi	r20, 0x7F	; 127
    17f6:	57 e4       	ldi	r21, 0x47	; 71
    17f8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    17fc:	18 16       	cp	r1, r24
    17fe:	4c f5       	brge	.+82     	; 0x1852 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1800:	6d a9       	ldd	r22, Y+53	; 0x35
    1802:	7e a9       	ldd	r23, Y+54	; 0x36
    1804:	8f a9       	ldd	r24, Y+55	; 0x37
    1806:	98 ad       	ldd	r25, Y+56	; 0x38
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e2       	ldi	r20, 0x20	; 32
    180e:	51 e4       	ldi	r21, 0x41	; 65
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	bc 01       	movw	r22, r24
    181a:	cd 01       	movw	r24, r26
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	98 ab       	std	Y+48, r25	; 0x30
    1826:	8f a7       	std	Y+47, r24	; 0x2f
    1828:	0f c0       	rjmp	.+30     	; 0x1848 <LCD_enuInit+0x10e>
    182a:	89 e1       	ldi	r24, 0x19	; 25
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9e a7       	std	Y+46, r25	; 0x2e
    1830:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1832:	8d a5       	ldd	r24, Y+45	; 0x2d
    1834:	9e a5       	ldd	r25, Y+46	; 0x2e
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <LCD_enuInit+0xfc>
    183a:	9e a7       	std	Y+46, r25	; 0x2e
    183c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1840:	98 a9       	ldd	r25, Y+48	; 0x30
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	98 ab       	std	Y+48, r25	; 0x30
    1846:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1848:	8f a5       	ldd	r24, Y+47	; 0x2f
    184a:	98 a9       	ldd	r25, Y+48	; 0x30
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	69 f7       	brne	.-38     	; 0x182a <LCD_enuInit+0xf0>
    1850:	14 c0       	rjmp	.+40     	; 0x187a <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	69 a9       	ldd	r22, Y+49	; 0x31
    1854:	7a a9       	ldd	r23, Y+50	; 0x32
    1856:	8b a9       	ldd	r24, Y+51	; 0x33
    1858:	9c a9       	ldd	r25, Y+52	; 0x34
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
    1866:	8f a5       	ldd	r24, Y+47	; 0x2f
    1868:	98 a9       	ldd	r25, Y+48	; 0x30
    186a:	9c a7       	std	Y+44, r25	; 0x2c
    186c:	8b a7       	std	Y+43, r24	; 0x2b
    186e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1870:	9c a5       	ldd	r25, Y+44	; 0x2c
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <LCD_enuInit+0x138>
    1876:	9c a7       	std	Y+44, r25	; 0x2c
    1878:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDir(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	62 e0       	ldi	r22, 0x02	; 2
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	63 e0       	ldi	r22, 0x03	; 3
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1898:	83 e0       	ldi	r24, 0x03	; 3
    189a:	67 e0       	ldi	r22, 0x07	; 7
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>

	//function set
	LCD_invidSendCommend(0x38);
    18a2:	88 e3       	ldi	r24, 0x38	; 56
    18a4:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_invidSendCommend>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e8       	ldi	r26, 0x80	; 128
    18ae:	bf e3       	ldi	r27, 0x3F	; 63
    18b0:	8f a3       	std	Y+39, r24	; 0x27
    18b2:	98 a7       	std	Y+40, r25	; 0x28
    18b4:	a9 a7       	std	Y+41, r26	; 0x29
    18b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	6f a1       	ldd	r22, Y+39	; 0x27
    18ba:	78 a5       	ldd	r23, Y+40	; 0x28
    18bc:	89 a5       	ldd	r24, Y+41	; 0x29
    18be:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a e7       	ldi	r20, 0x7A	; 122
    18c6:	53 e4       	ldi	r21, 0x43	; 67
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8b a3       	std	Y+35, r24	; 0x23
    18d2:	9c a3       	std	Y+36, r25	; 0x24
    18d4:	ad a3       	std	Y+37, r26	; 0x25
    18d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d8:	6b a1       	ldd	r22, Y+35	; 0x23
    18da:	7c a1       	ldd	r23, Y+36	; 0x24
    18dc:	8d a1       	ldd	r24, Y+37	; 0x25
    18de:	9e a1       	ldd	r25, Y+38	; 0x26
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <LCD_enuInit+0x1c0>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9a a3       	std	Y+34, r25	; 0x22
    18f6:	89 a3       	std	Y+33, r24	; 0x21
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    18fa:	6b a1       	ldd	r22, Y+35	; 0x23
    18fc:	7c a1       	ldd	r23, Y+36	; 0x24
    18fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1900:	9e a1       	ldd	r25, Y+38	; 0x26
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	6f a1       	ldd	r22, Y+39	; 0x27
    1914:	78 a5       	ldd	r23, Y+40	; 0x28
    1916:	89 a5       	ldd	r24, Y+41	; 0x29
    1918:	9a a5       	ldd	r25, Y+42	; 0x2a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9a a3       	std	Y+34, r25	; 0x22
    1938:	89 a3       	std	Y+33, r24	; 0x21
    193a:	0f c0       	rjmp	.+30     	; 0x195a <LCD_enuInit+0x220>
    193c:	89 e1       	ldi	r24, 0x19	; 25
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	98 a3       	std	Y+32, r25	; 0x20
    1942:	8f 8f       	std	Y+31, r24	; 0x1f
    1944:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1946:	98 a1       	ldd	r25, Y+32	; 0x20
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_enuInit+0x20e>
    194c:	98 a3       	std	Y+32, r25	; 0x20
    194e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	89 a1       	ldd	r24, Y+33	; 0x21
    1952:	9a a1       	ldd	r25, Y+34	; 0x22
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9a a3       	std	Y+34, r25	; 0x22
    1958:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	89 a1       	ldd	r24, Y+33	; 0x21
    195c:	9a a1       	ldd	r25, Y+34	; 0x22
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <LCD_enuInit+0x202>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6b a1       	ldd	r22, Y+35	; 0x23
    1966:	7c a1       	ldd	r23, Y+36	; 0x24
    1968:	8d a1       	ldd	r24, Y+37	; 0x25
    196a:	9e a1       	ldd	r25, Y+38	; 0x26
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
    1978:	89 a1       	ldd	r24, Y+33	; 0x21
    197a:	9a a1       	ldd	r25, Y+34	; 0x22
    197c:	9e 8f       	std	Y+30, r25	; 0x1e
    197e:	8d 8f       	std	Y+29, r24	; 0x1d
    1980:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1982:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_enuInit+0x24a>
    1988:	9e 8f       	std	Y+30, r25	; 0x1e
    198a:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    198c:	8f e0       	ldi	r24, 0x0F	; 15
    198e:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_invidSendCommend>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e8       	ldi	r26, 0x80	; 128
    1998:	bf e3       	ldi	r27, 0x3F	; 63
    199a:	89 8f       	std	Y+25, r24	; 0x19
    199c:	9a 8f       	std	Y+26, r25	; 0x1a
    199e:	ab 8f       	std	Y+27, r26	; 0x1b
    19a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	69 8d       	ldd	r22, Y+25	; 0x19
    19a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a e7       	ldi	r20, 0x7A	; 122
    19b0:	53 e4       	ldi	r21, 0x43	; 67
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8d 8b       	std	Y+21, r24	; 0x15
    19bc:	9e 8b       	std	Y+22, r25	; 0x16
    19be:	af 8b       	std	Y+23, r26	; 0x17
    19c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19c2:	6d 89       	ldd	r22, Y+21	; 0x15
    19c4:	7e 89       	ldd	r23, Y+22	; 0x16
    19c6:	8f 89       	ldd	r24, Y+23	; 0x17
    19c8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <LCD_enuInit+0x2aa>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
    19e2:	3f c0       	rjmp	.+126    	; 0x1a62 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    19e4:	6d 89       	ldd	r22, Y+21	; 0x15
    19e6:	7e 89       	ldd	r23, Y+22	; 0x16
    19e8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ea:	98 8d       	ldd	r25, Y+24	; 0x18
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	4c f5       	brge	.+82     	; 0x1a4e <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	69 8d       	ldd	r22, Y+25	; 0x19
    19fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9c 8b       	std	Y+20, r25	; 0x14
    1a22:	8b 8b       	std	Y+19, r24	; 0x13
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <LCD_enuInit+0x30a>
    1a26:	89 e1       	ldi	r24, 0x19	; 25
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9a 8b       	std	Y+18, r25	; 0x12
    1a2c:	89 8b       	std	Y+17, r24	; 0x11
    1a2e:	89 89       	ldd	r24, Y+17	; 0x11
    1a30:	9a 89       	ldd	r25, Y+18	; 0x12
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_enuInit+0x2f8>
    1a36:	9a 8b       	std	Y+18, r25	; 0x12
    1a38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	69 f7       	brne	.-38     	; 0x1a26 <LCD_enuInit+0x2ec>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a50:	7e 89       	ldd	r23, Y+22	; 0x16
    1a52:	8f 89       	ldd	r24, Y+23	; 0x17
    1a54:	98 8d       	ldd	r25, Y+24	; 0x18
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9c 8b       	std	Y+20, r25	; 0x14
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	98 8b       	std	Y+16, r25	; 0x10
    1a68:	8f 87       	std	Y+15, r24	; 0x0f
    1a6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6c:	98 89       	ldd	r25, Y+16	; 0x10
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_enuInit+0x334>
    1a72:	98 8b       	std	Y+16, r25	; 0x10
    1a74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_invidSendCommend>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a0 e0       	ldi	r26, 0x00	; 0
    1a82:	b0 e4       	ldi	r27, 0x40	; 64
    1a84:	8b 87       	std	Y+11, r24	; 0x0b
    1a86:	9c 87       	std	Y+12, r25	; 0x0c
    1a88:	ad 87       	std	Y+13, r26	; 0x0d
    1a8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	4a e7       	ldi	r20, 0x7A	; 122
    1a9a:	53 e4       	ldi	r21, 0x43	; 67
    1a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	8f 83       	std	Y+7, r24	; 0x07
    1aa6:	98 87       	std	Y+8, r25	; 0x08
    1aa8:	a9 87       	std	Y+9, r26	; 0x09
    1aaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aac:	6f 81       	ldd	r22, Y+7	; 0x07
    1aae:	78 85       	ldd	r23, Y+8	; 0x08
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e8       	ldi	r20, 0x80	; 128
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	2c f4       	brge	.+10     	; 0x1ace <LCD_enuInit+0x394>
		__ticks = 1;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	3f c0       	rjmp	.+126    	; 0x1b4c <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    1ace:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad0:	78 85       	ldd	r23, Y+8	; 0x08
    1ad2:	89 85       	ldd	r24, Y+9	; 0x09
    1ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	3f ef       	ldi	r19, 0xFF	; 255
    1ada:	4f e7       	ldi	r20, 0x7F	; 127
    1adc:	57 e4       	ldi	r21, 0x47	; 71
    1ade:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	4c f5       	brge	.+82     	; 0x1b38 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e2       	ldi	r20, 0x20	; 32
    1af4:	51 e4       	ldi	r21, 0x41	; 65
    1af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	0f c0       	rjmp	.+30     	; 0x1b2e <LCD_enuInit+0x3f4>
    1b10:	89 e1       	ldi	r24, 0x19	; 25
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9c 83       	std	Y+4, r25	; 0x04
    1b16:	8b 83       	std	Y+3, r24	; 0x03
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <LCD_enuInit+0x3e2>
    1b20:	9c 83       	std	Y+4, r25	; 0x04
    1b22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	69 f7       	brne	.-38     	; 0x1b10 <LCD_enuInit+0x3d6>
    1b36:	14 c0       	rjmp	.+40     	; 0x1b60 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_enuInit+0x41e>
    1b5c:	9a 83       	std	Y+2, r25	; 0x02
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    1b60:	86 e0       	ldi	r24, 0x06	; 6
    1b62:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_invidSendCommend>

	return Local_enuErrorState;
    1b66:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1b68:	e9 96       	adiw	r28, 0x39	; 57
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <LCD_enuDisplayChar+0x6>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1b86:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	62 e0       	ldi	r22, 0x02	; 2
    1b8c:	41 e0       	ldi	r20, 0x01	; 1
    1b8e:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>

	return Local_enuErrorState;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(char *Copy_u8Data, u8 Copy_u8DataLength){
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <LCD_enuDisplayString+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <LCD_enuDisplayString+0x8>
    1bac:	0f 92       	push	r0
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    1bb8:	1a 82       	std	Y+2, r1	; 0x02

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	62 e0       	ldi	r22, 0x02	; 2
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	u8 Local_u8Iter = 0;
    1bc4:	19 82       	std	Y+1, r1	; 0x01
    1bc6:	0e c0       	rjmp	.+28     	; 0x1be4 <LCD_enuDisplayString+0x40>
	while(Local_u8Iter != Copy_u8DataLength){
		LCD_vidLatch(*(Copy_u8Data+Local_u8Iter));
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	e2 0f       	add	r30, r18
    1bd6:	f3 1f       	adc	r31, r19
    1bd8:	80 81       	ld	r24, Z
    1bda:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>
		Local_u8Iter++;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	8f 5f       	subi	r24, 0xFF	; 255
    1be2:	89 83       	std	Y+1, r24	; 0x01
ES_t LCD_enuDisplayString(char *Copy_u8Data, u8 Copy_u8DataLength){
	ES_t Local_enuErrorState = ES_NOK;

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
	u8 Local_u8Iter = 0;
	while(Local_u8Iter != Copy_u8DataLength){
    1be4:	99 81       	ldd	r25, Y+1	; 0x01
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	98 17       	cp	r25, r24
    1bea:	71 f7       	brne	.-36     	; 0x1bc8 <LCD_enuDisplayString+0x24>
		LCD_vidLatch(*(Copy_u8Data+Local_u8Iter));
		Local_u8Iter++;
	}

	return Local_enuErrorState;
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <LCD_enuSendCommand+0x6>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c0a:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	62 e0       	ldi	r22, 0x02	; 2
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>


	return Local_enuErrorState;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <LCD_enuDisplayIntegerNum+0x6>
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <LCD_enuDisplayIntegerNum+0x8>
    1c30:	0f 92       	push	r0
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	6a 83       	std	Y+2, r22	; 0x02
    1c38:	7b 83       	std	Y+3, r23	; 0x03
    1c3a:	8c 83       	std	Y+4, r24	; 0x04
    1c3c:	9d 83       	std	Y+5, r25	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    1c3e:	19 82       	std	Y+1, r1	; 0x01

	LCD_VoidDisplayAnyNumber(Copy_s32Num);
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	9b 81       	ldd	r25, Y+3	; 0x03
    1c44:	ac 81       	ldd	r26, Y+4	; 0x04
    1c46:	bd 81       	ldd	r27, Y+5	; 0x05
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_VoidDisplayAnyNumber>

	return Local_enuErrorState = ES_OK;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <LCD_DisplayFloatNumber>:

ES_t LCD_DisplayFloatNumber(f32 Copy_f32Number){
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	2f 97       	sbiw	r28, 0x0f	; 15
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	6c 87       	std	Y+12, r22	; 0x0c
    1c7c:	7d 87       	std	Y+13, r23	; 0x0d
    1c7e:	8e 87       	std	Y+14, r24	; 0x0e
    1c80:	9f 87       	std	Y+15, r25	; 0x0f
	ES_t Local_enuErrorState = ES_NOK;
    1c82:	1b 86       	std	Y+11, r1	; 0x0b
	s32 Local_s32IntPart =  (s32) Copy_f32Number;
    1c84:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c86:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c88:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c8c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8f 83       	std	Y+7, r24	; 0x07
    1c96:	98 87       	std	Y+8, r25	; 0x08
    1c98:	a9 87       	std	Y+9, r26	; 0x09
    1c9a:	ba 87       	std	Y+10, r27	; 0x0a
	f64 Local_f32FractPart = (Copy_f32Number - Local_s32IntPart);
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1ca8:	9b 01       	movw	r18, r22
    1caa:	ac 01       	movw	r20, r24
    1cac:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cae:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cb4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	ad 83       	std	Y+5, r26	; 0x05
    1cc2:	be 83       	std	Y+6, r27	; 0x06

	LCD_VoidDisplayAnyNumber(Local_s32IntPart);
    1cc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc6:	98 85       	ldd	r25, Y+8	; 0x08
    1cc8:	a9 85       	ldd	r26, Y+9	; 0x09
    1cca:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_VoidDisplayAnyNumber>
	LCD_vidLatch('.');
    1cd4:	8e e2       	ldi	r24, 0x2E	; 46
    1cd6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>
	u8 Local_u8FractDigits = LCD_u8ReturnNumOfDigits(Local_f32FractPart);
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	ad 81       	ldd	r26, Y+5	; 0x05
    1ce0:	be 81       	ldd	r27, Y+6	; 0x06
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_u8ReturnNumOfDigits>
    1cea:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_u8Iterator = 0; Local_u8Iterator < Local_u8FractDigits; Local_u8Iterator++){
    1cec:	19 82       	std	Y+1, r1	; 0x01
    1cee:	39 c0       	rjmp	.+114    	; 0x1d62 <LCD_DisplayFloatNumber+0xfc>
		Local_f32FractPart -= (s32) Local_f32FractPart;
    1cf0:	6b 81       	ldd	r22, Y+3	; 0x03
    1cf2:	7c 81       	ldd	r23, Y+4	; 0x04
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1d08:	9b 01       	movw	r18, r22
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	6b 81       	ldd	r22, Y+3	; 0x03
    1d0e:	7c 81       	ldd	r23, Y+4	; 0x04
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	ad 83       	std	Y+5, r26	; 0x05
    1d22:	be 83       	std	Y+6, r27	; 0x06
		Local_f32FractPart *= 10;
    1d24:	6b 81       	ldd	r22, Y+3	; 0x03
    1d26:	7c 81       	ldd	r23, Y+4	; 0x04
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	ad 83       	std	Y+5, r26	; 0x05
    1d42:	be 83       	std	Y+6, r27	; 0x06
		LCD_VoidDisplayAnyNumber((s32) Local_f32FractPart);
    1d44:	6b 81       	ldd	r22, Y+3	; 0x03
    1d46:	7c 81       	ldd	r23, Y+4	; 0x04
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_VoidDisplayAnyNumber>
	f64 Local_f32FractPart = (Copy_f32Number - Local_s32IntPart);

	LCD_VoidDisplayAnyNumber(Local_s32IntPart);
	LCD_vidLatch('.');
	u8 Local_u8FractDigits = LCD_u8ReturnNumOfDigits(Local_f32FractPart);
	for(u8 Local_u8Iterator = 0; Local_u8Iterator < Local_u8FractDigits; Local_u8Iterator++){
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	8f 5f       	subi	r24, 0xFF	; 255
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	99 81       	ldd	r25, Y+1	; 0x01
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	98 17       	cp	r25, r24
    1d68:	18 f2       	brcs	.-122    	; 0x1cf0 <LCD_DisplayFloatNumber+0x8a>
		Local_f32FractPart *= 10;
		LCD_VoidDisplayAnyNumber((s32) Local_f32FractPart);
	}


	return Local_enuErrorState = ES_OK;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	8b 87       	std	Y+11, r24	; 0x0b
    1d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1d70:	2f 96       	adiw	r28, 0x0f	; 15
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <LCD_enuDisplayExtraChar>:
ES_t LCD_enuDisplayExtraChar(u8* Copy_pu8Character,u8 Copy_u8CharNum ,u8 Copy_u8Position , u8 Copy_u8Entry)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	27 97       	sbiw	r28, 0x07	; 7
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	6d 83       	std	Y+5, r22	; 0x05
    1d9c:	4e 83       	std	Y+6, r20	; 0x06
    1d9e:	2f 83       	std	Y+7, r18	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    1da0:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_u8CharNum <= 8)
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	89 30       	cpi	r24, 0x09	; 9
    1da6:	08 f0       	brcs	.+2      	; 0x1daa <LCD_enuDisplayExtraChar+0x28>
    1da8:	42 c0       	rjmp	.+132    	; 0x1e2e <LCD_enuDisplayExtraChar+0xac>
	{
		LCD_invidSendCommend(0x40);
    1daa:	80 e4       	ldi	r24, 0x40	; 64
    1dac:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_invidSendCommend>
		u8 Local_u8Iter ;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	62 e0       	ldi	r22, 0x02	; 2
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
		for (Local_u8Iter=0 ; Local_u8Iter < (Copy_u8CharNum *8) ;Local_u8Iter ++)
    1dba:	19 82       	std	Y+1, r1	; 0x01
    1dbc:	0e c0       	rjmp	.+28     	; 0x1dda <LCD_enuDisplayExtraChar+0x58>
		{
			LCD_vidLatch(Copy_pu8Character[Local_u8Iter]);
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e2 0f       	add	r30, r18
    1dcc:	f3 1f       	adc	r31, r19
    1dce:	80 81       	ld	r24, Z
    1dd0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>
	if (Copy_u8CharNum <= 8)
	{
		LCD_invidSendCommend(0x40);
		u8 Local_u8Iter ;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		for (Local_u8Iter=0 ; Local_u8Iter < (Copy_u8CharNum *8) ;Local_u8Iter ++)
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	28 17       	cp	r18, r24
    1df4:	39 07       	cpc	r19, r25
    1df6:	1c f3       	brlt	.-58     	; 0x1dbe <LCD_enuDisplayExtraChar+0x3c>
		{
			LCD_vidLatch(Copy_pu8Character[Local_u8Iter]);
		}
		if (Copy_u8Entry == 0x04)
    1df8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	31 f4       	brne	.+12     	; 0x1e0a <LCD_enuDisplayExtraChar+0x88>
		{
			LCD_invidSendCommend(Copy_u8Position);
    1dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1e00:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_invidSendCommend>
			LCD_invidSendCommend(Copy_u8Entry);
    1e04:	8f 81       	ldd	r24, Y+7	; 0x07
    1e06:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_invidSendCommend>
		}
		for (Local_u8Iter=0 ; Local_u8Iter < Copy_u8CharNum  ;Local_u8Iter ++)
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	0b c0       	rjmp	.+22     	; 0x1e24 <LCD_enuDisplayExtraChar+0xa2>
		{
			DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
			LCD_vidLatch(Local_u8Iter);
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>
		if (Copy_u8Entry == 0x04)
		{
			LCD_invidSendCommend(Copy_u8Position);
			LCD_invidSendCommend(Copy_u8Entry);
		}
		for (Local_u8Iter=0 ; Local_u8Iter < Copy_u8CharNum  ;Local_u8Iter ++)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	99 81       	ldd	r25, Y+1	; 0x01
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	98 17       	cp	r25, r24
    1e2a:	88 f3       	brcs	.-30     	; 0x1e0e <LCD_enuDisplayExtraChar+0x8c>
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <LCD_enuDisplayExtraChar+0xb0>
			LCD_vidLatch(Local_u8Iter);
		}
	}
	else
	{
		Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    1e2e:	85 e0       	ldi	r24, 0x05	; 5
    1e30:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e34:	27 96       	adiw	r28, 0x07	; 7
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	6d 97       	sbiw	r28, 0x1d	; 29
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	65 e0       	ldi	r22, 0x05	; 5
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	67 e0       	ldi	r22, 0x07	; 7
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e72:	98 2f       	mov	r25, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	99 27       	eor	r25, r25
    1e78:	99 1f       	adc	r25, r25
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	49 2f       	mov	r20, r25
    1e80:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e86:	82 95       	swap	r24
    1e88:	86 95       	lsr	r24
    1e8a:	86 95       	lsr	r24
    1e8c:	83 70       	andi	r24, 0x03	; 3
    1e8e:	98 2f       	mov	r25, r24
    1e90:	91 70       	andi	r25, 0x01	; 1
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	65 e0       	ldi	r22, 0x05	; 5
    1e96:	49 2f       	mov	r20, r25
    1e98:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1e9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e9e:	82 95       	swap	r24
    1ea0:	86 95       	lsr	r24
    1ea2:	87 70       	andi	r24, 0x07	; 7
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	91 70       	andi	r25, 0x01	; 1
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	67 e0       	ldi	r22, 0x07	; 7
    1eac:	49 2f       	mov	r20, r25
    1eae:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1eb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb4:	82 95       	swap	r24
    1eb6:	8f 70       	andi	r24, 0x0F	; 15
    1eb8:	98 2f       	mov	r25, r24
    1eba:	91 70       	andi	r25, 0x01	; 1
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	49 2f       	mov	r20, r25
    1ec2:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    1ec6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec8:	86 95       	lsr	r24
    1eca:	86 95       	lsr	r24
    1ecc:	86 95       	lsr	r24
    1ece:	98 2f       	mov	r25, r24
    1ed0:	91 70       	andi	r25, 0x01	; 1
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	61 e0       	ldi	r22, 0x01	; 1
    1ed6:	49 2f       	mov	r20, r25
    1ed8:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1edc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ede:	86 95       	lsr	r24
    1ee0:	86 95       	lsr	r24
    1ee2:	98 2f       	mov	r25, r24
    1ee4:	91 70       	andi	r25, 0x01	; 1
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	62 e0       	ldi	r22, 0x02	; 2
    1eea:	49 2f       	mov	r20, r25
    1eec:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1ef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef2:	86 95       	lsr	r24
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	91 70       	andi	r25, 0x01	; 1
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	63 e0       	ldi	r22, 0x03	; 3
    1efc:	49 2f       	mov	r20, r25
    1efe:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f04:	98 2f       	mov	r25, r24
    1f06:	91 70       	andi	r25, 0x01	; 1
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	67 e0       	ldi	r22, 0x07	; 7
    1f0c:	49 2f       	mov	r20, r25
    1f0e:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	67 e0       	ldi	r22, 0x07	; 7
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e2       	ldi	r26, 0x20	; 32
    1f22:	b1 e4       	ldi	r27, 0x41	; 65
    1f24:	89 8f       	std	Y+25, r24	; 0x19
    1f26:	9a 8f       	std	Y+26, r25	; 0x1a
    1f28:	ab 8f       	std	Y+27, r26	; 0x1b
    1f2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	53 e4       	ldi	r21, 0x43	; 67
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8d 8b       	std	Y+21, r24	; 0x15
    1f46:	9e 8b       	std	Y+22, r25	; 0x16
    1f48:	af 8b       	std	Y+23, r26	; 0x17
    1f4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f50:	8f 89       	ldd	r24, Y+23	; 0x17
    1f52:	98 8d       	ldd	r25, Y+24	; 0x18
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <LCD_vidLatch+0x128>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9c 8b       	std	Y+20, r25	; 0x14
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    1f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f70:	7e 89       	ldd	r23, Y+22	; 0x16
    1f72:	8f 89       	ldd	r24, Y+23	; 0x17
    1f74:	98 8d       	ldd	r25, Y+24	; 0x18
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	69 8d       	ldd	r22, Y+25	; 0x19
    1f88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9c 8b       	std	Y+20, r25	; 0x14
    1fac:	8b 8b       	std	Y+19, r24	; 0x13
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <LCD_vidLatch+0x188>
    1fb0:	89 e1       	ldi	r24, 0x19	; 25
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9a 8b       	std	Y+18, r25	; 0x12
    1fb6:	89 8b       	std	Y+17, r24	; 0x11
    1fb8:	89 89       	ldd	r24, Y+17	; 0x11
    1fba:	9a 89       	ldd	r25, Y+18	; 0x12
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_vidLatch+0x176>
    1fc0:	9a 8b       	std	Y+18, r25	; 0x12
    1fc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <LCD_vidLatch+0x16a>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9c 8b       	std	Y+20, r25	; 0x14
    1fea:	8b 8b       	std	Y+19, r24	; 0x13
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	98 8b       	std	Y+16, r25	; 0x10
    1ff2:	8f 87       	std	Y+15, r24	; 0x0f
    1ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff6:	98 89       	ldd	r25, Y+16	; 0x10
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_vidLatch+0x1b2>
    1ffc:	98 8b       	std	Y+16, r25	; 0x10
    1ffe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	67 e0       	ldi	r22, 0x07	; 7
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a0 e2       	ldi	r26, 0x20	; 32
    2010:	b1 e4       	ldi	r27, 0x41	; 65
    2012:	8b 87       	std	Y+11, r24	; 0x0b
    2014:	9c 87       	std	Y+12, r25	; 0x0c
    2016:	ad 87       	std	Y+13, r26	; 0x0d
    2018:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201a:	6b 85       	ldd	r22, Y+11	; 0x0b
    201c:	7c 85       	ldd	r23, Y+12	; 0x0c
    201e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2020:	9e 85       	ldd	r25, Y+14	; 0x0e
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a e7       	ldi	r20, 0x7A	; 122
    2028:	53 e4       	ldi	r21, 0x43	; 67
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	8f 83       	std	Y+7, r24	; 0x07
    2034:	98 87       	std	Y+8, r25	; 0x08
    2036:	a9 87       	std	Y+9, r26	; 0x09
    2038:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    203a:	6f 81       	ldd	r22, Y+7	; 0x07
    203c:	78 85       	ldd	r23, Y+8	; 0x08
    203e:	89 85       	ldd	r24, Y+9	; 0x09
    2040:	9a 85       	ldd	r25, Y+10	; 0x0a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5f e3       	ldi	r21, 0x3F	; 63
    204a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    204e:	88 23       	and	r24, r24
    2050:	2c f4       	brge	.+10     	; 0x205c <LCD_vidLatch+0x216>
		__ticks = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	3f c0       	rjmp	.+126    	; 0x20da <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	3f ef       	ldi	r19, 0xFF	; 255
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	57 e4       	ldi	r21, 0x47	; 71
    206c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2070:	18 16       	cp	r1, r24
    2072:	4c f5       	brge	.+82     	; 0x20c6 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2074:	6b 85       	ldd	r22, Y+11	; 0x0b
    2076:	7c 85       	ldd	r23, Y+12	; 0x0c
    2078:	8d 85       	ldd	r24, Y+13	; 0x0d
    207a:	9e 85       	ldd	r25, Y+14	; 0x0e
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e2       	ldi	r20, 0x20	; 32
    2082:	51 e4       	ldi	r21, 0x41	; 65
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	0f c0       	rjmp	.+30     	; 0x20bc <LCD_vidLatch+0x276>
    209e:	89 e1       	ldi	r24, 0x19	; 25
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_vidLatch+0x264>
    20ae:	9c 83       	std	Y+4, r25	; 0x04
    20b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	69 f7       	brne	.-38     	; 0x209e <LCD_vidLatch+0x258>
    20c4:	14 c0       	rjmp	.+40     	; 0x20ee <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9e 83       	std	Y+6, r25	; 0x06
    20d8:	8d 83       	std	Y+5, r24	; 0x05
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_vidLatch+0x2a0>
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    20ee:	6d 96       	adiw	r28, 0x1d	; 29
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	2f 97       	sbiw	r28, 0x0f	; 15
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	65 e0       	ldi	r22, 0x05	; 5
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	67 e0       	ldi	r22, 0x07	; 7
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2134:	8f 85       	ldd	r24, Y+15	; 0x0f
    2136:	98 2f       	mov	r25, r24
    2138:	99 1f       	adc	r25, r25
    213a:	99 27       	eor	r25, r25
    213c:	99 1f       	adc	r25, r25
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	62 e0       	ldi	r22, 0x02	; 2
    2142:	49 2f       	mov	r20, r25
    2144:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2148:	8f 85       	ldd	r24, Y+15	; 0x0f
    214a:	82 95       	swap	r24
    214c:	86 95       	lsr	r24
    214e:	86 95       	lsr	r24
    2150:	83 70       	andi	r24, 0x03	; 3
    2152:	98 2f       	mov	r25, r24
    2154:	91 70       	andi	r25, 0x01	; 1
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	65 e0       	ldi	r22, 0x05	; 5
    215a:	49 2f       	mov	r20, r25
    215c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2160:	8f 85       	ldd	r24, Y+15	; 0x0f
    2162:	82 95       	swap	r24
    2164:	86 95       	lsr	r24
    2166:	87 70       	andi	r24, 0x07	; 7
    2168:	98 2f       	mov	r25, r24
    216a:	91 70       	andi	r25, 0x01	; 1
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	67 e0       	ldi	r22, 0x07	; 7
    2170:	49 2f       	mov	r20, r25
    2172:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	82 95       	swap	r24
    217a:	8f 70       	andi	r24, 0x0F	; 15
    217c:	98 2f       	mov	r25, r24
    217e:	91 70       	andi	r25, 0x01	; 1
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	49 2f       	mov	r20, r25
    2186:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    218a:	8f 85       	ldd	r24, Y+15	; 0x0f
    218c:	86 95       	lsr	r24
    218e:	86 95       	lsr	r24
    2190:	86 95       	lsr	r24
    2192:	98 2f       	mov	r25, r24
    2194:	91 70       	andi	r25, 0x01	; 1
    2196:	82 e0       	ldi	r24, 0x02	; 2
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	49 2f       	mov	r20, r25
    219c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    21a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a2:	86 95       	lsr	r24
    21a4:	86 95       	lsr	r24
    21a6:	98 2f       	mov	r25, r24
    21a8:	91 70       	andi	r25, 0x01	; 1
    21aa:	82 e0       	ldi	r24, 0x02	; 2
    21ac:	62 e0       	ldi	r22, 0x02	; 2
    21ae:	49 2f       	mov	r20, r25
    21b0:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    21b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b6:	86 95       	lsr	r24
    21b8:	98 2f       	mov	r25, r24
    21ba:	91 70       	andi	r25, 0x01	; 1
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	63 e0       	ldi	r22, 0x03	; 3
    21c0:	49 2f       	mov	r20, r25
    21c2:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	98 2f       	mov	r25, r24
    21ca:	91 70       	andi	r25, 0x01	; 1
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	67 e0       	ldi	r22, 0x07	; 7
    21d0:	49 2f       	mov	r20, r25
    21d2:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	67 e0       	ldi	r22, 0x07	; 7
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e2       	ldi	r26, 0x20	; 32
    21e6:	b1 e4       	ldi	r27, 0x41	; 65
    21e8:	8b 87       	std	Y+11, r24	; 0x0b
    21ea:	9c 87       	std	Y+12, r25	; 0x0c
    21ec:	ad 87       	std	Y+13, r26	; 0x0d
    21ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	53 e4       	ldi	r21, 0x43	; 67
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	8f 83       	std	Y+7, r24	; 0x07
    220a:	98 87       	std	Y+8, r25	; 0x08
    220c:	a9 87       	std	Y+9, r26	; 0x09
    220e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2210:	6f 81       	ldd	r22, Y+7	; 0x07
    2212:	78 85       	ldd	r23, Y+8	; 0x08
    2214:	89 85       	ldd	r24, Y+9	; 0x09
    2216:	9a 85       	ldd	r25, Y+10	; 0x0a
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	2c f4       	brge	.+10     	; 0x2232 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	3f c0       	rjmp	.+126    	; 0x22b0 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	4c f5       	brge	.+82     	; 0x229c <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224a:	6b 85       	ldd	r22, Y+11	; 0x0b
    224c:	7c 85       	ldd	r23, Y+12	; 0x0c
    224e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	51 e4       	ldi	r21, 0x41	; 65
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <LCD_invidSendCommend+0x192>
    2274:	89 e1       	ldi	r24, 0x19	; 25
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	8b 83       	std	Y+3, r24	; 0x03
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_invidSendCommend+0x180>
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	69 f7       	brne	.-38     	; 0x2274 <LCD_invidSendCommend+0x174>
    229a:	14 c0       	rjmp	.+40     	; 0x22c4 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_invidSendCommend+0x1bc>
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	67 e0       	ldi	r22, 0x07	; 7
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
}
    22ce:	2f 96       	adiw	r28, 0x0f	; 15
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <LCD_VoidDisplayAnyNumber>:


static inline void LCD_VoidDisplayAnyNumber(s32 Copy_s32Num)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	2a 97       	sbiw	r28, 0x0a	; 10
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	6f 83       	std	Y+7, r22	; 0x07
    22f6:	78 87       	std	Y+8, r23	; 0x08
    22f8:	89 87       	std	Y+9, r24	; 0x09
    22fa:	9a 87       	std	Y+10, r25	; 0x0a

	s32 Local_s32Reverse=0;
    22fc:	1b 82       	std	Y+3, r1	; 0x03
    22fe:	1c 82       	std	Y+4, r1	; 0x04
    2300:	1d 82       	std	Y+5, r1	; 0x05
    2302:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    2304:	1a 82       	std	Y+2, r1	; 0x02
    2306:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_s32Num == 0){
    2308:	8f 81       	ldd	r24, Y+7	; 0x07
    230a:	98 85       	ldd	r25, Y+8	; 0x08
    230c:	a9 85       	ldd	r26, Y+9	; 0x09
    230e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	a1 05       	cpc	r26, r1
    2314:	b1 05       	cpc	r27, r1
    2316:	41 f4       	brne	.+16     	; 0x2328 <LCD_VoidDisplayAnyNumber+0x48>
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	41 e0       	ldi	r20, 0x01	; 1
    231e:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
		LCD_vidLatch('0');
    2322:	80 e3       	ldi	r24, 0x30	; 48
    2324:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>
	}
	if(Copy_s32Num <0)
    2328:	8f 81       	ldd	r24, Y+7	; 0x07
    232a:	98 85       	ldd	r25, Y+8	; 0x08
    232c:	a9 85       	ldd	r26, Y+9	; 0x09
    232e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2330:	bb 23       	and	r27, r27
    2332:	0c f0       	brlt	.+2      	; 0x2336 <LCD_VoidDisplayAnyNumber+0x56>
    2334:	57 c0       	rjmp	.+174    	; 0x23e4 <LCD_VoidDisplayAnyNumber+0x104>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    2340:	8d e2       	ldi	r24, 0x2D	; 45
    2342:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    2346:	8f 81       	ldd	r24, Y+7	; 0x07
    2348:	98 85       	ldd	r25, Y+8	; 0x08
    234a:	a9 85       	ldd	r26, Y+9	; 0x09
    234c:	ba 85       	ldd	r27, Y+10	; 0x0a
    234e:	b0 95       	com	r27
    2350:	a0 95       	com	r26
    2352:	90 95       	com	r25
    2354:	81 95       	neg	r24
    2356:	9f 4f       	sbci	r25, 0xFF	; 255
    2358:	af 4f       	sbci	r26, 0xFF	; 255
    235a:	bf 4f       	sbci	r27, 0xFF	; 255
    235c:	8f 83       	std	Y+7, r24	; 0x07
    235e:	98 87       	std	Y+8, r25	; 0x08
    2360:	a9 87       	std	Y+9, r26	; 0x09
    2362:	ba 87       	std	Y+10, r27	; 0x0a
    2364:	3f c0       	rjmp	.+126    	; 0x23e4 <LCD_VoidDisplayAnyNumber+0x104>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    2366:	8f 81       	ldd	r24, Y+7	; 0x07
    2368:	98 85       	ldd	r25, Y+8	; 0x08
    236a:	a9 85       	ldd	r26, Y+9	; 0x09
    236c:	ba 85       	ldd	r27, Y+10	; 0x0a
    236e:	2a e0       	ldi	r18, 0x0A	; 10
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divmodsi4>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	ad 81       	ldd	r26, Y+5	; 0x05
    238a:	be 81       	ldd	r27, Y+6	; 0x06
    238c:	2a e0       	ldi	r18, 0x0A	; 10
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsi3>
    239c:	9b 01       	movw	r18, r22
    239e:	ac 01       	movw	r20, r24
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a0 e0       	ldi	r26, 0x00	; 0
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	a4 1f       	adc	r26, r20
    23b0:	b5 1f       	adc	r27, r21
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	ad 83       	std	Y+5, r26	; 0x05
    23b8:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    23ba:	8f 81       	ldd	r24, Y+7	; 0x07
    23bc:	98 85       	ldd	r25, Y+8	; 0x08
    23be:	a9 85       	ldd	r26, Y+9	; 0x09
    23c0:	ba 85       	ldd	r27, Y+10	; 0x0a
    23c2:	2a e0       	ldi	r18, 0x0A	; 10
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divmodsi4>
    23d2:	da 01       	movw	r26, r20
    23d4:	c9 01       	movw	r24, r18
    23d6:	8f 83       	std	Y+7, r24	; 0x07
    23d8:	98 87       	std	Y+8, r25	; 0x08
    23da:	a9 87       	std	Y+9, r26	; 0x09
    23dc:	ba 87       	std	Y+10, r27	; 0x0a
		Local_u8NumDigit ++;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	8f 5f       	subi	r24, 0xFF	; 255
    23e2:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    23e4:	8f 81       	ldd	r24, Y+7	; 0x07
    23e6:	98 85       	ldd	r25, Y+8	; 0x08
    23e8:	a9 85       	ldd	r26, Y+9	; 0x09
    23ea:	ba 85       	ldd	r27, Y+10	; 0x0a
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	a1 05       	cpc	r26, r1
    23f0:	b1 05       	cpc	r27, r1
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <LCD_VoidDisplayAnyNumber+0x116>
    23f4:	b8 cf       	rjmp	.-144    	; 0x2366 <LCD_VoidDisplayAnyNumber+0x86>
    23f6:	2d c0       	rjmp	.+90     	; 0x2452 <LCD_VoidDisplayAnyNumber+0x172>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	ad 81       	ldd	r26, Y+5	; 0x05
    23fe:	be 81       	ldd	r27, Y+6	; 0x06
    2400:	2a e0       	ldi	r18, 0x0A	; 10
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divmodsi4>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	62 e0       	ldi	r22, 0x02	; 2
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	80 5d       	subi	r24, 0xD0	; 208
    2424:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	ad 81       	ldd	r26, Y+5	; 0x05
    242e:	be 81       	ldd	r27, Y+6	; 0x06
    2430:	2a e0       	ldi	r18, 0x0A	; 10
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divmodsi4>
    2440:	da 01       	movw	r26, r20
    2442:	c9 01       	movw	r24, r18
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	ad 83       	std	Y+5, r26	; 0x05
    244a:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	81 50       	subi	r24, 0x01	; 1
    2450:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	88 23       	and	r24, r24
    2456:	81 f6       	brne	.-96     	; 0x23f8 <LCD_VoidDisplayAnyNumber+0x118>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

}
    2458:	2a 96       	adiw	r28, 0x0a	; 10
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <LCD_u8ReturnNumOfDigits>:

static inline u8 LCD_u8ReturnNumOfDigits(f32 Copy_s32Num){
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <LCD_u8ReturnNumOfDigits+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <LCD_u8ReturnNumOfDigits+0x8>
    2472:	0f 92       	push	r0
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	6a 83       	std	Y+2, r22	; 0x02
    247a:	7b 83       	std	Y+3, r23	; 0x03
    247c:	8c 83       	std	Y+4, r24	; 0x04
    247e:	9d 83       	std	Y+5, r25	; 0x05
	u8 Local_u8Digits = 0;
    2480:	19 82       	std	Y+1, r1	; 0x01
    2482:	2d c0       	rjmp	.+90     	; 0x24de <LCD_u8ReturnNumOfDigits+0x74>
	while (Copy_s32Num > 0){
		Copy_s32Num *= 10;
    2484:	6a 81       	ldd	r22, Y+2	; 0x02
    2486:	7b 81       	ldd	r23, Y+3	; 0x03
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	9d 81       	ldd	r25, Y+5	; 0x05
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8a 83       	std	Y+2, r24	; 0x02
    249e:	9b 83       	std	Y+3, r25	; 0x03
    24a0:	ac 83       	std	Y+4, r26	; 0x04
    24a2:	bd 83       	std	Y+5, r27	; 0x05
		Copy_s32Num -= (s32) Copy_s32Num;
    24a4:	6a 81       	ldd	r22, Y+2	; 0x02
    24a6:	7b 81       	ldd	r23, Y+3	; 0x03
    24a8:	8c 81       	ldd	r24, Y+4	; 0x04
    24aa:	9d 81       	ldd	r25, Y+5	; 0x05
    24ac:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    24bc:	9b 01       	movw	r18, r22
    24be:	ac 01       	movw	r20, r24
    24c0:	6a 81       	ldd	r22, Y+2	; 0x02
    24c2:	7b 81       	ldd	r23, Y+3	; 0x03
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	9d 81       	ldd	r25, Y+5	; 0x05
    24c8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8a 83       	std	Y+2, r24	; 0x02
    24d2:	9b 83       	std	Y+3, r25	; 0x03
    24d4:	ac 83       	std	Y+4, r26	; 0x04
    24d6:	bd 83       	std	Y+5, r27	; 0x05
		Local_u8Digits++;
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	89 83       	std	Y+1, r24	; 0x01

}

static inline u8 LCD_u8ReturnNumOfDigits(f32 Copy_s32Num){
	u8 Local_u8Digits = 0;
	while (Copy_s32Num > 0){
    24de:	6a 81       	ldd	r22, Y+2	; 0x02
    24e0:	7b 81       	ldd	r23, Y+3	; 0x03
    24e2:	8c 81       	ldd	r24, Y+4	; 0x04
    24e4:	9d 81       	ldd	r25, Y+5	; 0x05
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	3c f2       	brlt	.-114    	; 0x2484 <LCD_u8ReturnNumOfDigits+0x1a>
		Copy_s32Num *= 10;
		Copy_s32Num -= (s32) Copy_s32Num;
		Local_u8Digits++;
	}
	if(Local_u8Digits > MAX_FRACTION_DIGITS)
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	8b 30       	cpi	r24, 0x0B	; 11
    24fa:	10 f0       	brcs	.+4      	; 0x2500 <LCD_u8ReturnNumOfDigits+0x96>
		Local_u8Digits = MAX_FRACTION_DIGITS;
    24fc:	8a e0       	ldi	r24, 0x0A	; 10
    24fe:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Digits;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
}
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <KPAD_enuInit>:

#include "KPAD_config.h"
#include "KPAD_priv.h"


ES_t KPAD_enuInit(void){
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	0f 92       	push	r0
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    251c:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinDir(C1_PORT, C1_PIN, DIO_u8OUTPUT);
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	67 e0       	ldi	r22, 0x07	; 7
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(C2_PORT, C2_PIN, DIO_u8OUTPUT);
    2528:	83 e0       	ldi	r24, 0x03	; 3
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(C3_PORT, C3_PIN, DIO_u8OUTPUT);
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	62 e0       	ldi	r22, 0x02	; 2
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(C4_PORT, C4_PIN, DIO_u8OUTPUT);
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	63 e0       	ldi	r22, 0x03	; 3
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>

	DIO_enuSetPinDir(R1_PORT, R1_PIN, DIO_u8INPUT);
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	64 e0       	ldi	r22, 0x04	; 4
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(R2_PORT, R2_PIN, DIO_u8INPUT);
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	64 e0       	ldi	r22, 0x04	; 4
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(R3_PORT, R3_PIN, DIO_u8INPUT);
    255a:	83 e0       	ldi	r24, 0x03	; 3
    255c:	65 e0       	ldi	r22, 0x05	; 5
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>
	DIO_enuSetPinDir(R4_PORT, R4_PIN, DIO_u8INPUT);
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	66 e0       	ldi	r22, 0x06	; 6
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_enuSetPinDir>

	DIO_enuSetPinValue(C1_PORT, C1_PIN, DIO_u8HIGH);
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	67 e0       	ldi	r22, 0x07	; 7
    2572:	41 e0       	ldi	r20, 0x01	; 1
    2574:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT, C2_PIN, DIO_u8HIGH);
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	61 e0       	ldi	r22, 0x01	; 1
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT, C3_PIN, DIO_u8HIGH);
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT, C4_PIN, DIO_u8HIGH);
    258c:	83 e0       	ldi	r24, 0x03	; 3
    258e:	63 e0       	ldi	r22, 0x03	; 3
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT, R1_PIN, DIO_u8PULL_UP);
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	64 e0       	ldi	r22, 0x04	; 4
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT, R2_PIN, DIO_u8PULL_UP);
    25a0:	83 e0       	ldi	r24, 0x03	; 3
    25a2:	64 e0       	ldi	r22, 0x04	; 4
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT, R3_PIN, DIO_u8PULL_UP);
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	65 e0       	ldi	r22, 0x05	; 5
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT, R4_PIN, DIO_u8PULL_UP);
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	66 e0       	ldi	r22, 0x06	; 6
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>

	Local_enuErrorState = ES_OK;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <KPAD_enuGetKeyValue>:

ES_t KPAD_enuGetKeyValue(u8 *Copy_pu8KeyValue){
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	ea 97       	sbiw	r28, 0x3a	; 58
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	9c ab       	std	Y+52, r25	; 0x34
    25e2:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorState = ES_NOK;
    25e4:	19 8a       	std	Y+17, r1	; 0x11

	if (Copy_pu8KeyValue != NULL)
    25e6:	8b a9       	ldd	r24, Y+51	; 0x33
    25e8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <KPAD_enuGetKeyValue+0x24>
    25ee:	6d c1       	rjmp	.+730    	; 0x28ca <KPAD_enuGetKeyValue+0x2fe>
		{
			u8 Local_Au8RowPins [ROWS_NUM] = { R1_PIN , R2_PIN , R3_PIN , R4_PIN };
    25f0:	84 e0       	ldi	r24, 0x04	; 4
    25f2:	8a 8b       	std	Y+18, r24	; 0x12
    25f4:	84 e0       	ldi	r24, 0x04	; 4
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
    25f8:	85 e0       	ldi	r24, 0x05	; 5
    25fa:	8c 8b       	std	Y+20, r24	; 0x14
    25fc:	86 e0       	ldi	r24, 0x06	; 6
    25fe:	8d 8b       	std	Y+21, r24	; 0x15
			u8 Local_Au8ColPins [COLS_NUM] = { C1_PIN , C2_PIN , C3_PIN , C4_PIN };
    2600:	87 e0       	ldi	r24, 0x07	; 7
    2602:	8e 8b       	std	Y+22, r24	; 0x16
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	8f 8b       	std	Y+23, r24	; 0x17
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	88 8f       	std	Y+24, r24	; 0x18
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	89 8f       	std	Y+25, r24	; 0x19
			u8 Local_Au8RowPorts[ROWS_NUM] = { R1_PORT , R2_PORT , R3_PORT , R4_PORT };
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	8a 8f       	std	Y+26, r24	; 0x1a
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	8b 8f       	std	Y+27, r24	; 0x1b
    2618:	83 e0       	ldi	r24, 0x03	; 3
    261a:	8c 8f       	std	Y+28, r24	; 0x1c
    261c:	83 e0       	ldi	r24, 0x03	; 3
    261e:	8d 8f       	std	Y+29, r24	; 0x1d
			u8 Local_Au8ColPorts[COLS_NUM] = { C1_PORT , C2_PORT , C3_PORT , C4_PORT };
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	8e 8f       	std	Y+30, r24	; 0x1e
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	8f 8f       	std	Y+31, r24	; 0x1f
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	88 a3       	std	Y+32, r24	; 0x20
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	89 a3       	std	Y+33, r24	; 0x21

			*Copy_pu8KeyValue = KEY_NOT_PRESSED;
    2630:	eb a9       	ldd	r30, Y+51	; 0x33
    2632:	fc a9       	ldd	r31, Y+52	; 0x34
    2634:	8f ef       	ldi	r24, 0xFF	; 255
    2636:	80 83       	st	Z, r24

			u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
    2638:	ce 01       	movw	r24, r28
    263a:	82 96       	adiw	r24, 0x22	; 34
    263c:	9f ab       	std	Y+55, r25	; 0x37
    263e:	8e ab       	std	Y+54, r24	; 0x36
    2640:	e5 e8       	ldi	r30, 0x85	; 133
    2642:	f1 e0       	ldi	r31, 0x01	; 1
    2644:	f9 af       	std	Y+57, r31	; 0x39
    2646:	e8 af       	std	Y+56, r30	; 0x38
    2648:	f0 e1       	ldi	r31, 0x10	; 16
    264a:	fa af       	std	Y+58, r31	; 0x3a
    264c:	e8 ad       	ldd	r30, Y+56	; 0x38
    264e:	f9 ad       	ldd	r31, Y+57	; 0x39
    2650:	00 80       	ld	r0, Z
    2652:	88 ad       	ldd	r24, Y+56	; 0x38
    2654:	99 ad       	ldd	r25, Y+57	; 0x39
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	99 af       	std	Y+57, r25	; 0x39
    265a:	88 af       	std	Y+56, r24	; 0x38
    265c:	ee a9       	ldd	r30, Y+54	; 0x36
    265e:	ff a9       	ldd	r31, Y+55	; 0x37
    2660:	00 82       	st	Z, r0
    2662:	8e a9       	ldd	r24, Y+54	; 0x36
    2664:	9f a9       	ldd	r25, Y+55	; 0x37
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	9f ab       	std	Y+55, r25	; 0x37
    266a:	8e ab       	std	Y+54, r24	; 0x36
    266c:	9a ad       	ldd	r25, Y+58	; 0x3a
    266e:	91 50       	subi	r25, 0x01	; 1
    2670:	9a af       	std	Y+58, r25	; 0x3a
    2672:	ea ad       	ldd	r30, Y+58	; 0x3a
    2674:	ee 23       	and	r30, r30
    2676:	51 f7       	brne	.-44     	; 0x264c <KPAD_enuGetKeyValue+0x80>

			u8 Local_u8PinValue = 0xff;
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	8a ab       	std	Y+50, r24	; 0x32

			u8 Local_u8RowIter , Local_u8ColIter;

			for (Local_u8ColIter =0; Local_u8ColIter < COLS_NUM ; Local_u8ColIter ++)
    267c:	1f 86       	std	Y+15, r1	; 0x0f
    267e:	20 c1       	rjmp	.+576    	; 0x28c0 <KPAD_enuGetKeyValue+0x2f4>
			{
				DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter] , Local_Au8ColPins[Local_u8ColIter] , DIO_u8LOW);
    2680:	8f 85       	ldd	r24, Y+15	; 0x0f
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	ce 01       	movw	r24, r28
    2688:	4e 96       	adiw	r24, 0x1e	; 30
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	40 81       	ld	r20, Z
    2692:	8f 85       	ldd	r24, Y+15	; 0x0f
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	ce 01       	movw	r24, r28
    269a:	46 96       	adiw	r24, 0x16	; 22
    269c:	fc 01       	movw	r30, r24
    269e:	e2 0f       	add	r30, r18
    26a0:	f3 1f       	adc	r31, r19
    26a2:	90 81       	ld	r25, Z
    26a4:	84 2f       	mov	r24, r20
    26a6:	69 2f       	mov	r22, r25
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>

				for (Local_u8RowIter =0 ; Local_u8RowIter <ROWS_NUM ; Local_u8RowIter ++)
    26ae:	18 8a       	std	Y+16, r1	; 0x10
    26b0:	e9 c0       	rjmp	.+466    	; 0x2884 <KPAD_enuGetKeyValue+0x2b8>
				{
					DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    26b2:	88 89       	ldd	r24, Y+16	; 0x10
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	ce 01       	movw	r24, r28
    26ba:	4a 96       	adiw	r24, 0x1a	; 26
    26bc:	fc 01       	movw	r30, r24
    26be:	e2 0f       	add	r30, r18
    26c0:	f3 1f       	adc	r31, r19
    26c2:	40 81       	ld	r20, Z
    26c4:	88 89       	ldd	r24, Y+16	; 0x10
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	ce 01       	movw	r24, r28
    26cc:	42 96       	adiw	r24, 0x12	; 18
    26ce:	fc 01       	movw	r30, r24
    26d0:	e2 0f       	add	r30, r18
    26d2:	f3 1f       	adc	r31, r19
    26d4:	90 81       	ld	r25, Z
    26d6:	9e 01       	movw	r18, r28
    26d8:	2e 5c       	subi	r18, 0xCE	; 206
    26da:	3f 4f       	sbci	r19, 0xFF	; 255
    26dc:	84 2f       	mov	r24, r20
    26de:	69 2f       	mov	r22, r25
    26e0:	a9 01       	movw	r20, r18
    26e2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <DIO_enuGetPinValue>
					if (! Local_u8PinValue)
    26e6:	8a a9       	ldd	r24, Y+50	; 0x32
    26e8:	88 23       	and	r24, r24
    26ea:	09 f0       	breq	.+2      	; 0x26ee <KPAD_enuGetKeyValue+0x122>
    26ec:	c8 c0       	rjmp	.+400    	; 0x287e <KPAD_enuGetKeyValue+0x2b2>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e2       	ldi	r26, 0x20	; 32
    26f4:	b1 e4       	ldi	r27, 0x41	; 65
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a e7       	ldi	r20, 0x7A	; 122
    270c:	53 e4       	ldi	r21, 0x43	; 67
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <KPAD_enuGetKeyValue+0x174>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <KPAD_enuGetKeyValue+0x1f2>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <KPAD_enuGetKeyValue+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <KPAD_enuGetKeyValue+0x1d4>
    2782:	89 e1       	ldi	r24, 0x19	; 25
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <KPAD_enuGetKeyValue+0x1c2>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <KPAD_enuGetKeyValue+0x1b6>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <KPAD_enuGetKeyValue+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <KPAD_enuGetKeyValue+0x1fe>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(10);
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    27d2:	88 89       	ldd	r24, Y+16	; 0x10
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	ce 01       	movw	r24, r28
    27da:	4a 96       	adiw	r24, 0x1a	; 26
    27dc:	fc 01       	movw	r30, r24
    27de:	e2 0f       	add	r30, r18
    27e0:	f3 1f       	adc	r31, r19
    27e2:	40 81       	ld	r20, Z
    27e4:	88 89       	ldd	r24, Y+16	; 0x10
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	ce 01       	movw	r24, r28
    27ec:	42 96       	adiw	r24, 0x12	; 18
    27ee:	fc 01       	movw	r30, r24
    27f0:	e2 0f       	add	r30, r18
    27f2:	f3 1f       	adc	r31, r19
    27f4:	90 81       	ld	r25, Z
    27f6:	9e 01       	movw	r18, r28
    27f8:	2e 5c       	subi	r18, 0xCE	; 206
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	84 2f       	mov	r24, r20
    27fe:	69 2f       	mov	r22, r25
    2800:	a9 01       	movw	r20, r18
    2802:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <DIO_enuGetPinValue>
						if (! Local_u8PinValue)
    2806:	8a a9       	ldd	r24, Y+50	; 0x32
    2808:	88 23       	and	r24, r24
    280a:	c9 f5       	brne	.+114    	; 0x287e <KPAD_enuGetKeyValue+0x2b2>
    280c:	1a c0       	rjmp	.+52     	; 0x2842 <KPAD_enuGetKeyValue+0x276>
						{
							while (! Local_u8PinValue)
							{
								DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    280e:	88 89       	ldd	r24, Y+16	; 0x10
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	ce 01       	movw	r24, r28
    2816:	4a 96       	adiw	r24, 0x1a	; 26
    2818:	fc 01       	movw	r30, r24
    281a:	e2 0f       	add	r30, r18
    281c:	f3 1f       	adc	r31, r19
    281e:	40 81       	ld	r20, Z
    2820:	88 89       	ldd	r24, Y+16	; 0x10
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	ce 01       	movw	r24, r28
    2828:	42 96       	adiw	r24, 0x12	; 18
    282a:	fc 01       	movw	r30, r24
    282c:	e2 0f       	add	r30, r18
    282e:	f3 1f       	adc	r31, r19
    2830:	90 81       	ld	r25, Z
    2832:	9e 01       	movw	r18, r28
    2834:	2e 5c       	subi	r18, 0xCE	; 206
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	84 2f       	mov	r24, r20
    283a:	69 2f       	mov	r22, r25
    283c:	a9 01       	movw	r20, r18
    283e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <DIO_enuGetPinValue>
					{
						_delay_ms(10);
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
						if (! Local_u8PinValue)
						{
							while (! Local_u8PinValue)
    2842:	8a a9       	ldd	r24, Y+50	; 0x32
    2844:	88 23       	and	r24, r24
    2846:	19 f3       	breq	.-58     	; 0x280e <KPAD_enuGetKeyValue+0x242>
							{
								DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
							}

							*Copy_pu8KeyValue = Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    2848:	88 89       	ldd	r24, Y+16	; 0x10
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2850:	48 2f       	mov	r20, r24
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	22 0f       	add	r18, r18
    2856:	33 1f       	adc	r19, r19
    2858:	22 0f       	add	r18, r18
    285a:	33 1f       	adc	r19, r19
    285c:	ce 01       	movw	r24, r28
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	82 0f       	add	r24, r18
    2862:	93 1f       	adc	r25, r19
    2864:	84 0f       	add	r24, r20
    2866:	95 1f       	adc	r25, r21
    2868:	fc 01       	movw	r30, r24
    286a:	b1 96       	adiw	r30, 0x21	; 33
    286c:	80 81       	ld	r24, Z
    286e:	eb a9       	ldd	r30, Y+51	; 0x33
    2870:	fc a9       	ldd	r31, Y+52	; 0x34
    2872:	80 83       	st	Z, r24

							return Local_enuErrorState=ES_OK;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	89 8b       	std	Y+17, r24	; 0x11
    2878:	f9 89       	ldd	r31, Y+17	; 0x11
    287a:	fd ab       	std	Y+53, r31	; 0x35
    287c:	2a c0       	rjmp	.+84     	; 0x28d2 <KPAD_enuGetKeyValue+0x306>

			for (Local_u8ColIter =0; Local_u8ColIter < COLS_NUM ; Local_u8ColIter ++)
			{
				DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter] , Local_Au8ColPins[Local_u8ColIter] , DIO_u8LOW);

				for (Local_u8RowIter =0 ; Local_u8RowIter <ROWS_NUM ; Local_u8RowIter ++)
    287e:	88 89       	ldd	r24, Y+16	; 0x10
    2880:	8f 5f       	subi	r24, 0xFF	; 255
    2882:	88 8b       	std	Y+16, r24	; 0x10
    2884:	88 89       	ldd	r24, Y+16	; 0x10
    2886:	84 30       	cpi	r24, 0x04	; 4
    2888:	08 f4       	brcc	.+2      	; 0x288c <KPAD_enuGetKeyValue+0x2c0>
    288a:	13 cf       	rjmp	.-474    	; 0x26b2 <KPAD_enuGetKeyValue+0xe6>
							return Local_enuErrorState=ES_OK;
						}
					}
				}

				DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter] , Local_Au8ColPins[Local_u8ColIter] , DIO_u8HIGH);
    288c:	8f 85       	ldd	r24, Y+15	; 0x0f
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	ce 01       	movw	r24, r28
    2894:	4e 96       	adiw	r24, 0x1e	; 30
    2896:	fc 01       	movw	r30, r24
    2898:	e2 0f       	add	r30, r18
    289a:	f3 1f       	adc	r31, r19
    289c:	40 81       	ld	r20, Z
    289e:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a0:	28 2f       	mov	r18, r24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	ce 01       	movw	r24, r28
    28a6:	46 96       	adiw	r24, 0x16	; 22
    28a8:	fc 01       	movw	r30, r24
    28aa:	e2 0f       	add	r30, r18
    28ac:	f3 1f       	adc	r31, r19
    28ae:	90 81       	ld	r25, Z
    28b0:	84 2f       	mov	r24, r20
    28b2:	69 2f       	mov	r22, r25
    28b4:	41 e0       	ldi	r20, 0x01	; 1
    28b6:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_enuSetPinValue>

			u8 Local_u8PinValue = 0xff;

			u8 Local_u8RowIter , Local_u8ColIter;

			for (Local_u8ColIter =0; Local_u8ColIter < COLS_NUM ; Local_u8ColIter ++)
    28ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    28bc:	8f 5f       	subi	r24, 0xFF	; 255
    28be:	8f 87       	std	Y+15, r24	; 0x0f
    28c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c2:	84 30       	cpi	r24, 0x04	; 4
    28c4:	08 f4       	brcc	.+2      	; 0x28c8 <KPAD_enuGetKeyValue+0x2fc>
    28c6:	dc ce       	rjmp	.-584    	; 0x2680 <KPAD_enuGetKeyValue+0xb4>
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <KPAD_enuGetKeyValue+0x302>
				DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter] , Local_Au8ColPins[Local_u8ColIter] , DIO_u8HIGH);
			}
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	89 8b       	std	Y+17, r24	; 0x11
		}
	return Local_enuErrorState;
    28ce:	89 89       	ldd	r24, Y+17	; 0x11
    28d0:	8d ab       	std	Y+53, r24	; 0x35
    28d2:	8d a9       	ldd	r24, Y+53	; 0x35
}
    28d4:	ea 96       	adiw	r28, 0x3a	; 58
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <CALC_enuInit>:


/*This Function is Used To Initialize the Calculator Components LCD and KEYPAD
 * its Also Intialize the Cursor to Write in the First Line
 */
ES_t CALC_enuInit(void){
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    28f0:	19 82       	std	Y+1, r1	; 0x01

	LCD_enuInit();
    28f2:	0e 94 9d 0b 	call	0x173a	; 0x173a <LCD_enuInit>
	KPAD_enuInit();
    28f6:	0e 94 89 12 	call	0x2512	; 0x2512 <KPAD_enuInit>
	LCD_enuSendCommand(0x80);
    28fa:	80 e8       	ldi	r24, 0x80	; 128
    28fc:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <LCD_enuSendCommand>
	return Local_enuErrorState;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
}
    2902:	0f 90       	pop	r0
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <CALC_enuReadNumber>:

/*This Function Is Used To Read The Number Pressed By the User*/
ES_t CALC_enuReadNumber(s32 *Copy_u32Num){
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	00 d0       	rcall	.+0      	; 0x2910 <CALC_enuReadNumber+0x6>
    2910:	0f 92       	push	r0
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	9b 83       	std	Y+3, r25	; 0x03
    2918:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    291a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u32Num != NULL){
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	9b 81       	ldd	r25, Y+3	; 0x03
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	29 f0       	breq	.+10     	; 0x292e <CALC_enuReadNumber+0x24>

		CALC_VoidReadingPrintNumber(Copy_u32Num);
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	9b 81       	ldd	r25, Y+3	; 0x03
    2928:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <CALC_VoidReadingPrintNumber>
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <CALC_enuReadNumber+0x28>

	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    292e:	82 e0       	ldi	r24, 0x02	; 2
    2930:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2932:	89 81       	ldd	r24, Y+1	; 0x01
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <CALC_enuDisplayResult>:
 * By the User +, -, x, / and displays invalid Input if the Operation
 * Is Not Correctly Typed
 *
 * The Result Is Displayed In the Left Of the Second Line
 * */
ES_t CALC_enuDisplayResult(s32 Copy_u32FirstNum, s32 Copy_u32SecondNum){
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	2f 97       	sbiw	r28, 0x0f	; 15
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	6e 83       	std	Y+6, r22	; 0x06
    295e:	7f 83       	std	Y+7, r23	; 0x07
    2960:	88 87       	std	Y+8, r24	; 0x08
    2962:	99 87       	std	Y+9, r25	; 0x09
    2964:	2a 87       	std	Y+10, r18	; 0x0a
    2966:	3b 87       	std	Y+11, r19	; 0x0b
    2968:	4c 87       	std	Y+12, r20	; 0x0c
    296a:	5d 87       	std	Y+13, r21	; 0x0d
	ES_t Local_enuErrorState = ES_NOK;
    296c:	1d 82       	std	Y+5, r1	; 0x05
	f64 Local_f32ResultOfOperation = 0;
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	a0 e0       	ldi	r26, 0x00	; 0
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	ab 83       	std	Y+3, r26	; 0x03
    297c:	bc 83       	std	Y+4, r27	; 0x04
	if(Global_u8EqualOperator == '='){
    297e:	80 91 97 01 	lds	r24, 0x0197
    2982:	8d 33       	cpi	r24, 0x3D	; 61
    2984:	09 f0       	breq	.+2      	; 0x2988 <CALC_enuDisplayResult+0x48>
    2986:	fa c0       	rjmp	.+500    	; 0x2b7c <CALC_enuDisplayResult+0x23c>
		LCD_enuSendCommand(0xC0);
    2988:	80 ec       	ldi	r24, 0xC0	; 192
    298a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <LCD_enuSendCommand>
		switch(Global_u8Operator){
    298e:	80 91 96 01 	lds	r24, 0x0196
    2992:	e8 2e       	mov	r14, r24
    2994:	ff 24       	eor	r15, r15
    2996:	ff 86       	std	Y+15, r15	; 0x0f
    2998:	ee 86       	std	Y+14, r14	; 0x0e
    299a:	0e 85       	ldd	r16, Y+14	; 0x0e
    299c:	1f 85       	ldd	r17, Y+15	; 0x0f
    299e:	0f 32       	cpi	r16, 0x2F	; 47
    29a0:	11 05       	cpc	r17, r1
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <CALC_enuDisplayResult+0x66>
    29a4:	86 c0       	rjmp	.+268    	; 0x2ab2 <CALC_enuDisplayResult+0x172>
    29a6:	2e 85       	ldd	r18, Y+14	; 0x0e
    29a8:	3f 85       	ldd	r19, Y+15	; 0x0f
    29aa:	20 33       	cpi	r18, 0x30	; 48
    29ac:	31 05       	cpc	r19, r1
    29ae:	5c f4       	brge	.+22     	; 0x29c6 <CALC_enuDisplayResult+0x86>
    29b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    29b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    29b4:	8b 32       	cpi	r24, 0x2B	; 43
    29b6:	91 05       	cpc	r25, r1
    29b8:	69 f0       	breq	.+26     	; 0x29d4 <CALC_enuDisplayResult+0x94>
    29ba:	0e 85       	ldd	r16, Y+14	; 0x0e
    29bc:	1f 85       	ldd	r17, Y+15	; 0x0f
    29be:	0d 32       	cpi	r16, 0x2D	; 45
    29c0:	11 05       	cpc	r17, r1
    29c2:	59 f1       	breq	.+86     	; 0x2a1a <CALC_enuDisplayResult+0xda>
    29c4:	d5 c0       	rjmp	.+426    	; 0x2b70 <CALC_enuDisplayResult+0x230>
    29c6:	2e 85       	ldd	r18, Y+14	; 0x0e
    29c8:	3f 85       	ldd	r19, Y+15	; 0x0f
    29ca:	28 37       	cpi	r18, 0x78	; 120
    29cc:	31 05       	cpc	r19, r1
    29ce:	09 f4       	brne	.+2      	; 0x29d2 <CALC_enuDisplayResult+0x92>
    29d0:	4b c0       	rjmp	.+150    	; 0x2a68 <CALC_enuDisplayResult+0x128>
    29d2:	ce c0       	rjmp	.+412    	; 0x2b70 <CALC_enuDisplayResult+0x230>
			Local_enuErrorState = ES_OK;
		case '+':
				Local_f32ResultOfOperation = Copy_u32FirstNum + Copy_u32SecondNum;
    29d4:	2e 81       	ldd	r18, Y+6	; 0x06
    29d6:	3f 81       	ldd	r19, Y+7	; 0x07
    29d8:	48 85       	ldd	r20, Y+8	; 0x08
    29da:	59 85       	ldd	r21, Y+9	; 0x09
    29dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    29de:	9b 85       	ldd	r25, Y+11	; 0x0b
    29e0:	ac 85       	ldd	r26, Y+12	; 0x0c
    29e2:	bd 85       	ldd	r27, Y+13	; 0x0d
    29e4:	82 0f       	add	r24, r18
    29e6:	93 1f       	adc	r25, r19
    29e8:	a4 1f       	adc	r26, r20
    29ea:	b5 1f       	adc	r27, r21
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	ab 83       	std	Y+3, r26	; 0x03
    29fe:	bc 83       	std	Y+4, r27	; 0x04
				 LCD_enuDisplayIntegerNum((s32)Local_f32ResultOfOperation);
    2a00:	69 81       	ldd	r22, Y+1	; 0x01
    2a02:	7a 81       	ldd	r23, Y+2	; 0x02
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	9c 81       	ldd	r25, Y+4	; 0x04
    2a08:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_enuDisplayIntegerNum>
    2a18:	b1 c0       	rjmp	.+354    	; 0x2b7c <CALC_enuDisplayResult+0x23c>
			break;
		case '-':
				Local_f32ResultOfOperation = Copy_u32FirstNum - Copy_u32SecondNum;
    2a1a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a1c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a1e:	48 85       	ldd	r20, Y+8	; 0x08
    2a20:	59 85       	ldd	r21, Y+9	; 0x09
    2a22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a26:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a28:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a2a:	79 01       	movw	r14, r18
    2a2c:	8a 01       	movw	r16, r20
    2a2e:	e8 1a       	sub	r14, r24
    2a30:	f9 0a       	sbc	r15, r25
    2a32:	0a 0b       	sbc	r16, r26
    2a34:	1b 0b       	sbc	r17, r27
    2a36:	d8 01       	movw	r26, r16
    2a38:	c7 01       	movw	r24, r14
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	89 83       	std	Y+1, r24	; 0x01
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	ab 83       	std	Y+3, r26	; 0x03
    2a4c:	bc 83       	std	Y+4, r27	; 0x04
				 LCD_enuDisplayIntegerNum((s32)Local_f32ResultOfOperation);
    2a4e:	69 81       	ldd	r22, Y+1	; 0x01
    2a50:	7a 81       	ldd	r23, Y+2	; 0x02
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_enuDisplayIntegerNum>
    2a66:	8a c0       	rjmp	.+276    	; 0x2b7c <CALC_enuDisplayResult+0x23c>
			break;
		case 'x':
				Local_f32ResultOfOperation = Copy_u32FirstNum * Copy_u32SecondNum;
    2a68:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6c:	a8 85       	ldd	r26, Y+8	; 0x08
    2a6e:	b9 85       	ldd	r27, Y+9	; 0x09
    2a70:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a72:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a74:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a76:	5d 85       	ldd	r21, Y+13	; 0x0d
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsi3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	ab 83       	std	Y+3, r26	; 0x03
    2a96:	bc 83       	std	Y+4, r27	; 0x04
				 LCD_enuDisplayIntegerNum((s32)Local_f32ResultOfOperation);
    2a98:	69 81       	ldd	r22, Y+1	; 0x01
    2a9a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_enuDisplayIntegerNum>
    2ab0:	65 c0       	rjmp	.+202    	; 0x2b7c <CALC_enuDisplayResult+0x23c>
			break;
		case '/':
			if(Copy_u32SecondNum == 0){
    2ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ab4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ab6:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ab8:	bd 85       	ldd	r27, Y+13	; 0x0d
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	a1 05       	cpc	r26, r1
    2abe:	b1 05       	cpc	r27, r1
    2ac0:	39 f4       	brne	.+14     	; 0x2ad0 <CALC_enuDisplayResult+0x190>
				LCD_enuDisplayString("DIVISION ERROR", 14);
    2ac2:	80 e6       	ldi	r24, 0x60	; 96
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	6e e0       	ldi	r22, 0x0E	; 14
    2ac8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_enuDisplayString>
				Local_enuErrorState = ES_NOK;
    2acc:	1d 82       	std	Y+5, r1	; 0x05
    2ace:	56 c0       	rjmp	.+172    	; 0x2b7c <CALC_enuDisplayResult+0x23c>
			}
			else{
				Local_f32ResultOfOperation = (f64) Copy_u32FirstNum / Copy_u32SecondNum;
    2ad0:	6e 81       	ldd	r22, Y+6	; 0x06
    2ad2:	7f 81       	ldd	r23, Y+7	; 0x07
    2ad4:	88 85       	ldd	r24, Y+8	; 0x08
    2ad6:	99 85       	ldd	r25, Y+9	; 0x09
    2ad8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2adc:	7b 01       	movw	r14, r22
    2ade:	8c 01       	movw	r16, r24
    2ae0:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ae2:	7b 85       	ldd	r23, Y+11	; 0x0b
    2ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ae8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2aec:	9b 01       	movw	r18, r22
    2aee:	ac 01       	movw	r20, r24
    2af0:	c8 01       	movw	r24, r16
    2af2:	b7 01       	movw	r22, r14
    2af4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	ab 83       	std	Y+3, r26	; 0x03
    2b02:	bc 83       	std	Y+4, r27	; 0x04
				if(Local_f32ResultOfOperation - (s32) Local_f32ResultOfOperation == 0)
    2b04:	69 81       	ldd	r22, Y+1	; 0x01
    2b06:	7a 81       	ldd	r23, Y+2	; 0x02
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2b1c:	9b 01       	movw	r18, r22
    2b1e:	ac 01       	movw	r20, r24
    2b20:	69 81       	ldd	r22, Y+1	; 0x01
    2b22:	7a 81       	ldd	r23, Y+2	; 0x02
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	9c 81       	ldd	r25, Y+4	; 0x04
    2b28:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	69 f4       	brne	.+26     	; 0x2b5e <CALC_enuDisplayResult+0x21e>
					LCD_enuDisplayIntegerNum((s32) Local_f32ResultOfOperation);
    2b44:	69 81       	ldd	r22, Y+1	; 0x01
    2b46:	7a 81       	ldd	r23, Y+2	; 0x02
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_enuDisplayIntegerNum>
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <CALC_enuDisplayResult+0x23c>
				else
					LCD_DisplayFloatNumber(Local_f32ResultOfOperation);
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	9a 81       	ldd	r25, Y+2	; 0x02
    2b62:	ab 81       	ldd	r26, Y+3	; 0x03
    2b64:	bc 81       	ldd	r27, Y+4	; 0x04
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_DisplayFloatNumber>
    2b6e:	06 c0       	rjmp	.+12     	; 0x2b7c <CALC_enuDisplayResult+0x23c>
			}
			break;
		default:
			LCD_enuDisplayString("INVALID INPUT", 13);
    2b70:	8f e6       	ldi	r24, 0x6F	; 111
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	6d e0       	ldi	r22, 0x0D	; 13
    2b76:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_enuDisplayString>
			Local_enuErrorState = ES_NOK;
    2b7a:	1d 82       	std	Y+5, r1	; 0x05
		}

	}


	return Local_enuErrorState;
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2b7e:	2f 96       	adiw	r28, 0x0f	; 15
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	08 95       	ret

00002b98 <CALC_enuStandToErase>:
/*
 * This Function Is Used To Erase the LCD if The User Pressed the
 * Button ON/C
 *
 * */
ES_t CALC_enuStandToErase(void){
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	2f 97       	sbiw	r28, 0x0f	; 15
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorStates = ES_NOK;
    2bac:	1f 86       	std	Y+15, r1	; 0x0f
    2bae:	76 c0       	rjmp	.+236    	; 0x2c9c <CALC_enuStandToErase+0x104>
	while(Global_u8Operator != 'c'){
		KPAD_enuGetKeyValue(&Global_u8Operator);
    2bb0:	86 e9       	ldi	r24, 0x96	; 150
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <KPAD_enuGetKeyValue>
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	a0 e2       	ldi	r26, 0x20	; 32
    2bbe:	b1 e4       	ldi	r27, 0x41	; 65
    2bc0:	8b 87       	std	Y+11, r24	; 0x0b
    2bc2:	9c 87       	std	Y+12, r25	; 0x0c
    2bc4:	ad 87       	std	Y+13, r26	; 0x0d
    2bc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	53 e4       	ldi	r21, 0x43	; 67
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8f 83       	std	Y+7, r24	; 0x07
    2be2:	98 87       	std	Y+8, r25	; 0x08
    2be4:	a9 87       	std	Y+9, r26	; 0x09
    2be6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bea:	78 85       	ldd	r23, Y+8	; 0x08
    2bec:	89 85       	ldd	r24, Y+9	; 0x09
    2bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e8       	ldi	r20, 0x80	; 128
    2bf6:	5f e3       	ldi	r21, 0x3F	; 63
    2bf8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bfc:	88 23       	and	r24, r24
    2bfe:	2c f4       	brge	.+10     	; 0x2c0a <CALC_enuStandToErase+0x72>
		__ticks = 1;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9e 83       	std	Y+6, r25	; 0x06
    2c06:	8d 83       	std	Y+5, r24	; 0x05
    2c08:	3f c0       	rjmp	.+126    	; 0x2c88 <CALC_enuStandToErase+0xf0>
	else if (__tmp > 65535)
    2c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0c:	78 85       	ldd	r23, Y+8	; 0x08
    2c0e:	89 85       	ldd	r24, Y+9	; 0x09
    2c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	3f ef       	ldi	r19, 0xFF	; 255
    2c16:	4f e7       	ldi	r20, 0x7F	; 127
    2c18:	57 e4       	ldi	r21, 0x47	; 71
    2c1a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c1e:	18 16       	cp	r1, r24
    2c20:	4c f5       	brge	.+82     	; 0x2c74 <CALC_enuStandToErase+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e2       	ldi	r20, 0x20	; 32
    2c30:	51 e4       	ldi	r21, 0x41	; 65
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <CALC_enuStandToErase+0xd2>
    2c4c:	89 e1       	ldi	r24, 0x19	; 25
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	8b 83       	std	Y+3, r24	; 0x03
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	9c 81       	ldd	r25, Y+4	; 0x04
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <CALC_enuStandToErase+0xc0>
    2c5c:	9c 83       	std	Y+4, r25	; 0x04
    2c5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c60:	8d 81       	ldd	r24, Y+5	; 0x05
    2c62:	9e 81       	ldd	r25, Y+6	; 0x06
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	69 f7       	brne	.-38     	; 0x2c4c <CALC_enuStandToErase+0xb4>
    2c72:	14 c0       	rjmp	.+40     	; 0x2c9c <CALC_enuStandToErase+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c74:	6f 81       	ldd	r22, Y+7	; 0x07
    2c76:	78 85       	ldd	r23, Y+8	; 0x08
    2c78:	89 85       	ldd	r24, Y+9	; 0x09
    2c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
    2c88:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <CALC_enuStandToErase+0xfc>
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
 * Button ON/C
 *
 * */
ES_t CALC_enuStandToErase(void){
	ES_t Local_enuErrorStates = ES_NOK;
	while(Global_u8Operator != 'c'){
    2c9c:	80 91 96 01 	lds	r24, 0x0196
    2ca0:	83 36       	cpi	r24, 0x63	; 99
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <CALC_enuStandToErase+0x10e>
    2ca4:	85 cf       	rjmp	.-246    	; 0x2bb0 <CALC_enuStandToErase+0x18>
		KPAD_enuGetKeyValue(&Global_u8Operator);
		_delay_ms(10);
	}
	Global_u8EqualOperator = 0;
    2ca6:	10 92 97 01 	sts	0x0197, r1
	LCD_enuSendCommand(0x01);
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <LCD_enuSendCommand>
	return Local_enuErrorStates = ES_OK;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	8f 87       	std	Y+15, r24	; 0x0f
    2cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2cb6:	2f 96       	adiw	r28, 0x0f	; 15
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <CALC_VoidReadingPrintNumber>:
 *
 *  3- When The User Enters the Second Operand And Clicks = The function Breaks The Loop And
 *  Similarly Calculates The Second Operand Entered
 *
 **/
static inline void CALC_VoidReadingPrintNumber(s32 *Copy_u8Number){
    2cc8:	ef 92       	push	r14
    2cca:	ff 92       	push	r15
    2ccc:	0f 93       	push	r16
    2cce:	1f 93       	push	r17
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	6e 97       	sbiw	r28, 0x1e	; 30
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce6:	8d 8f       	std	Y+29, r24	; 0x1d

	u8 Local_Au8KeyPadValues[NMBER_OF_DIGITS] = {0,0,0,0,0};
    2ce8:	87 e0       	ldi	r24, 0x07	; 7
    2cea:	fe 01       	movw	r30, r28
    2cec:	75 96       	adiw	r30, 0x15	; 21
    2cee:	df 01       	movw	r26, r30
    2cf0:	98 2f       	mov	r25, r24
    2cf2:	1d 92       	st	X+, r1
    2cf4:	9a 95       	dec	r25
    2cf6:	e9 f7       	brne	.-6      	; 0x2cf2 <CALC_VoidReadingPrintNumber+0x2a>
	u8 Local_u8CharactersChecker = 0;
    2cf8:	1c 8e       	std	Y+28, r1	; 0x1c
	u8 Local_u8Iterator = 0;
    2cfa:	1c 8a       	std	Y+20, r1	; 0x14
    2cfc:	c3 c0       	rjmp	.+390    	; 0x2e84 <CALC_VoidReadingPrintNumber+0x1bc>
	while(Local_u8Iterator < NMBER_OF_DIGITS + 1){ // 1 is added to keep place for the Operator

		KPAD_enuGetKeyValue(&Local_u8CharactersChecker);
    2cfe:	ce 01       	movw	r24, r28
    2d00:	4c 96       	adiw	r24, 0x1c	; 28
    2d02:	0e 94 e6 12 	call	0x25cc	; 0x25cc <KPAD_enuGetKeyValue>
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a0 e2       	ldi	r26, 0x20	; 32
    2d0c:	b1 e4       	ldi	r27, 0x41	; 65
    2d0e:	8b 87       	std	Y+11, r24	; 0x0b
    2d10:	9c 87       	std	Y+12, r25	; 0x0c
    2d12:	ad 87       	std	Y+13, r26	; 0x0d
    2d14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	4a e7       	ldi	r20, 0x7A	; 122
    2d24:	53 e4       	ldi	r21, 0x43	; 67
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	8f 83       	std	Y+7, r24	; 0x07
    2d30:	98 87       	std	Y+8, r25	; 0x08
    2d32:	a9 87       	std	Y+9, r26	; 0x09
    2d34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d36:	6f 81       	ldd	r22, Y+7	; 0x07
    2d38:	78 85       	ldd	r23, Y+8	; 0x08
    2d3a:	89 85       	ldd	r24, Y+9	; 0x09
    2d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e8       	ldi	r20, 0x80	; 128
    2d44:	5f e3       	ldi	r21, 0x3F	; 63
    2d46:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d4a:	88 23       	and	r24, r24
    2d4c:	2c f4       	brge	.+10     	; 0x2d58 <CALC_VoidReadingPrintNumber+0x90>
		__ticks = 1;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	9e 83       	std	Y+6, r25	; 0x06
    2d54:	8d 83       	std	Y+5, r24	; 0x05
    2d56:	3f c0       	rjmp	.+126    	; 0x2dd6 <CALC_VoidReadingPrintNumber+0x10e>
	else if (__tmp > 65535)
    2d58:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5a:	78 85       	ldd	r23, Y+8	; 0x08
    2d5c:	89 85       	ldd	r24, Y+9	; 0x09
    2d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	3f ef       	ldi	r19, 0xFF	; 255
    2d64:	4f e7       	ldi	r20, 0x7F	; 127
    2d66:	57 e4       	ldi	r21, 0x47	; 71
    2d68:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d6c:	18 16       	cp	r1, r24
    2d6e:	4c f5       	brge	.+82     	; 0x2dc2 <CALC_VoidReadingPrintNumber+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e2       	ldi	r20, 0x20	; 32
    2d7e:	51 e4       	ldi	r21, 0x41	; 65
    2d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	0f c0       	rjmp	.+30     	; 0x2db8 <CALC_VoidReadingPrintNumber+0xf0>
    2d9a:	89 e1       	ldi	r24, 0x19	; 25
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	9c 83       	std	Y+4, r25	; 0x04
    2da0:	8b 83       	std	Y+3, r24	; 0x03
    2da2:	8b 81       	ldd	r24, Y+3	; 0x03
    2da4:	9c 81       	ldd	r25, Y+4	; 0x04
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <CALC_VoidReadingPrintNumber+0xde>
    2daa:	9c 83       	std	Y+4, r25	; 0x04
    2dac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	69 f7       	brne	.-38     	; 0x2d9a <CALC_VoidReadingPrintNumber+0xd2>
    2dc0:	14 c0       	rjmp	.+40     	; 0x2dea <CALC_VoidReadingPrintNumber+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc4:	78 85       	ldd	r23, Y+8	; 0x08
    2dc6:	89 85       	ldd	r24, Y+9	; 0x09
    2dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dda:	9a 83       	std	Y+2, r25	; 0x02
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	f1 f7       	brne	.-4      	; 0x2de2 <CALC_VoidReadingPrintNumber+0x11a>
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

		if(Local_u8CharactersChecker != KEY_NOT_PRESSED ){
    2dea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dec:	8f 3f       	cpi	r24, 0xFF	; 255
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <CALC_VoidReadingPrintNumber+0x12a>
    2df0:	49 c0       	rjmp	.+146    	; 0x2e84 <CALC_VoidReadingPrintNumber+0x1bc>
			if(NOT_ARITHMATIC_OPERATOR){
    2df2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2df4:	8b 32       	cpi	r24, 0x2B	; 43
    2df6:	59 f1       	breq	.+86     	; 0x2e4e <CALC_VoidReadingPrintNumber+0x186>
    2df8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dfa:	88 37       	cpi	r24, 0x78	; 120
    2dfc:	41 f1       	breq	.+80     	; 0x2e4e <CALC_VoidReadingPrintNumber+0x186>
    2dfe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e00:	8f 32       	cpi	r24, 0x2F	; 47
    2e02:	29 f1       	breq	.+74     	; 0x2e4e <CALC_VoidReadingPrintNumber+0x186>
    2e04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e06:	8d 32       	cpi	r24, 0x2D	; 45
    2e08:	11 f1       	breq	.+68     	; 0x2e4e <CALC_VoidReadingPrintNumber+0x186>
    2e0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e0c:	8d 33       	cpi	r24, 0x3D	; 61
    2e0e:	f9 f0       	breq	.+62     	; 0x2e4e <CALC_VoidReadingPrintNumber+0x186>
				Local_Au8KeyPadValues[Local_u8Iterator] = Local_u8CharactersChecker;
    2e10:	8c 89       	ldd	r24, Y+20	; 0x14
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2e18:	ce 01       	movw	r24, r28
    2e1a:	45 96       	adiw	r24, 0x15	; 21
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	e2 0f       	add	r30, r18
    2e20:	f3 1f       	adc	r31, r19
    2e22:	40 83       	st	Z, r20
				LCD_enuDisplayIntegerNum(Local_Au8KeyPadValues[Local_u8Iterator]);
    2e24:	8c 89       	ldd	r24, Y+20	; 0x14
    2e26:	28 2f       	mov	r18, r24
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	45 96       	adiw	r24, 0x15	; 21
    2e2e:	fc 01       	movw	r30, r24
    2e30:	e2 0f       	add	r30, r18
    2e32:	f3 1f       	adc	r31, r19
    2e34:	80 81       	ld	r24, Z
    2e36:	88 2f       	mov	r24, r24
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a0 e0       	ldi	r26, 0x00	; 0
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_enuDisplayIntegerNum>
				Local_u8Iterator++;
    2e46:	8c 89       	ldd	r24, Y+20	; 0x14
    2e48:	8f 5f       	subi	r24, 0xFF	; 255
    2e4a:	8c 8b       	std	Y+20, r24	; 0x14
    2e4c:	1b c0       	rjmp	.+54     	; 0x2e84 <CALC_VoidReadingPrintNumber+0x1bc>
			}
			else if(ARITHMATIC_OPERATOR){
    2e4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e50:	8b 32       	cpi	r24, 0x2B	; 43
    2e52:	49 f0       	breq	.+18     	; 0x2e66 <CALC_VoidReadingPrintNumber+0x19e>
    2e54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e56:	88 37       	cpi	r24, 0x78	; 120
    2e58:	31 f0       	breq	.+12     	; 0x2e66 <CALC_VoidReadingPrintNumber+0x19e>
    2e5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e5c:	8f 32       	cpi	r24, 0x2F	; 47
    2e5e:	19 f0       	breq	.+6      	; 0x2e66 <CALC_VoidReadingPrintNumber+0x19e>
    2e60:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e62:	8d 32       	cpi	r24, 0x2D	; 45
    2e64:	41 f4       	brne	.+16     	; 0x2e76 <CALC_VoidReadingPrintNumber+0x1ae>
				Global_u8Operator = Local_u8CharactersChecker;
    2e66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e68:	80 93 96 01 	sts	0x0196, r24
				LCD_enuDisplayChar(Global_u8Operator);
    2e6c:	80 91 96 01 	lds	r24, 0x0196
    2e70:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_enuDisplayChar>
    2e74:	0b c0       	rjmp	.+22     	; 0x2e8c <CALC_VoidReadingPrintNumber+0x1c4>
				break;
			}
			else if(EQUAL_OPERATOR){
    2e76:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e78:	8d 33       	cpi	r24, 0x3D	; 61
    2e7a:	21 f4       	brne	.+8      	; 0x2e84 <CALC_VoidReadingPrintNumber+0x1bc>
				Global_u8EqualOperator = Local_u8CharactersChecker;
    2e7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e7e:	80 93 97 01 	sts	0x0197, r24
    2e82:	04 c0       	rjmp	.+8      	; 0x2e8c <CALC_VoidReadingPrintNumber+0x1c4>
static inline void CALC_VoidReadingPrintNumber(s32 *Copy_u8Number){

	u8 Local_Au8KeyPadValues[NMBER_OF_DIGITS] = {0,0,0,0,0};
	u8 Local_u8CharactersChecker = 0;
	u8 Local_u8Iterator = 0;
	while(Local_u8Iterator < NMBER_OF_DIGITS + 1){ // 1 is added to keep place for the Operator
    2e84:	8c 89       	ldd	r24, Y+20	; 0x14
    2e86:	88 30       	cpi	r24, 0x08	; 8
    2e88:	08 f4       	brcc	.+2      	; 0x2e8c <CALC_VoidReadingPrintNumber+0x1c4>
    2e8a:	39 cf       	rjmp	.-398    	; 0x2cfe <CALC_VoidReadingPrintNumber+0x36>
				break;
			}
		}
	}

	u8 Local_u8PowerFactor = 0;
    2e8c:	1b 8a       	std	Y+19, r1	; 0x13
	s32 Local_u16PowerResult = 0;
    2e8e:	1f 86       	std	Y+15, r1	; 0x0f
    2e90:	18 8a       	std	Y+16, r1	; 0x10
    2e92:	19 8a       	std	Y+17, r1	; 0x11
    2e94:	1a 8a       	std	Y+18, r1	; 0x12
    2e96:	39 c0       	rjmp	.+114    	; 0x2f0a <CALC_VoidReadingPrintNumber+0x242>
	while(Local_u8Iterator > 0){
		Local_u16PowerResult = CALC_u16ReturnPowr(Local_u8PowerFactor);
    2e98:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <CALC_u16ReturnPowr>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8f 87       	std	Y+15, r24	; 0x0f
    2ea4:	98 8b       	std	Y+16, r25	; 0x10
    2ea6:	a9 8b       	std	Y+17, r26	; 0x11
    2ea8:	ba 8b       	std	Y+18, r27	; 0x12
		*Copy_u8Number += Local_Au8KeyPadValues[Local_u8Iterator - 1] * Local_u16PowerResult;
    2eaa:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2eac:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2eae:	e0 80       	ld	r14, Z
    2eb0:	f1 80       	ldd	r15, Z+1	; 0x01
    2eb2:	02 81       	ldd	r16, Z+2	; 0x02
    2eb4:	13 81       	ldd	r17, Z+3	; 0x03
    2eb6:	8c 89       	ldd	r24, Y+20	; 0x14
    2eb8:	88 2f       	mov	r24, r24
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	9c 01       	movw	r18, r24
    2ebe:	21 50       	subi	r18, 0x01	; 1
    2ec0:	30 40       	sbci	r19, 0x00	; 0
    2ec2:	ce 01       	movw	r24, r28
    2ec4:	45 96       	adiw	r24, 0x15	; 21
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	e2 0f       	add	r30, r18
    2eca:	f3 1f       	adc	r31, r19
    2ecc:	80 81       	ld	r24, Z
    2ece:	88 2f       	mov	r24, r24
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	a0 e0       	ldi	r26, 0x00	; 0
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ed8:	38 89       	ldd	r19, Y+16	; 0x10
    2eda:	49 89       	ldd	r20, Y+17	; 0x11
    2edc:	5a 89       	ldd	r21, Y+18	; 0x12
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsi3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	8e 0d       	add	r24, r14
    2eec:	9f 1d       	adc	r25, r15
    2eee:	a0 1f       	adc	r26, r16
    2ef0:	b1 1f       	adc	r27, r17
    2ef2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2ef4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2ef6:	80 83       	st	Z, r24
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	a2 83       	std	Z+2, r26	; 0x02
    2efc:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8Iterator--;
    2efe:	8c 89       	ldd	r24, Y+20	; 0x14
    2f00:	81 50       	subi	r24, 0x01	; 1
    2f02:	8c 8b       	std	Y+20, r24	; 0x14
		Local_u8PowerFactor++;
    2f04:	8b 89       	ldd	r24, Y+19	; 0x13
    2f06:	8f 5f       	subi	r24, 0xFF	; 255
    2f08:	8b 8b       	std	Y+19, r24	; 0x13
		}
	}

	u8 Local_u8PowerFactor = 0;
	s32 Local_u16PowerResult = 0;
	while(Local_u8Iterator > 0){
    2f0a:	8c 89       	ldd	r24, Y+20	; 0x14
    2f0c:	88 23       	and	r24, r24
    2f0e:	21 f6       	brne	.-120    	; 0x2e98 <CALC_VoidReadingPrintNumber+0x1d0>
		Local_u16PowerResult = CALC_u16ReturnPowr(Local_u8PowerFactor);
		*Copy_u8Number += Local_Au8KeyPadValues[Local_u8Iterator - 1] * Local_u16PowerResult;
		Local_u8Iterator--;
		Local_u8PowerFactor++;
	}
}
    2f10:	6e 96       	adiw	r28, 0x1e	; 30
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	1f 91       	pop	r17
    2f22:	0f 91       	pop	r16
    2f24:	ff 90       	pop	r15
    2f26:	ef 90       	pop	r14
    2f28:	08 95       	ret

00002f2a <CALC_u16ReturnPowr>:

/*This Function is Used To Return The Number Position I.e. 1, 10, 100, 1000, 10000*/
static s32 CALC_u16ReturnPowr(u8 Copy_u8Iterator){
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <CALC_u16ReturnPowr+0x6>
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <CALC_u16ReturnPowr+0x8>
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <CALC_u16ReturnPowr+0xa>
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	8e 83       	std	Y+6, r24	; 0x06
	s32 result = 1;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	a0 e0       	ldi	r26, 0x00	; 0
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	8a 83       	std	Y+2, r24	; 0x02
    2f44:	9b 83       	std	Y+3, r25	; 0x03
    2f46:	ac 83       	std	Y+4, r26	; 0x04
    2f48:	bd 83       	std	Y+5, r27	; 0x05
	for(char_8 Local_u8Iterator = Copy_u8Iterator; Local_u8Iterator > 0; Local_u8Iterator--){
    2f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4c:	89 83       	std	Y+1, r24	; 0x01
    2f4e:	15 c0       	rjmp	.+42     	; 0x2f7a <CALC_u16ReturnPowr+0x50>
		result *= 10;
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	ac 81       	ldd	r26, Y+4	; 0x04
    2f56:	bd 81       	ldd	r27, Y+5	; 0x05
    2f58:	2a e0       	ldi	r18, 0x0A	; 10
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	bc 01       	movw	r22, r24
    2f62:	cd 01       	movw	r24, r26
    2f64:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsi3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	8a 83       	std	Y+2, r24	; 0x02
    2f6e:	9b 83       	std	Y+3, r25	; 0x03
    2f70:	ac 83       	std	Y+4, r26	; 0x04
    2f72:	bd 83       	std	Y+5, r27	; 0x05
}

/*This Function is Used To Return The Number Position I.e. 1, 10, 100, 1000, 10000*/
static s32 CALC_u16ReturnPowr(u8 Copy_u8Iterator){
	s32 result = 1;
	for(char_8 Local_u8Iterator = Copy_u8Iterator; Local_u8Iterator > 0; Local_u8Iterator--){
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	81 50       	subi	r24, 0x01	; 1
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	88 23       	and	r24, r24
    2f7e:	41 f7       	brne	.-48     	; 0x2f50 <CALC_u16ReturnPowr+0x26>
		result *= 10;
	}
	return result;
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	9b 81       	ldd	r25, Y+3	; 0x03
    2f84:	ac 81       	ldd	r26, Y+4	; 0x04
    2f86:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2f88:	bc 01       	movw	r22, r24
    2f8a:	cd 01       	movw	r24, r26
    2f8c:	26 96       	adiw	r28, 0x06	; 6
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <main>:
 * The Pins And Ports Of Each Component Is Defined In its OWN
 * Config.h File In HAL folder (It can Be Modified).
 *
 * */
extern u8 Global_u8EqualOperator;
int main(void){
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	e2 97       	sbiw	r28, 0x32	; 50
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61

	CALC_enuInit();
    2fb2:	0e 94 73 14 	call	0x28e6	; 0x28e6 <CALC_enuInit>
	s32 Local_u8Num1 = 0, Local_u8Num2 = 0;
    2fb6:	1b a6       	std	Y+43, r1	; 0x2b
    2fb8:	1c a6       	std	Y+44, r1	; 0x2c
    2fba:	1d a6       	std	Y+45, r1	; 0x2d
    2fbc:	1e a6       	std	Y+46, r1	; 0x2e
    2fbe:	1f a6       	std	Y+47, r1	; 0x2f
    2fc0:	18 aa       	std	Y+48, r1	; 0x30
    2fc2:	19 aa       	std	Y+49, r1	; 0x31
    2fc4:	1a aa       	std	Y+50, r1	; 0x32
	while(1){
		Local_u8Num1 = 0, Local_u8Num2 = 0;
    2fc6:	1b a6       	std	Y+43, r1	; 0x2b
    2fc8:	1c a6       	std	Y+44, r1	; 0x2c
    2fca:	1d a6       	std	Y+45, r1	; 0x2d
    2fcc:	1e a6       	std	Y+46, r1	; 0x2e
    2fce:	1f a6       	std	Y+47, r1	; 0x2f
    2fd0:	18 aa       	std	Y+48, r1	; 0x30
    2fd2:	19 aa       	std	Y+49, r1	; 0x31
    2fd4:	1a aa       	std	Y+50, r1	; 0x32
    2fd6:	ec c0       	rjmp	.+472    	; 0x31b0 <main+0x212>
		while( Global_u8EqualOperator != '='){
			CALC_enuReadNumber(&Local_u8Num1);
    2fd8:	ce 01       	movw	r24, r28
    2fda:	8b 96       	adiw	r24, 0x2b	; 43
    2fdc:	0e 94 85 14 	call	0x290a	; 0x290a <CALC_enuReadNumber>
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	a0 e2       	ldi	r26, 0x20	; 32
    2fe6:	b1 e4       	ldi	r27, 0x41	; 65
    2fe8:	8f a3       	std	Y+39, r24	; 0x27
    2fea:	98 a7       	std	Y+40, r25	; 0x28
    2fec:	a9 a7       	std	Y+41, r26	; 0x29
    2fee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ff2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ff4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ff6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4a e7       	ldi	r20, 0x7A	; 122
    2ffe:	53 e4       	ldi	r21, 0x43	; 67
    3000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	8b a3       	std	Y+35, r24	; 0x23
    300a:	9c a3       	std	Y+36, r25	; 0x24
    300c:	ad a3       	std	Y+37, r26	; 0x25
    300e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3010:	6b a1       	ldd	r22, Y+35	; 0x23
    3012:	7c a1       	ldd	r23, Y+36	; 0x24
    3014:	8d a1       	ldd	r24, Y+37	; 0x25
    3016:	9e a1       	ldd	r25, Y+38	; 0x26
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e8       	ldi	r20, 0x80	; 128
    301e:	5f e3       	ldi	r21, 0x3F	; 63
    3020:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3024:	88 23       	and	r24, r24
    3026:	2c f4       	brge	.+10     	; 0x3032 <main+0x94>
		__ticks = 1;
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9a a3       	std	Y+34, r25	; 0x22
    302e:	89 a3       	std	Y+33, r24	; 0x21
    3030:	3f c0       	rjmp	.+126    	; 0x30b0 <main+0x112>
	else if (__tmp > 65535)
    3032:	6b a1       	ldd	r22, Y+35	; 0x23
    3034:	7c a1       	ldd	r23, Y+36	; 0x24
    3036:	8d a1       	ldd	r24, Y+37	; 0x25
    3038:	9e a1       	ldd	r25, Y+38	; 0x26
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	3f ef       	ldi	r19, 0xFF	; 255
    303e:	4f e7       	ldi	r20, 0x7F	; 127
    3040:	57 e4       	ldi	r21, 0x47	; 71
    3042:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3046:	18 16       	cp	r1, r24
    3048:	4c f5       	brge	.+82     	; 0x309c <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304a:	6f a1       	ldd	r22, Y+39	; 0x27
    304c:	78 a5       	ldd	r23, Y+40	; 0x28
    304e:	89 a5       	ldd	r24, Y+41	; 0x29
    3050:	9a a5       	ldd	r25, Y+42	; 0x2a
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e2       	ldi	r20, 0x20	; 32
    3058:	51 e4       	ldi	r21, 0x41	; 65
    305a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	9a a3       	std	Y+34, r25	; 0x22
    3070:	89 a3       	std	Y+33, r24	; 0x21
    3072:	0f c0       	rjmp	.+30     	; 0x3092 <main+0xf4>
    3074:	89 e1       	ldi	r24, 0x19	; 25
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	98 a3       	std	Y+32, r25	; 0x20
    307a:	8f 8f       	std	Y+31, r24	; 0x1f
    307c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    307e:	98 a1       	ldd	r25, Y+32	; 0x20
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <main+0xe2>
    3084:	98 a3       	std	Y+32, r25	; 0x20
    3086:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3088:	89 a1       	ldd	r24, Y+33	; 0x21
    308a:	9a a1       	ldd	r25, Y+34	; 0x22
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	9a a3       	std	Y+34, r25	; 0x22
    3090:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3092:	89 a1       	ldd	r24, Y+33	; 0x21
    3094:	9a a1       	ldd	r25, Y+34	; 0x22
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	69 f7       	brne	.-38     	; 0x3074 <main+0xd6>
    309a:	14 c0       	rjmp	.+40     	; 0x30c4 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309c:	6b a1       	ldd	r22, Y+35	; 0x23
    309e:	7c a1       	ldd	r23, Y+36	; 0x24
    30a0:	8d a1       	ldd	r24, Y+37	; 0x25
    30a2:	9e a1       	ldd	r25, Y+38	; 0x26
    30a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	9a a3       	std	Y+34, r25	; 0x22
    30ae:	89 a3       	std	Y+33, r24	; 0x21
    30b0:	89 a1       	ldd	r24, Y+33	; 0x21
    30b2:	9a a1       	ldd	r25, Y+34	; 0x22
    30b4:	9e 8f       	std	Y+30, r25	; 0x1e
    30b6:	8d 8f       	std	Y+29, r24	; 0x1d
    30b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <main+0x11e>
    30c0:	9e 8f       	std	Y+30, r25	; 0x1e
    30c2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);

			CALC_enuReadNumber(&Local_u8Num2);
    30c4:	ce 01       	movw	r24, r28
    30c6:	8f 96       	adiw	r24, 0x2f	; 47
    30c8:	0e 94 85 14 	call	0x290a	; 0x290a <CALC_enuReadNumber>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	a0 e2       	ldi	r26, 0x20	; 32
    30d2:	b1 e4       	ldi	r27, 0x41	; 65
    30d4:	89 8f       	std	Y+25, r24	; 0x19
    30d6:	9a 8f       	std	Y+26, r25	; 0x1a
    30d8:	ab 8f       	std	Y+27, r26	; 0x1b
    30da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30dc:	69 8d       	ldd	r22, Y+25	; 0x19
    30de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a e7       	ldi	r20, 0x7A	; 122
    30ea:	53 e4       	ldi	r21, 0x43	; 67
    30ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	8d 8b       	std	Y+21, r24	; 0x15
    30f6:	9e 8b       	std	Y+22, r25	; 0x16
    30f8:	af 8b       	std	Y+23, r26	; 0x17
    30fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30fc:	6d 89       	ldd	r22, Y+21	; 0x15
    30fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3100:	8f 89       	ldd	r24, Y+23	; 0x17
    3102:	98 8d       	ldd	r25, Y+24	; 0x18
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	5f e3       	ldi	r21, 0x3F	; 63
    310c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3110:	88 23       	and	r24, r24
    3112:	2c f4       	brge	.+10     	; 0x311e <main+0x180>
		__ticks = 1;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9c 8b       	std	Y+20, r25	; 0x14
    311a:	8b 8b       	std	Y+19, r24	; 0x13
    311c:	3f c0       	rjmp	.+126    	; 0x319c <main+0x1fe>
	else if (__tmp > 65535)
    311e:	6d 89       	ldd	r22, Y+21	; 0x15
    3120:	7e 89       	ldd	r23, Y+22	; 0x16
    3122:	8f 89       	ldd	r24, Y+23	; 0x17
    3124:	98 8d       	ldd	r25, Y+24	; 0x18
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	3f ef       	ldi	r19, 0xFF	; 255
    312a:	4f e7       	ldi	r20, 0x7F	; 127
    312c:	57 e4       	ldi	r21, 0x47	; 71
    312e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3132:	18 16       	cp	r1, r24
    3134:	4c f5       	brge	.+82     	; 0x3188 <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3136:	69 8d       	ldd	r22, Y+25	; 0x19
    3138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    313a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    313c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	9c 8b       	std	Y+20, r25	; 0x14
    315c:	8b 8b       	std	Y+19, r24	; 0x13
    315e:	0f c0       	rjmp	.+30     	; 0x317e <main+0x1e0>
    3160:	89 e1       	ldi	r24, 0x19	; 25
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9a 8b       	std	Y+18, r25	; 0x12
    3166:	89 8b       	std	Y+17, r24	; 0x11
    3168:	89 89       	ldd	r24, Y+17	; 0x11
    316a:	9a 89       	ldd	r25, Y+18	; 0x12
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <main+0x1ce>
    3170:	9a 8b       	std	Y+18, r25	; 0x12
    3172:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3174:	8b 89       	ldd	r24, Y+19	; 0x13
    3176:	9c 89       	ldd	r25, Y+20	; 0x14
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	9c 8b       	std	Y+20, r25	; 0x14
    317c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317e:	8b 89       	ldd	r24, Y+19	; 0x13
    3180:	9c 89       	ldd	r25, Y+20	; 0x14
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	69 f7       	brne	.-38     	; 0x3160 <main+0x1c2>
    3186:	14 c0       	rjmp	.+40     	; 0x31b0 <main+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3188:	6d 89       	ldd	r22, Y+21	; 0x15
    318a:	7e 89       	ldd	r23, Y+22	; 0x16
    318c:	8f 89       	ldd	r24, Y+23	; 0x17
    318e:	98 8d       	ldd	r25, Y+24	; 0x18
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9c 8b       	std	Y+20, r25	; 0x14
    319a:	8b 8b       	std	Y+19, r24	; 0x13
    319c:	8b 89       	ldd	r24, Y+19	; 0x13
    319e:	9c 89       	ldd	r25, Y+20	; 0x14
    31a0:	98 8b       	std	Y+16, r25	; 0x10
    31a2:	8f 87       	std	Y+15, r24	; 0x0f
    31a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a6:	98 89       	ldd	r25, Y+16	; 0x10
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <main+0x20a>
    31ac:	98 8b       	std	Y+16, r25	; 0x10
    31ae:	8f 87       	std	Y+15, r24	; 0x0f

	CALC_enuInit();
	s32 Local_u8Num1 = 0, Local_u8Num2 = 0;
	while(1){
		Local_u8Num1 = 0, Local_u8Num2 = 0;
		while( Global_u8EqualOperator != '='){
    31b0:	80 91 97 01 	lds	r24, 0x0197
    31b4:	8d 33       	cpi	r24, 0x3D	; 61
    31b6:	09 f0       	breq	.+2      	; 0x31ba <main+0x21c>
    31b8:	0f cf       	rjmp	.-482    	; 0x2fd8 <main+0x3a>

			CALC_enuReadNumber(&Local_u8Num2);
			_delay_ms(10);

		}
		CALC_enuDisplayResult(Local_u8Num1, Local_u8Num2);
    31ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    31bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    31be:	ad a5       	ldd	r26, Y+45	; 0x2d
    31c0:	be a5       	ldd	r27, Y+46	; 0x2e
    31c2:	2f a5       	ldd	r18, Y+47	; 0x2f
    31c4:	38 a9       	ldd	r19, Y+48	; 0x30
    31c6:	49 a9       	ldd	r20, Y+49	; 0x31
    31c8:	5a a9       	ldd	r21, Y+50	; 0x32
    31ca:	bc 01       	movw	r22, r24
    31cc:	cd 01       	movw	r24, r26
    31ce:	0e 94 a0 14 	call	0x2940	; 0x2940 <CALC_enuDisplayResult>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a0 e2       	ldi	r26, 0x20	; 32
    31d8:	b1 e4       	ldi	r27, 0x41	; 65
    31da:	8b 87       	std	Y+11, r24	; 0x0b
    31dc:	9c 87       	std	Y+12, r25	; 0x0c
    31de:	ad 87       	std	Y+13, r26	; 0x0d
    31e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	4a e7       	ldi	r20, 0x7A	; 122
    31f0:	53 e4       	ldi	r21, 0x43	; 67
    31f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8f 83       	std	Y+7, r24	; 0x07
    31fc:	98 87       	std	Y+8, r25	; 0x08
    31fe:	a9 87       	std	Y+9, r26	; 0x09
    3200:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3202:	6f 81       	ldd	r22, Y+7	; 0x07
    3204:	78 85       	ldd	r23, Y+8	; 0x08
    3206:	89 85       	ldd	r24, Y+9	; 0x09
    3208:	9a 85       	ldd	r25, Y+10	; 0x0a
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e8       	ldi	r20, 0x80	; 128
    3210:	5f e3       	ldi	r21, 0x3F	; 63
    3212:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3216:	88 23       	and	r24, r24
    3218:	2c f4       	brge	.+10     	; 0x3224 <main+0x286>
		__ticks = 1;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	9e 83       	std	Y+6, r25	; 0x06
    3220:	8d 83       	std	Y+5, r24	; 0x05
    3222:	3f c0       	rjmp	.+126    	; 0x32a2 <main+0x304>
	else if (__tmp > 65535)
    3224:	6f 81       	ldd	r22, Y+7	; 0x07
    3226:	78 85       	ldd	r23, Y+8	; 0x08
    3228:	89 85       	ldd	r24, Y+9	; 0x09
    322a:	9a 85       	ldd	r25, Y+10	; 0x0a
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	3f ef       	ldi	r19, 0xFF	; 255
    3230:	4f e7       	ldi	r20, 0x7F	; 127
    3232:	57 e4       	ldi	r21, 0x47	; 71
    3234:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3238:	18 16       	cp	r1, r24
    323a:	4c f5       	brge	.+82     	; 0x328e <main+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323c:	6b 85       	ldd	r22, Y+11	; 0x0b
    323e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3240:	8d 85       	ldd	r24, Y+13	; 0x0d
    3242:	9e 85       	ldd	r25, Y+14	; 0x0e
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e2       	ldi	r20, 0x20	; 32
    324a:	51 e4       	ldi	r21, 0x41	; 65
    324c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	bc 01       	movw	r22, r24
    3256:	cd 01       	movw	r24, r26
    3258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	9e 83       	std	Y+6, r25	; 0x06
    3262:	8d 83       	std	Y+5, r24	; 0x05
    3264:	0f c0       	rjmp	.+30     	; 0x3284 <main+0x2e6>
    3266:	89 e1       	ldi	r24, 0x19	; 25
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9c 83       	std	Y+4, r25	; 0x04
    326c:	8b 83       	std	Y+3, r24	; 0x03
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	9c 81       	ldd	r25, Y+4	; 0x04
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	f1 f7       	brne	.-4      	; 0x3272 <main+0x2d4>
    3276:	9c 83       	std	Y+4, r25	; 0x04
    3278:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327a:	8d 81       	ldd	r24, Y+5	; 0x05
    327c:	9e 81       	ldd	r25, Y+6	; 0x06
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	9e 83       	std	Y+6, r25	; 0x06
    3282:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3284:	8d 81       	ldd	r24, Y+5	; 0x05
    3286:	9e 81       	ldd	r25, Y+6	; 0x06
    3288:	00 97       	sbiw	r24, 0x00	; 0
    328a:	69 f7       	brne	.-38     	; 0x3266 <main+0x2c8>
    328c:	14 c0       	rjmp	.+40     	; 0x32b6 <main+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328e:	6f 81       	ldd	r22, Y+7	; 0x07
    3290:	78 85       	ldd	r23, Y+8	; 0x08
    3292:	89 85       	ldd	r24, Y+9	; 0x09
    3294:	9a 85       	ldd	r25, Y+10	; 0x0a
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	9e 83       	std	Y+6, r25	; 0x06
    32a0:	8d 83       	std	Y+5, r24	; 0x05
    32a2:	8d 81       	ldd	r24, Y+5	; 0x05
    32a4:	9e 81       	ldd	r25, Y+6	; 0x06
    32a6:	9a 83       	std	Y+2, r25	; 0x02
    32a8:	89 83       	std	Y+1, r24	; 0x01
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	9a 81       	ldd	r25, Y+2	; 0x02
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <main+0x310>
    32b2:	9a 83       	std	Y+2, r25	; 0x02
    32b4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		CALC_enuStandToErase();
    32b6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <CALC_enuStandToErase>
    32ba:	85 ce       	rjmp	.-758    	; 0x2fc6 <main+0x28>

000032bc <__mulsi3>:
    32bc:	62 9f       	mul	r22, r18
    32be:	d0 01       	movw	r26, r0
    32c0:	73 9f       	mul	r23, r19
    32c2:	f0 01       	movw	r30, r0
    32c4:	82 9f       	mul	r24, r18
    32c6:	e0 0d       	add	r30, r0
    32c8:	f1 1d       	adc	r31, r1
    32ca:	64 9f       	mul	r22, r20
    32cc:	e0 0d       	add	r30, r0
    32ce:	f1 1d       	adc	r31, r1
    32d0:	92 9f       	mul	r25, r18
    32d2:	f0 0d       	add	r31, r0
    32d4:	83 9f       	mul	r24, r19
    32d6:	f0 0d       	add	r31, r0
    32d8:	74 9f       	mul	r23, r20
    32da:	f0 0d       	add	r31, r0
    32dc:	65 9f       	mul	r22, r21
    32de:	f0 0d       	add	r31, r0
    32e0:	99 27       	eor	r25, r25
    32e2:	72 9f       	mul	r23, r18
    32e4:	b0 0d       	add	r27, r0
    32e6:	e1 1d       	adc	r30, r1
    32e8:	f9 1f       	adc	r31, r25
    32ea:	63 9f       	mul	r22, r19
    32ec:	b0 0d       	add	r27, r0
    32ee:	e1 1d       	adc	r30, r1
    32f0:	f9 1f       	adc	r31, r25
    32f2:	bd 01       	movw	r22, r26
    32f4:	cf 01       	movw	r24, r30
    32f6:	11 24       	eor	r1, r1
    32f8:	08 95       	ret

000032fa <__divmodsi4>:
    32fa:	97 fb       	bst	r25, 7
    32fc:	09 2e       	mov	r0, r25
    32fe:	05 26       	eor	r0, r21
    3300:	0e d0       	rcall	.+28     	; 0x331e <__divmodsi4_neg1>
    3302:	57 fd       	sbrc	r21, 7
    3304:	04 d0       	rcall	.+8      	; 0x330e <__divmodsi4_neg2>
    3306:	14 d0       	rcall	.+40     	; 0x3330 <__udivmodsi4>
    3308:	0a d0       	rcall	.+20     	; 0x331e <__divmodsi4_neg1>
    330a:	00 1c       	adc	r0, r0
    330c:	38 f4       	brcc	.+14     	; 0x331c <__divmodsi4_exit>

0000330e <__divmodsi4_neg2>:
    330e:	50 95       	com	r21
    3310:	40 95       	com	r20
    3312:	30 95       	com	r19
    3314:	21 95       	neg	r18
    3316:	3f 4f       	sbci	r19, 0xFF	; 255
    3318:	4f 4f       	sbci	r20, 0xFF	; 255
    331a:	5f 4f       	sbci	r21, 0xFF	; 255

0000331c <__divmodsi4_exit>:
    331c:	08 95       	ret

0000331e <__divmodsi4_neg1>:
    331e:	f6 f7       	brtc	.-4      	; 0x331c <__divmodsi4_exit>
    3320:	90 95       	com	r25
    3322:	80 95       	com	r24
    3324:	70 95       	com	r23
    3326:	61 95       	neg	r22
    3328:	7f 4f       	sbci	r23, 0xFF	; 255
    332a:	8f 4f       	sbci	r24, 0xFF	; 255
    332c:	9f 4f       	sbci	r25, 0xFF	; 255
    332e:	08 95       	ret

00003330 <__udivmodsi4>:
    3330:	a1 e2       	ldi	r26, 0x21	; 33
    3332:	1a 2e       	mov	r1, r26
    3334:	aa 1b       	sub	r26, r26
    3336:	bb 1b       	sub	r27, r27
    3338:	fd 01       	movw	r30, r26
    333a:	0d c0       	rjmp	.+26     	; 0x3356 <__udivmodsi4_ep>

0000333c <__udivmodsi4_loop>:
    333c:	aa 1f       	adc	r26, r26
    333e:	bb 1f       	adc	r27, r27
    3340:	ee 1f       	adc	r30, r30
    3342:	ff 1f       	adc	r31, r31
    3344:	a2 17       	cp	r26, r18
    3346:	b3 07       	cpc	r27, r19
    3348:	e4 07       	cpc	r30, r20
    334a:	f5 07       	cpc	r31, r21
    334c:	20 f0       	brcs	.+8      	; 0x3356 <__udivmodsi4_ep>
    334e:	a2 1b       	sub	r26, r18
    3350:	b3 0b       	sbc	r27, r19
    3352:	e4 0b       	sbc	r30, r20
    3354:	f5 0b       	sbc	r31, r21

00003356 <__udivmodsi4_ep>:
    3356:	66 1f       	adc	r22, r22
    3358:	77 1f       	adc	r23, r23
    335a:	88 1f       	adc	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	1a 94       	dec	r1
    3360:	69 f7       	brne	.-38     	; 0x333c <__udivmodsi4_loop>
    3362:	60 95       	com	r22
    3364:	70 95       	com	r23
    3366:	80 95       	com	r24
    3368:	90 95       	com	r25
    336a:	9b 01       	movw	r18, r22
    336c:	ac 01       	movw	r20, r24
    336e:	bd 01       	movw	r22, r26
    3370:	cf 01       	movw	r24, r30
    3372:	08 95       	ret

00003374 <__prologue_saves__>:
    3374:	2f 92       	push	r2
    3376:	3f 92       	push	r3
    3378:	4f 92       	push	r4
    337a:	5f 92       	push	r5
    337c:	6f 92       	push	r6
    337e:	7f 92       	push	r7
    3380:	8f 92       	push	r8
    3382:	9f 92       	push	r9
    3384:	af 92       	push	r10
    3386:	bf 92       	push	r11
    3388:	cf 92       	push	r12
    338a:	df 92       	push	r13
    338c:	ef 92       	push	r14
    338e:	ff 92       	push	r15
    3390:	0f 93       	push	r16
    3392:	1f 93       	push	r17
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	ca 1b       	sub	r28, r26
    339e:	db 0b       	sbc	r29, r27
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	09 94       	ijmp

000033ac <__epilogue_restores__>:
    33ac:	2a 88       	ldd	r2, Y+18	; 0x12
    33ae:	39 88       	ldd	r3, Y+17	; 0x11
    33b0:	48 88       	ldd	r4, Y+16	; 0x10
    33b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    33b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    33b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    33b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    33ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    33bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    33be:	b9 84       	ldd	r11, Y+9	; 0x09
    33c0:	c8 84       	ldd	r12, Y+8	; 0x08
    33c2:	df 80       	ldd	r13, Y+7	; 0x07
    33c4:	ee 80       	ldd	r14, Y+6	; 0x06
    33c6:	fd 80       	ldd	r15, Y+5	; 0x05
    33c8:	0c 81       	ldd	r16, Y+4	; 0x04
    33ca:	1b 81       	ldd	r17, Y+3	; 0x03
    33cc:	aa 81       	ldd	r26, Y+2	; 0x02
    33ce:	b9 81       	ldd	r27, Y+1	; 0x01
    33d0:	ce 0f       	add	r28, r30
    33d2:	d1 1d       	adc	r29, r1
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	ed 01       	movw	r28, r26
    33e0:	08 95       	ret

000033e2 <_exit>:
    33e2:	f8 94       	cli

000033e4 <__stop_program>:
    33e4:	ff cf       	rjmp	.-2      	; 0x33e4 <__stop_program>
