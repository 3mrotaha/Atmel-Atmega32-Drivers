
ALL_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00800060  00005668  000056fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008001e6  008001e6  00005882  2**0
                  ALLOC
  3 .stab         00005784  00000000  00000000  00005884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b3b  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000db43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  0000dd03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  0000df11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0001059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  00011a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  00012ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  000131f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013bfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_1>
       8:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_2>
       c:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3f       	cpi	r26, 0xFC	; 252
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 2a 	call	0x551e	; 0x551e <main>
      8a:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 2b 	jmp	0x5606	; 0x5606 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1f 2b 	jmp	0x563e	; 0x563e <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 04 2b 	jmp	0x5608	; 0x5608 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 20 2b 	jmp	0x5640	; 0x5640 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 0b 2b 	jmp	0x5616	; 0x5616 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 27 2b 	jmp	0x564e	; 0x564e <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e8 59       	subi	r30, 0x98	; 152
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <EXTI_enuInit>:
static volatile void (*EXTI_ApfunINTFun[3])(void*) = {NULL,NULL,NULL};

void * EXTI_ApvidGenericparameter[3] = {NULL,NULL,NULL};

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	2c 97       	sbiw	r28, 0x0c	; 12
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     e70:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrEXTIConfig != NULL)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	09 f4       	brne	.+2      	; 0xe7c <EXTI_enuInit+0x24>
     e7a:	0d c1       	rjmp	.+538    	; 0x1096 <EXTI_enuInit+0x23e>
	{
		u8 Local_u8Iter=0;
     e7c:	19 82       	std	Y+1, r1	; 0x01
		for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
     e7e:	19 82       	std	Y+1, r1	; 0x01
     e80:	05 c1       	rjmp	.+522    	; 0x108c <EXTI_enuInit+0x234>
		{
			if (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ACTIVE)
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9c 01       	movw	r18, r24
     e8a:	22 0f       	add	r18, r18
     e8c:	33 1f       	adc	r19, r19
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	fc 01       	movw	r30, r24
     e94:	e2 0f       	add	r30, r18
     e96:	f3 1f       	adc	r31, r19
     e98:	80 81       	ld	r24, Z
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	09 f0       	breq	.+2      	; 0xea0 <EXTI_enuInit+0x48>
     e9e:	f3 c0       	rjmp	.+486    	; 0x1086 <EXTI_enuInit+0x22e>
			{
				switch(Local_u8Iter)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3c 87       	std	Y+12, r19	; 0x0c
     ea8:	2b 87       	std	Y+11, r18	; 0x0b
     eaa:	8b 85       	ldd	r24, Y+11	; 0x0b
     eac:	9c 85       	ldd	r25, Y+12	; 0x0c
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <EXTI_enuInit+0x5e>
     eb4:	60 c0       	rjmp	.+192    	; 0xf76 <EXTI_enuInit+0x11e>
     eb6:	2b 85       	ldd	r18, Y+11	; 0x0b
     eb8:	3c 85       	ldd	r19, Y+12	; 0x0c
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <EXTI_enuInit+0x6a>
     ec0:	af c0       	rjmp	.+350    	; 0x1020 <EXTI_enuInit+0x1c8>
     ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f0       	breq	.+2      	; 0xecc <EXTI_enuInit+0x74>
     eca:	dd c0       	rjmp	.+442    	; 0x1086 <EXTI_enuInit+0x22e>
				{
				case 0:
					MCUCR &=~ (3<<0);
     ecc:	a5 e5       	ldi	r26, 0x55	; 85
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e5       	ldi	r30, 0x55	; 85
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8c 7f       	andi	r24, 0xFC	; 252
     ed8:	8c 93       	st	X, r24
					GICR |= (1<<6);
     eda:	ab e5       	ldi	r26, 0x5B	; 91
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	eb e5       	ldi	r30, 0x5B	; 91
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 64       	ori	r24, 0x40	; 64
     ee6:	8c 93       	st	X, r24
					switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9c 01       	movw	r18, r24
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	81 81       	ldd	r24, Z+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3a 87       	std	Y+10, r19	; 0x0a
     f06:	29 87       	std	Y+9, r18	; 0x09
     f08:	89 85       	ldd	r24, Y+9	; 0x09
     f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0c:	89 30       	cpi	r24, 0x09	; 9
     f0e:	91 05       	cpc	r25, r1
     f10:	f9 f0       	breq	.+62     	; 0xf50 <EXTI_enuInit+0xf8>
     f12:	29 85       	ldd	r18, Y+9	; 0x09
     f14:	3a 85       	ldd	r19, Y+10	; 0x0a
     f16:	2a 30       	cpi	r18, 0x0A	; 10
     f18:	31 05       	cpc	r19, r1
     f1a:	34 f4       	brge	.+12     	; 0xf28 <EXTI_enuInit+0xd0>
     f1c:	89 85       	ldd	r24, Y+9	; 0x09
     f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f20:	85 30       	cpi	r24, 0x05	; 5
     f22:	91 05       	cpc	r25, r1
     f24:	69 f0       	breq	.+26     	; 0xf40 <EXTI_enuInit+0xe8>
     f26:	24 c0       	rjmp	.+72     	; 0xf70 <EXTI_enuInit+0x118>
     f28:	29 85       	ldd	r18, Y+9	; 0x09
     f2a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f2c:	23 31       	cpi	r18, 0x13	; 19
     f2e:	31 05       	cpc	r19, r1
     f30:	b9 f0       	breq	.+46     	; 0xf60 <EXTI_enuInit+0x108>
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	9a 85       	ldd	r25, Y+10	; 0x0a
     f36:	8d 35       	cpi	r24, 0x5D	; 93
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <EXTI_enuInit+0xe6>
     f3c:	a4 c0       	rjmp	.+328    	; 0x1086 <EXTI_enuInit+0x22e>
     f3e:	18 c0       	rjmp	.+48     	; 0xf70 <EXTI_enuInit+0x118>
					{
					case RISING_EDGE:
						MCUCR |= (3<<0);
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	83 60       	ori	r24, 0x03	; 3
     f4c:	8c 93       	st	X, r24
     f4e:	9b c0       	rjmp	.+310    	; 0x1086 <EXTI_enuInit+0x22e>
						break;
					case FALLING_EDGE:
						MCUCR |= (1<<1);
     f50:	a5 e5       	ldi	r26, 0x55	; 85
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e5       	ldi	r30, 0x55	; 85
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	8c 93       	st	X, r24
     f5e:	93 c0       	rjmp	.+294    	; 0x1086 <EXTI_enuInit+0x22e>
						break;
					case ANY_LOGIC:
						MCUCR |= (1<<0);
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	8c 93       	st	X, r24
     f6e:	8b c0       	rjmp	.+278    	; 0x1086 <EXTI_enuInit+0x22e>
						break;
					case LOW_LEVEL:
						break;
					default:
						Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
     f70:	85 e0       	ldi	r24, 0x05	; 5
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	88 c0       	rjmp	.+272    	; 0x1086 <EXTI_enuInit+0x22e>
					}
					break;


					case 1:
						MCUCR &=~ (3<<2);
     f76:	a5 e5       	ldi	r26, 0x55	; 85
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e5       	ldi	r30, 0x55	; 85
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	83 7f       	andi	r24, 0xF3	; 243
     f82:	8c 93       	st	X, r24
						GICR |= (1<<7);
     f84:	ab e5       	ldi	r26, 0x5B	; 91
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	eb e5       	ldi	r30, 0x5B	; 91
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	8c 93       	st	X, r24
						switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 01       	movw	r18, r24
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	fc 01       	movw	r30, r24
     fa4:	e2 0f       	add	r30, r18
     fa6:	f3 1f       	adc	r31, r19
     fa8:	81 81       	ldd	r24, Z+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	38 87       	std	Y+8, r19	; 0x08
     fb0:	2f 83       	std	Y+7, r18	; 0x07
     fb2:	8f 81       	ldd	r24, Y+7	; 0x07
     fb4:	98 85       	ldd	r25, Y+8	; 0x08
     fb6:	89 30       	cpi	r24, 0x09	; 9
     fb8:	91 05       	cpc	r25, r1
     fba:	f9 f0       	breq	.+62     	; 0xffa <EXTI_enuInit+0x1a2>
     fbc:	2f 81       	ldd	r18, Y+7	; 0x07
     fbe:	38 85       	ldd	r19, Y+8	; 0x08
     fc0:	2a 30       	cpi	r18, 0x0A	; 10
     fc2:	31 05       	cpc	r19, r1
     fc4:	34 f4       	brge	.+12     	; 0xfd2 <EXTI_enuInit+0x17a>
     fc6:	8f 81       	ldd	r24, Y+7	; 0x07
     fc8:	98 85       	ldd	r25, Y+8	; 0x08
     fca:	85 30       	cpi	r24, 0x05	; 5
     fcc:	91 05       	cpc	r25, r1
     fce:	69 f0       	breq	.+26     	; 0xfea <EXTI_enuInit+0x192>
     fd0:	24 c0       	rjmp	.+72     	; 0x101a <EXTI_enuInit+0x1c2>
     fd2:	2f 81       	ldd	r18, Y+7	; 0x07
     fd4:	38 85       	ldd	r19, Y+8	; 0x08
     fd6:	23 31       	cpi	r18, 0x13	; 19
     fd8:	31 05       	cpc	r19, r1
     fda:	b9 f0       	breq	.+46     	; 0x100a <EXTI_enuInit+0x1b2>
     fdc:	8f 81       	ldd	r24, Y+7	; 0x07
     fde:	98 85       	ldd	r25, Y+8	; 0x08
     fe0:	8d 35       	cpi	r24, 0x5D	; 93
     fe2:	91 05       	cpc	r25, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <EXTI_enuInit+0x190>
     fe6:	4f c0       	rjmp	.+158    	; 0x1086 <EXTI_enuInit+0x22e>
     fe8:	18 c0       	rjmp	.+48     	; 0x101a <EXTI_enuInit+0x1c2>
						{
						case RISING_EDGE:
							MCUCR |= (3<<2);
     fea:	a5 e5       	ldi	r26, 0x55	; 85
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e5 e5       	ldi	r30, 0x55	; 85
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8c 60       	ori	r24, 0x0C	; 12
     ff6:	8c 93       	st	X, r24
     ff8:	46 c0       	rjmp	.+140    	; 0x1086 <EXTI_enuInit+0x22e>
							break;
						case FALLING_EDGE:
							MCUCR |= (1<<3);
     ffa:	a5 e5       	ldi	r26, 0x55	; 85
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e5       	ldi	r30, 0x55	; 85
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	88 60       	ori	r24, 0x08	; 8
    1006:	8c 93       	st	X, r24
    1008:	3e c0       	rjmp	.+124    	; 0x1086 <EXTI_enuInit+0x22e>
							break;
						case ANY_LOGIC:
							MCUCR |= (1<<2);
    100a:	a5 e5       	ldi	r26, 0x55	; 85
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e5 e5       	ldi	r30, 0x55	; 85
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	84 60       	ori	r24, 0x04	; 4
    1016:	8c 93       	st	X, r24
    1018:	36 c0       	rjmp	.+108    	; 0x1086 <EXTI_enuInit+0x22e>
							break;
						case LOW_LEVEL:
							break;
						default:
							Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	33 c0       	rjmp	.+102    	; 0x1086 <EXTI_enuInit+0x22e>
						}

						break;
						case 2:
							MCUCSR &=~(1<<6);
    1020:	a4 e5       	ldi	r26, 0x54	; 84
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e4 e5       	ldi	r30, 0x54	; 84
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 7b       	andi	r24, 0xBF	; 191
    102c:	8c 93       	st	X, r24
							GICR |= (1<<5);
    102e:	ab e5       	ldi	r26, 0x5B	; 91
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	eb e5       	ldi	r30, 0x5B	; 91
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 62       	ori	r24, 0x20	; 32
    103a:	8c 93       	st	X, r24
							switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9c 01       	movw	r18, r24
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	fc 01       	movw	r30, r24
    104e:	e2 0f       	add	r30, r18
    1050:	f3 1f       	adc	r31, r19
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3e 83       	std	Y+6, r19	; 0x06
    105a:	2d 83       	std	Y+5, r18	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	85 30       	cpi	r24, 0x05	; 5
    1062:	91 05       	cpc	r25, r1
    1064:	31 f0       	breq	.+12     	; 0x1072 <EXTI_enuInit+0x21a>
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	29 30       	cpi	r18, 0x09	; 9
    106c:	31 05       	cpc	r19, r1
    106e:	59 f0       	breq	.+22     	; 0x1086 <EXTI_enuInit+0x22e>
    1070:	08 c0       	rjmp	.+16     	; 0x1082 <EXTI_enuInit+0x22a>
							{
							case RISING_EDGE:
								MCUCSR |= (1<<6);
    1072:	a4 e5       	ldi	r26, 0x54	; 84
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e4 e5       	ldi	r30, 0x54	; 84
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	8c 93       	st	X, r24
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <EXTI_enuInit+0x22e>
								break;
							case FALLING_EDGE:
								break;
							default:
								Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    1082:	85 e0       	ldi	r24, 0x05	; 5
    1084:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pstrEXTIConfig != NULL)
	{
		u8 Local_u8Iter=0;
		for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	08 f4       	brcc	.+2      	; 0x1094 <EXTI_enuInit+0x23c>
    1092:	f7 ce       	rjmp	.-530    	; 0xe82 <EXTI_enuInit+0x2a>
    1094:	02 c0       	rjmp	.+4      	; 0x109a <EXTI_enuInit+0x242>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    109c:	2c 96       	adiw	r28, 0x0c	; 12
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <EXTI_enuSetSenceMode>:

ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	29 97       	sbiw	r28, 0x09	; 9
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    10c6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8EXTI_ID < 3)
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <EXTI_enuSetSenceMode+0x22>
    10ce:	b2 c0       	rjmp	.+356    	; 0x1234 <EXTI_enuSetSenceMode+0x186>
	{
		if (Copy_u8EXTI_ID ==0)
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	88 23       	and	r24, r24
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <EXTI_enuSetSenceMode+0x2a>
    10d6:	43 c0       	rjmp	.+134    	; 0x115e <EXTI_enuSetSenceMode+0xb0>
		{
			MCUCR &=~ (3<<0);
    10d8:	a5 e5       	ldi	r26, 0x55	; 85
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e5       	ldi	r30, 0x55	; 85
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8c 7f       	andi	r24, 0xFC	; 252
    10e4:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	39 87       	std	Y+9, r19	; 0x09
    10ee:	28 87       	std	Y+8, r18	; 0x08
    10f0:	88 85       	ldd	r24, Y+8	; 0x08
    10f2:	99 85       	ldd	r25, Y+9	; 0x09
    10f4:	89 30       	cpi	r24, 0x09	; 9
    10f6:	91 05       	cpc	r25, r1
    10f8:	f9 f0       	breq	.+62     	; 0x1138 <EXTI_enuSetSenceMode+0x8a>
    10fa:	28 85       	ldd	r18, Y+8	; 0x08
    10fc:	39 85       	ldd	r19, Y+9	; 0x09
    10fe:	2a 30       	cpi	r18, 0x0A	; 10
    1100:	31 05       	cpc	r19, r1
    1102:	34 f4       	brge	.+12     	; 0x1110 <EXTI_enuSetSenceMode+0x62>
    1104:	88 85       	ldd	r24, Y+8	; 0x08
    1106:	99 85       	ldd	r25, Y+9	; 0x09
    1108:	85 30       	cpi	r24, 0x05	; 5
    110a:	91 05       	cpc	r25, r1
    110c:	69 f0       	breq	.+26     	; 0x1128 <EXTI_enuSetSenceMode+0x7a>
    110e:	24 c0       	rjmp	.+72     	; 0x1158 <EXTI_enuSetSenceMode+0xaa>
    1110:	28 85       	ldd	r18, Y+8	; 0x08
    1112:	39 85       	ldd	r19, Y+9	; 0x09
    1114:	23 31       	cpi	r18, 0x13	; 19
    1116:	31 05       	cpc	r19, r1
    1118:	b9 f0       	breq	.+46     	; 0x1148 <EXTI_enuSetSenceMode+0x9a>
    111a:	88 85       	ldd	r24, Y+8	; 0x08
    111c:	99 85       	ldd	r25, Y+9	; 0x09
    111e:	8d 35       	cpi	r24, 0x5D	; 93
    1120:	91 05       	cpc	r25, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <EXTI_enuSetSenceMode+0x78>
    1124:	87 c0       	rjmp	.+270    	; 0x1234 <EXTI_enuSetSenceMode+0x186>
    1126:	18 c0       	rjmp	.+48     	; 0x1158 <EXTI_enuSetSenceMode+0xaa>
			{
			case RISING_EDGE:
				MCUCR |= (3<<0);
    1128:	a5 e5       	ldi	r26, 0x55	; 85
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e5 e5       	ldi	r30, 0x55	; 85
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	83 60       	ori	r24, 0x03	; 3
    1134:	8c 93       	st	X, r24
    1136:	7e c0       	rjmp	.+252    	; 0x1234 <EXTI_enuSetSenceMode+0x186>
				break;
			case FALLING_EDGE:
				MCUCR |= (1<<1);
    1138:	a5 e5       	ldi	r26, 0x55	; 85
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e5 e5       	ldi	r30, 0x55	; 85
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	8c 93       	st	X, r24
    1146:	76 c0       	rjmp	.+236    	; 0x1234 <EXTI_enuSetSenceMode+0x186>
				break;
			case ANY_LOGIC:
				MCUCR |= (1<<0);
    1148:	a5 e5       	ldi	r26, 0x55	; 85
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e5       	ldi	r30, 0x55	; 85
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	8c 93       	st	X, r24
    1156:	6e c0       	rjmp	.+220    	; 0x1234 <EXTI_enuSetSenceMode+0x186>
				break;
			case LOW_LEVEL:
				break;
			default:
				Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    1158:	85 e0       	ldi	r24, 0x05	; 5
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	6b c0       	rjmp	.+214    	; 0x1234 <EXTI_enuSetSenceMode+0x186>
			}
		}
		else if (Copy_u8EXTI_ID ==1)
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	09 f0       	breq	.+2      	; 0x1166 <EXTI_enuSetSenceMode+0xb8>
    1164:	43 c0       	rjmp	.+134    	; 0x11ec <EXTI_enuSetSenceMode+0x13e>
		{
			MCUCR &=~ (3<<2);
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	83 7f       	andi	r24, 0xF3	; 243
    1172:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3f 83       	std	Y+7, r19	; 0x07
    117c:	2e 83       	std	Y+6, r18	; 0x06
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	9f 81       	ldd	r25, Y+7	; 0x07
    1182:	89 30       	cpi	r24, 0x09	; 9
    1184:	91 05       	cpc	r25, r1
    1186:	f9 f0       	breq	.+62     	; 0x11c6 <EXTI_enuSetSenceMode+0x118>
    1188:	2e 81       	ldd	r18, Y+6	; 0x06
    118a:	3f 81       	ldd	r19, Y+7	; 0x07
    118c:	2a 30       	cpi	r18, 0x0A	; 10
    118e:	31 05       	cpc	r19, r1
    1190:	34 f4       	brge	.+12     	; 0x119e <EXTI_enuSetSenceMode+0xf0>
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	91 05       	cpc	r25, r1
    119a:	69 f0       	breq	.+26     	; 0x11b6 <EXTI_enuSetSenceMode+0x108>
    119c:	24 c0       	rjmp	.+72     	; 0x11e6 <EXTI_enuSetSenceMode+0x138>
    119e:	2e 81       	ldd	r18, Y+6	; 0x06
    11a0:	3f 81       	ldd	r19, Y+7	; 0x07
    11a2:	23 31       	cpi	r18, 0x13	; 19
    11a4:	31 05       	cpc	r19, r1
    11a6:	b9 f0       	breq	.+46     	; 0x11d6 <EXTI_enuSetSenceMode+0x128>
    11a8:	8e 81       	ldd	r24, Y+6	; 0x06
    11aa:	9f 81       	ldd	r25, Y+7	; 0x07
    11ac:	8d 35       	cpi	r24, 0x5D	; 93
    11ae:	91 05       	cpc	r25, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <EXTI_enuSetSenceMode+0x106>
    11b2:	40 c0       	rjmp	.+128    	; 0x1234 <EXTI_enuSetSenceMode+0x186>
    11b4:	18 c0       	rjmp	.+48     	; 0x11e6 <EXTI_enuSetSenceMode+0x138>
			{
			case RISING_EDGE:
				MCUCR |= (3<<2);
    11b6:	a5 e5       	ldi	r26, 0x55	; 85
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e5       	ldi	r30, 0x55	; 85
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8c 60       	ori	r24, 0x0C	; 12
    11c2:	8c 93       	st	X, r24
    11c4:	37 c0       	rjmp	.+110    	; 0x1234 <EXTI_enuSetSenceMode+0x186>
				break;
			case FALLING_EDGE:
				MCUCR |= (1<<3);
    11c6:	a5 e5       	ldi	r26, 0x55	; 85
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e5       	ldi	r30, 0x55	; 85
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	88 60       	ori	r24, 0x08	; 8
    11d2:	8c 93       	st	X, r24
    11d4:	2f c0       	rjmp	.+94     	; 0x1234 <EXTI_enuSetSenceMode+0x186>
				break;
			case ANY_LOGIC:
				MCUCR |= (1<<2);
    11d6:	a5 e5       	ldi	r26, 0x55	; 85
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e5       	ldi	r30, 0x55	; 85
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	84 60       	ori	r24, 0x04	; 4
    11e2:	8c 93       	st	X, r24
    11e4:	27 c0       	rjmp	.+78     	; 0x1234 <EXTI_enuSetSenceMode+0x186>
				break;
			case LOW_LEVEL:
				break;
			default:
				Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    11e6:	85 e0       	ldi	r24, 0x05	; 5
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	24 c0       	rjmp	.+72     	; 0x1234 <EXTI_enuSetSenceMode+0x186>
			}
		}
		else if (Copy_u8EXTI_ID ==2)
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	09 f5       	brne	.+66     	; 0x1234 <EXTI_enuSetSenceMode+0x186>
		{
			MCUCSR &=~(1<<6);
    11f2:	a4 e5       	ldi	r26, 0x54	; 84
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e4 e5       	ldi	r30, 0x54	; 84
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7b       	andi	r24, 0xBF	; 191
    11fe:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3d 83       	std	Y+5, r19	; 0x05
    1208:	2c 83       	std	Y+4, r18	; 0x04
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	85 30       	cpi	r24, 0x05	; 5
    1210:	91 05       	cpc	r25, r1
    1212:	31 f0       	breq	.+12     	; 0x1220 <EXTI_enuSetSenceMode+0x172>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	29 30       	cpi	r18, 0x09	; 9
    121a:	31 05       	cpc	r19, r1
    121c:	59 f0       	breq	.+22     	; 0x1234 <EXTI_enuSetSenceMode+0x186>
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <EXTI_enuSetSenceMode+0x182>
			{
			case RISING_EDGE:
				MCUCSR |= (1<<6);
    1220:	a4 e5       	ldi	r26, 0x54	; 84
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e4 e5       	ldi	r30, 0x54	; 84
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	80 64       	ori	r24, 0x40	; 64
    122c:	8c 93       	st	X, r24
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <EXTI_enuSetSenceMode+0x186>
				break;
			case FALLING_EDGE:
				break;
			default:
				Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    1230:	85 e0       	ldi	r24, 0x05	; 5
    1232:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}

	return Local_enuErrorState;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
}
    1236:	29 96       	adiw	r28, 0x09	; 9
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <EXTI_enuEnableINT>:


ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <EXTI_enuEnableINT+0x6>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1254:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8EXTI_ID < 3)
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	00 f5       	brcc	.+64     	; 0x129c <EXTI_enuEnableINT+0x54>
	{
		if (Copy_u8EXTI_ID ==0)
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 23       	and	r24, r24
    1260:	41 f4       	brne	.+16     	; 0x1272 <EXTI_enuEnableINT+0x2a>
		{
			GICR |= (1<<6);
    1262:	ab e5       	ldi	r26, 0x5B	; 91
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	eb e5       	ldi	r30, 0x5B	; 91
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 64       	ori	r24, 0x40	; 64
    126e:	8c 93       	st	X, r24
    1270:	15 c0       	rjmp	.+42     	; 0x129c <EXTI_enuEnableINT+0x54>
		}
		else if (Copy_u8EXTI_ID ==1)
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	41 f4       	brne	.+16     	; 0x1288 <EXTI_enuEnableINT+0x40>
		{
			GICR |= (1<<7);
    1278:	ab e5       	ldi	r26, 0x5B	; 91
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	eb e5       	ldi	r30, 0x5B	; 91
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 68       	ori	r24, 0x80	; 128
    1284:	8c 93       	st	X, r24
    1286:	0a c0       	rjmp	.+20     	; 0x129c <EXTI_enuEnableINT+0x54>
		}
		else if (Copy_u8EXTI_ID ==2)
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	39 f4       	brne	.+14     	; 0x129c <EXTI_enuEnableINT+0x54>
		{
			GICR |= (1<<5);
    128e:	ab e5       	ldi	r26, 0x5B	; 91
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	eb e5       	ldi	r30, 0x5B	; 91
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 62       	ori	r24, 0x20	; 32
    129a:	8c 93       	st	X, r24
		}
	}

	return Local_enuErrorState;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <EXTI_enuDisableINT>:

ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <EXTI_enuDisableINT+0x6>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    12b4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8EXTI_ID < 3)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	00 f5       	brcc	.+64     	; 0x12fc <EXTI_enuDisableINT+0x54>
	{
		if (Copy_u8EXTI_ID ==0)
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	88 23       	and	r24, r24
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <EXTI_enuDisableINT+0x2a>
		{
			GICR &=~(1<<6);
    12c2:	ab e5       	ldi	r26, 0x5B	; 91
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e5       	ldi	r30, 0x5B	; 91
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7b       	andi	r24, 0xBF	; 191
    12ce:	8c 93       	st	X, r24
    12d0:	15 c0       	rjmp	.+42     	; 0x12fc <EXTI_enuDisableINT+0x54>
		}
		else if (Copy_u8EXTI_ID ==1)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	41 f4       	brne	.+16     	; 0x12e8 <EXTI_enuDisableINT+0x40>
		{
			GICR &=~(1<<7);
    12d8:	ab e5       	ldi	r26, 0x5B	; 91
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	eb e5       	ldi	r30, 0x5B	; 91
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 77       	andi	r24, 0x7F	; 127
    12e4:	8c 93       	st	X, r24
    12e6:	0a c0       	rjmp	.+20     	; 0x12fc <EXTI_enuDisableINT+0x54>
		}
		else if (Copy_u8EXTI_ID ==2)
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	39 f4       	brne	.+14     	; 0x12fc <EXTI_enuDisableINT+0x54>
		{
			GICR &=~(1<<5);
    12ee:	ab e5       	ldi	r26, 0x5B	; 91
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	eb e5       	ldi	r30, 0x5B	; 91
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8f 7d       	andi	r24, 0xDF	; 223
    12fa:	8c 93       	st	X, r24
		}
	}

	return Local_enuErrorState;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <EXTI_enuCallBack>:


ES_t EXTI_enuCallBack(void (*Copy_pfunAppFun)(void*) ,void * Copy_pvidParameter , u8 Copy_u8EXTI_ID)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <EXTI_enuCallBack+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <EXTI_enuCallBack+0x8>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <EXTI_enuCallBack+0xa>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9b 83       	std	Y+3, r25	; 0x03
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	7d 83       	std	Y+5, r23	; 0x05
    131c:	6c 83       	std	Y+4, r22	; 0x04
    131e:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    1320:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL && Copy_u8EXTI_ID <3)
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	d9 f0       	breq	.+54     	; 0x1360 <EXTI_enuCallBack+0x58>
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	c0 f4       	brcc	.+48     	; 0x1360 <EXTI_enuCallBack+0x58>
	{
		EXTI_ApfunINTFun[Copy_u8EXTI_ID] = Copy_pfunAppFun;
    1330:	8e 81       	ldd	r24, Y+6	; 0x06
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	2a 81       	ldd	r18, Y+2	; 0x02
    1338:	3b 81       	ldd	r19, Y+3	; 0x03
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	fc 01       	movw	r30, r24
    1340:	ea 51       	subi	r30, 0x1A	; 26
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
    1344:	31 83       	std	Z+1, r19	; 0x01
    1346:	20 83       	st	Z, r18
		EXTI_ApvidGenericparameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	fc 01       	movw	r30, r24
    1354:	e4 51       	subi	r30, 0x14	; 20
    1356:	fe 4f       	sbci	r31, 0xFE	; 254
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
}
    1362:	26 96       	adiw	r28, 0x06	; 6
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <__vector_1>:



ISR(VECT_INT0)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    139e:	80 91 e6 01 	lds	r24, 0x01E6
    13a2:	90 91 e7 01 	lds	r25, 0x01E7
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	49 f0       	breq	.+18     	; 0x13bc <__vector_1+0x48>
	{
		EXTI_ApfunINTFun[0] (EXTI_ApvidGenericparameter[0]);
    13aa:	e0 91 e6 01 	lds	r30, 0x01E6
    13ae:	f0 91 e7 01 	lds	r31, 0x01E7
    13b2:	80 91 ec 01 	lds	r24, 0x01EC
    13b6:	90 91 ed 01 	lds	r25, 0x01ED
    13ba:	09 95       	icall
	}
}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	0f 90       	pop	r0
    13de:	1f 90       	pop	r1
    13e0:	18 95       	reti

000013e2 <__vector_2>:

ISR(VECT_INT1)
{
    13e2:	1f 92       	push	r1
    13e4:	0f 92       	push	r0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	0f 92       	push	r0
    13ea:	11 24       	eor	r1, r1
    13ec:	2f 93       	push	r18
    13ee:	3f 93       	push	r19
    13f0:	4f 93       	push	r20
    13f2:	5f 93       	push	r21
    13f4:	6f 93       	push	r22
    13f6:	7f 93       	push	r23
    13f8:	8f 93       	push	r24
    13fa:	9f 93       	push	r25
    13fc:	af 93       	push	r26
    13fe:	bf 93       	push	r27
    1400:	ef 93       	push	r30
    1402:	ff 93       	push	r31
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    140c:	80 91 e8 01 	lds	r24, 0x01E8
    1410:	90 91 e9 01 	lds	r25, 0x01E9
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	49 f0       	breq	.+18     	; 0x142a <__vector_2+0x48>
	{
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
    1418:	e0 91 e8 01 	lds	r30, 0x01E8
    141c:	f0 91 e9 01 	lds	r31, 0x01E9
    1420:	80 91 ee 01 	lds	r24, 0x01EE
    1424:	90 91 ef 01 	lds	r25, 0x01EF
    1428:	09 95       	icall
	}
}
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <__vector_3>:

ISR(VECT_INT2)
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    147a:	80 91 ea 01 	lds	r24, 0x01EA
    147e:	90 91 eb 01 	lds	r25, 0x01EB
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	49 f0       	breq	.+18     	; 0x1498 <__vector_3+0x48>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
    1486:	e0 91 ea 01 	lds	r30, 0x01EA
    148a:	f0 91 eb 01 	lds	r31, 0x01EB
    148e:	80 91 f0 01 	lds	r24, 0x01F0
    1492:	90 91 f1 01 	lds	r25, 0x01F1
    1496:	09 95       	icall
	}
}
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	ff 91       	pop	r31
    149e:	ef 91       	pop	r30
    14a0:	bf 91       	pop	r27
    14a2:	af 91       	pop	r26
    14a4:	9f 91       	pop	r25
    14a6:	8f 91       	pop	r24
    14a8:	7f 91       	pop	r23
    14aa:	6f 91       	pop	r22
    14ac:	5f 91       	pop	r21
    14ae:	4f 91       	pop	r20
    14b0:	3f 91       	pop	r19
    14b2:	2f 91       	pop	r18
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti

000014be <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates = ES_NOK;
    14c8:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(DIO_PA_PIN7_DIR, DIO_PA_PIN6_DIR, DIO_PA_PIN5_DIR, DIO_PA_PIN4_DIR, DIO_PA_PIN3_DIR, DIO_PA_PIN2_DIR, DIO_PA_PIN1_DIR, DIO_PA_PIN0_DIR);
    14ca:	ea e3       	ldi	r30, 0x3A	; 58
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	8f ef       	ldi	r24, 0xFF	; 255
    14d0:	80 83       	st	Z, r24
	DDRB = CONC(DIO_PB_PIN7_DIR, DIO_PB_PIN6_DIR, DIO_PB_PIN5_DIR, DIO_PB_PIN4_DIR, DIO_PB_PIN3_DIR, DIO_PB_PIN2_DIR, DIO_PB_PIN1_DIR, DIO_PB_PIN0_DIR);
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8f e7       	ldi	r24, 0x7F	; 127
    14d8:	80 83       	st	Z, r24
	DDRC = CONC(DIO_PC_PIN7_DIR, DIO_PC_PIN6_DIR, DIO_PC_PIN5_DIR, DIO_PC_PIN4_DIR, DIO_PC_PIN3_DIR, DIO_PC_PIN2_DIR, DIO_PC_PIN1_DIR, DIO_PC_PIN0_DIR);
    14da:	e4 e3       	ldi	r30, 0x34	; 52
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8a ef       	ldi	r24, 0xFA	; 250
    14e0:	80 83       	st	Z, r24
	DDRD = CONC(DIO_PD_PIN7_DIR, DIO_PD_PIN6_DIR, DIO_PD_PIN5_DIR, DIO_PD_PIN4_DIR, DIO_PD_PIN3_DIR, DIO_PD_PIN2_DIR, DIO_PD_PIN1_DIR, DIO_PD_PIN0_DIR);
    14e2:	e1 e3       	ldi	r30, 0x31	; 49
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8f e7       	ldi	r24, 0x7F	; 127
    14e8:	80 83       	st	Z, r24

	PORTA = CONC(DIO_PA_PIN7_VAL, DIO_PA_PIN6_VAL, DIO_PA_PIN5_VAL, DIO_PA_PIN4_VAL, DIO_PA_PIN3_VAL, DIO_PA_PIN2_VAL, DIO_PA_PIN1_VAL, DIO_PA_PIN0_VAL);
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	10 82       	st	Z, r1
	PORTB = CONC(DIO_PB_PIN7_VAL, DIO_PB_PIN6_VAL, DIO_PB_PIN5_VAL, DIO_PB_PIN4_VAL, DIO_PB_PIN3_VAL, DIO_PB_PIN2_VAL, DIO_PB_PIN1_VAL, DIO_PB_PIN0_VAL);
    14f0:	e8 e3       	ldi	r30, 0x38	; 56
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	10 82       	st	Z, r1
	PORTC = CONC(DIO_PC_PIN7_VAL, DIO_PC_PIN6_VAL, DIO_PC_PIN5_VAL, DIO_PC_PIN4_VAL, DIO_PC_PIN3_VAL, DIO_PC_PIN2_VAL, DIO_PC_PIN1_VAL, DIO_PC_PIN0_VAL);
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	10 82       	st	Z, r1
	PORTD = CONC(DIO_PD_PIN7_VAL, DIO_PD_PIN6_VAL, DIO_PD_PIN5_VAL, DIO_PD_PIN4_VAL, DIO_PD_PIN3_VAL, DIO_PD_PIN2_VAL, DIO_PD_PIN1_VAL, DIO_PD_PIN0_VAL);
    14fc:	e2 e3       	ldi	r30, 0x32	; 50
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	10 82       	st	Z, r1
	Local_enuErrorStates = ES_OK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStates;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <DIO_enuSetPortDir>:

ES_t DIO_enuSetPortDir(u8 Copy_PortID, u8 Copy_PortDir){
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <DIO_enuSetPortDir+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <DIO_enuSetPortDir+0x8>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8a 83       	std	Y+2, r24	; 0x02
    1520:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1522:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	84 30       	cpi	r24, 0x04	; 4
    1528:	a8 f5       	brcc	.+106    	; 0x1594 <DIO_enuSetPortDir+0x84>
		switch(Copy_PortID){
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3d 83       	std	Y+5, r19	; 0x05
    1532:	2c 83       	std	Y+4, r18	; 0x04
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	91 05       	cpc	r25, r1
    153c:	d1 f0       	breq	.+52     	; 0x1572 <DIO_enuSetPortDir+0x62>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	2c f4       	brge	.+10     	; 0x1552 <DIO_enuSetPortDir+0x42>
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	61 f0       	breq	.+24     	; 0x1568 <DIO_enuSetPortDir+0x58>
    1550:	1e c0       	rjmp	.+60     	; 0x158e <DIO_enuSetPortDir+0x7e>
    1552:	2c 81       	ldd	r18, Y+4	; 0x04
    1554:	3d 81       	ldd	r19, Y+5	; 0x05
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	81 f0       	breq	.+32     	; 0x157c <DIO_enuSetPortDir+0x6c>
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	91 05       	cpc	r25, r1
    1564:	81 f0       	breq	.+32     	; 0x1586 <DIO_enuSetPortDir+0x76>
    1566:	13 c0       	rjmp	.+38     	; 0x158e <DIO_enuSetPortDir+0x7e>
			case DIO_PORTA:
				DDRA = Copy_PortDir;
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	80 83       	st	Z, r24
    1570:	0e c0       	rjmp	.+28     	; 0x158e <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTB:
				DDRB = Copy_PortDir;
    1572:	e7 e3       	ldi	r30, 0x37	; 55
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	80 83       	st	Z, r24
    157a:	09 c0       	rjmp	.+18     	; 0x158e <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTC:
				DDRC = Copy_PortDir;
    157c:	e4 e3       	ldi	r30, 0x34	; 52
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	80 83       	st	Z, r24
    1584:	04 c0       	rjmp	.+8      	; 0x158e <DIO_enuSetPortDir+0x7e>
				break;
			case DIO_PORTD:
				DDRD = Copy_PortDir;
    1586:	e1 e3       	ldi	r30, 0x31	; 49
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_enuSetPortDir+0x88>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1598:	89 81       	ldd	r24, Y+1	; 0x01
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_PortID, u8 Copy_PortValue){
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <DIO_enuSetPortValue+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_enuSetPortValue+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    15bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	a8 f5       	brcc	.+106    	; 0x162e <DIO_enuSetPortValue+0x84>
		switch(Copy_PortID){
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3d 83       	std	Y+5, r19	; 0x05
    15cc:	2c 83       	std	Y+4, r18	; 0x04
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	d1 f0       	breq	.+52     	; 0x160c <DIO_enuSetPortValue+0x62>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <DIO_enuSetPortValue+0x42>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <DIO_enuSetPortValue+0x58>
    15ea:	1e c0       	rjmp	.+60     	; 0x1628 <DIO_enuSetPortValue+0x7e>
    15ec:	2c 81       	ldd	r18, Y+4	; 0x04
    15ee:	3d 81       	ldd	r19, Y+5	; 0x05
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	81 f0       	breq	.+32     	; 0x1616 <DIO_enuSetPortValue+0x6c>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	9d 81       	ldd	r25, Y+5	; 0x05
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	81 f0       	breq	.+32     	; 0x1620 <DIO_enuSetPortValue+0x76>
    1600:	13 c0       	rjmp	.+38     	; 0x1628 <DIO_enuSetPortValue+0x7e>
			case DIO_PORTA:
				PORTA = Copy_PortValue;
    1602:	eb e3       	ldi	r30, 0x3B	; 59
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	80 83       	st	Z, r24
    160a:	0e c0       	rjmp	.+28     	; 0x1628 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_PortValue;
    160c:	e8 e3       	ldi	r30, 0x38	; 56
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 83       	st	Z, r24
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_PortValue;
    1616:	e5 e3       	ldi	r30, 0x35	; 53
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	80 83       	st	Z, r24
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_PortValue;
    1620:	e2 e3       	ldi	r30, 0x32	; 50
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_enuSetPortValue+0x88>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_PortID, u8 *Copy_PortVal){
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <DIO_enuGetPortValue+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <DIO_enuGetPortValue+0x8>
    164c:	00 d0       	rcall	.+0      	; 0x164e <DIO_enuGetPortValue+0xa>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	7c 83       	std	Y+4, r23	; 0x04
    1656:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1658:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	e8 f5       	brcc	.+122    	; 0x16da <DIO_enuGetPortValue+0x96>
		switch(Copy_PortID){
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3e 83       	std	Y+6, r19	; 0x06
    1668:	2d 83       	std	Y+5, r18	; 0x05
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	e1 f0       	breq	.+56     	; 0x16ac <DIO_enuGetPortValue+0x68>
    1674:	2d 81       	ldd	r18, Y+5	; 0x05
    1676:	3e 81       	ldd	r19, Y+6	; 0x06
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <DIO_enuGetPortValue+0x44>
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	61 f0       	breq	.+24     	; 0x169e <DIO_enuGetPortValue+0x5a>
    1686:	26 c0       	rjmp	.+76     	; 0x16d4 <DIO_enuGetPortValue+0x90>
    1688:	2d 81       	ldd	r18, Y+5	; 0x05
    168a:	3e 81       	ldd	r19, Y+6	; 0x06
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	a1 f0       	breq	.+40     	; 0x16ba <DIO_enuGetPortValue+0x76>
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	b1 f0       	breq	.+44     	; 0x16c8 <DIO_enuGetPortValue+0x84>
    169c:	1b c0       	rjmp	.+54     	; 0x16d4 <DIO_enuGetPortValue+0x90>
			case DIO_PORTA:
				*Copy_PortVal = PINA;
    169e:	e9 e3       	ldi	r30, 0x39	; 57
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	eb 81       	ldd	r30, Y+3	; 0x03
    16a6:	fc 81       	ldd	r31, Y+4	; 0x04
    16a8:	80 83       	st	Z, r24
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTB:
				*Copy_PortVal = PINB;
    16ac:	e6 e3       	ldi	r30, 0x36	; 54
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	eb 81       	ldd	r30, Y+3	; 0x03
    16b4:	fc 81       	ldd	r31, Y+4	; 0x04
    16b6:	80 83       	st	Z, r24
    16b8:	0d c0       	rjmp	.+26     	; 0x16d4 <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTC:
				*Copy_PortVal = PINC;
    16ba:	e3 e3       	ldi	r30, 0x33	; 51
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	eb 81       	ldd	r30, Y+3	; 0x03
    16c2:	fc 81       	ldd	r31, Y+4	; 0x04
    16c4:	80 83       	st	Z, r24
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <DIO_enuGetPortValue+0x90>
				break;
			case DIO_PORTD:
				*Copy_PortVal = PIND;
    16c8:	e0 e3       	ldi	r30, 0x30	; 48
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	eb 81       	ldd	r30, Y+3	; 0x03
    16d0:	fc 81       	ldd	r31, Y+4	; 0x04
    16d2:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_enuGetPortValue+0x9a>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e0:	26 96       	adiw	r28, 0x06	; 6
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_PortID){
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <DIO_enuTogPortValue+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <DIO_enuTogPortValue+0x8>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates = ES_NOK;
    1700:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <=  DIO_PORTD){
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	08 f0       	brcs	.+2      	; 0x170a <DIO_enuTogPortValue+0x18>
    1708:	41 c0       	rjmp	.+130    	; 0x178c <DIO_enuTogPortValue+0x9a>
		switch(Copy_PortID){
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3c 83       	std	Y+4, r19	; 0x04
    1712:	2b 83       	std	Y+3, r18	; 0x03
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	e9 f0       	breq	.+58     	; 0x1758 <DIO_enuTogPortValue+0x66>
    171e:	2b 81       	ldd	r18, Y+3	; 0x03
    1720:	3c 81       	ldd	r19, Y+4	; 0x04
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	2c f4       	brge	.+10     	; 0x1732 <DIO_enuTogPortValue+0x40>
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	61 f0       	breq	.+24     	; 0x1748 <DIO_enuTogPortValue+0x56>
    1730:	2a c0       	rjmp	.+84     	; 0x1786 <DIO_enuTogPortValue+0x94>
    1732:	2b 81       	ldd	r18, Y+3	; 0x03
    1734:	3c 81       	ldd	r19, Y+4	; 0x04
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	b1 f0       	breq	.+44     	; 0x1768 <DIO_enuTogPortValue+0x76>
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	91 05       	cpc	r25, r1
    1744:	c9 f0       	breq	.+50     	; 0x1778 <DIO_enuTogPortValue+0x86>
    1746:	1f c0       	rjmp	.+62     	; 0x1786 <DIO_enuTogPortValue+0x94>
			case DIO_PORTA:
				PORTA = ~PORTA;
    1748:	ab e3       	ldi	r26, 0x3B	; 59
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	eb e3       	ldi	r30, 0x3B	; 59
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	80 95       	com	r24
    1754:	8c 93       	st	X, r24
    1756:	17 c0       	rjmp	.+46     	; 0x1786 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
    1758:	a8 e3       	ldi	r26, 0x38	; 56
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e8 e3       	ldi	r30, 0x38	; 56
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 95       	com	r24
    1764:	8c 93       	st	X, r24
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    1768:	a5 e3       	ldi	r26, 0x35	; 53
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e3       	ldi	r30, 0x35	; 53
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 95       	com	r24
    1774:	8c 93       	st	X, r24
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <DIO_enuTogPortValue+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    1778:	a2 e3       	ldi	r26, 0x32	; 50
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e2 e3       	ldi	r30, 0x32	; 50
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	80 95       	com	r24
    1784:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorStates = ES_OK;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_enuTogPortValue+0x9e>
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <DIO_enuSetPinDir>:

ES_t DIO_enuSetPinDir(u8 Copy_PortID, u8 Copy_PinID, u8 Copy_PinDir){
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <DIO_enuSetPinDir+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_enuSetPinDir+0x8>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_enuSetPinDir+0xa>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	8a 83       	std	Y+2, r24	; 0x02
    17b0:	6b 83       	std	Y+3, r22	; 0x03
    17b2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    17b4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	84 30       	cpi	r24, 0x04	; 4
    17ba:	08 f0       	brcs	.+2      	; 0x17be <DIO_enuSetPinDir+0x1e>
    17bc:	d0 c0       	rjmp	.+416    	; 0x195e <DIO_enuSetPinDir+0x1be>
		if(Copy_PinID <= DIO_PIN7){
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	88 30       	cpi	r24, 0x08	; 8
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <DIO_enuSetPinDir+0x26>
    17c4:	c9 c0       	rjmp	.+402    	; 0x1958 <DIO_enuSetPinDir+0x1b8>
			switch(Copy_PortID){
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3e 83       	std	Y+6, r19	; 0x06
    17ce:	2d 83       	std	Y+5, r18	; 0x05
    17d0:	6d 81       	ldd	r22, Y+5	; 0x05
    17d2:	7e 81       	ldd	r23, Y+6	; 0x06
    17d4:	61 30       	cpi	r22, 0x01	; 1
    17d6:	71 05       	cpc	r23, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <DIO_enuSetPinDir+0x3c>
    17da:	41 c0       	rjmp	.+130    	; 0x185e <DIO_enuSetPinDir+0xbe>
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	91 05       	cpc	r25, r1
    17e4:	34 f4       	brge	.+12     	; 0x17f2 <DIO_enuSetPinDir+0x52>
    17e6:	2d 81       	ldd	r18, Y+5	; 0x05
    17e8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ea:	21 15       	cp	r18, r1
    17ec:	31 05       	cpc	r19, r1
    17ee:	71 f0       	breq	.+28     	; 0x180c <DIO_enuSetPinDir+0x6c>
    17f0:	b0 c0       	rjmp	.+352    	; 0x1952 <DIO_enuSetPinDir+0x1b2>
    17f2:	6d 81       	ldd	r22, Y+5	; 0x05
    17f4:	7e 81       	ldd	r23, Y+6	; 0x06
    17f6:	62 30       	cpi	r22, 0x02	; 2
    17f8:	71 05       	cpc	r23, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <DIO_enuSetPinDir+0x5e>
    17fc:	59 c0       	rjmp	.+178    	; 0x18b0 <DIO_enuSetPinDir+0x110>
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	83 30       	cpi	r24, 0x03	; 3
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <DIO_enuSetPinDir+0x6a>
    1808:	7c c0       	rjmp	.+248    	; 0x1902 <DIO_enuSetPinDir+0x162>
    180a:	a3 c0       	rjmp	.+326    	; 0x1952 <DIO_enuSetPinDir+0x1b2>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK_VALUE << Copy_PinID);
    180c:	aa e3       	ldi	r26, 0x3A	; 58
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	ea e3       	ldi	r30, 0x3A	; 58
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_enuSetPinDir+0x88>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	2a 95       	dec	r18
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_enuSetPinDir+0x84>
    182c:	80 95       	com	r24
    182e:	84 23       	and	r24, r20
    1830:	8c 93       	st	X, r24
					DDRA |= (Copy_PinDir << Copy_PinID);
    1832:	aa e3       	ldi	r26, 0x3A	; 58
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ea e3       	ldi	r30, 0x3A	; 58
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	b9 01       	movw	r22, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <DIO_enuSetPinDir+0xb2>
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	8a 95       	dec	r24
    1854:	e2 f7       	brpl	.-8      	; 0x184e <DIO_enuSetPinDir+0xae>
    1856:	cb 01       	movw	r24, r22
    1858:	84 2b       	or	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	7a c0       	rjmp	.+244    	; 0x1952 <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK_VALUE << Copy_PinID);
    185e:	a7 e3       	ldi	r26, 0x37	; 55
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e7 e3       	ldi	r30, 0x37	; 55
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_enuSetPinDir+0xda>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	2a 95       	dec	r18
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_enuSetPinDir+0xd6>
    187e:	80 95       	com	r24
    1880:	84 23       	and	r24, r20
    1882:	8c 93       	st	X, r24
					DDRB |= (Copy_PinDir << Copy_PinID);
    1884:	a7 e3       	ldi	r26, 0x37	; 55
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e7 e3       	ldi	r30, 0x37	; 55
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	b9 01       	movw	r22, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_enuSetPinDir+0x104>
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	8a 95       	dec	r24
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_enuSetPinDir+0x100>
    18a8:	cb 01       	movw	r24, r22
    18aa:	84 2b       	or	r24, r20
    18ac:	8c 93       	st	X, r24
    18ae:	51 c0       	rjmp	.+162    	; 0x1952 <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK_VALUE << Copy_PinID);
    18b0:	a4 e3       	ldi	r26, 0x34	; 52
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e4 e3       	ldi	r30, 0x34	; 52
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_enuSetPinDir+0x12c>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	2a 95       	dec	r18
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_enuSetPinDir+0x128>
    18d0:	80 95       	com	r24
    18d2:	84 23       	and	r24, r20
    18d4:	8c 93       	st	X, r24
					DDRC |= (Copy_PinDir << Copy_PinID);
    18d6:	a4 e3       	ldi	r26, 0x34	; 52
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e4 e3       	ldi	r30, 0x34	; 52
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	b9 01       	movw	r22, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_enuSetPinDir+0x156>
    18f2:	66 0f       	add	r22, r22
    18f4:	77 1f       	adc	r23, r23
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_enuSetPinDir+0x152>
    18fa:	cb 01       	movw	r24, r22
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	28 c0       	rjmp	.+80     	; 0x1952 <DIO_enuSetPinDir+0x1b2>
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK_VALUE << Copy_PinID);
    1902:	a1 e3       	ldi	r26, 0x31	; 49
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e1 e3       	ldi	r30, 0x31	; 49
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_enuSetPinDir+0x17e>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	2a 95       	dec	r18
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_enuSetPinDir+0x17a>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
					DDRD |= (Copy_PinDir << Copy_PinID);
    1928:	a1 e3       	ldi	r26, 0x31	; 49
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e1 e3       	ldi	r30, 0x31	; 49
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	b9 01       	movw	r22, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_enuSetPinDir+0x1a8>
    1944:	66 0f       	add	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	8a 95       	dec	r24
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_enuSetPinDir+0x1a4>
    194c:	cb 01       	movw	r24, r22
    194e:	84 2b       	or	r24, r20
    1950:	8c 93       	st	X, r24
					break;
			}
			Local_enuErrorStates = ES_OK;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <DIO_enuSetPinDir+0x1c2>
		}
		else{
			Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
    1958:	84 e0       	ldi	r24, 0x04	; 4
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_enuSetPinDir+0x1c2>
		}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    195e:	83 e0       	ldi	r24, 0x03	; 3
    1960:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
}
    1964:	26 96       	adiw	r28, 0x06	; 6
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_PortID, u8 Copy_PinID, u8 Copy_PinValue){
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	00 d0       	rcall	.+0      	; 0x197c <DIO_enuSetPinValue+0x6>
    197c:	00 d0       	rcall	.+0      	; 0x197e <DIO_enuSetPinValue+0x8>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <DIO_enuSetPinValue+0xa>
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	8a 83       	std	Y+2, r24	; 0x02
    1986:	6b 83       	std	Y+3, r22	; 0x03
    1988:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    198a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	08 f0       	brcs	.+2      	; 0x1994 <DIO_enuSetPinValue+0x1e>
    1992:	d0 c0       	rjmp	.+416    	; 0x1b34 <DIO_enuSetPinValue+0x1be>
			if(Copy_PinID <= DIO_PIN7){
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	88 30       	cpi	r24, 0x08	; 8
    1998:	08 f0       	brcs	.+2      	; 0x199c <DIO_enuSetPinValue+0x26>
    199a:	c9 c0       	rjmp	.+402    	; 0x1b2e <DIO_enuSetPinValue+0x1b8>
				switch(Copy_PortID){
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	3e 83       	std	Y+6, r19	; 0x06
    19a4:	2d 83       	std	Y+5, r18	; 0x05
    19a6:	6d 81       	ldd	r22, Y+5	; 0x05
    19a8:	7e 81       	ldd	r23, Y+6	; 0x06
    19aa:	61 30       	cpi	r22, 0x01	; 1
    19ac:	71 05       	cpc	r23, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <DIO_enuSetPinValue+0x3c>
    19b0:	41 c0       	rjmp	.+130    	; 0x1a34 <DIO_enuSetPinValue+0xbe>
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	91 05       	cpc	r25, r1
    19ba:	34 f4       	brge	.+12     	; 0x19c8 <DIO_enuSetPinValue+0x52>
    19bc:	2d 81       	ldd	r18, Y+5	; 0x05
    19be:	3e 81       	ldd	r19, Y+6	; 0x06
    19c0:	21 15       	cp	r18, r1
    19c2:	31 05       	cpc	r19, r1
    19c4:	71 f0       	breq	.+28     	; 0x19e2 <DIO_enuSetPinValue+0x6c>
    19c6:	b0 c0       	rjmp	.+352    	; 0x1b28 <DIO_enuSetPinValue+0x1b2>
    19c8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ca:	7e 81       	ldd	r23, Y+6	; 0x06
    19cc:	62 30       	cpi	r22, 0x02	; 2
    19ce:	71 05       	cpc	r23, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <DIO_enuSetPinValue+0x5e>
    19d2:	59 c0       	rjmp	.+178    	; 0x1a86 <DIO_enuSetPinValue+0x110>
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	83 30       	cpi	r24, 0x03	; 3
    19da:	91 05       	cpc	r25, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <DIO_enuSetPinValue+0x6a>
    19de:	7c c0       	rjmp	.+248    	; 0x1ad8 <DIO_enuSetPinValue+0x162>
    19e0:	a3 c0       	rjmp	.+326    	; 0x1b28 <DIO_enuSetPinValue+0x1b2>
					case DIO_PORTA:
						PORTA &= ~(BIT_MASK_VALUE << Copy_PinID);
    19e2:	ab e3       	ldi	r26, 0x3B	; 59
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	eb e3       	ldi	r30, 0x3B	; 59
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <DIO_enuSetPinValue+0x88>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	2a 95       	dec	r18
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <DIO_enuSetPinValue+0x84>
    1a02:	80 95       	com	r24
    1a04:	84 23       	and	r24, r20
    1a06:	8c 93       	st	X, r24
						PORTA |= (Copy_PinValue << Copy_PinID);
    1a08:	ab e3       	ldi	r26, 0x3B	; 59
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	b9 01       	movw	r22, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <DIO_enuSetPinValue+0xb2>
    1a24:	66 0f       	add	r22, r22
    1a26:	77 1f       	adc	r23, r23
    1a28:	8a 95       	dec	r24
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <DIO_enuSetPinValue+0xae>
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	84 2b       	or	r24, r20
    1a30:	8c 93       	st	X, r24
    1a32:	7a c0       	rjmp	.+244    	; 0x1b28 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTB:
						PORTB &= ~(BIT_MASK_VALUE << Copy_PinID);
    1a34:	a8 e3       	ldi	r26, 0x38	; 56
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e8 e3       	ldi	r30, 0x38	; 56
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	48 2f       	mov	r20, r24
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_enuSetPinValue+0xda>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	2a 95       	dec	r18
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <DIO_enuSetPinValue+0xd6>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
						PORTB |= (Copy_PinValue << Copy_PinID);
    1a5a:	a8 e3       	ldi	r26, 0x38	; 56
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e8 e3       	ldi	r30, 0x38	; 56
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	b9 01       	movw	r22, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_enuSetPinValue+0x104>
    1a76:	66 0f       	add	r22, r22
    1a78:	77 1f       	adc	r23, r23
    1a7a:	8a 95       	dec	r24
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_enuSetPinValue+0x100>
    1a7e:	cb 01       	movw	r24, r22
    1a80:	84 2b       	or	r24, r20
    1a82:	8c 93       	st	X, r24
    1a84:	51 c0       	rjmp	.+162    	; 0x1b28 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTC:
						PORTC &= ~(BIT_MASK_VALUE << Copy_PinID);
    1a86:	a5 e3       	ldi	r26, 0x35	; 53
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e3       	ldi	r30, 0x35	; 53
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_enuSetPinValue+0x12c>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	2a 95       	dec	r18
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_enuSetPinValue+0x128>
    1aa6:	80 95       	com	r24
    1aa8:	84 23       	and	r24, r20
    1aaa:	8c 93       	st	X, r24
						PORTC |= (Copy_PinValue << Copy_PinID);
    1aac:	a5 e3       	ldi	r26, 0x35	; 53
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e3       	ldi	r30, 0x35	; 53
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	b9 01       	movw	r22, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <DIO_enuSetPinValue+0x156>
    1ac8:	66 0f       	add	r22, r22
    1aca:	77 1f       	adc	r23, r23
    1acc:	8a 95       	dec	r24
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <DIO_enuSetPinValue+0x152>
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	84 2b       	or	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	28 c0       	rjmp	.+80     	; 0x1b28 <DIO_enuSetPinValue+0x1b2>
						break;
					case DIO_PORTD:
						PORTD &= ~(BIT_MASK_VALUE << Copy_PinID);
    1ad8:	a2 e3       	ldi	r26, 0x32	; 50
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e2 e3       	ldi	r30, 0x32	; 50
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <DIO_enuSetPinValue+0x17e>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	2a 95       	dec	r18
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <DIO_enuSetPinValue+0x17a>
    1af8:	80 95       	com	r24
    1afa:	84 23       	and	r24, r20
    1afc:	8c 93       	st	X, r24
						PORTD |= (Copy_PinValue << Copy_PinID);
    1afe:	a2 e3       	ldi	r26, 0x32	; 50
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e2 e3       	ldi	r30, 0x32	; 50
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	48 2f       	mov	r20, r24
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	b9 01       	movw	r22, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <DIO_enuSetPinValue+0x1a8>
    1b1a:	66 0f       	add	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	8a 95       	dec	r24
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <DIO_enuSetPinValue+0x1a4>
    1b22:	cb 01       	movw	r24, r22
    1b24:	84 2b       	or	r24, r20
    1b26:	8c 93       	st	X, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <DIO_enuSetPinValue+0x1c2>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
    1b2e:	84 e0       	ldi	r24, 0x04	; 4
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_enuSetPinValue+0x1c2>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3a:	26 96       	adiw	r28, 0x06	; 6
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_PortID, u8 Copy_PinID, u8 *Copy_PinVal){
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	27 97       	sbiw	r28, 0x07	; 7
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	8a 83       	std	Y+2, r24	; 0x02
    1b62:	6b 83       	std	Y+3, r22	; 0x03
    1b64:	5d 83       	std	Y+5, r21	; 0x05
    1b66:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStates = ES_NOK;
    1b68:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	84 30       	cpi	r24, 0x04	; 4
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <DIO_enuGetPinValue+0x26>
    1b70:	7a c0       	rjmp	.+244    	; 0x1c66 <DIO_enuGetPinValue+0x11a>
			if(Copy_PinID <= DIO_PIN7){
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	88 30       	cpi	r24, 0x08	; 8
    1b76:	08 f0       	brcs	.+2      	; 0x1b7a <DIO_enuGetPinValue+0x2e>
    1b78:	73 c0       	rjmp	.+230    	; 0x1c60 <DIO_enuGetPinValue+0x114>
				switch(Copy_PortID){
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3f 83       	std	Y+7, r19	; 0x07
    1b82:	2e 83       	std	Y+6, r18	; 0x06
    1b84:	4e 81       	ldd	r20, Y+6	; 0x06
    1b86:	5f 81       	ldd	r21, Y+7	; 0x07
    1b88:	41 30       	cpi	r20, 0x01	; 1
    1b8a:	51 05       	cpc	r21, r1
    1b8c:	59 f1       	breq	.+86     	; 0x1be4 <DIO_enuGetPinValue+0x98>
    1b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b90:	9f 81       	ldd	r25, Y+7	; 0x07
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	91 05       	cpc	r25, r1
    1b96:	34 f4       	brge	.+12     	; 0x1ba4 <DIO_enuGetPinValue+0x58>
    1b98:	2e 81       	ldd	r18, Y+6	; 0x06
    1b9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b9c:	21 15       	cp	r18, r1
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	69 f0       	breq	.+26     	; 0x1bbc <DIO_enuGetPinValue+0x70>
    1ba2:	5b c0       	rjmp	.+182    	; 0x1c5a <DIO_enuGetPinValue+0x10e>
    1ba4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ba6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba8:	42 30       	cpi	r20, 0x02	; 2
    1baa:	51 05       	cpc	r21, r1
    1bac:	79 f1       	breq	.+94     	; 0x1c0c <DIO_enuGetPinValue+0xc0>
    1bae:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <DIO_enuGetPinValue+0x6e>
    1bb8:	3d c0       	rjmp	.+122    	; 0x1c34 <DIO_enuGetPinValue+0xe8>
    1bba:	4f c0       	rjmp	.+158    	; 0x1c5a <DIO_enuGetPinValue+0x10e>
					case DIO_PORTA:
						*Copy_PinVal = ((PINA >> Copy_PinID) & BIT_MASK_VALUE);
    1bbc:	e9 e3       	ldi	r30, 0x39	; 57
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a9 01       	movw	r20, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <DIO_enuGetPinValue+0x88>
    1bd0:	55 95       	asr	r21
    1bd2:	47 95       	ror	r20
    1bd4:	8a 95       	dec	r24
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <DIO_enuGetPinValue+0x84>
    1bd8:	ca 01       	movw	r24, r20
    1bda:	81 70       	andi	r24, 0x01	; 1
    1bdc:	ec 81       	ldd	r30, Y+4	; 0x04
    1bde:	fd 81       	ldd	r31, Y+5	; 0x05
    1be0:	80 83       	st	Z, r24
    1be2:	3b c0       	rjmp	.+118    	; 0x1c5a <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTB:
						*Copy_PinVal = ((PINB >> Copy_PinID) & BIT_MASK_VALUE);
    1be4:	e6 e3       	ldi	r30, 0x36	; 54
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	88 2f       	mov	r24, r24
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a9 01       	movw	r20, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_enuGetPinValue+0xb0>
    1bf8:	55 95       	asr	r21
    1bfa:	47 95       	ror	r20
    1bfc:	8a 95       	dec	r24
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_enuGetPinValue+0xac>
    1c00:	ca 01       	movw	r24, r20
    1c02:	81 70       	andi	r24, 0x01	; 1
    1c04:	ec 81       	ldd	r30, Y+4	; 0x04
    1c06:	fd 81       	ldd	r31, Y+5	; 0x05
    1c08:	80 83       	st	Z, r24
    1c0a:	27 c0       	rjmp	.+78     	; 0x1c5a <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTC:
						*Copy_PinVal = ((PINC >> Copy_PinID) & BIT_MASK_VALUE);
    1c0c:	e3 e3       	ldi	r30, 0x33	; 51
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a9 01       	movw	r20, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_enuGetPinValue+0xd8>
    1c20:	55 95       	asr	r21
    1c22:	47 95       	ror	r20
    1c24:	8a 95       	dec	r24
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_enuGetPinValue+0xd4>
    1c28:	ca 01       	movw	r24, r20
    1c2a:	81 70       	andi	r24, 0x01	; 1
    1c2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c30:	80 83       	st	Z, r24
    1c32:	13 c0       	rjmp	.+38     	; 0x1c5a <DIO_enuGetPinValue+0x10e>
						break;
					case DIO_PORTD:
						*Copy_PinVal = ((PIND >> Copy_PinID) & BIT_MASK_VALUE);
    1c34:	e0 e3       	ldi	r30, 0x30	; 48
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a9 01       	movw	r20, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_enuGetPinValue+0x100>
    1c48:	55 95       	asr	r21
    1c4a:	47 95       	ror	r20
    1c4c:	8a 95       	dec	r24
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_enuGetPinValue+0xfc>
    1c50:	ca 01       	movw	r24, r20
    1c52:	81 70       	andi	r24, 0x01	; 1
    1c54:	ec 81       	ldd	r30, Y+4	; 0x04
    1c56:	fd 81       	ldd	r31, Y+5	; 0x05
    1c58:	80 83       	st	Z, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <DIO_enuGetPinValue+0x11e>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_enuGetPinValue+0x11e>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6c:	27 96       	adiw	r28, 0x07	; 7
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_PortID, u8 Copy_PinID){
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <DIO_enuTogPinValue+0x6>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <DIO_enuTogPinValue+0x8>
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStates = ES_NOK;
    1c90:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PortID <= DIO_PORTD){
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	84 30       	cpi	r24, 0x04	; 4
    1c96:	08 f0       	brcs	.+2      	; 0x1c9a <DIO_enuTogPinValue+0x1c>
    1c98:	78 c0       	rjmp	.+240    	; 0x1d8a <DIO_enuTogPinValue+0x10c>
			if(Copy_PinID <= DIO_PIN7){
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	88 30       	cpi	r24, 0x08	; 8
    1c9e:	08 f0       	brcs	.+2      	; 0x1ca2 <DIO_enuTogPinValue+0x24>
    1ca0:	71 c0       	rjmp	.+226    	; 0x1d84 <DIO_enuTogPinValue+0x106>
				switch(Copy_PortID){
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	3d 83       	std	Y+5, r19	; 0x05
    1caa:	2c 83       	std	Y+4, r18	; 0x04
    1cac:	8c 81       	ldd	r24, Y+4	; 0x04
    1cae:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	49 f1       	breq	.+82     	; 0x1d08 <DIO_enuTogPinValue+0x8a>
    1cb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <DIO_enuTogPinValue+0x4c>
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <DIO_enuTogPinValue+0x62>
    1cc8:	5a c0       	rjmp	.+180    	; 0x1d7e <DIO_enuTogPinValue+0x100>
    1cca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ccc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	71 f1       	breq	.+92     	; 0x1d30 <DIO_enuTogPinValue+0xb2>
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd8:	83 30       	cpi	r24, 0x03	; 3
    1cda:	91 05       	cpc	r25, r1
    1cdc:	e9 f1       	breq	.+122    	; 0x1d58 <DIO_enuTogPinValue+0xda>
    1cde:	4f c0       	rjmp	.+158    	; 0x1d7e <DIO_enuTogPinValue+0x100>
					case DIO_PORTA:
						PORTA ^= (BIT_MASK_VALUE << Copy_PinID);
    1ce0:	ab e3       	ldi	r26, 0x3B	; 59
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	eb e3       	ldi	r30, 0x3B	; 59
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_enuTogPinValue+0x80>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_enuTogPinValue+0x7c>
    1d02:	84 27       	eor	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	3b c0       	rjmp	.+118    	; 0x1d7e <DIO_enuTogPinValue+0x100>
						break;
					case DIO_PORTB:
						PORTB ^= (BIT_MASK_VALUE << Copy_PinID);
    1d08:	a8 e3       	ldi	r26, 0x38	; 56
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e8 e3       	ldi	r30, 0x38	; 56
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <DIO_enuTogPinValue+0xa8>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <DIO_enuTogPinValue+0xa4>
    1d2a:	84 27       	eor	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	27 c0       	rjmp	.+78     	; 0x1d7e <DIO_enuTogPinValue+0x100>
						break;
					case DIO_PORTC:
						PORTC ^= (BIT_MASK_VALUE << Copy_PinID);
    1d30:	a5 e3       	ldi	r26, 0x35	; 53
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e5 e3       	ldi	r30, 0x35	; 53
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_enuTogPinValue+0xd0>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_enuTogPinValue+0xcc>
    1d52:	84 27       	eor	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	13 c0       	rjmp	.+38     	; 0x1d7e <DIO_enuTogPinValue+0x100>
						break;
					case DIO_PORTD:
						PORTD ^= (BIT_MASK_VALUE << Copy_PinID);
    1d58:	a2 e3       	ldi	r26, 0x32	; 50
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e2 e3       	ldi	r30, 0x32	; 50
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <DIO_enuTogPinValue+0xf8>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <DIO_enuTogPinValue+0xf4>
    1d7a:	84 27       	eor	r24, r20
    1d7c:	8c 93       	st	X, r24
						break;
				}
				Local_enuErrorStates = ES_OK;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	05 c0       	rjmp	.+10     	; 0x1d8e <DIO_enuTogPinValue+0x110>
			}
			else{
				Local_enuErrorStates = ES_PIN_OUT_OF_RANGE;
    1d84:	84 e0       	ldi	r24, 0x04	; 4
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <DIO_enuTogPinValue+0x110>
			}
	}
	else{
		Local_enuErrorStates = ES_PORT_OUT_OF_RANGE;
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStates;
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <ADC_enuInit>:
#include "ADC_priv.h"
#include "ADC_config.h"

static void (*ADC_PfuncCallBack) (void) = NULL;

ES_t ADC_enuInit(void){
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <ADC_enuInit+0x6>
    1da6:	0f 92       	push	r0
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1dac:	19 82       	std	Y+1, r1	; 0x01
	ADMUX &= INITIAL_VALUE;
    1dae:	e7 e2       	ldi	r30, 0x27	; 39
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	e7 e2       	ldi	r30, 0x27	; 39
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	10 82       	st	Z, r1
	ADCSRA &= INITIAL_VALUE;
    1dba:	e6 e2       	ldi	r30, 0x26	; 38
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	e6 e2       	ldi	r30, 0x26	; 38
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	10 82       	st	Z, r1

	SREG |= (BIT_MASK << L_BIT);
    1dc6:	af e5       	ldi	r26, 0x5F	; 95
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	ef e5       	ldi	r30, 0x5F	; 95
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 68       	ori	r24, 0x80	; 128
    1dd2:	8c 93       	st	X, r24
#elif PRESCALLER == PRE_FOUR
	ADCSRA |= PRE_FOUR;
	Local_enuErrorState = ES_OK;

#elif PRESCALLER == PRE_EIGHT
	ADCSRA |= PRE_EIGHT;
    1dd4:	a6 e2       	ldi	r26, 0x26	; 38
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e6 e2       	ldi	r30, 0x26	; 38
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	83 60       	ori	r24, 0x03	; 3
    1de0:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	89 83       	std	Y+1, r24	; 0x01
#if SELECT_REFERENCE == AREF
	ADMUX |= (AREF << REFS_BITS);
	Local_enuErrorState = ES_OK;

#elif	SELECT_REFERENCE == AVCC
	ADMUX |= (AVCC << REFS_BITS);
    1de6:	a7 e2       	ldi	r26, 0x27	; 39
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e7 e2       	ldi	r30, 0x27	; 39
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 64       	ori	r24, 0x40	; 64
    1df2:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01
#if ADJUSTMENT == RIGHT_ADJ
	ADMUX &= ~(BIT_MASK << ADLAR_BIT);
	Local_enuErrorState = ES_OK;

#elif ADJUSTMENT == LEFT_ADJ
	ADMUX |= (BIT_MASK << ADLAR_BIT);
    1df8:	a7 e2       	ldi	r26, 0x27	; 39
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e7 e2       	ldi	r30, 0x27	; 39
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 62       	ori	r24, 0x20	; 32
    1e04:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	89 83       	std	Y+1, r24	; 0x01

#else
	#error You Entered A Wrong Selection!!

#endif
	return Local_enuErrorState;
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <ADC_enuADCEnable>:


ES_t ADC_enuADCEnable(void){
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	0f 92       	push	r0
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e22:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (BIT_MASK << ADEN_BIT);
    1e24:	a6 e2       	ldi	r26, 0x26	; 38
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e6 e2       	ldi	r30, 0x26	; 38
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 68       	ori	r24, 0x80	; 128
    1e30:	8c 93       	st	X, r24

	return Local_enuErrorState = ES_OK;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <ADC_enuADCDisable>:


ES_t ADC_enuADCDisable(void){
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e4a:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &= ~(BIT_MASK << ADEN_BIT);
    1e4c:	a6 e2       	ldi	r26, 0x26	; 38
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e6 e2       	ldi	r30, 0x26	; 38
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8f 77       	andi	r24, 0x7F	; 127
    1e58:	8c 93       	st	X, r24

	return Local_enuErrorState = ES_OK;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(ADC_Channel Copy_ADCChannel){
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <ADC_enuSelectChannel+0x6>
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e74:	19 82       	std	Y+1, r1	; 0x01
	ADMUX &= 0b11100000;
    1e76:	a7 e2       	ldi	r26, 0x27	; 39
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e7 e2       	ldi	r30, 0x27	; 39
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	80 7e       	andi	r24, 0xE0	; 224
    1e82:	8c 93       	st	X, r24
	ADMUX |= Copy_ADCChannel;
    1e84:	a7 e2       	ldi	r26, 0x27	; 39
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e7 e2       	ldi	r30, 0x27	; 39
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	90 81       	ld	r25, Z
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	89 2b       	or	r24, r25
    1e92:	8c 93       	st	X, r24

	return Local_enuErrorState = ES_OK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <ADC_enuStartConversion>:


ES_t ADC_enuStartConversion(void){
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	0f 92       	push	r0
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1eae:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &= ~(BIT_MASK << ADIF_BIT);
    1eb0:	a6 e2       	ldi	r26, 0x26	; 38
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e6 e2       	ldi	r30, 0x26	; 38
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8f 7e       	andi	r24, 0xEF	; 239
    1ebc:	8c 93       	st	X, r24
	ADCSRA |= (BIT_MASK << ADSC_BIT);
    1ebe:	a6 e2       	ldi	r26, 0x26	; 38
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e6 e2       	ldi	r30, 0x26	; 38
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 64       	ori	r24, 0x40	; 64
    1eca:	8c 93       	st	X, r24

	return Local_enuErrorState = ES_OK;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <ADC_enuWaitOnFlag>:

ES_t ADC_enuWaitOnFlag(void){
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	0f 92       	push	r0
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1ee4:	19 82       	std	Y+1, r1	; 0x01

	while(!((ADCSRA >> ADIF_BIT) & BIT_MASK));
    1ee6:	e6 e2       	ldi	r30, 0x26	; 38
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	82 95       	swap	r24
    1eee:	8f 70       	andi	r24, 0x0F	; 15
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	81 70       	andi	r24, 0x01	; 1
    1ef6:	90 70       	andi	r25, 0x00	; 0
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	a9 f3       	breq	.-22     	; 0x1ee6 <ADC_enuWaitOnFlag+0xc>


	return Local_enuErrorState  = ES_OK;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <ADC_enuReadADCValue>:

ES_t ADC_enuReadADCValue(volatile s16* Copy_u16ADCValue){
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <ADC_enuReadADCValue+0x6>
    1f10:	0f 92       	push	r0
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9b 83       	std	Y+3, r25	; 0x03
    1f18:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    1f1a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16ADCValue != NULL){
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	89 f0       	breq	.+34     	; 0x1f46 <ADC_enuReadADCValue+0x3c>
#if ADJUSTMENT == RIGHT_ADJ
		*Copy_u16ADCValue = ADC_DATA_REGISTER;

#elif	ADJUSTMENT == LEFT_ADJ
		*Copy_u16ADCValue = (ADC_DATA_REGISTER >> 6);
    1f24:	e4 e2       	ldi	r30, 0x24	; 36
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	08 2e       	mov	r0, r24
    1f2e:	89 2f       	mov	r24, r25
    1f30:	00 0c       	add	r0, r0
    1f32:	88 1f       	adc	r24, r24
    1f34:	99 0b       	sbc	r25, r25
    1f36:	00 0c       	add	r0, r0
    1f38:	88 1f       	adc	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	80 83       	st	Z, r24
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <ADC_enuReadADCValue+0x40>
#else
	#error You Entered A Wrong Selection!!
#endif
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <ADC_enuEnableAutoTrigger>:


ES_t ADC_enuEnableAutoTrigger(void){
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1f62:	19 82       	std	Y+1, r1	; 0x01
	if(!((ADCSRA >> ADATE_BIT) & BIT_MASK)){
    1f64:	e6 e2       	ldi	r30, 0x26	; 38
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	82 95       	swap	r24
    1f6c:	86 95       	lsr	r24
    1f6e:	87 70       	andi	r24, 0x07	; 7
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	81 70       	andi	r24, 0x01	; 1
    1f76:	90 70       	andi	r25, 0x00	; 0
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <ADC_enuEnableAutoTrigger+0x36>
		ADCSRA |= (BIT_MASK << ADATE_BIT);
    1f7c:	a6 e2       	ldi	r26, 0x26	; 38
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e6 e2       	ldi	r30, 0x26	; 38
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	80 62       	ori	r24, 0x20	; 32
    1f88:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <ADC_enuDisableAutoTrigger>:


ES_t ADC_enuDisableAutoTrigger(void){
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	0f 92       	push	r0
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1fa2:	19 82       	std	Y+1, r1	; 0x01

	if(((ADCSRA >> ADATE_BIT) & BIT_MASK)){
    1fa4:	e6 e2       	ldi	r30, 0x26	; 38
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	82 95       	swap	r24
    1fac:	86 95       	lsr	r24
    1fae:	87 70       	andi	r24, 0x07	; 7
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	81 70       	andi	r24, 0x01	; 1
    1fb6:	90 70       	andi	r25, 0x00	; 0
    1fb8:	88 23       	and	r24, r24
    1fba:	49 f0       	breq	.+18     	; 0x1fce <ADC_enuDisableAutoTrigger+0x36>
		ADCSRA &= ~(BIT_MASK << ADATE_BIT);
    1fbc:	a6 e2       	ldi	r26, 0x26	; 38
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e6 e2       	ldi	r30, 0x26	; 38
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 7d       	andi	r24, 0xDF	; 223
    1fc8:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <ADC_InterruptEnable>:

ES_t ADC_InterruptEnable(void){
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	0f 92       	push	r0
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1fe2:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (BIT_MASK << ADIE_BIT);
    1fe4:	a6 e2       	ldi	r26, 0x26	; 38
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e6 e2       	ldi	r30, 0x26	; 38
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	88 60       	ori	r24, 0x08	; 8
    1ff0:	8c 93       	st	X, r24

	return Local_enuErrorState = ES_OK;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <ADC_InterruptDisable>:

ES_t ADC_InterruptDisable(void){
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	0f 92       	push	r0
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    200a:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &= ~(BIT_MASK << ADIE_BIT);
    200c:	a6 e2       	ldi	r26, 0x26	; 38
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e6 e2       	ldi	r30, 0x26	; 38
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	87 7f       	andi	r24, 0xF7	; 247
    2018:	8c 93       	st	X, r24

	return Local_enuErrorState;
    201a:	89 81       	ldd	r24, Y+1	; 0x01
}
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <ADC_InterruptCallBack>:

ES_t ADC_InterruptCallBack(void (*Copy_PfuncCallBack) (void)){
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	00 d0       	rcall	.+0      	; 0x202a <ADC_InterruptCallBack+0x6>
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	9b 83       	std	Y+3, r25	; 0x03
    2032:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2034:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfuncCallBack != NULL){
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	9b 81       	ldd	r25, Y+3	; 0x03
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	49 f0       	breq	.+18     	; 0x2050 <ADC_InterruptCallBack+0x2c>
		ADC_PfuncCallBack = Copy_PfuncCallBack;
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	90 93 f3 01 	sts	0x01F3, r25
    2046:	80 93 f2 01 	sts	0x01F2, r24
		Local_enuErrorState = ES_OK;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <ADC_InterruptCallBack+0x30>
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <__vector_16>:

ADC_ISR{
    2062:	1f 92       	push	r1
    2064:	0f 92       	push	r0
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	0f 92       	push	r0
    206a:	11 24       	eor	r1, r1
    206c:	2f 93       	push	r18
    206e:	3f 93       	push	r19
    2070:	4f 93       	push	r20
    2072:	5f 93       	push	r21
    2074:	6f 93       	push	r22
    2076:	7f 93       	push	r23
    2078:	8f 93       	push	r24
    207a:	9f 93       	push	r25
    207c:	af 93       	push	r26
    207e:	bf 93       	push	r27
    2080:	ef 93       	push	r30
    2082:	ff 93       	push	r31
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfuncCallBack != NULL){
    208c:	80 91 f2 01 	lds	r24, 0x01F2
    2090:	90 91 f3 01 	lds	r25, 0x01F3
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	29 f0       	breq	.+10     	; 0x20a2 <__vector_16+0x40>
		ADC_PfuncCallBack();
    2098:	e0 91 f2 01 	lds	r30, 0x01F2
    209c:	f0 91 f3 01 	lds	r31, 0x01F3
    20a0:	09 95       	icall
	}
}
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	ff 91       	pop	r31
    20a8:	ef 91       	pop	r30
    20aa:	bf 91       	pop	r27
    20ac:	af 91       	pop	r26
    20ae:	9f 91       	pop	r25
    20b0:	8f 91       	pop	r24
    20b2:	7f 91       	pop	r23
    20b4:	6f 91       	pop	r22
    20b6:	5f 91       	pop	r21
    20b8:	4f 91       	pop	r20
    20ba:	3f 91       	pop	r19
    20bc:	2f 91       	pop	r18
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

000020c8 <SW_enuInit>:

#include "Switch_config.h"

extern SW_t  SW_AstrSwitchConfig[SWITCH_NUM];

ES_t SW_enuInit(SW_t *Copy_pstrSwitchConfig){
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <SW_enuInit+0x6>
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <SW_enuInit+0x8>
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    20d8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pstrSwitchConfig != NULL){
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	51 f1       	breq	.+84     	; 0x2136 <SW_enuInit+0x6e>
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator< SWITCH_NUM; Local_u8Iterator++){
    20e2:	19 82       	std	Y+1, r1	; 0x01
    20e4:	24 c0       	rjmp	.+72     	; 0x212e <SW_enuInit+0x66>
			DIO_enuSetPinDir(Copy_pstrSwitchConfig[Local_u8Iterator].SW_Port, Copy_pstrSwitchConfig[Local_u8Iterator].SW_Pin, DIO_u8INPUT);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	c9 01       	movw	r24, r18
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	28 0f       	add	r18, r24
    20f4:	39 1f       	adc	r19, r25
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	fc 01       	movw	r30, r24
    20fc:	e2 0f       	add	r30, r18
    20fe:	f3 1f       	adc	r31, r19
    2100:	40 81       	ld	r20, Z
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	c9 01       	movw	r24, r18
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	28 0f       	add	r18, r24
    2110:	39 1f       	adc	r19, r25
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	fc 01       	movw	r30, r24
    2118:	e2 0f       	add	r30, r18
    211a:	f3 1f       	adc	r31, r19
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	84 2f       	mov	r24, r20
    2120:	69 2f       	mov	r22, r25
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>

ES_t SW_enuInit(SW_t *Copy_pstrSwitchConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrSwitchConfig != NULL){
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator< SWITCH_NUM; Local_u8Iterator++){
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	8f 5f       	subi	r24, 0xFF	; 255
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	c8 f2       	brcs	.-78     	; 0x20e6 <SW_enuInit+0x1e>
    2134:	02 c0       	rjmp	.+4      	; 0x213a <SW_enuInit+0x72>
			DIO_enuSetPinDir(Copy_pstrSwitchConfig[Local_u8Iterator].SW_Port, Copy_pstrSwitchConfig[Local_u8Iterator].SW_Pin, DIO_u8INPUT);
		}
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
    213a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <SW_enuGetSwitchState>:

ES_t SW_enuGetSwitchState(u8 SwitchID, u8 *SwitchVal){
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	00 d0       	rcall	.+0      	; 0x2150 <SW_enuGetSwitchState+0x6>
    2150:	00 d0       	rcall	.+0      	; 0x2152 <SW_enuGetSwitchState+0x8>
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	8a 83       	std	Y+2, r24	; 0x02
    2158:	7c 83       	std	Y+4, r23	; 0x04
    215a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    215c:	19 82       	std	Y+1, r1	; 0x01

		if(SwitchID <= SWITCH_NUM){
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	83 30       	cpi	r24, 0x03	; 3
    2162:	10 f5       	brcc	.+68     	; 0x21a8 <SW_enuGetSwitchState+0x5e>
			DIO_enuGetPinValue(SW_AstrSwitchConfig[SwitchID].SW_Port, SW_AstrSwitchConfig[SwitchID].SW_Pin, SwitchVal);
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	c9 01       	movw	r24, r18
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	82 0f       	add	r24, r18
    2172:	93 1f       	adc	r25, r19
    2174:	fc 01       	movw	r30, r24
    2176:	e2 59       	subi	r30, 0x92	; 146
    2178:	fe 4f       	sbci	r31, 0xFE	; 254
    217a:	40 81       	ld	r20, Z
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	c9 01       	movw	r24, r18
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	82 0f       	add	r24, r18
    218a:	93 1f       	adc	r25, r19
    218c:	fc 01       	movw	r30, r24
    218e:	e1 59       	subi	r30, 0x91	; 145
    2190:	fe 4f       	sbci	r31, 0xFE	; 254
    2192:	90 81       	ld	r25, Z
    2194:	2b 81       	ldd	r18, Y+3	; 0x03
    2196:	3c 81       	ldd	r19, Y+4	; 0x04
    2198:	84 2f       	mov	r24, r20
    219a:	69 2f       	mov	r22, r25
    219c:	a9 01       	movw	r20, r18
    219e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuGetPinValue>
			Local_enuErrorState = ES_OK;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <SW_enuGetSwitchState+0x62>
		}
		else{
			Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    21a8:	85 e0       	ldi	r24, 0x05	; 5
    21aa:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorState;
    21ac:	89 81       	ldd	r24, Y+1	; 0x01

}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <SSegment_enuInit>:
		0x7F,
		0x6F
};

extern SEG_t SSegment_Astr7SegConfig[NUM_SEV_SEGMENTS];
ES_t SSegment_enuInit(SEG_t *Copy_pstrSegConfig){
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <SSegment_enuInit+0x6>
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <SSegment_enuInit+0x8>
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    21cc:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pstrSegConfig != NULL){
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <SSegment_enuInit+0x1c>
    21d6:	1e c2       	rjmp	.+1084   	; 0x2614 <SSegment_enuInit+0x458>
		u8 Local_enuIterator;
		for(Local_enuIterator = 0; Local_enuIterator < NUM_SEV_SEGMENTS; Local_enuIterator++){
    21d8:	19 82       	std	Y+1, r1	; 0x01
    21da:	15 c2       	rjmp	.+1066   	; 0x2606 <SSegment_enuInit+0x44a>

			DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].SegA_Port, Copy_pstrSegConfig[Local_enuIterator].SegA_Pin, DIO_u8OUTPUT);
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	48 2f       	mov	r20, r24
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	ca 01       	movw	r24, r20
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	9c 01       	movw	r18, r24
    21ea:	22 0f       	add	r18, r18
    21ec:	33 1f       	adc	r19, r19
    21ee:	22 0f       	add	r18, r18
    21f0:	33 1f       	adc	r19, r19
    21f2:	22 0f       	add	r18, r18
    21f4:	33 1f       	adc	r19, r19
    21f6:	82 0f       	add	r24, r18
    21f8:	93 1f       	adc	r25, r19
    21fa:	9c 01       	movw	r18, r24
    21fc:	24 0f       	add	r18, r20
    21fe:	35 1f       	adc	r19, r21
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	fc 01       	movw	r30, r24
    2206:	e2 0f       	add	r30, r18
    2208:	f3 1f       	adc	r31, r19
    220a:	60 81       	ld	r22, Z
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	48 2f       	mov	r20, r24
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	ca 01       	movw	r24, r20
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	9c 01       	movw	r18, r24
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	22 0f       	add	r18, r18
    2224:	33 1f       	adc	r19, r19
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	9c 01       	movw	r18, r24
    222c:	24 0f       	add	r18, r20
    222e:	35 1f       	adc	r19, r21
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	fc 01       	movw	r30, r24
    2236:	e2 0f       	add	r30, r18
    2238:	f3 1f       	adc	r31, r19
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	86 2f       	mov	r24, r22
    223e:	69 2f       	mov	r22, r25
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].SegB_Port, Copy_pstrSegConfig[Local_enuIterator].SegB_Pin, DIO_u8OUTPUT);
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	48 2f       	mov	r20, r24
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	ca 01       	movw	r24, r20
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	9c 01       	movw	r18, r24
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	22 0f       	add	r18, r18
    225a:	33 1f       	adc	r19, r19
    225c:	22 0f       	add	r18, r18
    225e:	33 1f       	adc	r19, r19
    2260:	82 0f       	add	r24, r18
    2262:	93 1f       	adc	r25, r19
    2264:	9c 01       	movw	r18, r24
    2266:	24 0f       	add	r18, r20
    2268:	35 1f       	adc	r19, r21
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	fc 01       	movw	r30, r24
    2270:	e2 0f       	add	r30, r18
    2272:	f3 1f       	adc	r31, r19
    2274:	62 81       	ldd	r22, Z+2	; 0x02
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	48 2f       	mov	r20, r24
    227a:	50 e0       	ldi	r21, 0x00	; 0
    227c:	ca 01       	movw	r24, r20
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	9c 01       	movw	r18, r24
    2284:	22 0f       	add	r18, r18
    2286:	33 1f       	adc	r19, r19
    2288:	22 0f       	add	r18, r18
    228a:	33 1f       	adc	r19, r19
    228c:	22 0f       	add	r18, r18
    228e:	33 1f       	adc	r19, r19
    2290:	82 0f       	add	r24, r18
    2292:	93 1f       	adc	r25, r19
    2294:	9c 01       	movw	r18, r24
    2296:	24 0f       	add	r18, r20
    2298:	35 1f       	adc	r19, r21
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	fc 01       	movw	r30, r24
    22a0:	e2 0f       	add	r30, r18
    22a2:	f3 1f       	adc	r31, r19
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	86 2f       	mov	r24, r22
    22a8:	69 2f       	mov	r22, r25
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].SegC_Port, Copy_pstrSegConfig[Local_enuIterator].SegC_Pin, DIO_u8OUTPUT);
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	48 2f       	mov	r20, r24
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	ca 01       	movw	r24, r20
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	9c 01       	movw	r18, r24
    22be:	22 0f       	add	r18, r18
    22c0:	33 1f       	adc	r19, r19
    22c2:	22 0f       	add	r18, r18
    22c4:	33 1f       	adc	r19, r19
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	82 0f       	add	r24, r18
    22cc:	93 1f       	adc	r25, r19
    22ce:	9c 01       	movw	r18, r24
    22d0:	24 0f       	add	r18, r20
    22d2:	35 1f       	adc	r19, r21
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	fc 01       	movw	r30, r24
    22da:	e2 0f       	add	r30, r18
    22dc:	f3 1f       	adc	r31, r19
    22de:	64 81       	ldd	r22, Z+4	; 0x04
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	48 2f       	mov	r20, r24
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	ca 01       	movw	r24, r20
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	9c 01       	movw	r18, r24
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	22 0f       	add	r18, r18
    22f8:	33 1f       	adc	r19, r19
    22fa:	82 0f       	add	r24, r18
    22fc:	93 1f       	adc	r25, r19
    22fe:	9c 01       	movw	r18, r24
    2300:	24 0f       	add	r18, r20
    2302:	35 1f       	adc	r19, r21
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	fc 01       	movw	r30, r24
    230a:	e2 0f       	add	r30, r18
    230c:	f3 1f       	adc	r31, r19
    230e:	95 81       	ldd	r25, Z+5	; 0x05
    2310:	86 2f       	mov	r24, r22
    2312:	69 2f       	mov	r22, r25
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].SegD_Port, Copy_pstrSegConfig[Local_enuIterator].SegD_Pin, DIO_u8OUTPUT);
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	48 2f       	mov	r20, r24
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	ca 01       	movw	r24, r20
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	9c 01       	movw	r18, r24
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	22 0f       	add	r18, r18
    232e:	33 1f       	adc	r19, r19
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	82 0f       	add	r24, r18
    2336:	93 1f       	adc	r25, r19
    2338:	9c 01       	movw	r18, r24
    233a:	24 0f       	add	r18, r20
    233c:	35 1f       	adc	r19, r21
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	fc 01       	movw	r30, r24
    2344:	e2 0f       	add	r30, r18
    2346:	f3 1f       	adc	r31, r19
    2348:	66 81       	ldd	r22, Z+6	; 0x06
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	48 2f       	mov	r20, r24
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	ca 01       	movw	r24, r20
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	9c 01       	movw	r18, r24
    2358:	22 0f       	add	r18, r18
    235a:	33 1f       	adc	r19, r19
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	9c 01       	movw	r18, r24
    236a:	24 0f       	add	r18, r20
    236c:	35 1f       	adc	r19, r21
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	fc 01       	movw	r30, r24
    2374:	e2 0f       	add	r30, r18
    2376:	f3 1f       	adc	r31, r19
    2378:	97 81       	ldd	r25, Z+7	; 0x07
    237a:	86 2f       	mov	r24, r22
    237c:	69 2f       	mov	r22, r25
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].SegE_Port, Copy_pstrSegConfig[Local_enuIterator].SegE_Pin, DIO_u8OUTPUT);
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	48 2f       	mov	r20, r24
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	ca 01       	movw	r24, r20
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	9c 01       	movw	r18, r24
    2392:	22 0f       	add	r18, r18
    2394:	33 1f       	adc	r19, r19
    2396:	22 0f       	add	r18, r18
    2398:	33 1f       	adc	r19, r19
    239a:	22 0f       	add	r18, r18
    239c:	33 1f       	adc	r19, r19
    239e:	82 0f       	add	r24, r18
    23a0:	93 1f       	adc	r25, r19
    23a2:	9c 01       	movw	r18, r24
    23a4:	24 0f       	add	r18, r20
    23a6:	35 1f       	adc	r19, r21
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	fc 01       	movw	r30, r24
    23ae:	e2 0f       	add	r30, r18
    23b0:	f3 1f       	adc	r31, r19
    23b2:	60 85       	ldd	r22, Z+8	; 0x08
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	48 2f       	mov	r20, r24
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	ca 01       	movw	r24, r20
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	9c 01       	movw	r18, r24
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	22 0f       	add	r18, r18
    23c8:	33 1f       	adc	r19, r19
    23ca:	22 0f       	add	r18, r18
    23cc:	33 1f       	adc	r19, r19
    23ce:	82 0f       	add	r24, r18
    23d0:	93 1f       	adc	r25, r19
    23d2:	9c 01       	movw	r18, r24
    23d4:	24 0f       	add	r18, r20
    23d6:	35 1f       	adc	r19, r21
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	fc 01       	movw	r30, r24
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	91 85       	ldd	r25, Z+9	; 0x09
    23e4:	86 2f       	mov	r24, r22
    23e6:	69 2f       	mov	r22, r25
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].SegF_Port, Copy_pstrSegConfig[Local_enuIterator].SegF_Pin, DIO_u8OUTPUT);
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	48 2f       	mov	r20, r24
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	ca 01       	movw	r24, r20
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	9c 01       	movw	r18, r24
    23fc:	22 0f       	add	r18, r18
    23fe:	33 1f       	adc	r19, r19
    2400:	22 0f       	add	r18, r18
    2402:	33 1f       	adc	r19, r19
    2404:	22 0f       	add	r18, r18
    2406:	33 1f       	adc	r19, r19
    2408:	82 0f       	add	r24, r18
    240a:	93 1f       	adc	r25, r19
    240c:	9c 01       	movw	r18, r24
    240e:	24 0f       	add	r18, r20
    2410:	35 1f       	adc	r19, r21
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	fc 01       	movw	r30, r24
    2418:	e2 0f       	add	r30, r18
    241a:	f3 1f       	adc	r31, r19
    241c:	62 85       	ldd	r22, Z+10	; 0x0a
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	48 2f       	mov	r20, r24
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	ca 01       	movw	r24, r20
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	9c 01       	movw	r18, r24
    242c:	22 0f       	add	r18, r18
    242e:	33 1f       	adc	r19, r19
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	82 0f       	add	r24, r18
    243a:	93 1f       	adc	r25, r19
    243c:	9c 01       	movw	r18, r24
    243e:	24 0f       	add	r18, r20
    2440:	35 1f       	adc	r19, r21
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	fc 01       	movw	r30, r24
    2448:	e2 0f       	add	r30, r18
    244a:	f3 1f       	adc	r31, r19
    244c:	93 85       	ldd	r25, Z+11	; 0x0b
    244e:	86 2f       	mov	r24, r22
    2450:	69 2f       	mov	r22, r25
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].SegG_Port, Copy_pstrSegConfig[Local_enuIterator].SegG_Pin, DIO_u8OUTPUT);
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	48 2f       	mov	r20, r24
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	ca 01       	movw	r24, r20
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	9c 01       	movw	r18, r24
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	22 0f       	add	r18, r18
    2470:	33 1f       	adc	r19, r19
    2472:	82 0f       	add	r24, r18
    2474:	93 1f       	adc	r25, r19
    2476:	9c 01       	movw	r18, r24
    2478:	24 0f       	add	r18, r20
    247a:	35 1f       	adc	r19, r21
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	fc 01       	movw	r30, r24
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	64 85       	ldd	r22, Z+12	; 0x0c
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	48 2f       	mov	r20, r24
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	ca 01       	movw	r24, r20
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	9c 01       	movw	r18, r24
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	22 0f       	add	r18, r18
    249c:	33 1f       	adc	r19, r19
    249e:	22 0f       	add	r18, r18
    24a0:	33 1f       	adc	r19, r19
    24a2:	82 0f       	add	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	9c 01       	movw	r18, r24
    24a8:	24 0f       	add	r18, r20
    24aa:	35 1f       	adc	r19, r21
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	fc 01       	movw	r30, r24
    24b2:	e2 0f       	add	r30, r18
    24b4:	f3 1f       	adc	r31, r19
    24b6:	95 85       	ldd	r25, Z+13	; 0x0d
    24b8:	86 2f       	mov	r24, r22
    24ba:	69 2f       	mov	r22, r25
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].Cmn_Port,  Copy_pstrSegConfig[Local_enuIterator].Cmn_Pin,  DIO_u8OUTPUT);
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	48 2f       	mov	r20, r24
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	ca 01       	movw	r24, r20
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	9c 01       	movw	r18, r24
    24d0:	22 0f       	add	r18, r18
    24d2:	33 1f       	adc	r19, r19
    24d4:	22 0f       	add	r18, r18
    24d6:	33 1f       	adc	r19, r19
    24d8:	22 0f       	add	r18, r18
    24da:	33 1f       	adc	r19, r19
    24dc:	82 0f       	add	r24, r18
    24de:	93 1f       	adc	r25, r19
    24e0:	9c 01       	movw	r18, r24
    24e2:	24 0f       	add	r18, r20
    24e4:	35 1f       	adc	r19, r21
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	fc 01       	movw	r30, r24
    24ec:	e2 0f       	add	r30, r18
    24ee:	f3 1f       	adc	r31, r19
    24f0:	66 85       	ldd	r22, Z+14	; 0x0e
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	48 2f       	mov	r20, r24
    24f6:	50 e0       	ldi	r21, 0x00	; 0
    24f8:	ca 01       	movw	r24, r20
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	9c 01       	movw	r18, r24
    2500:	22 0f       	add	r18, r18
    2502:	33 1f       	adc	r19, r19
    2504:	22 0f       	add	r18, r18
    2506:	33 1f       	adc	r19, r19
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	9c 01       	movw	r18, r24
    2512:	24 0f       	add	r18, r20
    2514:	35 1f       	adc	r19, r21
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	fc 01       	movw	r30, r24
    251c:	e2 0f       	add	r30, r18
    251e:	f3 1f       	adc	r31, r19
    2520:	97 85       	ldd	r25, Z+15	; 0x0f
    2522:	86 2f       	mov	r24, r22
    2524:	69 2f       	mov	r22, r25
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			if(Copy_pstrSegConfig[Local_enuIterator].Dot_Port != NOT_CONNECTED && Copy_pstrSegConfig[Local_enuIterator].Dot_Pin != NOT_CONNECTED){
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	48 2f       	mov	r20, r24
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	ca 01       	movw	r24, r20
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	9c 01       	movw	r18, r24
    253a:	22 0f       	add	r18, r18
    253c:	33 1f       	adc	r19, r19
    253e:	22 0f       	add	r18, r18
    2540:	33 1f       	adc	r19, r19
    2542:	22 0f       	add	r18, r18
    2544:	33 1f       	adc	r19, r19
    2546:	82 0f       	add	r24, r18
    2548:	93 1f       	adc	r25, r19
    254a:	9c 01       	movw	r18, r24
    254c:	24 0f       	add	r18, r20
    254e:	35 1f       	adc	r19, r21
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	9c 81       	ldd	r25, Y+4	; 0x04
    2554:	fc 01       	movw	r30, r24
    2556:	e2 0f       	add	r30, r18
    2558:	f3 1f       	adc	r31, r19
    255a:	80 89       	ldd	r24, Z+16	; 0x10
    255c:	81 32       	cpi	r24, 0x21	; 33
    255e:	09 f4       	brne	.+2      	; 0x2562 <SSegment_enuInit+0x3a6>
    2560:	4f c0       	rjmp	.+158    	; 0x2600 <SSegment_enuInit+0x444>
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	48 2f       	mov	r20, r24
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	ca 01       	movw	r24, r20
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	9c 01       	movw	r18, r24
    2570:	22 0f       	add	r18, r18
    2572:	33 1f       	adc	r19, r19
    2574:	22 0f       	add	r18, r18
    2576:	33 1f       	adc	r19, r19
    2578:	22 0f       	add	r18, r18
    257a:	33 1f       	adc	r19, r19
    257c:	82 0f       	add	r24, r18
    257e:	93 1f       	adc	r25, r19
    2580:	9c 01       	movw	r18, r24
    2582:	24 0f       	add	r18, r20
    2584:	35 1f       	adc	r19, r21
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	fc 01       	movw	r30, r24
    258c:	e2 0f       	add	r30, r18
    258e:	f3 1f       	adc	r31, r19
    2590:	81 89       	ldd	r24, Z+17	; 0x11
    2592:	81 32       	cpi	r24, 0x21	; 33
    2594:	a9 f1       	breq	.+106    	; 0x2600 <SSegment_enuInit+0x444>
				DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].Dot_Port, Copy_pstrSegConfig[Local_enuIterator].Dot_Pin, DIO_u8OUTPUT);
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	48 2f       	mov	r20, r24
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	ca 01       	movw	r24, r20
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	9c 01       	movw	r18, r24
    25a4:	22 0f       	add	r18, r18
    25a6:	33 1f       	adc	r19, r19
    25a8:	22 0f       	add	r18, r18
    25aa:	33 1f       	adc	r19, r19
    25ac:	22 0f       	add	r18, r18
    25ae:	33 1f       	adc	r19, r19
    25b0:	82 0f       	add	r24, r18
    25b2:	93 1f       	adc	r25, r19
    25b4:	9c 01       	movw	r18, r24
    25b6:	24 0f       	add	r18, r20
    25b8:	35 1f       	adc	r19, r21
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	fc 01       	movw	r30, r24
    25c0:	e2 0f       	add	r30, r18
    25c2:	f3 1f       	adc	r31, r19
    25c4:	60 89       	ldd	r22, Z+16	; 0x10
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	48 2f       	mov	r20, r24
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	ca 01       	movw	r24, r20
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	9c 01       	movw	r18, r24
    25d4:	22 0f       	add	r18, r18
    25d6:	33 1f       	adc	r19, r19
    25d8:	22 0f       	add	r18, r18
    25da:	33 1f       	adc	r19, r19
    25dc:	22 0f       	add	r18, r18
    25de:	33 1f       	adc	r19, r19
    25e0:	82 0f       	add	r24, r18
    25e2:	93 1f       	adc	r25, r19
    25e4:	9c 01       	movw	r18, r24
    25e6:	24 0f       	add	r18, r20
    25e8:	35 1f       	adc	r19, r21
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	9c 81       	ldd	r25, Y+4	; 0x04
    25ee:	fc 01       	movw	r30, r24
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	91 89       	ldd	r25, Z+17	; 0x11
    25f6:	86 2f       	mov	r24, r22
    25f8:	69 2f       	mov	r22, r25
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
extern SEG_t SSegment_Astr7SegConfig[NUM_SEV_SEGMENTS];
ES_t SSegment_enuInit(SEG_t *Copy_pstrSegConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrSegConfig != NULL){
		u8 Local_enuIterator;
		for(Local_enuIterator = 0; Local_enuIterator < NUM_SEV_SEGMENTS; Local_enuIterator++){
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	82 30       	cpi	r24, 0x02	; 2
    260a:	08 f4       	brcc	.+2      	; 0x260e <SSegment_enuInit+0x452>
    260c:	e7 cd       	rjmp	.-1074   	; 0x21dc <SSegment_enuInit+0x20>
			if(Copy_pstrSegConfig[Local_enuIterator].Dot_Port != NOT_CONNECTED && Copy_pstrSegConfig[Local_enuIterator].Dot_Pin != NOT_CONNECTED){
				DIO_enuSetPinDir(Copy_pstrSegConfig[Local_enuIterator].Dot_Port, Copy_pstrSegConfig[Local_enuIterator].Dot_Pin, DIO_u8OUTPUT);
			}
		}

		Local_enuErrorState = ES_OK;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <SSegment_enuInit+0x45c>
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    2614:	82 e0       	ldi	r24, 0x02	; 2
    2616:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <SSegment_enuDisplayNum>:

ES_t SSegment_enuDisplayNum(u8 Copy_u8Num, u8 Copy_u8SegID){
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	00 d0       	rcall	.+0      	; 0x262e <SSegment_enuDisplayNum+0x6>
    262e:	0f 92       	push	r0
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	8a 83       	std	Y+2, r24	; 0x02
    2636:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2638:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8SegID <= NUM_SEV_SEGMENTS){
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	83 30       	cpi	r24, 0x03	; 3
    263e:	08 f0       	brcs	.+2      	; 0x2642 <SSegment_enuDisplayNum+0x1a>
    2640:	69 c3       	rjmp	.+1746   	; 0x2d14 <SSegment_enuDisplayNum+0x6ec>
			if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_CATHODE){
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	48 2f       	mov	r20, r24
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	ca 01       	movw	r24, r20
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	9c 01       	movw	r18, r24
    2650:	22 0f       	add	r18, r18
    2652:	33 1f       	adc	r19, r19
    2654:	22 0f       	add	r18, r18
    2656:	33 1f       	adc	r19, r19
    2658:	22 0f       	add	r18, r18
    265a:	33 1f       	adc	r19, r19
    265c:	82 0f       	add	r24, r18
    265e:	93 1f       	adc	r25, r19
    2660:	84 0f       	add	r24, r20
    2662:	95 1f       	adc	r25, r21
    2664:	fc 01       	movw	r30, r24
    2666:	ea 57       	subi	r30, 0x7A	; 122
    2668:	fe 4f       	sbci	r31, 0xFE	; 254
    266a:	80 81       	ld	r24, Z
    266c:	84 36       	cpi	r24, 0x64	; 100
    266e:	09 f0       	breq	.+2      	; 0x2672 <SSegment_enuDisplayNum+0x4a>
    2670:	98 c1       	rjmp	.+816    	; 0x29a2 <SSegment_enuDisplayNum+0x37a>

				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegA_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegA_Pin, ((SSegment_Au8Nums[Copy_u8Num] >> 0) & BIT_MASK));
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	48 2f       	mov	r20, r24
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	ca 01       	movw	r24, r20
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	9c 01       	movw	r18, r24
    2680:	22 0f       	add	r18, r18
    2682:	33 1f       	adc	r19, r19
    2684:	22 0f       	add	r18, r18
    2686:	33 1f       	adc	r19, r19
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	82 0f       	add	r24, r18
    268e:	93 1f       	adc	r25, r19
    2690:	84 0f       	add	r24, r20
    2692:	95 1f       	adc	r25, r21
    2694:	fc 01       	movw	r30, r24
    2696:	ec 58       	subi	r30, 0x8C	; 140
    2698:	fe 4f       	sbci	r31, 0xFE	; 254
    269a:	60 81       	ld	r22, Z
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	48 2f       	mov	r20, r24
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	ca 01       	movw	r24, r20
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	9c 01       	movw	r18, r24
    26aa:	22 0f       	add	r18, r18
    26ac:	33 1f       	adc	r19, r19
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	22 0f       	add	r18, r18
    26b4:	33 1f       	adc	r19, r19
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	84 0f       	add	r24, r20
    26bc:	95 1f       	adc	r25, r21
    26be:	fc 01       	movw	r30, r24
    26c0:	eb 58       	subi	r30, 0x8B	; 139
    26c2:	fe 4f       	sbci	r31, 0xFE	; 254
    26c4:	20 81       	ld	r18, Z
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	88 2f       	mov	r24, r24
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	fc 01       	movw	r30, r24
    26ce:	e6 56       	subi	r30, 0x66	; 102
    26d0:	fe 4f       	sbci	r31, 0xFE	; 254
    26d2:	80 81       	ld	r24, Z
    26d4:	98 2f       	mov	r25, r24
    26d6:	91 70       	andi	r25, 0x01	; 1
    26d8:	86 2f       	mov	r24, r22
    26da:	62 2f       	mov	r22, r18
    26dc:	49 2f       	mov	r20, r25
    26de:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegB_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegB_Pin, ((SSegment_Au8Nums[Copy_u8Num] >> 1) & BIT_MASK));
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	48 2f       	mov	r20, r24
    26e6:	50 e0       	ldi	r21, 0x00	; 0
    26e8:	ca 01       	movw	r24, r20
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	9c 01       	movw	r18, r24
    26f0:	22 0f       	add	r18, r18
    26f2:	33 1f       	adc	r19, r19
    26f4:	22 0f       	add	r18, r18
    26f6:	33 1f       	adc	r19, r19
    26f8:	22 0f       	add	r18, r18
    26fa:	33 1f       	adc	r19, r19
    26fc:	82 0f       	add	r24, r18
    26fe:	93 1f       	adc	r25, r19
    2700:	84 0f       	add	r24, r20
    2702:	95 1f       	adc	r25, r21
    2704:	fc 01       	movw	r30, r24
    2706:	ea 58       	subi	r30, 0x8A	; 138
    2708:	fe 4f       	sbci	r31, 0xFE	; 254
    270a:	60 81       	ld	r22, Z
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	48 2f       	mov	r20, r24
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	ca 01       	movw	r24, r20
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	9c 01       	movw	r18, r24
    271a:	22 0f       	add	r18, r18
    271c:	33 1f       	adc	r19, r19
    271e:	22 0f       	add	r18, r18
    2720:	33 1f       	adc	r19, r19
    2722:	22 0f       	add	r18, r18
    2724:	33 1f       	adc	r19, r19
    2726:	82 0f       	add	r24, r18
    2728:	93 1f       	adc	r25, r19
    272a:	84 0f       	add	r24, r20
    272c:	95 1f       	adc	r25, r21
    272e:	fc 01       	movw	r30, r24
    2730:	e9 58       	subi	r30, 0x89	; 137
    2732:	fe 4f       	sbci	r31, 0xFE	; 254
    2734:	20 81       	ld	r18, Z
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	fc 01       	movw	r30, r24
    273e:	e6 56       	subi	r30, 0x66	; 102
    2740:	fe 4f       	sbci	r31, 0xFE	; 254
    2742:	80 81       	ld	r24, Z
    2744:	86 95       	lsr	r24
    2746:	98 2f       	mov	r25, r24
    2748:	91 70       	andi	r25, 0x01	; 1
    274a:	86 2f       	mov	r24, r22
    274c:	62 2f       	mov	r22, r18
    274e:	49 2f       	mov	r20, r25
    2750:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegC_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegC_Pin, ((SSegment_Au8Nums[Copy_u8Num] >> 2) & BIT_MASK));
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	48 2f       	mov	r20, r24
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	ca 01       	movw	r24, r20
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	9c 01       	movw	r18, r24
    2762:	22 0f       	add	r18, r18
    2764:	33 1f       	adc	r19, r19
    2766:	22 0f       	add	r18, r18
    2768:	33 1f       	adc	r19, r19
    276a:	22 0f       	add	r18, r18
    276c:	33 1f       	adc	r19, r19
    276e:	82 0f       	add	r24, r18
    2770:	93 1f       	adc	r25, r19
    2772:	84 0f       	add	r24, r20
    2774:	95 1f       	adc	r25, r21
    2776:	fc 01       	movw	r30, r24
    2778:	e8 58       	subi	r30, 0x88	; 136
    277a:	fe 4f       	sbci	r31, 0xFE	; 254
    277c:	60 81       	ld	r22, Z
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	48 2f       	mov	r20, r24
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	ca 01       	movw	r24, r20
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	9c 01       	movw	r18, r24
    278c:	22 0f       	add	r18, r18
    278e:	33 1f       	adc	r19, r19
    2790:	22 0f       	add	r18, r18
    2792:	33 1f       	adc	r19, r19
    2794:	22 0f       	add	r18, r18
    2796:	33 1f       	adc	r19, r19
    2798:	82 0f       	add	r24, r18
    279a:	93 1f       	adc	r25, r19
    279c:	84 0f       	add	r24, r20
    279e:	95 1f       	adc	r25, r21
    27a0:	fc 01       	movw	r30, r24
    27a2:	e7 58       	subi	r30, 0x87	; 135
    27a4:	fe 4f       	sbci	r31, 0xFE	; 254
    27a6:	20 81       	ld	r18, Z
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	fc 01       	movw	r30, r24
    27b0:	e6 56       	subi	r30, 0x66	; 102
    27b2:	fe 4f       	sbci	r31, 0xFE	; 254
    27b4:	80 81       	ld	r24, Z
    27b6:	86 95       	lsr	r24
    27b8:	86 95       	lsr	r24
    27ba:	98 2f       	mov	r25, r24
    27bc:	91 70       	andi	r25, 0x01	; 1
    27be:	86 2f       	mov	r24, r22
    27c0:	62 2f       	mov	r22, r18
    27c2:	49 2f       	mov	r20, r25
    27c4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegD_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegD_Pin, ((SSegment_Au8Nums[Copy_u8Num] >> 3) & BIT_MASK));
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	48 2f       	mov	r20, r24
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	ca 01       	movw	r24, r20
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	9c 01       	movw	r18, r24
    27d6:	22 0f       	add	r18, r18
    27d8:	33 1f       	adc	r19, r19
    27da:	22 0f       	add	r18, r18
    27dc:	33 1f       	adc	r19, r19
    27de:	22 0f       	add	r18, r18
    27e0:	33 1f       	adc	r19, r19
    27e2:	82 0f       	add	r24, r18
    27e4:	93 1f       	adc	r25, r19
    27e6:	84 0f       	add	r24, r20
    27e8:	95 1f       	adc	r25, r21
    27ea:	fc 01       	movw	r30, r24
    27ec:	e6 58       	subi	r30, 0x86	; 134
    27ee:	fe 4f       	sbci	r31, 0xFE	; 254
    27f0:	60 81       	ld	r22, Z
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	48 2f       	mov	r20, r24
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	ca 01       	movw	r24, r20
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	9c 01       	movw	r18, r24
    2800:	22 0f       	add	r18, r18
    2802:	33 1f       	adc	r19, r19
    2804:	22 0f       	add	r18, r18
    2806:	33 1f       	adc	r19, r19
    2808:	22 0f       	add	r18, r18
    280a:	33 1f       	adc	r19, r19
    280c:	82 0f       	add	r24, r18
    280e:	93 1f       	adc	r25, r19
    2810:	84 0f       	add	r24, r20
    2812:	95 1f       	adc	r25, r21
    2814:	fc 01       	movw	r30, r24
    2816:	e5 58       	subi	r30, 0x85	; 133
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	20 81       	ld	r18, Z
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	fc 01       	movw	r30, r24
    2824:	e6 56       	subi	r30, 0x66	; 102
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	80 81       	ld	r24, Z
    282a:	86 95       	lsr	r24
    282c:	86 95       	lsr	r24
    282e:	86 95       	lsr	r24
    2830:	98 2f       	mov	r25, r24
    2832:	91 70       	andi	r25, 0x01	; 1
    2834:	86 2f       	mov	r24, r22
    2836:	62 2f       	mov	r22, r18
    2838:	49 2f       	mov	r20, r25
    283a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegE_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegE_Pin, ((SSegment_Au8Nums[Copy_u8Num] >> 4) & BIT_MASK));
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	48 2f       	mov	r20, r24
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	ca 01       	movw	r24, r20
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	9c 01       	movw	r18, r24
    284c:	22 0f       	add	r18, r18
    284e:	33 1f       	adc	r19, r19
    2850:	22 0f       	add	r18, r18
    2852:	33 1f       	adc	r19, r19
    2854:	22 0f       	add	r18, r18
    2856:	33 1f       	adc	r19, r19
    2858:	82 0f       	add	r24, r18
    285a:	93 1f       	adc	r25, r19
    285c:	84 0f       	add	r24, r20
    285e:	95 1f       	adc	r25, r21
    2860:	fc 01       	movw	r30, r24
    2862:	e4 58       	subi	r30, 0x84	; 132
    2864:	fe 4f       	sbci	r31, 0xFE	; 254
    2866:	60 81       	ld	r22, Z
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	48 2f       	mov	r20, r24
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	ca 01       	movw	r24, r20
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	9c 01       	movw	r18, r24
    2876:	22 0f       	add	r18, r18
    2878:	33 1f       	adc	r19, r19
    287a:	22 0f       	add	r18, r18
    287c:	33 1f       	adc	r19, r19
    287e:	22 0f       	add	r18, r18
    2880:	33 1f       	adc	r19, r19
    2882:	82 0f       	add	r24, r18
    2884:	93 1f       	adc	r25, r19
    2886:	84 0f       	add	r24, r20
    2888:	95 1f       	adc	r25, r21
    288a:	fc 01       	movw	r30, r24
    288c:	e3 58       	subi	r30, 0x83	; 131
    288e:	fe 4f       	sbci	r31, 0xFE	; 254
    2890:	20 81       	ld	r18, Z
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	fc 01       	movw	r30, r24
    289a:	e6 56       	subi	r30, 0x66	; 102
    289c:	fe 4f       	sbci	r31, 0xFE	; 254
    289e:	80 81       	ld	r24, Z
    28a0:	82 95       	swap	r24
    28a2:	8f 70       	andi	r24, 0x0F	; 15
    28a4:	98 2f       	mov	r25, r24
    28a6:	91 70       	andi	r25, 0x01	; 1
    28a8:	86 2f       	mov	r24, r22
    28aa:	62 2f       	mov	r22, r18
    28ac:	49 2f       	mov	r20, r25
    28ae:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegF_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegF_Pin, ((SSegment_Au8Nums[Copy_u8Num] >> 5) & BIT_MASK));
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	48 2f       	mov	r20, r24
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	ca 01       	movw	r24, r20
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	9c 01       	movw	r18, r24
    28c0:	22 0f       	add	r18, r18
    28c2:	33 1f       	adc	r19, r19
    28c4:	22 0f       	add	r18, r18
    28c6:	33 1f       	adc	r19, r19
    28c8:	22 0f       	add	r18, r18
    28ca:	33 1f       	adc	r19, r19
    28cc:	82 0f       	add	r24, r18
    28ce:	93 1f       	adc	r25, r19
    28d0:	84 0f       	add	r24, r20
    28d2:	95 1f       	adc	r25, r21
    28d4:	fc 01       	movw	r30, r24
    28d6:	e2 58       	subi	r30, 0x82	; 130
    28d8:	fe 4f       	sbci	r31, 0xFE	; 254
    28da:	60 81       	ld	r22, Z
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	48 2f       	mov	r20, r24
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	ca 01       	movw	r24, r20
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	9c 01       	movw	r18, r24
    28ea:	22 0f       	add	r18, r18
    28ec:	33 1f       	adc	r19, r19
    28ee:	22 0f       	add	r18, r18
    28f0:	33 1f       	adc	r19, r19
    28f2:	22 0f       	add	r18, r18
    28f4:	33 1f       	adc	r19, r19
    28f6:	82 0f       	add	r24, r18
    28f8:	93 1f       	adc	r25, r19
    28fa:	84 0f       	add	r24, r20
    28fc:	95 1f       	adc	r25, r21
    28fe:	fc 01       	movw	r30, r24
    2900:	e1 58       	subi	r30, 0x81	; 129
    2902:	fe 4f       	sbci	r31, 0xFE	; 254
    2904:	20 81       	ld	r18, Z
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	88 2f       	mov	r24, r24
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	fc 01       	movw	r30, r24
    290e:	e6 56       	subi	r30, 0x66	; 102
    2910:	fe 4f       	sbci	r31, 0xFE	; 254
    2912:	80 81       	ld	r24, Z
    2914:	82 95       	swap	r24
    2916:	86 95       	lsr	r24
    2918:	87 70       	andi	r24, 0x07	; 7
    291a:	98 2f       	mov	r25, r24
    291c:	91 70       	andi	r25, 0x01	; 1
    291e:	86 2f       	mov	r24, r22
    2920:	62 2f       	mov	r22, r18
    2922:	49 2f       	mov	r20, r25
    2924:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegG_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegG_Pin, ((SSegment_Au8Nums[Copy_u8Num] >> 6) & BIT_MASK));
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	48 2f       	mov	r20, r24
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	ca 01       	movw	r24, r20
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	9c 01       	movw	r18, r24
    2936:	22 0f       	add	r18, r18
    2938:	33 1f       	adc	r19, r19
    293a:	22 0f       	add	r18, r18
    293c:	33 1f       	adc	r19, r19
    293e:	22 0f       	add	r18, r18
    2940:	33 1f       	adc	r19, r19
    2942:	82 0f       	add	r24, r18
    2944:	93 1f       	adc	r25, r19
    2946:	84 0f       	add	r24, r20
    2948:	95 1f       	adc	r25, r21
    294a:	fc 01       	movw	r30, r24
    294c:	e0 58       	subi	r30, 0x80	; 128
    294e:	fe 4f       	sbci	r31, 0xFE	; 254
    2950:	60 81       	ld	r22, Z
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	48 2f       	mov	r20, r24
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	ca 01       	movw	r24, r20
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	9c 01       	movw	r18, r24
    2960:	22 0f       	add	r18, r18
    2962:	33 1f       	adc	r19, r19
    2964:	22 0f       	add	r18, r18
    2966:	33 1f       	adc	r19, r19
    2968:	22 0f       	add	r18, r18
    296a:	33 1f       	adc	r19, r19
    296c:	82 0f       	add	r24, r18
    296e:	93 1f       	adc	r25, r19
    2970:	84 0f       	add	r24, r20
    2972:	95 1f       	adc	r25, r21
    2974:	fc 01       	movw	r30, r24
    2976:	ef 57       	subi	r30, 0x7F	; 127
    2978:	fe 4f       	sbci	r31, 0xFE	; 254
    297a:	20 81       	ld	r18, Z
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	fc 01       	movw	r30, r24
    2984:	e6 56       	subi	r30, 0x66	; 102
    2986:	fe 4f       	sbci	r31, 0xFE	; 254
    2988:	80 81       	ld	r24, Z
    298a:	82 95       	swap	r24
    298c:	86 95       	lsr	r24
    298e:	86 95       	lsr	r24
    2990:	83 70       	andi	r24, 0x03	; 3
    2992:	98 2f       	mov	r25, r24
    2994:	91 70       	andi	r25, 0x01	; 1
    2996:	86 2f       	mov	r24, r22
    2998:	62 2f       	mov	r22, r18
    299a:	49 2f       	mov	r20, r25
    299c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    29a0:	b6 c1       	rjmp	.+876    	; 0x2d0e <SSegment_enuDisplayNum+0x6e6>

			}
			else if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_ANODE){
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	48 2f       	mov	r20, r24
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	ca 01       	movw	r24, r20
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	9c 01       	movw	r18, r24
    29b0:	22 0f       	add	r18, r18
    29b2:	33 1f       	adc	r19, r19
    29b4:	22 0f       	add	r18, r18
    29b6:	33 1f       	adc	r19, r19
    29b8:	22 0f       	add	r18, r18
    29ba:	33 1f       	adc	r19, r19
    29bc:	82 0f       	add	r24, r18
    29be:	93 1f       	adc	r25, r19
    29c0:	84 0f       	add	r24, r20
    29c2:	95 1f       	adc	r25, r21
    29c4:	fc 01       	movw	r30, r24
    29c6:	ea 57       	subi	r30, 0x7A	; 122
    29c8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ca:	80 81       	ld	r24, Z
    29cc:	83 36       	cpi	r24, 0x63	; 99
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <SSegment_enuDisplayNum+0x3aa>
    29d0:	9e c1       	rjmp	.+828    	; 0x2d0e <SSegment_enuDisplayNum+0x6e6>

				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegA_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegA_Pin, ~((SSegment_Au8Nums[Copy_u8Num] >> 0) & BIT_MASK));
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	48 2f       	mov	r20, r24
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	ca 01       	movw	r24, r20
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	9c 01       	movw	r18, r24
    29e0:	22 0f       	add	r18, r18
    29e2:	33 1f       	adc	r19, r19
    29e4:	22 0f       	add	r18, r18
    29e6:	33 1f       	adc	r19, r19
    29e8:	22 0f       	add	r18, r18
    29ea:	33 1f       	adc	r19, r19
    29ec:	82 0f       	add	r24, r18
    29ee:	93 1f       	adc	r25, r19
    29f0:	84 0f       	add	r24, r20
    29f2:	95 1f       	adc	r25, r21
    29f4:	fc 01       	movw	r30, r24
    29f6:	ec 58       	subi	r30, 0x8C	; 140
    29f8:	fe 4f       	sbci	r31, 0xFE	; 254
    29fa:	60 81       	ld	r22, Z
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	48 2f       	mov	r20, r24
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	ca 01       	movw	r24, r20
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	9c 01       	movw	r18, r24
    2a0a:	22 0f       	add	r18, r18
    2a0c:	33 1f       	adc	r19, r19
    2a0e:	22 0f       	add	r18, r18
    2a10:	33 1f       	adc	r19, r19
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	82 0f       	add	r24, r18
    2a18:	93 1f       	adc	r25, r19
    2a1a:	84 0f       	add	r24, r20
    2a1c:	95 1f       	adc	r25, r21
    2a1e:	fc 01       	movw	r30, r24
    2a20:	eb 58       	subi	r30, 0x8B	; 139
    2a22:	fe 4f       	sbci	r31, 0xFE	; 254
    2a24:	20 81       	ld	r18, Z
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	88 2f       	mov	r24, r24
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e6 56       	subi	r30, 0x66	; 102
    2a30:	fe 4f       	sbci	r31, 0xFE	; 254
    2a32:	80 81       	ld	r24, Z
    2a34:	81 70       	andi	r24, 0x01	; 1
    2a36:	80 95       	com	r24
    2a38:	98 2f       	mov	r25, r24
    2a3a:	86 2f       	mov	r24, r22
    2a3c:	62 2f       	mov	r22, r18
    2a3e:	49 2f       	mov	r20, r25
    2a40:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegB_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegB_Pin, ~((SSegment_Au8Nums[Copy_u8Num] >> 1) & BIT_MASK));
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	48 2f       	mov	r20, r24
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	ca 01       	movw	r24, r20
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	9c 01       	movw	r18, r24
    2a52:	22 0f       	add	r18, r18
    2a54:	33 1f       	adc	r19, r19
    2a56:	22 0f       	add	r18, r18
    2a58:	33 1f       	adc	r19, r19
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	82 0f       	add	r24, r18
    2a60:	93 1f       	adc	r25, r19
    2a62:	84 0f       	add	r24, r20
    2a64:	95 1f       	adc	r25, r21
    2a66:	fc 01       	movw	r30, r24
    2a68:	ea 58       	subi	r30, 0x8A	; 138
    2a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6c:	60 81       	ld	r22, Z
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	48 2f       	mov	r20, r24
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	ca 01       	movw	r24, r20
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	9c 01       	movw	r18, r24
    2a7c:	22 0f       	add	r18, r18
    2a7e:	33 1f       	adc	r19, r19
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	22 0f       	add	r18, r18
    2a86:	33 1f       	adc	r19, r19
    2a88:	82 0f       	add	r24, r18
    2a8a:	93 1f       	adc	r25, r19
    2a8c:	84 0f       	add	r24, r20
    2a8e:	95 1f       	adc	r25, r21
    2a90:	fc 01       	movw	r30, r24
    2a92:	e9 58       	subi	r30, 0x89	; 137
    2a94:	fe 4f       	sbci	r31, 0xFE	; 254
    2a96:	20 81       	ld	r18, Z
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	e6 56       	subi	r30, 0x66	; 102
    2aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa4:	80 81       	ld	r24, Z
    2aa6:	86 95       	lsr	r24
    2aa8:	81 70       	andi	r24, 0x01	; 1
    2aaa:	80 95       	com	r24
    2aac:	98 2f       	mov	r25, r24
    2aae:	86 2f       	mov	r24, r22
    2ab0:	62 2f       	mov	r22, r18
    2ab2:	49 2f       	mov	r20, r25
    2ab4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegC_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegC_Pin, ~((SSegment_Au8Nums[Copy_u8Num] >> 2) & BIT_MASK));
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	48 2f       	mov	r20, r24
    2abc:	50 e0       	ldi	r21, 0x00	; 0
    2abe:	ca 01       	movw	r24, r20
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	9c 01       	movw	r18, r24
    2ac6:	22 0f       	add	r18, r18
    2ac8:	33 1f       	adc	r19, r19
    2aca:	22 0f       	add	r18, r18
    2acc:	33 1f       	adc	r19, r19
    2ace:	22 0f       	add	r18, r18
    2ad0:	33 1f       	adc	r19, r19
    2ad2:	82 0f       	add	r24, r18
    2ad4:	93 1f       	adc	r25, r19
    2ad6:	84 0f       	add	r24, r20
    2ad8:	95 1f       	adc	r25, r21
    2ada:	fc 01       	movw	r30, r24
    2adc:	e8 58       	subi	r30, 0x88	; 136
    2ade:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae0:	60 81       	ld	r22, Z
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	48 2f       	mov	r20, r24
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	ca 01       	movw	r24, r20
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	9c 01       	movw	r18, r24
    2af0:	22 0f       	add	r18, r18
    2af2:	33 1f       	adc	r19, r19
    2af4:	22 0f       	add	r18, r18
    2af6:	33 1f       	adc	r19, r19
    2af8:	22 0f       	add	r18, r18
    2afa:	33 1f       	adc	r19, r19
    2afc:	82 0f       	add	r24, r18
    2afe:	93 1f       	adc	r25, r19
    2b00:	84 0f       	add	r24, r20
    2b02:	95 1f       	adc	r25, r21
    2b04:	fc 01       	movw	r30, r24
    2b06:	e7 58       	subi	r30, 0x87	; 135
    2b08:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0a:	20 81       	ld	r18, Z
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	fc 01       	movw	r30, r24
    2b14:	e6 56       	subi	r30, 0x66	; 102
    2b16:	fe 4f       	sbci	r31, 0xFE	; 254
    2b18:	80 81       	ld	r24, Z
    2b1a:	86 95       	lsr	r24
    2b1c:	86 95       	lsr	r24
    2b1e:	81 70       	andi	r24, 0x01	; 1
    2b20:	80 95       	com	r24
    2b22:	98 2f       	mov	r25, r24
    2b24:	86 2f       	mov	r24, r22
    2b26:	62 2f       	mov	r22, r18
    2b28:	49 2f       	mov	r20, r25
    2b2a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegD_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegD_Pin, ~((SSegment_Au8Nums[Copy_u8Num] >> 3) & BIT_MASK));
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	48 2f       	mov	r20, r24
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	ca 01       	movw	r24, r20
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	9c 01       	movw	r18, r24
    2b3c:	22 0f       	add	r18, r18
    2b3e:	33 1f       	adc	r19, r19
    2b40:	22 0f       	add	r18, r18
    2b42:	33 1f       	adc	r19, r19
    2b44:	22 0f       	add	r18, r18
    2b46:	33 1f       	adc	r19, r19
    2b48:	82 0f       	add	r24, r18
    2b4a:	93 1f       	adc	r25, r19
    2b4c:	84 0f       	add	r24, r20
    2b4e:	95 1f       	adc	r25, r21
    2b50:	fc 01       	movw	r30, r24
    2b52:	e6 58       	subi	r30, 0x86	; 134
    2b54:	fe 4f       	sbci	r31, 0xFE	; 254
    2b56:	60 81       	ld	r22, Z
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	48 2f       	mov	r20, r24
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	ca 01       	movw	r24, r20
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	9c 01       	movw	r18, r24
    2b66:	22 0f       	add	r18, r18
    2b68:	33 1f       	adc	r19, r19
    2b6a:	22 0f       	add	r18, r18
    2b6c:	33 1f       	adc	r19, r19
    2b6e:	22 0f       	add	r18, r18
    2b70:	33 1f       	adc	r19, r19
    2b72:	82 0f       	add	r24, r18
    2b74:	93 1f       	adc	r25, r19
    2b76:	84 0f       	add	r24, r20
    2b78:	95 1f       	adc	r25, r21
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	e5 58       	subi	r30, 0x85	; 133
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	20 81       	ld	r18, Z
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	fc 01       	movw	r30, r24
    2b8a:	e6 56       	subi	r30, 0x66	; 102
    2b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8e:	80 81       	ld	r24, Z
    2b90:	86 95       	lsr	r24
    2b92:	86 95       	lsr	r24
    2b94:	86 95       	lsr	r24
    2b96:	81 70       	andi	r24, 0x01	; 1
    2b98:	80 95       	com	r24
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	86 2f       	mov	r24, r22
    2b9e:	62 2f       	mov	r22, r18
    2ba0:	49 2f       	mov	r20, r25
    2ba2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegE_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegE_Pin, ~((SSegment_Au8Nums[Copy_u8Num] >> 4) & BIT_MASK));
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	48 2f       	mov	r20, r24
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	ca 01       	movw	r24, r20
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	9c 01       	movw	r18, r24
    2bb4:	22 0f       	add	r18, r18
    2bb6:	33 1f       	adc	r19, r19
    2bb8:	22 0f       	add	r18, r18
    2bba:	33 1f       	adc	r19, r19
    2bbc:	22 0f       	add	r18, r18
    2bbe:	33 1f       	adc	r19, r19
    2bc0:	82 0f       	add	r24, r18
    2bc2:	93 1f       	adc	r25, r19
    2bc4:	84 0f       	add	r24, r20
    2bc6:	95 1f       	adc	r25, r21
    2bc8:	fc 01       	movw	r30, r24
    2bca:	e4 58       	subi	r30, 0x84	; 132
    2bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bce:	60 81       	ld	r22, Z
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	48 2f       	mov	r20, r24
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	ca 01       	movw	r24, r20
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	9c 01       	movw	r18, r24
    2bde:	22 0f       	add	r18, r18
    2be0:	33 1f       	adc	r19, r19
    2be2:	22 0f       	add	r18, r18
    2be4:	33 1f       	adc	r19, r19
    2be6:	22 0f       	add	r18, r18
    2be8:	33 1f       	adc	r19, r19
    2bea:	82 0f       	add	r24, r18
    2bec:	93 1f       	adc	r25, r19
    2bee:	84 0f       	add	r24, r20
    2bf0:	95 1f       	adc	r25, r21
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	e3 58       	subi	r30, 0x83	; 131
    2bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf8:	20 81       	ld	r18, Z
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	88 2f       	mov	r24, r24
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	fc 01       	movw	r30, r24
    2c02:	e6 56       	subi	r30, 0x66	; 102
    2c04:	fe 4f       	sbci	r31, 0xFE	; 254
    2c06:	80 81       	ld	r24, Z
    2c08:	82 95       	swap	r24
    2c0a:	8f 70       	andi	r24, 0x0F	; 15
    2c0c:	81 70       	andi	r24, 0x01	; 1
    2c0e:	80 95       	com	r24
    2c10:	98 2f       	mov	r25, r24
    2c12:	86 2f       	mov	r24, r22
    2c14:	62 2f       	mov	r22, r18
    2c16:	49 2f       	mov	r20, r25
    2c18:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegF_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegF_Pin, ~((SSegment_Au8Nums[Copy_u8Num] >> 5) & BIT_MASK));
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	48 2f       	mov	r20, r24
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	ca 01       	movw	r24, r20
    2c24:	88 0f       	add	r24, r24
    2c26:	99 1f       	adc	r25, r25
    2c28:	9c 01       	movw	r18, r24
    2c2a:	22 0f       	add	r18, r18
    2c2c:	33 1f       	adc	r19, r19
    2c2e:	22 0f       	add	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	22 0f       	add	r18, r18
    2c34:	33 1f       	adc	r19, r19
    2c36:	82 0f       	add	r24, r18
    2c38:	93 1f       	adc	r25, r19
    2c3a:	84 0f       	add	r24, r20
    2c3c:	95 1f       	adc	r25, r21
    2c3e:	fc 01       	movw	r30, r24
    2c40:	e2 58       	subi	r30, 0x82	; 130
    2c42:	fe 4f       	sbci	r31, 0xFE	; 254
    2c44:	60 81       	ld	r22, Z
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	48 2f       	mov	r20, r24
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	ca 01       	movw	r24, r20
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	9c 01       	movw	r18, r24
    2c54:	22 0f       	add	r18, r18
    2c56:	33 1f       	adc	r19, r19
    2c58:	22 0f       	add	r18, r18
    2c5a:	33 1f       	adc	r19, r19
    2c5c:	22 0f       	add	r18, r18
    2c5e:	33 1f       	adc	r19, r19
    2c60:	82 0f       	add	r24, r18
    2c62:	93 1f       	adc	r25, r19
    2c64:	84 0f       	add	r24, r20
    2c66:	95 1f       	adc	r25, r21
    2c68:	fc 01       	movw	r30, r24
    2c6a:	e1 58       	subi	r30, 0x81	; 129
    2c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6e:	20 81       	ld	r18, Z
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	88 2f       	mov	r24, r24
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	fc 01       	movw	r30, r24
    2c78:	e6 56       	subi	r30, 0x66	; 102
    2c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7c:	80 81       	ld	r24, Z
    2c7e:	82 95       	swap	r24
    2c80:	86 95       	lsr	r24
    2c82:	87 70       	andi	r24, 0x07	; 7
    2c84:	81 70       	andi	r24, 0x01	; 1
    2c86:	80 95       	com	r24
    2c88:	98 2f       	mov	r25, r24
    2c8a:	86 2f       	mov	r24, r22
    2c8c:	62 2f       	mov	r22, r18
    2c8e:	49 2f       	mov	r20, r25
    2c90:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegG_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegG_Pin, ~((SSegment_Au8Nums[Copy_u8Num] >> 6) & BIT_MASK));
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	48 2f       	mov	r20, r24
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	ca 01       	movw	r24, r20
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	9c 01       	movw	r18, r24
    2ca2:	22 0f       	add	r18, r18
    2ca4:	33 1f       	adc	r19, r19
    2ca6:	22 0f       	add	r18, r18
    2ca8:	33 1f       	adc	r19, r19
    2caa:	22 0f       	add	r18, r18
    2cac:	33 1f       	adc	r19, r19
    2cae:	82 0f       	add	r24, r18
    2cb0:	93 1f       	adc	r25, r19
    2cb2:	84 0f       	add	r24, r20
    2cb4:	95 1f       	adc	r25, r21
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	e0 58       	subi	r30, 0x80	; 128
    2cba:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbc:	60 81       	ld	r22, Z
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	48 2f       	mov	r20, r24
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	ca 01       	movw	r24, r20
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	9c 01       	movw	r18, r24
    2ccc:	22 0f       	add	r18, r18
    2cce:	33 1f       	adc	r19, r19
    2cd0:	22 0f       	add	r18, r18
    2cd2:	33 1f       	adc	r19, r19
    2cd4:	22 0f       	add	r18, r18
    2cd6:	33 1f       	adc	r19, r19
    2cd8:	82 0f       	add	r24, r18
    2cda:	93 1f       	adc	r25, r19
    2cdc:	84 0f       	add	r24, r20
    2cde:	95 1f       	adc	r25, r21
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	ef 57       	subi	r30, 0x7F	; 127
    2ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce6:	20 81       	ld	r18, Z
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	88 2f       	mov	r24, r24
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	fc 01       	movw	r30, r24
    2cf0:	e6 56       	subi	r30, 0x66	; 102
    2cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf4:	80 81       	ld	r24, Z
    2cf6:	82 95       	swap	r24
    2cf8:	86 95       	lsr	r24
    2cfa:	86 95       	lsr	r24
    2cfc:	83 70       	andi	r24, 0x03	; 3
    2cfe:	81 70       	andi	r24, 0x01	; 1
    2d00:	80 95       	com	r24
    2d02:	98 2f       	mov	r25, r24
    2d04:	86 2f       	mov	r24, r22
    2d06:	62 2f       	mov	r22, r18
    2d08:	49 2f       	mov	r20, r25
    2d0a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>

			}
			Local_enuErrorState = ES_OK;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <SSegment_enuDisplayNum+0x6f0>
		}
		else{
			Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    2d14:	85 e0       	ldi	r24, 0x05	; 5
    2d16:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <SSegment_enuEnableCMN>:

ES_t SSegment_enuEnableCMN(u8 Copy_u8SegID){
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <SSegment_enuEnableCMN+0x6>
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2d32:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < NUM_SEV_SEGMENTS){
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	82 30       	cpi	r24, 0x02	; 2
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <SSegment_enuEnableCMN+0x16>
    2d3a:	c0 c0       	rjmp	.+384    	; 0x2ebc <SSegment_enuEnableCMN+0x196>
		if(SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Port != NOT_CONNECTED && SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Pin != NOT_CONNECTED){
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	48 2f       	mov	r20, r24
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	ca 01       	movw	r24, r20
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	9c 01       	movw	r18, r24
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	22 0f       	add	r18, r18
    2d54:	33 1f       	adc	r19, r19
    2d56:	82 0f       	add	r24, r18
    2d58:	93 1f       	adc	r25, r19
    2d5a:	84 0f       	add	r24, r20
    2d5c:	95 1f       	adc	r25, r21
    2d5e:	fc 01       	movw	r30, r24
    2d60:	ee 57       	subi	r30, 0x7E	; 126
    2d62:	fe 4f       	sbci	r31, 0xFE	; 254
    2d64:	80 81       	ld	r24, Z
    2d66:	81 32       	cpi	r24, 0x21	; 33
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <SSegment_enuEnableCMN+0x46>
    2d6a:	aa c0       	rjmp	.+340    	; 0x2ec0 <SSegment_enuEnableCMN+0x19a>
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	48 2f       	mov	r20, r24
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	ca 01       	movw	r24, r20
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	9c 01       	movw	r18, r24
    2d7a:	22 0f       	add	r18, r18
    2d7c:	33 1f       	adc	r19, r19
    2d7e:	22 0f       	add	r18, r18
    2d80:	33 1f       	adc	r19, r19
    2d82:	22 0f       	add	r18, r18
    2d84:	33 1f       	adc	r19, r19
    2d86:	82 0f       	add	r24, r18
    2d88:	93 1f       	adc	r25, r19
    2d8a:	84 0f       	add	r24, r20
    2d8c:	95 1f       	adc	r25, r21
    2d8e:	fc 01       	movw	r30, r24
    2d90:	ed 57       	subi	r30, 0x7D	; 125
    2d92:	fe 4f       	sbci	r31, 0xFE	; 254
    2d94:	80 81       	ld	r24, Z
    2d96:	81 32       	cpi	r24, 0x21	; 33
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <SSegment_enuEnableCMN+0x76>
    2d9a:	92 c0       	rjmp	.+292    	; 0x2ec0 <SSegment_enuEnableCMN+0x19a>
			if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_CATHODE){
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	48 2f       	mov	r20, r24
    2da0:	50 e0       	ldi	r21, 0x00	; 0
    2da2:	ca 01       	movw	r24, r20
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	9c 01       	movw	r18, r24
    2daa:	22 0f       	add	r18, r18
    2dac:	33 1f       	adc	r19, r19
    2dae:	22 0f       	add	r18, r18
    2db0:	33 1f       	adc	r19, r19
    2db2:	22 0f       	add	r18, r18
    2db4:	33 1f       	adc	r19, r19
    2db6:	82 0f       	add	r24, r18
    2db8:	93 1f       	adc	r25, r19
    2dba:	84 0f       	add	r24, r20
    2dbc:	95 1f       	adc	r25, r21
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	ea 57       	subi	r30, 0x7A	; 122
    2dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc4:	80 81       	ld	r24, Z
    2dc6:	84 36       	cpi	r24, 0x64	; 100
    2dc8:	81 f5       	brne	.+96     	; 0x2e2a <SSegment_enuEnableCMN+0x104>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Port, SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Pin, DIO_u8LOW);
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	48 2f       	mov	r20, r24
    2dce:	50 e0       	ldi	r21, 0x00	; 0
    2dd0:	ca 01       	movw	r24, r20
    2dd2:	88 0f       	add	r24, r24
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	9c 01       	movw	r18, r24
    2dd8:	22 0f       	add	r18, r18
    2dda:	33 1f       	adc	r19, r19
    2ddc:	22 0f       	add	r18, r18
    2dde:	33 1f       	adc	r19, r19
    2de0:	22 0f       	add	r18, r18
    2de2:	33 1f       	adc	r19, r19
    2de4:	82 0f       	add	r24, r18
    2de6:	93 1f       	adc	r25, r19
    2de8:	84 0f       	add	r24, r20
    2dea:	95 1f       	adc	r25, r21
    2dec:	fc 01       	movw	r30, r24
    2dee:	ee 57       	subi	r30, 0x7E	; 126
    2df0:	fe 4f       	sbci	r31, 0xFE	; 254
    2df2:	60 81       	ld	r22, Z
    2df4:	8a 81       	ldd	r24, Y+2	; 0x02
    2df6:	48 2f       	mov	r20, r24
    2df8:	50 e0       	ldi	r21, 0x00	; 0
    2dfa:	ca 01       	movw	r24, r20
    2dfc:	88 0f       	add	r24, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	9c 01       	movw	r18, r24
    2e02:	22 0f       	add	r18, r18
    2e04:	33 1f       	adc	r19, r19
    2e06:	22 0f       	add	r18, r18
    2e08:	33 1f       	adc	r19, r19
    2e0a:	22 0f       	add	r18, r18
    2e0c:	33 1f       	adc	r19, r19
    2e0e:	82 0f       	add	r24, r18
    2e10:	93 1f       	adc	r25, r19
    2e12:	84 0f       	add	r24, r20
    2e14:	95 1f       	adc	r25, r21
    2e16:	fc 01       	movw	r30, r24
    2e18:	ed 57       	subi	r30, 0x7D	; 125
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	90 81       	ld	r25, Z
    2e1e:	86 2f       	mov	r24, r22
    2e20:	69 2f       	mov	r22, r25
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    2e28:	46 c0       	rjmp	.+140    	; 0x2eb6 <SSegment_enuEnableCMN+0x190>

			}
			else if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_ANODE){
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	48 2f       	mov	r20, r24
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	ca 01       	movw	r24, r20
    2e32:	88 0f       	add	r24, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	9c 01       	movw	r18, r24
    2e38:	22 0f       	add	r18, r18
    2e3a:	33 1f       	adc	r19, r19
    2e3c:	22 0f       	add	r18, r18
    2e3e:	33 1f       	adc	r19, r19
    2e40:	22 0f       	add	r18, r18
    2e42:	33 1f       	adc	r19, r19
    2e44:	82 0f       	add	r24, r18
    2e46:	93 1f       	adc	r25, r19
    2e48:	84 0f       	add	r24, r20
    2e4a:	95 1f       	adc	r25, r21
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	ea 57       	subi	r30, 0x7A	; 122
    2e50:	fe 4f       	sbci	r31, 0xFE	; 254
    2e52:	80 81       	ld	r24, Z
    2e54:	83 36       	cpi	r24, 0x63	; 99
    2e56:	79 f5       	brne	.+94     	; 0x2eb6 <SSegment_enuEnableCMN+0x190>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Port, SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Pin, DIO_u8HIGH);
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	48 2f       	mov	r20, r24
    2e5c:	50 e0       	ldi	r21, 0x00	; 0
    2e5e:	ca 01       	movw	r24, r20
    2e60:	88 0f       	add	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	9c 01       	movw	r18, r24
    2e66:	22 0f       	add	r18, r18
    2e68:	33 1f       	adc	r19, r19
    2e6a:	22 0f       	add	r18, r18
    2e6c:	33 1f       	adc	r19, r19
    2e6e:	22 0f       	add	r18, r18
    2e70:	33 1f       	adc	r19, r19
    2e72:	82 0f       	add	r24, r18
    2e74:	93 1f       	adc	r25, r19
    2e76:	84 0f       	add	r24, r20
    2e78:	95 1f       	adc	r25, r21
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	ee 57       	subi	r30, 0x7E	; 126
    2e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e80:	60 81       	ld	r22, Z
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	48 2f       	mov	r20, r24
    2e86:	50 e0       	ldi	r21, 0x00	; 0
    2e88:	ca 01       	movw	r24, r20
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	9c 01       	movw	r18, r24
    2e90:	22 0f       	add	r18, r18
    2e92:	33 1f       	adc	r19, r19
    2e94:	22 0f       	add	r18, r18
    2e96:	33 1f       	adc	r19, r19
    2e98:	22 0f       	add	r18, r18
    2e9a:	33 1f       	adc	r19, r19
    2e9c:	82 0f       	add	r24, r18
    2e9e:	93 1f       	adc	r25, r19
    2ea0:	84 0f       	add	r24, r20
    2ea2:	95 1f       	adc	r25, r21
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	ed 57       	subi	r30, 0x7D	; 125
    2ea8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eaa:	90 81       	ld	r25, Z
    2eac:	86 2f       	mov	r24, r22
    2eae:	69 2f       	mov	r22, r25
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
			}
			Local_enuErrorState = ES_OK;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	89 83       	std	Y+1, r24	; 0x01
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <SSegment_enuEnableCMN+0x19a>
		}
	}
	else{
		Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    2ebc:	85 e0       	ldi	r24, 0x05	; 5
    2ebe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <SSegment_enuDisableCMN>:


ES_t SSegment_enuDisableCMN( u8 Copy_u8SegID){
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <SSegment_enuDisableCMN+0x6>
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2ed8:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8SegID <= NUM_SEV_SEGMENTS){
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	83 30       	cpi	r24, 0x03	; 3
    2ede:	08 f0       	brcs	.+2      	; 0x2ee2 <SSegment_enuDisableCMN+0x16>
    2ee0:	c0 c0       	rjmp	.+384    	; 0x3062 <SSegment_enuDisableCMN+0x196>
			if(SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Port != NOT_CONNECTED && SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Pin != NOT_CONNECTED){
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	48 2f       	mov	r20, r24
    2ee6:	50 e0       	ldi	r21, 0x00	; 0
    2ee8:	ca 01       	movw	r24, r20
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	9c 01       	movw	r18, r24
    2ef0:	22 0f       	add	r18, r18
    2ef2:	33 1f       	adc	r19, r19
    2ef4:	22 0f       	add	r18, r18
    2ef6:	33 1f       	adc	r19, r19
    2ef8:	22 0f       	add	r18, r18
    2efa:	33 1f       	adc	r19, r19
    2efc:	82 0f       	add	r24, r18
    2efe:	93 1f       	adc	r25, r19
    2f00:	84 0f       	add	r24, r20
    2f02:	95 1f       	adc	r25, r21
    2f04:	fc 01       	movw	r30, r24
    2f06:	ee 57       	subi	r30, 0x7E	; 126
    2f08:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0a:	80 81       	ld	r24, Z
    2f0c:	81 32       	cpi	r24, 0x21	; 33
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <SSegment_enuDisableCMN+0x46>
    2f10:	aa c0       	rjmp	.+340    	; 0x3066 <SSegment_enuDisableCMN+0x19a>
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	48 2f       	mov	r20, r24
    2f16:	50 e0       	ldi	r21, 0x00	; 0
    2f18:	ca 01       	movw	r24, r20
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	9c 01       	movw	r18, r24
    2f20:	22 0f       	add	r18, r18
    2f22:	33 1f       	adc	r19, r19
    2f24:	22 0f       	add	r18, r18
    2f26:	33 1f       	adc	r19, r19
    2f28:	22 0f       	add	r18, r18
    2f2a:	33 1f       	adc	r19, r19
    2f2c:	82 0f       	add	r24, r18
    2f2e:	93 1f       	adc	r25, r19
    2f30:	84 0f       	add	r24, r20
    2f32:	95 1f       	adc	r25, r21
    2f34:	fc 01       	movw	r30, r24
    2f36:	ed 57       	subi	r30, 0x7D	; 125
    2f38:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3a:	80 81       	ld	r24, Z
    2f3c:	81 32       	cpi	r24, 0x21	; 33
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <SSegment_enuDisableCMN+0x76>
    2f40:	92 c0       	rjmp	.+292    	; 0x3066 <SSegment_enuDisableCMN+0x19a>
				if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_CATHODE){
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	48 2f       	mov	r20, r24
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	ca 01       	movw	r24, r20
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	9c 01       	movw	r18, r24
    2f50:	22 0f       	add	r18, r18
    2f52:	33 1f       	adc	r19, r19
    2f54:	22 0f       	add	r18, r18
    2f56:	33 1f       	adc	r19, r19
    2f58:	22 0f       	add	r18, r18
    2f5a:	33 1f       	adc	r19, r19
    2f5c:	82 0f       	add	r24, r18
    2f5e:	93 1f       	adc	r25, r19
    2f60:	84 0f       	add	r24, r20
    2f62:	95 1f       	adc	r25, r21
    2f64:	fc 01       	movw	r30, r24
    2f66:	ea 57       	subi	r30, 0x7A	; 122
    2f68:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6a:	80 81       	ld	r24, Z
    2f6c:	84 36       	cpi	r24, 0x64	; 100
    2f6e:	81 f5       	brne	.+96     	; 0x2fd0 <SSegment_enuDisableCMN+0x104>
					DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Port, SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Pin, DIO_u8HIGH);
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	48 2f       	mov	r20, r24
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	ca 01       	movw	r24, r20
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	9c 01       	movw	r18, r24
    2f7e:	22 0f       	add	r18, r18
    2f80:	33 1f       	adc	r19, r19
    2f82:	22 0f       	add	r18, r18
    2f84:	33 1f       	adc	r19, r19
    2f86:	22 0f       	add	r18, r18
    2f88:	33 1f       	adc	r19, r19
    2f8a:	82 0f       	add	r24, r18
    2f8c:	93 1f       	adc	r25, r19
    2f8e:	84 0f       	add	r24, r20
    2f90:	95 1f       	adc	r25, r21
    2f92:	fc 01       	movw	r30, r24
    2f94:	ee 57       	subi	r30, 0x7E	; 126
    2f96:	fe 4f       	sbci	r31, 0xFE	; 254
    2f98:	60 81       	ld	r22, Z
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	48 2f       	mov	r20, r24
    2f9e:	50 e0       	ldi	r21, 0x00	; 0
    2fa0:	ca 01       	movw	r24, r20
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	9c 01       	movw	r18, r24
    2fa8:	22 0f       	add	r18, r18
    2faa:	33 1f       	adc	r19, r19
    2fac:	22 0f       	add	r18, r18
    2fae:	33 1f       	adc	r19, r19
    2fb0:	22 0f       	add	r18, r18
    2fb2:	33 1f       	adc	r19, r19
    2fb4:	82 0f       	add	r24, r18
    2fb6:	93 1f       	adc	r25, r19
    2fb8:	84 0f       	add	r24, r20
    2fba:	95 1f       	adc	r25, r21
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	ed 57       	subi	r30, 0x7D	; 125
    2fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc2:	90 81       	ld	r25, Z
    2fc4:	86 2f       	mov	r24, r22
    2fc6:	69 2f       	mov	r22, r25
    2fc8:	41 e0       	ldi	r20, 0x01	; 1
    2fca:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    2fce:	46 c0       	rjmp	.+140    	; 0x305c <SSegment_enuDisableCMN+0x190>

				}
				else if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_ANODE){
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	48 2f       	mov	r20, r24
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	ca 01       	movw	r24, r20
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	9c 01       	movw	r18, r24
    2fde:	22 0f       	add	r18, r18
    2fe0:	33 1f       	adc	r19, r19
    2fe2:	22 0f       	add	r18, r18
    2fe4:	33 1f       	adc	r19, r19
    2fe6:	22 0f       	add	r18, r18
    2fe8:	33 1f       	adc	r19, r19
    2fea:	82 0f       	add	r24, r18
    2fec:	93 1f       	adc	r25, r19
    2fee:	84 0f       	add	r24, r20
    2ff0:	95 1f       	adc	r25, r21
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	ea 57       	subi	r30, 0x7A	; 122
    2ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff8:	80 81       	ld	r24, Z
    2ffa:	83 36       	cpi	r24, 0x63	; 99
    2ffc:	79 f5       	brne	.+94     	; 0x305c <SSegment_enuDisableCMN+0x190>
					DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Port, SSegment_Astr7SegConfig[Copy_u8SegID].Cmn_Pin, DIO_u8LOW);
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	48 2f       	mov	r20, r24
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	ca 01       	movw	r24, r20
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	9c 01       	movw	r18, r24
    300c:	22 0f       	add	r18, r18
    300e:	33 1f       	adc	r19, r19
    3010:	22 0f       	add	r18, r18
    3012:	33 1f       	adc	r19, r19
    3014:	22 0f       	add	r18, r18
    3016:	33 1f       	adc	r19, r19
    3018:	82 0f       	add	r24, r18
    301a:	93 1f       	adc	r25, r19
    301c:	84 0f       	add	r24, r20
    301e:	95 1f       	adc	r25, r21
    3020:	fc 01       	movw	r30, r24
    3022:	ee 57       	subi	r30, 0x7E	; 126
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	60 81       	ld	r22, Z
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	48 2f       	mov	r20, r24
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	ca 01       	movw	r24, r20
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	9c 01       	movw	r18, r24
    3036:	22 0f       	add	r18, r18
    3038:	33 1f       	adc	r19, r19
    303a:	22 0f       	add	r18, r18
    303c:	33 1f       	adc	r19, r19
    303e:	22 0f       	add	r18, r18
    3040:	33 1f       	adc	r19, r19
    3042:	82 0f       	add	r24, r18
    3044:	93 1f       	adc	r25, r19
    3046:	84 0f       	add	r24, r20
    3048:	95 1f       	adc	r25, r21
    304a:	fc 01       	movw	r30, r24
    304c:	ed 57       	subi	r30, 0x7D	; 125
    304e:	fe 4f       	sbci	r31, 0xFE	; 254
    3050:	90 81       	ld	r25, Z
    3052:	86 2f       	mov	r24, r22
    3054:	69 2f       	mov	r22, r25
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				}
				Local_enuErrorState = ES_OK;
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <SSegment_enuDisableCMN+0x19a>
			}
		}
		else{
			Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    3062:	85 e0       	ldi	r24, 0x05	; 5
    3064:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
    3066:	89 81       	ldd	r24, Y+1	; 0x01
}
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	08 95       	ret

00003072 <SSegment_enuEnableDot>:

ES_t SSegment_enuEnableDot(u8 Copy_u8SegID){
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	00 d0       	rcall	.+0      	; 0x3078 <SSegment_enuEnableDot+0x6>
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    307e:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8SegID <= NUM_SEV_SEGMENTS){
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	83 30       	cpi	r24, 0x03	; 3
    3084:	08 f0       	brcs	.+2      	; 0x3088 <SSegment_enuEnableDot+0x16>
    3086:	90 c0       	rjmp	.+288    	; 0x31a8 <SSegment_enuEnableDot+0x136>
				if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_CATHODE){
    3088:	8a 81       	ldd	r24, Y+2	; 0x02
    308a:	48 2f       	mov	r20, r24
    308c:	50 e0       	ldi	r21, 0x00	; 0
    308e:	ca 01       	movw	r24, r20
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	9c 01       	movw	r18, r24
    3096:	22 0f       	add	r18, r18
    3098:	33 1f       	adc	r19, r19
    309a:	22 0f       	add	r18, r18
    309c:	33 1f       	adc	r19, r19
    309e:	22 0f       	add	r18, r18
    30a0:	33 1f       	adc	r19, r19
    30a2:	82 0f       	add	r24, r18
    30a4:	93 1f       	adc	r25, r19
    30a6:	84 0f       	add	r24, r20
    30a8:	95 1f       	adc	r25, r21
    30aa:	fc 01       	movw	r30, r24
    30ac:	ea 57       	subi	r30, 0x7A	; 122
    30ae:	fe 4f       	sbci	r31, 0xFE	; 254
    30b0:	80 81       	ld	r24, Z
    30b2:	84 36       	cpi	r24, 0x64	; 100
    30b4:	81 f5       	brne	.+96     	; 0x3116 <SSegment_enuEnableDot+0xa4>
					DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].Dot_Port, SSegment_Astr7SegConfig[Copy_u8SegID].Dot_Pin, DIO_u8HIGH);
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	48 2f       	mov	r20, r24
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	ca 01       	movw	r24, r20
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	9c 01       	movw	r18, r24
    30c4:	22 0f       	add	r18, r18
    30c6:	33 1f       	adc	r19, r19
    30c8:	22 0f       	add	r18, r18
    30ca:	33 1f       	adc	r19, r19
    30cc:	22 0f       	add	r18, r18
    30ce:	33 1f       	adc	r19, r19
    30d0:	82 0f       	add	r24, r18
    30d2:	93 1f       	adc	r25, r19
    30d4:	84 0f       	add	r24, r20
    30d6:	95 1f       	adc	r25, r21
    30d8:	fc 01       	movw	r30, r24
    30da:	ec 57       	subi	r30, 0x7C	; 124
    30dc:	fe 4f       	sbci	r31, 0xFE	; 254
    30de:	60 81       	ld	r22, Z
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	48 2f       	mov	r20, r24
    30e4:	50 e0       	ldi	r21, 0x00	; 0
    30e6:	ca 01       	movw	r24, r20
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	9c 01       	movw	r18, r24
    30ee:	22 0f       	add	r18, r18
    30f0:	33 1f       	adc	r19, r19
    30f2:	22 0f       	add	r18, r18
    30f4:	33 1f       	adc	r19, r19
    30f6:	22 0f       	add	r18, r18
    30f8:	33 1f       	adc	r19, r19
    30fa:	82 0f       	add	r24, r18
    30fc:	93 1f       	adc	r25, r19
    30fe:	84 0f       	add	r24, r20
    3100:	95 1f       	adc	r25, r21
    3102:	fc 01       	movw	r30, r24
    3104:	eb 57       	subi	r30, 0x7B	; 123
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	90 81       	ld	r25, Z
    310a:	86 2f       	mov	r24, r22
    310c:	69 2f       	mov	r22, r25
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    3114:	46 c0       	rjmp	.+140    	; 0x31a2 <SSegment_enuEnableDot+0x130>
				}
				else if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_ANODE){
    3116:	8a 81       	ldd	r24, Y+2	; 0x02
    3118:	48 2f       	mov	r20, r24
    311a:	50 e0       	ldi	r21, 0x00	; 0
    311c:	ca 01       	movw	r24, r20
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	9c 01       	movw	r18, r24
    3124:	22 0f       	add	r18, r18
    3126:	33 1f       	adc	r19, r19
    3128:	22 0f       	add	r18, r18
    312a:	33 1f       	adc	r19, r19
    312c:	22 0f       	add	r18, r18
    312e:	33 1f       	adc	r19, r19
    3130:	82 0f       	add	r24, r18
    3132:	93 1f       	adc	r25, r19
    3134:	84 0f       	add	r24, r20
    3136:	95 1f       	adc	r25, r21
    3138:	fc 01       	movw	r30, r24
    313a:	ea 57       	subi	r30, 0x7A	; 122
    313c:	fe 4f       	sbci	r31, 0xFE	; 254
    313e:	80 81       	ld	r24, Z
    3140:	83 36       	cpi	r24, 0x63	; 99
    3142:	79 f5       	brne	.+94     	; 0x31a2 <SSegment_enuEnableDot+0x130>
					DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].Dot_Port, SSegment_Astr7SegConfig[Copy_u8SegID].Dot_Pin, DIO_u8LOW);
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	48 2f       	mov	r20, r24
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	ca 01       	movw	r24, r20
    314c:	88 0f       	add	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	9c 01       	movw	r18, r24
    3152:	22 0f       	add	r18, r18
    3154:	33 1f       	adc	r19, r19
    3156:	22 0f       	add	r18, r18
    3158:	33 1f       	adc	r19, r19
    315a:	22 0f       	add	r18, r18
    315c:	33 1f       	adc	r19, r19
    315e:	82 0f       	add	r24, r18
    3160:	93 1f       	adc	r25, r19
    3162:	84 0f       	add	r24, r20
    3164:	95 1f       	adc	r25, r21
    3166:	fc 01       	movw	r30, r24
    3168:	ec 57       	subi	r30, 0x7C	; 124
    316a:	fe 4f       	sbci	r31, 0xFE	; 254
    316c:	60 81       	ld	r22, Z
    316e:	8a 81       	ldd	r24, Y+2	; 0x02
    3170:	48 2f       	mov	r20, r24
    3172:	50 e0       	ldi	r21, 0x00	; 0
    3174:	ca 01       	movw	r24, r20
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	9c 01       	movw	r18, r24
    317c:	22 0f       	add	r18, r18
    317e:	33 1f       	adc	r19, r19
    3180:	22 0f       	add	r18, r18
    3182:	33 1f       	adc	r19, r19
    3184:	22 0f       	add	r18, r18
    3186:	33 1f       	adc	r19, r19
    3188:	82 0f       	add	r24, r18
    318a:	93 1f       	adc	r25, r19
    318c:	84 0f       	add	r24, r20
    318e:	95 1f       	adc	r25, r21
    3190:	fc 01       	movw	r30, r24
    3192:	eb 57       	subi	r30, 0x7B	; 123
    3194:	fe 4f       	sbci	r31, 0xFE	; 254
    3196:	90 81       	ld	r25, Z
    3198:	86 2f       	mov	r24, r22
    319a:	69 2f       	mov	r22, r25
    319c:	40 e0       	ldi	r20, 0x00	; 0
    319e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				}
				Local_enuErrorState = ES_OK;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	02 c0       	rjmp	.+4      	; 0x31ac <SSegment_enuEnableDot+0x13a>
			}
			else{
				Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    31a8:	85 e0       	ldi	r24, 0x05	; 5
    31aa:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorState;
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <SSegment_enuDisableDot>:

ES_t SSegment_enuDisableDot(u8 Copy_u8SegID){
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	00 d0       	rcall	.+0      	; 0x31be <SSegment_enuDisableDot+0x6>
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    31c4:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8SegID <= NUM_SEV_SEGMENTS){
    31c6:	8a 81       	ldd	r24, Y+2	; 0x02
    31c8:	83 30       	cpi	r24, 0x03	; 3
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <SSegment_enuDisableDot+0x16>
    31cc:	90 c0       	rjmp	.+288    	; 0x32ee <SSegment_enuDisableDot+0x136>
				if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_CATHODE){
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	48 2f       	mov	r20, r24
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	ca 01       	movw	r24, r20
    31d6:	88 0f       	add	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	9c 01       	movw	r18, r24
    31dc:	22 0f       	add	r18, r18
    31de:	33 1f       	adc	r19, r19
    31e0:	22 0f       	add	r18, r18
    31e2:	33 1f       	adc	r19, r19
    31e4:	22 0f       	add	r18, r18
    31e6:	33 1f       	adc	r19, r19
    31e8:	82 0f       	add	r24, r18
    31ea:	93 1f       	adc	r25, r19
    31ec:	84 0f       	add	r24, r20
    31ee:	95 1f       	adc	r25, r21
    31f0:	fc 01       	movw	r30, r24
    31f2:	ea 57       	subi	r30, 0x7A	; 122
    31f4:	fe 4f       	sbci	r31, 0xFE	; 254
    31f6:	80 81       	ld	r24, Z
    31f8:	84 36       	cpi	r24, 0x64	; 100
    31fa:	81 f5       	brne	.+96     	; 0x325c <SSegment_enuDisableDot+0xa4>
					DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].Dot_Port, SSegment_Astr7SegConfig[Copy_u8SegID].Dot_Pin, DIO_u8LOW);
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	48 2f       	mov	r20, r24
    3200:	50 e0       	ldi	r21, 0x00	; 0
    3202:	ca 01       	movw	r24, r20
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	9c 01       	movw	r18, r24
    320a:	22 0f       	add	r18, r18
    320c:	33 1f       	adc	r19, r19
    320e:	22 0f       	add	r18, r18
    3210:	33 1f       	adc	r19, r19
    3212:	22 0f       	add	r18, r18
    3214:	33 1f       	adc	r19, r19
    3216:	82 0f       	add	r24, r18
    3218:	93 1f       	adc	r25, r19
    321a:	84 0f       	add	r24, r20
    321c:	95 1f       	adc	r25, r21
    321e:	fc 01       	movw	r30, r24
    3220:	ec 57       	subi	r30, 0x7C	; 124
    3222:	fe 4f       	sbci	r31, 0xFE	; 254
    3224:	60 81       	ld	r22, Z
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	48 2f       	mov	r20, r24
    322a:	50 e0       	ldi	r21, 0x00	; 0
    322c:	ca 01       	movw	r24, r20
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	9c 01       	movw	r18, r24
    3234:	22 0f       	add	r18, r18
    3236:	33 1f       	adc	r19, r19
    3238:	22 0f       	add	r18, r18
    323a:	33 1f       	adc	r19, r19
    323c:	22 0f       	add	r18, r18
    323e:	33 1f       	adc	r19, r19
    3240:	82 0f       	add	r24, r18
    3242:	93 1f       	adc	r25, r19
    3244:	84 0f       	add	r24, r20
    3246:	95 1f       	adc	r25, r21
    3248:	fc 01       	movw	r30, r24
    324a:	eb 57       	subi	r30, 0x7B	; 123
    324c:	fe 4f       	sbci	r31, 0xFE	; 254
    324e:	90 81       	ld	r25, Z
    3250:	86 2f       	mov	r24, r22
    3252:	69 2f       	mov	r22, r25
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    325a:	46 c0       	rjmp	.+140    	; 0x32e8 <SSegment_enuDisableDot+0x130>
				}
				else if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_ANODE){
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	48 2f       	mov	r20, r24
    3260:	50 e0       	ldi	r21, 0x00	; 0
    3262:	ca 01       	movw	r24, r20
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	9c 01       	movw	r18, r24
    326a:	22 0f       	add	r18, r18
    326c:	33 1f       	adc	r19, r19
    326e:	22 0f       	add	r18, r18
    3270:	33 1f       	adc	r19, r19
    3272:	22 0f       	add	r18, r18
    3274:	33 1f       	adc	r19, r19
    3276:	82 0f       	add	r24, r18
    3278:	93 1f       	adc	r25, r19
    327a:	84 0f       	add	r24, r20
    327c:	95 1f       	adc	r25, r21
    327e:	fc 01       	movw	r30, r24
    3280:	ea 57       	subi	r30, 0x7A	; 122
    3282:	fe 4f       	sbci	r31, 0xFE	; 254
    3284:	80 81       	ld	r24, Z
    3286:	83 36       	cpi	r24, 0x63	; 99
    3288:	79 f5       	brne	.+94     	; 0x32e8 <SSegment_enuDisableDot+0x130>
					DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].Dot_Port, SSegment_Astr7SegConfig[Copy_u8SegID].Dot_Pin, DIO_u8HIGH);
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	48 2f       	mov	r20, r24
    328e:	50 e0       	ldi	r21, 0x00	; 0
    3290:	ca 01       	movw	r24, r20
    3292:	88 0f       	add	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	9c 01       	movw	r18, r24
    3298:	22 0f       	add	r18, r18
    329a:	33 1f       	adc	r19, r19
    329c:	22 0f       	add	r18, r18
    329e:	33 1f       	adc	r19, r19
    32a0:	22 0f       	add	r18, r18
    32a2:	33 1f       	adc	r19, r19
    32a4:	82 0f       	add	r24, r18
    32a6:	93 1f       	adc	r25, r19
    32a8:	84 0f       	add	r24, r20
    32aa:	95 1f       	adc	r25, r21
    32ac:	fc 01       	movw	r30, r24
    32ae:	ec 57       	subi	r30, 0x7C	; 124
    32b0:	fe 4f       	sbci	r31, 0xFE	; 254
    32b2:	60 81       	ld	r22, Z
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	48 2f       	mov	r20, r24
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	ca 01       	movw	r24, r20
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	9c 01       	movw	r18, r24
    32c2:	22 0f       	add	r18, r18
    32c4:	33 1f       	adc	r19, r19
    32c6:	22 0f       	add	r18, r18
    32c8:	33 1f       	adc	r19, r19
    32ca:	22 0f       	add	r18, r18
    32cc:	33 1f       	adc	r19, r19
    32ce:	82 0f       	add	r24, r18
    32d0:	93 1f       	adc	r25, r19
    32d2:	84 0f       	add	r24, r20
    32d4:	95 1f       	adc	r25, r21
    32d6:	fc 01       	movw	r30, r24
    32d8:	eb 57       	subi	r30, 0x7B	; 123
    32da:	fe 4f       	sbci	r31, 0xFE	; 254
    32dc:	90 81       	ld	r25, Z
    32de:	86 2f       	mov	r24, r22
    32e0:	69 2f       	mov	r22, r25
    32e2:	41 e0       	ldi	r20, 0x01	; 1
    32e4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				}
				Local_enuErrorState = ES_OK;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <SSegment_enuDisableDot+0x13a>
			}
			else{
				Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    32ee:	85 e0       	ldi	r24, 0x05	; 5
    32f0:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorState;
    32f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <SSegment_enuClearDislay>:

ES_t SSegment_enuClearDislay(u8 Copy_u8SegID){
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	00 d0       	rcall	.+0      	; 0x3304 <SSegment_enuClearDislay+0x6>
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    330a:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8SegID <= NUM_SEV_SEGMENTS){
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	83 30       	cpi	r24, 0x03	; 3
    3310:	08 f0       	brcs	.+2      	; 0x3314 <SSegment_enuClearDislay+0x16>
    3312:	c6 c2       	rjmp	.+1420   	; 0x38a0 <SSegment_enuClearDislay+0x5a2>
			if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_CATHODE){
    3314:	8a 81       	ldd	r24, Y+2	; 0x02
    3316:	48 2f       	mov	r20, r24
    3318:	50 e0       	ldi	r21, 0x00	; 0
    331a:	ca 01       	movw	r24, r20
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	9c 01       	movw	r18, r24
    3322:	22 0f       	add	r18, r18
    3324:	33 1f       	adc	r19, r19
    3326:	22 0f       	add	r18, r18
    3328:	33 1f       	adc	r19, r19
    332a:	22 0f       	add	r18, r18
    332c:	33 1f       	adc	r19, r19
    332e:	82 0f       	add	r24, r18
    3330:	93 1f       	adc	r25, r19
    3332:	84 0f       	add	r24, r20
    3334:	95 1f       	adc	r25, r21
    3336:	fc 01       	movw	r30, r24
    3338:	ea 57       	subi	r30, 0x7A	; 122
    333a:	fe 4f       	sbci	r31, 0xFE	; 254
    333c:	80 81       	ld	r24, Z
    333e:	84 36       	cpi	r24, 0x64	; 100
    3340:	09 f0       	breq	.+2      	; 0x3344 <SSegment_enuClearDislay+0x46>
    3342:	4a c1       	rjmp	.+660    	; 0x35d8 <SSegment_enuClearDislay+0x2da>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegA_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegA_Pin, DIO_u8LOW);
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	48 2f       	mov	r20, r24
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	ca 01       	movw	r24, r20
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	9c 01       	movw	r18, r24
    3352:	22 0f       	add	r18, r18
    3354:	33 1f       	adc	r19, r19
    3356:	22 0f       	add	r18, r18
    3358:	33 1f       	adc	r19, r19
    335a:	22 0f       	add	r18, r18
    335c:	33 1f       	adc	r19, r19
    335e:	82 0f       	add	r24, r18
    3360:	93 1f       	adc	r25, r19
    3362:	84 0f       	add	r24, r20
    3364:	95 1f       	adc	r25, r21
    3366:	fc 01       	movw	r30, r24
    3368:	ec 58       	subi	r30, 0x8C	; 140
    336a:	fe 4f       	sbci	r31, 0xFE	; 254
    336c:	60 81       	ld	r22, Z
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	48 2f       	mov	r20, r24
    3372:	50 e0       	ldi	r21, 0x00	; 0
    3374:	ca 01       	movw	r24, r20
    3376:	88 0f       	add	r24, r24
    3378:	99 1f       	adc	r25, r25
    337a:	9c 01       	movw	r18, r24
    337c:	22 0f       	add	r18, r18
    337e:	33 1f       	adc	r19, r19
    3380:	22 0f       	add	r18, r18
    3382:	33 1f       	adc	r19, r19
    3384:	22 0f       	add	r18, r18
    3386:	33 1f       	adc	r19, r19
    3388:	82 0f       	add	r24, r18
    338a:	93 1f       	adc	r25, r19
    338c:	84 0f       	add	r24, r20
    338e:	95 1f       	adc	r25, r21
    3390:	fc 01       	movw	r30, r24
    3392:	eb 58       	subi	r30, 0x8B	; 139
    3394:	fe 4f       	sbci	r31, 0xFE	; 254
    3396:	90 81       	ld	r25, Z
    3398:	86 2f       	mov	r24, r22
    339a:	69 2f       	mov	r22, r25
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegB_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegB_Pin, DIO_u8LOW);
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	48 2f       	mov	r20, r24
    33a6:	50 e0       	ldi	r21, 0x00	; 0
    33a8:	ca 01       	movw	r24, r20
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	9c 01       	movw	r18, r24
    33b0:	22 0f       	add	r18, r18
    33b2:	33 1f       	adc	r19, r19
    33b4:	22 0f       	add	r18, r18
    33b6:	33 1f       	adc	r19, r19
    33b8:	22 0f       	add	r18, r18
    33ba:	33 1f       	adc	r19, r19
    33bc:	82 0f       	add	r24, r18
    33be:	93 1f       	adc	r25, r19
    33c0:	84 0f       	add	r24, r20
    33c2:	95 1f       	adc	r25, r21
    33c4:	fc 01       	movw	r30, r24
    33c6:	ea 58       	subi	r30, 0x8A	; 138
    33c8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ca:	60 81       	ld	r22, Z
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	48 2f       	mov	r20, r24
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	ca 01       	movw	r24, r20
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	9c 01       	movw	r18, r24
    33da:	22 0f       	add	r18, r18
    33dc:	33 1f       	adc	r19, r19
    33de:	22 0f       	add	r18, r18
    33e0:	33 1f       	adc	r19, r19
    33e2:	22 0f       	add	r18, r18
    33e4:	33 1f       	adc	r19, r19
    33e6:	82 0f       	add	r24, r18
    33e8:	93 1f       	adc	r25, r19
    33ea:	84 0f       	add	r24, r20
    33ec:	95 1f       	adc	r25, r21
    33ee:	fc 01       	movw	r30, r24
    33f0:	e9 58       	subi	r30, 0x89	; 137
    33f2:	fe 4f       	sbci	r31, 0xFE	; 254
    33f4:	90 81       	ld	r25, Z
    33f6:	86 2f       	mov	r24, r22
    33f8:	69 2f       	mov	r22, r25
    33fa:	40 e0       	ldi	r20, 0x00	; 0
    33fc:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegC_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegC_Pin, DIO_u8LOW);
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	48 2f       	mov	r20, r24
    3404:	50 e0       	ldi	r21, 0x00	; 0
    3406:	ca 01       	movw	r24, r20
    3408:	88 0f       	add	r24, r24
    340a:	99 1f       	adc	r25, r25
    340c:	9c 01       	movw	r18, r24
    340e:	22 0f       	add	r18, r18
    3410:	33 1f       	adc	r19, r19
    3412:	22 0f       	add	r18, r18
    3414:	33 1f       	adc	r19, r19
    3416:	22 0f       	add	r18, r18
    3418:	33 1f       	adc	r19, r19
    341a:	82 0f       	add	r24, r18
    341c:	93 1f       	adc	r25, r19
    341e:	84 0f       	add	r24, r20
    3420:	95 1f       	adc	r25, r21
    3422:	fc 01       	movw	r30, r24
    3424:	e8 58       	subi	r30, 0x88	; 136
    3426:	fe 4f       	sbci	r31, 0xFE	; 254
    3428:	60 81       	ld	r22, Z
    342a:	8a 81       	ldd	r24, Y+2	; 0x02
    342c:	48 2f       	mov	r20, r24
    342e:	50 e0       	ldi	r21, 0x00	; 0
    3430:	ca 01       	movw	r24, r20
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	9c 01       	movw	r18, r24
    3438:	22 0f       	add	r18, r18
    343a:	33 1f       	adc	r19, r19
    343c:	22 0f       	add	r18, r18
    343e:	33 1f       	adc	r19, r19
    3440:	22 0f       	add	r18, r18
    3442:	33 1f       	adc	r19, r19
    3444:	82 0f       	add	r24, r18
    3446:	93 1f       	adc	r25, r19
    3448:	84 0f       	add	r24, r20
    344a:	95 1f       	adc	r25, r21
    344c:	fc 01       	movw	r30, r24
    344e:	e7 58       	subi	r30, 0x87	; 135
    3450:	fe 4f       	sbci	r31, 0xFE	; 254
    3452:	90 81       	ld	r25, Z
    3454:	86 2f       	mov	r24, r22
    3456:	69 2f       	mov	r22, r25
    3458:	40 e0       	ldi	r20, 0x00	; 0
    345a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegD_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegD_Pin, DIO_u8LOW);
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	48 2f       	mov	r20, r24
    3462:	50 e0       	ldi	r21, 0x00	; 0
    3464:	ca 01       	movw	r24, r20
    3466:	88 0f       	add	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	9c 01       	movw	r18, r24
    346c:	22 0f       	add	r18, r18
    346e:	33 1f       	adc	r19, r19
    3470:	22 0f       	add	r18, r18
    3472:	33 1f       	adc	r19, r19
    3474:	22 0f       	add	r18, r18
    3476:	33 1f       	adc	r19, r19
    3478:	82 0f       	add	r24, r18
    347a:	93 1f       	adc	r25, r19
    347c:	84 0f       	add	r24, r20
    347e:	95 1f       	adc	r25, r21
    3480:	fc 01       	movw	r30, r24
    3482:	e6 58       	subi	r30, 0x86	; 134
    3484:	fe 4f       	sbci	r31, 0xFE	; 254
    3486:	60 81       	ld	r22, Z
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	48 2f       	mov	r20, r24
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	ca 01       	movw	r24, r20
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	9c 01       	movw	r18, r24
    3496:	22 0f       	add	r18, r18
    3498:	33 1f       	adc	r19, r19
    349a:	22 0f       	add	r18, r18
    349c:	33 1f       	adc	r19, r19
    349e:	22 0f       	add	r18, r18
    34a0:	33 1f       	adc	r19, r19
    34a2:	82 0f       	add	r24, r18
    34a4:	93 1f       	adc	r25, r19
    34a6:	84 0f       	add	r24, r20
    34a8:	95 1f       	adc	r25, r21
    34aa:	fc 01       	movw	r30, r24
    34ac:	e5 58       	subi	r30, 0x85	; 133
    34ae:	fe 4f       	sbci	r31, 0xFE	; 254
    34b0:	90 81       	ld	r25, Z
    34b2:	86 2f       	mov	r24, r22
    34b4:	69 2f       	mov	r22, r25
    34b6:	40 e0       	ldi	r20, 0x00	; 0
    34b8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegE_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegE_Pin, DIO_u8LOW);
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	48 2f       	mov	r20, r24
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	ca 01       	movw	r24, r20
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	9c 01       	movw	r18, r24
    34ca:	22 0f       	add	r18, r18
    34cc:	33 1f       	adc	r19, r19
    34ce:	22 0f       	add	r18, r18
    34d0:	33 1f       	adc	r19, r19
    34d2:	22 0f       	add	r18, r18
    34d4:	33 1f       	adc	r19, r19
    34d6:	82 0f       	add	r24, r18
    34d8:	93 1f       	adc	r25, r19
    34da:	84 0f       	add	r24, r20
    34dc:	95 1f       	adc	r25, r21
    34de:	fc 01       	movw	r30, r24
    34e0:	e4 58       	subi	r30, 0x84	; 132
    34e2:	fe 4f       	sbci	r31, 0xFE	; 254
    34e4:	60 81       	ld	r22, Z
    34e6:	8a 81       	ldd	r24, Y+2	; 0x02
    34e8:	48 2f       	mov	r20, r24
    34ea:	50 e0       	ldi	r21, 0x00	; 0
    34ec:	ca 01       	movw	r24, r20
    34ee:	88 0f       	add	r24, r24
    34f0:	99 1f       	adc	r25, r25
    34f2:	9c 01       	movw	r18, r24
    34f4:	22 0f       	add	r18, r18
    34f6:	33 1f       	adc	r19, r19
    34f8:	22 0f       	add	r18, r18
    34fa:	33 1f       	adc	r19, r19
    34fc:	22 0f       	add	r18, r18
    34fe:	33 1f       	adc	r19, r19
    3500:	82 0f       	add	r24, r18
    3502:	93 1f       	adc	r25, r19
    3504:	84 0f       	add	r24, r20
    3506:	95 1f       	adc	r25, r21
    3508:	fc 01       	movw	r30, r24
    350a:	e3 58       	subi	r30, 0x83	; 131
    350c:	fe 4f       	sbci	r31, 0xFE	; 254
    350e:	90 81       	ld	r25, Z
    3510:	86 2f       	mov	r24, r22
    3512:	69 2f       	mov	r22, r25
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegF_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegF_Pin, DIO_u8LOW);
    351a:	8a 81       	ldd	r24, Y+2	; 0x02
    351c:	48 2f       	mov	r20, r24
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	ca 01       	movw	r24, r20
    3522:	88 0f       	add	r24, r24
    3524:	99 1f       	adc	r25, r25
    3526:	9c 01       	movw	r18, r24
    3528:	22 0f       	add	r18, r18
    352a:	33 1f       	adc	r19, r19
    352c:	22 0f       	add	r18, r18
    352e:	33 1f       	adc	r19, r19
    3530:	22 0f       	add	r18, r18
    3532:	33 1f       	adc	r19, r19
    3534:	82 0f       	add	r24, r18
    3536:	93 1f       	adc	r25, r19
    3538:	84 0f       	add	r24, r20
    353a:	95 1f       	adc	r25, r21
    353c:	fc 01       	movw	r30, r24
    353e:	e2 58       	subi	r30, 0x82	; 130
    3540:	fe 4f       	sbci	r31, 0xFE	; 254
    3542:	60 81       	ld	r22, Z
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
    3546:	48 2f       	mov	r20, r24
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	ca 01       	movw	r24, r20
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	9c 01       	movw	r18, r24
    3552:	22 0f       	add	r18, r18
    3554:	33 1f       	adc	r19, r19
    3556:	22 0f       	add	r18, r18
    3558:	33 1f       	adc	r19, r19
    355a:	22 0f       	add	r18, r18
    355c:	33 1f       	adc	r19, r19
    355e:	82 0f       	add	r24, r18
    3560:	93 1f       	adc	r25, r19
    3562:	84 0f       	add	r24, r20
    3564:	95 1f       	adc	r25, r21
    3566:	fc 01       	movw	r30, r24
    3568:	e1 58       	subi	r30, 0x81	; 129
    356a:	fe 4f       	sbci	r31, 0xFE	; 254
    356c:	90 81       	ld	r25, Z
    356e:	86 2f       	mov	r24, r22
    3570:	69 2f       	mov	r22, r25
    3572:	40 e0       	ldi	r20, 0x00	; 0
    3574:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegG_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegG_Pin, DIO_u8LOW);
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	48 2f       	mov	r20, r24
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	ca 01       	movw	r24, r20
    3580:	88 0f       	add	r24, r24
    3582:	99 1f       	adc	r25, r25
    3584:	9c 01       	movw	r18, r24
    3586:	22 0f       	add	r18, r18
    3588:	33 1f       	adc	r19, r19
    358a:	22 0f       	add	r18, r18
    358c:	33 1f       	adc	r19, r19
    358e:	22 0f       	add	r18, r18
    3590:	33 1f       	adc	r19, r19
    3592:	82 0f       	add	r24, r18
    3594:	93 1f       	adc	r25, r19
    3596:	84 0f       	add	r24, r20
    3598:	95 1f       	adc	r25, r21
    359a:	fc 01       	movw	r30, r24
    359c:	e0 58       	subi	r30, 0x80	; 128
    359e:	fe 4f       	sbci	r31, 0xFE	; 254
    35a0:	60 81       	ld	r22, Z
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	48 2f       	mov	r20, r24
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	ca 01       	movw	r24, r20
    35aa:	88 0f       	add	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	9c 01       	movw	r18, r24
    35b0:	22 0f       	add	r18, r18
    35b2:	33 1f       	adc	r19, r19
    35b4:	22 0f       	add	r18, r18
    35b6:	33 1f       	adc	r19, r19
    35b8:	22 0f       	add	r18, r18
    35ba:	33 1f       	adc	r19, r19
    35bc:	82 0f       	add	r24, r18
    35be:	93 1f       	adc	r25, r19
    35c0:	84 0f       	add	r24, r20
    35c2:	95 1f       	adc	r25, r21
    35c4:	fc 01       	movw	r30, r24
    35c6:	ef 57       	subi	r30, 0x7F	; 127
    35c8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ca:	90 81       	ld	r25, Z
    35cc:	86 2f       	mov	r24, r22
    35ce:	69 2f       	mov	r22, r25
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    35d6:	61 c1       	rjmp	.+706    	; 0x389a <SSegment_enuClearDislay+0x59c>
			}
			else if(SSegment_Astr7SegConfig[Copy_u8SegID].Seg_Type == COMMON_ANODE){
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	48 2f       	mov	r20, r24
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	ca 01       	movw	r24, r20
    35e0:	88 0f       	add	r24, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	9c 01       	movw	r18, r24
    35e6:	22 0f       	add	r18, r18
    35e8:	33 1f       	adc	r19, r19
    35ea:	22 0f       	add	r18, r18
    35ec:	33 1f       	adc	r19, r19
    35ee:	22 0f       	add	r18, r18
    35f0:	33 1f       	adc	r19, r19
    35f2:	82 0f       	add	r24, r18
    35f4:	93 1f       	adc	r25, r19
    35f6:	84 0f       	add	r24, r20
    35f8:	95 1f       	adc	r25, r21
    35fa:	fc 01       	movw	r30, r24
    35fc:	ea 57       	subi	r30, 0x7A	; 122
    35fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3600:	80 81       	ld	r24, Z
    3602:	83 36       	cpi	r24, 0x63	; 99
    3604:	09 f0       	breq	.+2      	; 0x3608 <SSegment_enuClearDislay+0x30a>
    3606:	49 c1       	rjmp	.+658    	; 0x389a <SSegment_enuClearDislay+0x59c>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegA_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegA_Pin, DIO_u8HIGH);
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	48 2f       	mov	r20, r24
    360c:	50 e0       	ldi	r21, 0x00	; 0
    360e:	ca 01       	movw	r24, r20
    3610:	88 0f       	add	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	9c 01       	movw	r18, r24
    3616:	22 0f       	add	r18, r18
    3618:	33 1f       	adc	r19, r19
    361a:	22 0f       	add	r18, r18
    361c:	33 1f       	adc	r19, r19
    361e:	22 0f       	add	r18, r18
    3620:	33 1f       	adc	r19, r19
    3622:	82 0f       	add	r24, r18
    3624:	93 1f       	adc	r25, r19
    3626:	84 0f       	add	r24, r20
    3628:	95 1f       	adc	r25, r21
    362a:	fc 01       	movw	r30, r24
    362c:	ec 58       	subi	r30, 0x8C	; 140
    362e:	fe 4f       	sbci	r31, 0xFE	; 254
    3630:	60 81       	ld	r22, Z
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	48 2f       	mov	r20, r24
    3636:	50 e0       	ldi	r21, 0x00	; 0
    3638:	ca 01       	movw	r24, r20
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	9c 01       	movw	r18, r24
    3640:	22 0f       	add	r18, r18
    3642:	33 1f       	adc	r19, r19
    3644:	22 0f       	add	r18, r18
    3646:	33 1f       	adc	r19, r19
    3648:	22 0f       	add	r18, r18
    364a:	33 1f       	adc	r19, r19
    364c:	82 0f       	add	r24, r18
    364e:	93 1f       	adc	r25, r19
    3650:	84 0f       	add	r24, r20
    3652:	95 1f       	adc	r25, r21
    3654:	fc 01       	movw	r30, r24
    3656:	eb 58       	subi	r30, 0x8B	; 139
    3658:	fe 4f       	sbci	r31, 0xFE	; 254
    365a:	90 81       	ld	r25, Z
    365c:	86 2f       	mov	r24, r22
    365e:	69 2f       	mov	r22, r25
    3660:	41 e0       	ldi	r20, 0x01	; 1
    3662:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegB_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegB_Pin, DIO_u8HIGH);
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	48 2f       	mov	r20, r24
    366a:	50 e0       	ldi	r21, 0x00	; 0
    366c:	ca 01       	movw	r24, r20
    366e:	88 0f       	add	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	9c 01       	movw	r18, r24
    3674:	22 0f       	add	r18, r18
    3676:	33 1f       	adc	r19, r19
    3678:	22 0f       	add	r18, r18
    367a:	33 1f       	adc	r19, r19
    367c:	22 0f       	add	r18, r18
    367e:	33 1f       	adc	r19, r19
    3680:	82 0f       	add	r24, r18
    3682:	93 1f       	adc	r25, r19
    3684:	84 0f       	add	r24, r20
    3686:	95 1f       	adc	r25, r21
    3688:	fc 01       	movw	r30, r24
    368a:	ea 58       	subi	r30, 0x8A	; 138
    368c:	fe 4f       	sbci	r31, 0xFE	; 254
    368e:	60 81       	ld	r22, Z
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	48 2f       	mov	r20, r24
    3694:	50 e0       	ldi	r21, 0x00	; 0
    3696:	ca 01       	movw	r24, r20
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	9c 01       	movw	r18, r24
    369e:	22 0f       	add	r18, r18
    36a0:	33 1f       	adc	r19, r19
    36a2:	22 0f       	add	r18, r18
    36a4:	33 1f       	adc	r19, r19
    36a6:	22 0f       	add	r18, r18
    36a8:	33 1f       	adc	r19, r19
    36aa:	82 0f       	add	r24, r18
    36ac:	93 1f       	adc	r25, r19
    36ae:	84 0f       	add	r24, r20
    36b0:	95 1f       	adc	r25, r21
    36b2:	fc 01       	movw	r30, r24
    36b4:	e9 58       	subi	r30, 0x89	; 137
    36b6:	fe 4f       	sbci	r31, 0xFE	; 254
    36b8:	90 81       	ld	r25, Z
    36ba:	86 2f       	mov	r24, r22
    36bc:	69 2f       	mov	r22, r25
    36be:	41 e0       	ldi	r20, 0x01	; 1
    36c0:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegC_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegC_Pin, DIO_u8HIGH);
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	48 2f       	mov	r20, r24
    36c8:	50 e0       	ldi	r21, 0x00	; 0
    36ca:	ca 01       	movw	r24, r20
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	9c 01       	movw	r18, r24
    36d2:	22 0f       	add	r18, r18
    36d4:	33 1f       	adc	r19, r19
    36d6:	22 0f       	add	r18, r18
    36d8:	33 1f       	adc	r19, r19
    36da:	22 0f       	add	r18, r18
    36dc:	33 1f       	adc	r19, r19
    36de:	82 0f       	add	r24, r18
    36e0:	93 1f       	adc	r25, r19
    36e2:	84 0f       	add	r24, r20
    36e4:	95 1f       	adc	r25, r21
    36e6:	fc 01       	movw	r30, r24
    36e8:	e8 58       	subi	r30, 0x88	; 136
    36ea:	fe 4f       	sbci	r31, 0xFE	; 254
    36ec:	60 81       	ld	r22, Z
    36ee:	8a 81       	ldd	r24, Y+2	; 0x02
    36f0:	48 2f       	mov	r20, r24
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	ca 01       	movw	r24, r20
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	9c 01       	movw	r18, r24
    36fc:	22 0f       	add	r18, r18
    36fe:	33 1f       	adc	r19, r19
    3700:	22 0f       	add	r18, r18
    3702:	33 1f       	adc	r19, r19
    3704:	22 0f       	add	r18, r18
    3706:	33 1f       	adc	r19, r19
    3708:	82 0f       	add	r24, r18
    370a:	93 1f       	adc	r25, r19
    370c:	84 0f       	add	r24, r20
    370e:	95 1f       	adc	r25, r21
    3710:	fc 01       	movw	r30, r24
    3712:	e7 58       	subi	r30, 0x87	; 135
    3714:	fe 4f       	sbci	r31, 0xFE	; 254
    3716:	90 81       	ld	r25, Z
    3718:	86 2f       	mov	r24, r22
    371a:	69 2f       	mov	r22, r25
    371c:	41 e0       	ldi	r20, 0x01	; 1
    371e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegD_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegD_Pin, DIO_u8HIGH);
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	48 2f       	mov	r20, r24
    3726:	50 e0       	ldi	r21, 0x00	; 0
    3728:	ca 01       	movw	r24, r20
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	9c 01       	movw	r18, r24
    3730:	22 0f       	add	r18, r18
    3732:	33 1f       	adc	r19, r19
    3734:	22 0f       	add	r18, r18
    3736:	33 1f       	adc	r19, r19
    3738:	22 0f       	add	r18, r18
    373a:	33 1f       	adc	r19, r19
    373c:	82 0f       	add	r24, r18
    373e:	93 1f       	adc	r25, r19
    3740:	84 0f       	add	r24, r20
    3742:	95 1f       	adc	r25, r21
    3744:	fc 01       	movw	r30, r24
    3746:	e6 58       	subi	r30, 0x86	; 134
    3748:	fe 4f       	sbci	r31, 0xFE	; 254
    374a:	60 81       	ld	r22, Z
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	48 2f       	mov	r20, r24
    3750:	50 e0       	ldi	r21, 0x00	; 0
    3752:	ca 01       	movw	r24, r20
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	9c 01       	movw	r18, r24
    375a:	22 0f       	add	r18, r18
    375c:	33 1f       	adc	r19, r19
    375e:	22 0f       	add	r18, r18
    3760:	33 1f       	adc	r19, r19
    3762:	22 0f       	add	r18, r18
    3764:	33 1f       	adc	r19, r19
    3766:	82 0f       	add	r24, r18
    3768:	93 1f       	adc	r25, r19
    376a:	84 0f       	add	r24, r20
    376c:	95 1f       	adc	r25, r21
    376e:	fc 01       	movw	r30, r24
    3770:	e5 58       	subi	r30, 0x85	; 133
    3772:	fe 4f       	sbci	r31, 0xFE	; 254
    3774:	90 81       	ld	r25, Z
    3776:	86 2f       	mov	r24, r22
    3778:	69 2f       	mov	r22, r25
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegE_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegE_Pin, DIO_u8HIGH);
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	48 2f       	mov	r20, r24
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	ca 01       	movw	r24, r20
    3788:	88 0f       	add	r24, r24
    378a:	99 1f       	adc	r25, r25
    378c:	9c 01       	movw	r18, r24
    378e:	22 0f       	add	r18, r18
    3790:	33 1f       	adc	r19, r19
    3792:	22 0f       	add	r18, r18
    3794:	33 1f       	adc	r19, r19
    3796:	22 0f       	add	r18, r18
    3798:	33 1f       	adc	r19, r19
    379a:	82 0f       	add	r24, r18
    379c:	93 1f       	adc	r25, r19
    379e:	84 0f       	add	r24, r20
    37a0:	95 1f       	adc	r25, r21
    37a2:	fc 01       	movw	r30, r24
    37a4:	e4 58       	subi	r30, 0x84	; 132
    37a6:	fe 4f       	sbci	r31, 0xFE	; 254
    37a8:	60 81       	ld	r22, Z
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	48 2f       	mov	r20, r24
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	ca 01       	movw	r24, r20
    37b2:	88 0f       	add	r24, r24
    37b4:	99 1f       	adc	r25, r25
    37b6:	9c 01       	movw	r18, r24
    37b8:	22 0f       	add	r18, r18
    37ba:	33 1f       	adc	r19, r19
    37bc:	22 0f       	add	r18, r18
    37be:	33 1f       	adc	r19, r19
    37c0:	22 0f       	add	r18, r18
    37c2:	33 1f       	adc	r19, r19
    37c4:	82 0f       	add	r24, r18
    37c6:	93 1f       	adc	r25, r19
    37c8:	84 0f       	add	r24, r20
    37ca:	95 1f       	adc	r25, r21
    37cc:	fc 01       	movw	r30, r24
    37ce:	e3 58       	subi	r30, 0x83	; 131
    37d0:	fe 4f       	sbci	r31, 0xFE	; 254
    37d2:	90 81       	ld	r25, Z
    37d4:	86 2f       	mov	r24, r22
    37d6:	69 2f       	mov	r22, r25
    37d8:	41 e0       	ldi	r20, 0x01	; 1
    37da:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegF_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegF_Pin, DIO_u8HIGH);
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	48 2f       	mov	r20, r24
    37e2:	50 e0       	ldi	r21, 0x00	; 0
    37e4:	ca 01       	movw	r24, r20
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	9c 01       	movw	r18, r24
    37ec:	22 0f       	add	r18, r18
    37ee:	33 1f       	adc	r19, r19
    37f0:	22 0f       	add	r18, r18
    37f2:	33 1f       	adc	r19, r19
    37f4:	22 0f       	add	r18, r18
    37f6:	33 1f       	adc	r19, r19
    37f8:	82 0f       	add	r24, r18
    37fa:	93 1f       	adc	r25, r19
    37fc:	84 0f       	add	r24, r20
    37fe:	95 1f       	adc	r25, r21
    3800:	fc 01       	movw	r30, r24
    3802:	e2 58       	subi	r30, 0x82	; 130
    3804:	fe 4f       	sbci	r31, 0xFE	; 254
    3806:	60 81       	ld	r22, Z
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	48 2f       	mov	r20, r24
    380c:	50 e0       	ldi	r21, 0x00	; 0
    380e:	ca 01       	movw	r24, r20
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	9c 01       	movw	r18, r24
    3816:	22 0f       	add	r18, r18
    3818:	33 1f       	adc	r19, r19
    381a:	22 0f       	add	r18, r18
    381c:	33 1f       	adc	r19, r19
    381e:	22 0f       	add	r18, r18
    3820:	33 1f       	adc	r19, r19
    3822:	82 0f       	add	r24, r18
    3824:	93 1f       	adc	r25, r19
    3826:	84 0f       	add	r24, r20
    3828:	95 1f       	adc	r25, r21
    382a:	fc 01       	movw	r30, r24
    382c:	e1 58       	subi	r30, 0x81	; 129
    382e:	fe 4f       	sbci	r31, 0xFE	; 254
    3830:	90 81       	ld	r25, Z
    3832:	86 2f       	mov	r24, r22
    3834:	69 2f       	mov	r22, r25
    3836:	41 e0       	ldi	r20, 0x01	; 1
    3838:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(SSegment_Astr7SegConfig[Copy_u8SegID].SegG_Port, SSegment_Astr7SegConfig[Copy_u8SegID].SegG_Pin, DIO_u8HIGH);
    383c:	8a 81       	ldd	r24, Y+2	; 0x02
    383e:	48 2f       	mov	r20, r24
    3840:	50 e0       	ldi	r21, 0x00	; 0
    3842:	ca 01       	movw	r24, r20
    3844:	88 0f       	add	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	9c 01       	movw	r18, r24
    384a:	22 0f       	add	r18, r18
    384c:	33 1f       	adc	r19, r19
    384e:	22 0f       	add	r18, r18
    3850:	33 1f       	adc	r19, r19
    3852:	22 0f       	add	r18, r18
    3854:	33 1f       	adc	r19, r19
    3856:	82 0f       	add	r24, r18
    3858:	93 1f       	adc	r25, r19
    385a:	84 0f       	add	r24, r20
    385c:	95 1f       	adc	r25, r21
    385e:	fc 01       	movw	r30, r24
    3860:	e0 58       	subi	r30, 0x80	; 128
    3862:	fe 4f       	sbci	r31, 0xFE	; 254
    3864:	60 81       	ld	r22, Z
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	48 2f       	mov	r20, r24
    386a:	50 e0       	ldi	r21, 0x00	; 0
    386c:	ca 01       	movw	r24, r20
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	9c 01       	movw	r18, r24
    3874:	22 0f       	add	r18, r18
    3876:	33 1f       	adc	r19, r19
    3878:	22 0f       	add	r18, r18
    387a:	33 1f       	adc	r19, r19
    387c:	22 0f       	add	r18, r18
    387e:	33 1f       	adc	r19, r19
    3880:	82 0f       	add	r24, r18
    3882:	93 1f       	adc	r25, r19
    3884:	84 0f       	add	r24, r20
    3886:	95 1f       	adc	r25, r21
    3888:	fc 01       	movw	r30, r24
    388a:	ef 57       	subi	r30, 0x7F	; 127
    388c:	fe 4f       	sbci	r31, 0xFE	; 254
    388e:	90 81       	ld	r25, Z
    3890:	86 2f       	mov	r24, r22
    3892:	69 2f       	mov	r22, r25
    3894:	41 e0       	ldi	r20, 0x01	; 1
    3896:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
			}
			Local_enuErrorState = ES_OK;
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <SSegment_enuClearDislay+0x5a6>
		}
		else{
			Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    38a0:	85 e0       	ldi	r24, 0x05	; 5
    38a2:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	cf 91       	pop	r28
    38ac:	df 91       	pop	r29
    38ae:	08 95       	ret

000038b0 <LM35_enuInit>:
#include "LM35_priv.h"

f32 LM35_CurrentTemp;
f32 LM35_CheckCurrentTemp;

ES_t LM35_enuInit(void){
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	0f 92       	push	r0
    38b6:	cd b7       	in	r28, 0x3d	; 61
    38b8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    38ba:	19 82       	std	Y+1, r1	; 0x01

	ADC_enuInit();
    38bc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <ADC_enuInit>
	ADC_enuADCEnable();
    38c0:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <ADC_enuADCEnable>
	ADC_InterruptEnable();
    38c4:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <ADC_InterruptEnable>
	ADC_enuEnableAutoTrigger();
    38c8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <ADC_enuEnableAutoTrigger>

	return Local_enuErrorState;
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    38ce:	0f 90       	pop	r0
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <LM35_enuReadSignal>:

ES_t LM35_enuReadSignal(s16 *Copy_u16ADCSignal1, s16 *Copy_u16ADCSignal2){
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	00 d0       	rcall	.+0      	; 0x38dc <LM35_enuReadSignal+0x6>
    38dc:	00 d0       	rcall	.+0      	; 0x38de <LM35_enuReadSignal+0x8>
    38de:	0f 92       	push	r0
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
    38e4:	9b 83       	std	Y+3, r25	; 0x03
    38e6:	8a 83       	std	Y+2, r24	; 0x02
    38e8:	7d 83       	std	Y+5, r23	; 0x05
    38ea:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    38ec:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u16ADCSignal1 != NULL && Copy_u16ADCSignal2 != NULL){
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	9b 81       	ldd	r25, Y+3	; 0x03
    38f2:	00 97       	sbiw	r24, 0x00	; 0
    38f4:	c9 f0       	breq	.+50     	; 0x3928 <LM35_enuReadSignal+0x52>
    38f6:	8c 81       	ldd	r24, Y+4	; 0x04
    38f8:	9d 81       	ldd	r25, Y+5	; 0x05
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	a9 f0       	breq	.+42     	; 0x3928 <LM35_enuReadSignal+0x52>
		if(SENSOR_POS_CHANNEL <= ADC_enuSingleEndedChannel7 && SENSOR_NEG_CHANNEL <= ADC_enuSingleEndedChannel7){
			ADC_enuStartConversion();
    38fe:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <ADC_enuStartConversion>
			ADC_enuSelectChannel(SENSOR_POS_CHANNEL);
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <ADC_enuSelectChannel>
			ADC_enuReadADCValue(Copy_u16ADCSignal1);
    3908:	8a 81       	ldd	r24, Y+2	; 0x02
    390a:	9b 81       	ldd	r25, Y+3	; 0x03
    390c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <ADC_enuReadADCValue>

			ADC_enuStartConversion();
    3910:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <ADC_enuStartConversion>
			ADC_enuSelectChannel(SENSOR_NEG_CHANNEL);
    3914:	82 e0       	ldi	r24, 0x02	; 2
    3916:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <ADC_enuSelectChannel>
			ADC_enuReadADCValue(Copy_u16ADCSignal2);
    391a:	8c 81       	ldd	r24, Y+4	; 0x04
    391c:	9d 81       	ldd	r25, Y+5	; 0x05
    391e:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <ADC_enuReadADCValue>

			Local_enuErrorState = ES_OK;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	89 83       	std	Y+1, r24	; 0x01
    3926:	02 c0       	rjmp	.+4      	; 0x392c <LM35_enuReadSignal+0x56>
		else{
			Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
		}
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    392c:	89 81       	ldd	r24, Y+1	; 0x01
}
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <LM35_enuGetTempValue>:

ES_t LM35_enuGetTempValue(s16 _Copy_u16ADCSignal1, s16 _Copy_u16ADCSignal2){
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	00 d0       	rcall	.+0      	; 0x3944 <LM35_enuGetTempValue+0x6>
    3944:	00 d0       	rcall	.+0      	; 0x3946 <LM35_enuGetTempValue+0x8>
    3946:	0f 92       	push	r0
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	9b 83       	std	Y+3, r25	; 0x03
    394e:	8a 83       	std	Y+2, r24	; 0x02
    3950:	7d 83       	std	Y+5, r23	; 0x05
    3952:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3954:	19 82       	std	Y+1, r1	; 0x01
#if	SELECT_REFERENCE == AVCC
	LM35_CheckCurrentTemp = LM35_CurrentTemp;
    3956:	80 91 f4 01 	lds	r24, 0x01F4
    395a:	90 91 f5 01 	lds	r25, 0x01F5
    395e:	a0 91 f6 01 	lds	r26, 0x01F6
    3962:	b0 91 f7 01 	lds	r27, 0x01F7
    3966:	80 93 f8 01 	sts	0x01F8, r24
    396a:	90 93 f9 01 	sts	0x01F9, r25
    396e:	a0 93 fa 01 	sts	0x01FA, r26
    3972:	b0 93 fb 01 	sts	0x01FB, r27
	LM35_CurrentTemp = (_Copy_u16ADCSignal1 - _Copy_u16ADCSignal2) * AVCC_VALUE;
    3976:	2a 81       	ldd	r18, Y+2	; 0x02
    3978:	3b 81       	ldd	r19, Y+3	; 0x03
    397a:	8c 81       	ldd	r24, Y+4	; 0x04
    397c:	9d 81       	ldd	r25, Y+5	; 0x05
    397e:	a9 01       	movw	r20, r18
    3980:	48 1b       	sub	r20, r24
    3982:	59 0b       	sbc	r21, r25
    3984:	ca 01       	movw	r24, r20
    3986:	aa 27       	eor	r26, r26
    3988:	97 fd       	sbrc	r25, 7
    398a:	a0 95       	com	r26
    398c:	ba 2f       	mov	r27, r26
    398e:	bc 01       	movw	r22, r24
    3990:	cd 01       	movw	r24, r26
    3992:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	26 ef       	ldi	r18, 0xF6	; 246
    39a0:	38 e2       	ldi	r19, 0x28	; 40
    39a2:	4c e9       	ldi	r20, 0x9C	; 156
    39a4:	50 e4       	ldi	r21, 0x40	; 64
    39a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	80 93 f4 01 	sts	0x01F4, r24
    39b2:	90 93 f5 01 	sts	0x01F5, r25
    39b6:	a0 93 f6 01 	sts	0x01F6, r26
    39ba:	b0 93 f7 01 	sts	0x01F7, r27
	LM35_CurrentTemp /= 10;
    39be:	80 91 f4 01 	lds	r24, 0x01F4
    39c2:	90 91 f5 01 	lds	r25, 0x01F5
    39c6:	a0 91 f6 01 	lds	r26, 0x01F6
    39ca:	b0 91 f7 01 	lds	r27, 0x01F7
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e2       	ldi	r20, 0x20	; 32
    39d8:	51 e4       	ldi	r21, 0x41	; 65
    39da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	80 93 f4 01 	sts	0x01F4, r24
    39e6:	90 93 f5 01 	sts	0x01F5, r25
    39ea:	a0 93 f6 01 	sts	0x01F6, r26
    39ee:	b0 93 f7 01 	sts	0x01F7, r27
	Local_enuErrorState = ES_OK;
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	89 83       	std	Y+1, r24	; 0x01
	LM35_CurrentTemp /= 10;
	Local_enuErrorState = ES_OK;
#else
	#error Attention Here !! Selection Error.
#endif
	return Local_enuErrorState;
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	08 95       	ret

00003a08 <LM35_enuCallingForInterrupt>:

ES_t LM35_enuCallingForInterrupt(void (*Copy_PfuncCallBack) (void)){
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <LM35_enuCallingForInterrupt+0x6>
    3a0e:	0f 92       	push	r0
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
    3a14:	9b 83       	std	Y+3, r25	; 0x03
    3a16:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3a18:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfuncCallBack != NULL){
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1e:	00 97       	sbiw	r24, 0x00	; 0
    3a20:	39 f0       	breq	.+14     	; 0x3a30 <LM35_enuCallingForInterrupt+0x28>

		ADC_InterruptCallBack(Copy_PfuncCallBack);
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	9b 81       	ldd	r25, Y+3	; 0x03
    3a26:	0e 94 12 10 	call	0x2024	; 0x2024 <ADC_InterruptCallBack>

		Local_enuErrorState = ES_OK;
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	02 c0       	rjmp	.+4      	; 0x3a34 <LM35_enuCallingForInterrupt+0x2c>
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    3a30:	82 e0       	ldi	r24, 0x02	; 2
    3a32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3a34:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	cf 91       	pop	r28
    3a3e:	df 91       	pop	r29
    3a40:	08 95       	ret

00003a42 <LED_enuInit>:
#include "LED_priv.h"
#include "LED_config.h"

LED_t LED_AstrLEDConfig[LED_NUM];

ES_t LED_enuInit(LED_t *Copy_pstrLedConfig){
    3a42:	df 93       	push	r29
    3a44:	cf 93       	push	r28
    3a46:	00 d0       	rcall	.+0      	; 0x3a48 <LED_enuInit+0x6>
    3a48:	00 d0       	rcall	.+0      	; 0x3a4a <LED_enuInit+0x8>
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
    3a4e:	9c 83       	std	Y+4, r25	; 0x04
    3a50:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorStete = ES_NOK;
    3a52:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrLedConfig != NULL){
    3a54:	8b 81       	ldd	r24, Y+3	; 0x03
    3a56:	9c 81       	ldd	r25, Y+4	; 0x04
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <LED_enuInit+0x1c>
    3a5c:	90 c0       	rjmp	.+288    	; 0x3b7e <LED_enuInit+0x13c>
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++){
    3a5e:	19 82       	std	Y+1, r1	; 0x01
    3a60:	87 c0       	rjmp	.+270    	; 0x3b70 <LED_enuInit+0x12e>
			DIO_enuSetPinDir(Copy_pstrLedConfig[Local_u8Iterator].LED_Port, Copy_pstrLedConfig[Local_u8Iterator].LED_pin, DIO_u8OUTPUT);
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	88 2f       	mov	r24, r24
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	9c 01       	movw	r18, r24
    3a6a:	22 0f       	add	r18, r18
    3a6c:	33 1f       	adc	r19, r19
    3a6e:	22 0f       	add	r18, r18
    3a70:	33 1f       	adc	r19, r19
    3a72:	8b 81       	ldd	r24, Y+3	; 0x03
    3a74:	9c 81       	ldd	r25, Y+4	; 0x04
    3a76:	fc 01       	movw	r30, r24
    3a78:	e2 0f       	add	r30, r18
    3a7a:	f3 1f       	adc	r31, r19
    3a7c:	40 81       	ld	r20, Z
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	88 2f       	mov	r24, r24
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	9c 01       	movw	r18, r24
    3a86:	22 0f       	add	r18, r18
    3a88:	33 1f       	adc	r19, r19
    3a8a:	22 0f       	add	r18, r18
    3a8c:	33 1f       	adc	r19, r19
    3a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a90:	9c 81       	ldd	r25, Y+4	; 0x04
    3a92:	fc 01       	movw	r30, r24
    3a94:	e2 0f       	add	r30, r18
    3a96:	f3 1f       	adc	r31, r19
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	84 2f       	mov	r24, r20
    3a9c:	69 2f       	mov	r22, r25
    3a9e:	41 e0       	ldi	r20, 0x01	; 1
    3aa0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>

			if(Copy_pstrLedConfig[Local_u8Iterator].LED_Connection == LED_IS_SINK){
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	88 2f       	mov	r24, r24
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	9c 01       	movw	r18, r24
    3aac:	22 0f       	add	r18, r18
    3aae:	33 1f       	adc	r19, r19
    3ab0:	22 0f       	add	r18, r18
    3ab2:	33 1f       	adc	r19, r19
    3ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab8:	fc 01       	movw	r30, r24
    3aba:	e2 0f       	add	r30, r18
    3abc:	f3 1f       	adc	r31, r19
    3abe:	83 81       	ldd	r24, Z+3	; 0x03
    3ac0:	8b 30       	cpi	r24, 0x0B	; 11
    3ac2:	11 f5       	brne	.+68     	; 0x3b08 <LED_enuInit+0xc6>
				DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_Port, Copy_pstrLedConfig[Local_u8Iterator].LED_pin, DIO_u8HIGH);
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	88 2f       	mov	r24, r24
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	9c 01       	movw	r18, r24
    3acc:	22 0f       	add	r18, r18
    3ace:	33 1f       	adc	r19, r19
    3ad0:	22 0f       	add	r18, r18
    3ad2:	33 1f       	adc	r19, r19
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad8:	fc 01       	movw	r30, r24
    3ada:	e2 0f       	add	r30, r18
    3adc:	f3 1f       	adc	r31, r19
    3ade:	40 81       	ld	r20, Z
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	88 2f       	mov	r24, r24
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	9c 01       	movw	r18, r24
    3ae8:	22 0f       	add	r18, r18
    3aea:	33 1f       	adc	r19, r19
    3aec:	22 0f       	add	r18, r18
    3aee:	33 1f       	adc	r19, r19
    3af0:	8b 81       	ldd	r24, Y+3	; 0x03
    3af2:	9c 81       	ldd	r25, Y+4	; 0x04
    3af4:	fc 01       	movw	r30, r24
    3af6:	e2 0f       	add	r30, r18
    3af8:	f3 1f       	adc	r31, r19
    3afa:	91 81       	ldd	r25, Z+1	; 0x01
    3afc:	84 2f       	mov	r24, r20
    3afe:	69 2f       	mov	r22, r25
    3b00:	41 e0       	ldi	r20, 0x01	; 1
    3b02:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    3b06:	31 c0       	rjmp	.+98     	; 0x3b6a <LED_enuInit+0x128>
			}
			else if(Copy_pstrLedConfig[Local_u8Iterator].LED_Connection == LED_IS_SOURCE){
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	88 2f       	mov	r24, r24
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9c 01       	movw	r18, r24
    3b10:	22 0f       	add	r18, r18
    3b12:	33 1f       	adc	r19, r19
    3b14:	22 0f       	add	r18, r18
    3b16:	33 1f       	adc	r19, r19
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e2 0f       	add	r30, r18
    3b20:	f3 1f       	adc	r31, r19
    3b22:	83 81       	ldd	r24, Z+3	; 0x03
    3b24:	8a 30       	cpi	r24, 0x0A	; 10
    3b26:	09 f5       	brne	.+66     	; 0x3b6a <LED_enuInit+0x128>
				DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_Port, Copy_pstrLedConfig[Local_u8Iterator].LED_pin, DIO_u8LOW);
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	88 2f       	mov	r24, r24
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	9c 01       	movw	r18, r24
    3b30:	22 0f       	add	r18, r18
    3b32:	33 1f       	adc	r19, r19
    3b34:	22 0f       	add	r18, r18
    3b36:	33 1f       	adc	r19, r19
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	e2 0f       	add	r30, r18
    3b40:	f3 1f       	adc	r31, r19
    3b42:	40 81       	ld	r20, Z
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	88 2f       	mov	r24, r24
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	9c 01       	movw	r18, r24
    3b4c:	22 0f       	add	r18, r18
    3b4e:	33 1f       	adc	r19, r19
    3b50:	22 0f       	add	r18, r18
    3b52:	33 1f       	adc	r19, r19
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	9c 81       	ldd	r25, Y+4	; 0x04
    3b58:	fc 01       	movw	r30, r24
    3b5a:	e2 0f       	add	r30, r18
    3b5c:	f3 1f       	adc	r31, r19
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	84 2f       	mov	r24, r20
    3b62:	69 2f       	mov	r22, r25
    3b64:	40 e0       	ldi	r20, 0x00	; 0
    3b66:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
ES_t LED_enuInit(LED_t *Copy_pstrLedConfig){
	ES_t Local_enuErrorStete = ES_NOK;

	if(Copy_pstrLedConfig != NULL){
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++){
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	8f 5f       	subi	r24, 0xFF	; 255
    3b6e:	89 83       	std	Y+1, r24	; 0x01
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	83 30       	cpi	r24, 0x03	; 3
    3b74:	08 f4       	brcc	.+2      	; 0x3b78 <LED_enuInit+0x136>
    3b76:	75 cf       	rjmp	.-278    	; 0x3a62 <LED_enuInit+0x20>
			}
			else if(Copy_pstrLedConfig[Local_u8Iterator].LED_Connection == LED_IS_SOURCE){
				DIO_enuSetPinValue(Copy_pstrLedConfig[Local_u8Iterator].LED_Port, Copy_pstrLedConfig[Local_u8Iterator].LED_pin, DIO_u8LOW);
			}
		}
		Local_enuErrorStete = ES_OK;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	8a 83       	std	Y+2, r24	; 0x02
    3b7c:	02 c0       	rjmp	.+4      	; 0x3b82 <LED_enuInit+0x140>
	}
	else{
		Local_enuErrorStete = ES_NULL_POINTER;
    3b7e:	82 e0       	ldi	r24, 0x02	; 2
    3b80:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorStete;
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <LED_enuLedON>:

ES_t LED_enuLedON(u8 Copy_u8LedID){
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <LED_enuLedON+0x6>
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStete = ES_NOK;
    3b9e:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8LedID <= LED_NUM){
    3ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba2:	84 30       	cpi	r24, 0x04	; 4
    3ba4:	08 f0       	brcs	.+2      	; 0x3ba8 <LED_enuLedON+0x16>
    3ba6:	54 c0       	rjmp	.+168    	; 0x3c50 <LED_enuLedON+0xbe>
			if(LED_AstrLEDConfig[Copy_u8LedID].LED_Connection == LED_IS_SINK){
    3ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    3baa:	88 2f       	mov	r24, r24
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	88 0f       	add	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	88 0f       	add	r24, r24
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	e9 55       	subi	r30, 0x59	; 89
    3bba:	fe 4f       	sbci	r31, 0xFE	; 254
    3bbc:	80 81       	ld	r24, Z
    3bbe:	8b 30       	cpi	r24, 0x0B	; 11
    3bc0:	e1 f4       	brne	.+56     	; 0x3bfa <LED_enuLedON+0x68>
				DIO_enuSetPinValue(LED_AstrLEDConfig[Copy_u8LedID].LED_Port, LED_AstrLEDConfig[Copy_u8LedID].LED_pin, DIO_u8LOW);
    3bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc4:	88 2f       	mov	r24, r24
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	88 0f       	add	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	88 0f       	add	r24, r24
    3bce:	99 1f       	adc	r25, r25
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	ec 55       	subi	r30, 0x5C	; 92
    3bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd6:	20 81       	ld	r18, Z
    3bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bda:	88 2f       	mov	r24, r24
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	88 0f       	add	r24, r24
    3be0:	99 1f       	adc	r25, r25
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	fc 01       	movw	r30, r24
    3be8:	eb 55       	subi	r30, 0x5B	; 91
    3bea:	fe 4f       	sbci	r31, 0xFE	; 254
    3bec:	90 81       	ld	r25, Z
    3bee:	82 2f       	mov	r24, r18
    3bf0:	69 2f       	mov	r22, r25
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    3bf8:	28 c0       	rjmp	.+80     	; 0x3c4a <LED_enuLedON+0xb8>
			}
			else if(LED_AstrLEDConfig[Copy_u8LedID].LED_Connection == LED_IS_SOURCE){
    3bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfc:	88 2f       	mov	r24, r24
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	fc 01       	movw	r30, r24
    3c0a:	e9 55       	subi	r30, 0x59	; 89
    3c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0e:	80 81       	ld	r24, Z
    3c10:	8a 30       	cpi	r24, 0x0A	; 10
    3c12:	d9 f4       	brne	.+54     	; 0x3c4a <LED_enuLedON+0xb8>
				DIO_enuSetPinValue(LED_AstrLEDConfig[Copy_u8LedID].LED_Port, LED_AstrLEDConfig[Copy_u8LedID].LED_pin, DIO_u8HIGH);
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	88 2f       	mov	r24, r24
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	88 0f       	add	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	88 0f       	add	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	fc 01       	movw	r30, r24
    3c24:	ec 55       	subi	r30, 0x5C	; 92
    3c26:	fe 4f       	sbci	r31, 0xFE	; 254
    3c28:	20 81       	ld	r18, Z
    3c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2c:	88 2f       	mov	r24, r24
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	88 0f       	add	r24, r24
    3c32:	99 1f       	adc	r25, r25
    3c34:	88 0f       	add	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	fc 01       	movw	r30, r24
    3c3a:	eb 55       	subi	r30, 0x5B	; 91
    3c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c3e:	90 81       	ld	r25, Z
    3c40:	82 2f       	mov	r24, r18
    3c42:	69 2f       	mov	r22, r25
    3c44:	41 e0       	ldi	r20, 0x01	; 1
    3c46:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
			}
			Local_enuErrorStete = ES_OK;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	89 83       	std	Y+1, r24	; 0x01
    3c4e:	02 c0       	rjmp	.+4      	; 0x3c54 <LED_enuLedON+0xc2>
		}
		else{
			Local_enuErrorStete = ES_COMPONENT_OUT_OF_RANGE;
    3c50:	85 e0       	ldi	r24, 0x05	; 5
    3c52:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorStete;
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <LED_enuLedOFF>:

ES_t LED_enuLedOFF(u8 Copy_u8LedID){
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <LED_enuLedOFF+0x6>
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStete = ES_NOK;
    3c6c:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8LedID <= LED_NUM){
    3c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c70:	84 30       	cpi	r24, 0x04	; 4
    3c72:	08 f0       	brcs	.+2      	; 0x3c76 <LED_enuLedOFF+0x16>
    3c74:	54 c0       	rjmp	.+168    	; 0x3d1e <LED_enuLedOFF+0xbe>
			if(LED_AstrLEDConfig[Copy_u8LedID].LED_Connection == LED_IS_SINK){
    3c76:	8a 81       	ldd	r24, Y+2	; 0x02
    3c78:	88 2f       	mov	r24, r24
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	88 0f       	add	r24, r24
    3c7e:	99 1f       	adc	r25, r25
    3c80:	88 0f       	add	r24, r24
    3c82:	99 1f       	adc	r25, r25
    3c84:	fc 01       	movw	r30, r24
    3c86:	e9 55       	subi	r30, 0x59	; 89
    3c88:	fe 4f       	sbci	r31, 0xFE	; 254
    3c8a:	80 81       	ld	r24, Z
    3c8c:	8b 30       	cpi	r24, 0x0B	; 11
    3c8e:	e1 f4       	brne	.+56     	; 0x3cc8 <LED_enuLedOFF+0x68>
				DIO_enuSetPinValue(LED_AstrLEDConfig[Copy_u8LedID].LED_Port, LED_AstrLEDConfig[Copy_u8LedID].LED_pin, DIO_u8HIGH);
    3c90:	8a 81       	ldd	r24, Y+2	; 0x02
    3c92:	88 2f       	mov	r24, r24
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	88 0f       	add	r24, r24
    3c98:	99 1f       	adc	r25, r25
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	ec 55       	subi	r30, 0x5C	; 92
    3ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ca4:	20 81       	ld	r18, Z
    3ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca8:	88 2f       	mov	r24, r24
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	88 0f       	add	r24, r24
    3cae:	99 1f       	adc	r25, r25
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	eb 55       	subi	r30, 0x5B	; 91
    3cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cba:	90 81       	ld	r25, Z
    3cbc:	82 2f       	mov	r24, r18
    3cbe:	69 2f       	mov	r22, r25
    3cc0:	41 e0       	ldi	r20, 0x01	; 1
    3cc2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    3cc6:	28 c0       	rjmp	.+80     	; 0x3d18 <LED_enuLedOFF+0xb8>
			}
			else if(LED_AstrLEDConfig[Copy_u8LedID].LED_Connection == LED_IS_SOURCE){
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	88 2f       	mov	r24, r24
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	88 0f       	add	r24, r24
    3cd0:	99 1f       	adc	r25, r25
    3cd2:	88 0f       	add	r24, r24
    3cd4:	99 1f       	adc	r25, r25
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	e9 55       	subi	r30, 0x59	; 89
    3cda:	fe 4f       	sbci	r31, 0xFE	; 254
    3cdc:	80 81       	ld	r24, Z
    3cde:	8a 30       	cpi	r24, 0x0A	; 10
    3ce0:	d9 f4       	brne	.+54     	; 0x3d18 <LED_enuLedOFF+0xb8>
				DIO_enuSetPinValue(LED_AstrLEDConfig[Copy_u8LedID].LED_Port, LED_AstrLEDConfig[Copy_u8LedID].LED_pin, DIO_u8LOW);
    3ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce4:	88 2f       	mov	r24, r24
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	88 0f       	add	r24, r24
    3cee:	99 1f       	adc	r25, r25
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	ec 55       	subi	r30, 0x5C	; 92
    3cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf6:	20 81       	ld	r18, Z
    3cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfa:	88 2f       	mov	r24, r24
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	fc 01       	movw	r30, r24
    3d08:	eb 55       	subi	r30, 0x5B	; 91
    3d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0c:	90 81       	ld	r25, Z
    3d0e:	82 2f       	mov	r24, r18
    3d10:	69 2f       	mov	r22, r25
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
			}
			Local_enuErrorStete = ES_OK;
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	89 83       	std	Y+1, r24	; 0x01
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <LED_enuLedOFF+0xc2>
		}
		else{
			Local_enuErrorStete = ES_COMPONENT_OUT_OF_RANGE;
    3d1e:	85 e0       	ldi	r24, 0x05	; 5
    3d20:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorStete;
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	cf 91       	pop	r28
    3d2a:	df 91       	pop	r29
    3d2c:	08 95       	ret

00003d2e <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    3d2e:	df 93       	push	r29
    3d30:	cf 93       	push	r28
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	e9 97       	sbiw	r28, 0x39	; 57
    3d38:	0f b6       	in	r0, 0x3f	; 63
    3d3a:	f8 94       	cli
    3d3c:	de bf       	out	0x3e, r29	; 62
    3d3e:	0f be       	out	0x3f, r0	; 63
    3d40:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    3d42:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDir(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	63 e0       	ldi	r22, 0x03	; 3
    3d48:	41 e0       	ldi	r20, 0x01	; 1
    3d4a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
	DIO_enuSetPinDir(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	64 e0       	ldi	r22, 0x04	; 4
    3d52:	41 e0       	ldi	r20, 0x01	; 1
    3d54:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
	DIO_enuSetPinDir(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	66 e0       	ldi	r22, 0x06	; 6
    3d5c:	41 e0       	ldi	r20, 0x01	; 1
    3d5e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>

	DIO_enuSetPinDir(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	62 e0       	ldi	r22, 0x02	; 2
    3d66:	41 e0       	ldi	r20, 0x01	; 1
    3d68:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	65 e0       	ldi	r22, 0x05	; 5
    3d70:	41 e0       	ldi	r20, 0x01	; 1
    3d72:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	67 e0       	ldi	r22, 0x07	; 7
    3d7a:	41 e0       	ldi	r20, 0x01	; 1
    3d7c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    3d80:	82 e0       	ldi	r24, 0x02	; 2
    3d82:	62 e0       	ldi	r22, 0x02	; 2
    3d84:	41 e0       	ldi	r20, 0x01	; 1
    3d86:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	ac e0       	ldi	r26, 0x0C	; 12
    3d90:	b2 e4       	ldi	r27, 0x42	; 66
    3d92:	8d ab       	std	Y+53, r24	; 0x35
    3d94:	9e ab       	std	Y+54, r25	; 0x36
    3d96:	af ab       	std	Y+55, r26	; 0x37
    3d98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9a:	6d a9       	ldd	r22, Y+53	; 0x35
    3d9c:	7e a9       	ldd	r23, Y+54	; 0x36
    3d9e:	8f a9       	ldd	r24, Y+55	; 0x37
    3da0:	98 ad       	ldd	r25, Y+56	; 0x38
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	4a e7       	ldi	r20, 0x7A	; 122
    3da8:	53 e4       	ldi	r21, 0x43	; 67
    3daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	89 ab       	std	Y+49, r24	; 0x31
    3db4:	9a ab       	std	Y+50, r25	; 0x32
    3db6:	ab ab       	std	Y+51, r26	; 0x33
    3db8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3dba:	69 a9       	ldd	r22, Y+49	; 0x31
    3dbc:	7a a9       	ldd	r23, Y+50	; 0x32
    3dbe:	8b a9       	ldd	r24, Y+51	; 0x33
    3dc0:	9c a9       	ldd	r25, Y+52	; 0x34
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	40 e8       	ldi	r20, 0x80	; 128
    3dc8:	5f e3       	ldi	r21, 0x3F	; 63
    3dca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3dce:	88 23       	and	r24, r24
    3dd0:	2c f4       	brge	.+10     	; 0x3ddc <LCD_enuInit+0xae>
		__ticks = 1;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	98 ab       	std	Y+48, r25	; 0x30
    3dd8:	8f a7       	std	Y+47, r24	; 0x2f
    3dda:	3f c0       	rjmp	.+126    	; 0x3e5a <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    3ddc:	69 a9       	ldd	r22, Y+49	; 0x31
    3dde:	7a a9       	ldd	r23, Y+50	; 0x32
    3de0:	8b a9       	ldd	r24, Y+51	; 0x33
    3de2:	9c a9       	ldd	r25, Y+52	; 0x34
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	3f ef       	ldi	r19, 0xFF	; 255
    3de8:	4f e7       	ldi	r20, 0x7F	; 127
    3dea:	57 e4       	ldi	r21, 0x47	; 71
    3dec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3df0:	18 16       	cp	r1, r24
    3df2:	4c f5       	brge	.+82     	; 0x3e46 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df4:	6d a9       	ldd	r22, Y+53	; 0x35
    3df6:	7e a9       	ldd	r23, Y+54	; 0x36
    3df8:	8f a9       	ldd	r24, Y+55	; 0x37
    3dfa:	98 ad       	ldd	r25, Y+56	; 0x38
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	40 e2       	ldi	r20, 0x20	; 32
    3e02:	51 e4       	ldi	r21, 0x41	; 65
    3e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	bc 01       	movw	r22, r24
    3e0e:	cd 01       	movw	r24, r26
    3e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	98 ab       	std	Y+48, r25	; 0x30
    3e1a:	8f a7       	std	Y+47, r24	; 0x2f
    3e1c:	0f c0       	rjmp	.+30     	; 0x3e3c <LCD_enuInit+0x10e>
    3e1e:	89 e1       	ldi	r24, 0x19	; 25
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	9e a7       	std	Y+46, r25	; 0x2e
    3e24:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e26:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e28:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	f1 f7       	brne	.-4      	; 0x3e2a <LCD_enuInit+0xfc>
    3e2e:	9e a7       	std	Y+46, r25	; 0x2e
    3e30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e32:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e34:	98 a9       	ldd	r25, Y+48	; 0x30
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	98 ab       	std	Y+48, r25	; 0x30
    3e3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	69 f7       	brne	.-38     	; 0x3e1e <LCD_enuInit+0xf0>
    3e44:	14 c0       	rjmp	.+40     	; 0x3e6e <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e46:	69 a9       	ldd	r22, Y+49	; 0x31
    3e48:	7a a9       	ldd	r23, Y+50	; 0x32
    3e4a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e4c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	98 ab       	std	Y+48, r25	; 0x30
    3e58:	8f a7       	std	Y+47, r24	; 0x2f
    3e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e5e:	9c a7       	std	Y+44, r25	; 0x2c
    3e60:	8b a7       	std	Y+43, r24	; 0x2b
    3e62:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e64:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <LCD_enuInit+0x138>
    3e6a:	9c a7       	std	Y+44, r25	; 0x2c
    3e6c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDir(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    3e6e:	82 e0       	ldi	r24, 0x02	; 2
    3e70:	65 e0       	ldi	r22, 0x05	; 5
    3e72:	41 e0       	ldi	r20, 0x01	; 1
    3e74:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    3e78:	82 e0       	ldi	r24, 0x02	; 2
    3e7a:	67 e0       	ldi	r22, 0x07	; 7
    3e7c:	41 e0       	ldi	r20, 0x01	; 1
    3e7e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    3e82:	83 e0       	ldi	r24, 0x03	; 3
    3e84:	62 e0       	ldi	r22, 0x02	; 2
    3e86:	41 e0       	ldi	r20, 0x01	; 1
    3e88:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
	DIO_enuSetPinDir(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    3e8c:	83 e0       	ldi	r24, 0x03	; 3
    3e8e:	65 e0       	ldi	r22, 0x05	; 5
    3e90:	41 e0       	ldi	r20, 0x01	; 1
    3e92:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>

	//function set
	LCD_invidSendCommend(0x38);
    3e96:	88 e3       	ldi	r24, 0x38	; 56
    3e98:	0e 94 cb 23 	call	0x4796	; 0x4796 <LCD_invidSendCommend>
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	a0 e8       	ldi	r26, 0x80	; 128
    3ea2:	bf e3       	ldi	r27, 0x3F	; 63
    3ea4:	8f a3       	std	Y+39, r24	; 0x27
    3ea6:	98 a7       	std	Y+40, r25	; 0x28
    3ea8:	a9 a7       	std	Y+41, r26	; 0x29
    3eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eac:	6f a1       	ldd	r22, Y+39	; 0x27
    3eae:	78 a5       	ldd	r23, Y+40	; 0x28
    3eb0:	89 a5       	ldd	r24, Y+41	; 0x29
    3eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	4a e7       	ldi	r20, 0x7A	; 122
    3eba:	53 e4       	ldi	r21, 0x43	; 67
    3ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	8b a3       	std	Y+35, r24	; 0x23
    3ec6:	9c a3       	std	Y+36, r25	; 0x24
    3ec8:	ad a3       	std	Y+37, r26	; 0x25
    3eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    3ece:	7c a1       	ldd	r23, Y+36	; 0x24
    3ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	40 e8       	ldi	r20, 0x80	; 128
    3eda:	5f e3       	ldi	r21, 0x3F	; 63
    3edc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3ee0:	88 23       	and	r24, r24
    3ee2:	2c f4       	brge	.+10     	; 0x3eee <LCD_enuInit+0x1c0>
		__ticks = 1;
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	9a a3       	std	Y+34, r25	; 0x22
    3eea:	89 a3       	std	Y+33, r24	; 0x21
    3eec:	3f c0       	rjmp	.+126    	; 0x3f6c <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    3eee:	6b a1       	ldd	r22, Y+35	; 0x23
    3ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	3f ef       	ldi	r19, 0xFF	; 255
    3efa:	4f e7       	ldi	r20, 0x7F	; 127
    3efc:	57 e4       	ldi	r21, 0x47	; 71
    3efe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f02:	18 16       	cp	r1, r24
    3f04:	4c f5       	brge	.+82     	; 0x3f58 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f06:	6f a1       	ldd	r22, Y+39	; 0x27
    3f08:	78 a5       	ldd	r23, Y+40	; 0x28
    3f0a:	89 a5       	ldd	r24, Y+41	; 0x29
    3f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	40 e2       	ldi	r20, 0x20	; 32
    3f14:	51 e4       	ldi	r21, 0x41	; 65
    3f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	bc 01       	movw	r22, r24
    3f20:	cd 01       	movw	r24, r26
    3f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	9a a3       	std	Y+34, r25	; 0x22
    3f2c:	89 a3       	std	Y+33, r24	; 0x21
    3f2e:	0f c0       	rjmp	.+30     	; 0x3f4e <LCD_enuInit+0x220>
    3f30:	89 e1       	ldi	r24, 0x19	; 25
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	98 a3       	std	Y+32, r25	; 0x20
    3f36:	8f 8f       	std	Y+31, r24	; 0x1f
    3f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f3a:	98 a1       	ldd	r25, Y+32	; 0x20
    3f3c:	01 97       	sbiw	r24, 0x01	; 1
    3f3e:	f1 f7       	brne	.-4      	; 0x3f3c <LCD_enuInit+0x20e>
    3f40:	98 a3       	std	Y+32, r25	; 0x20
    3f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f44:	89 a1       	ldd	r24, Y+33	; 0x21
    3f46:	9a a1       	ldd	r25, Y+34	; 0x22
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	9a a3       	std	Y+34, r25	; 0x22
    3f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f4e:	89 a1       	ldd	r24, Y+33	; 0x21
    3f50:	9a a1       	ldd	r25, Y+34	; 0x22
    3f52:	00 97       	sbiw	r24, 0x00	; 0
    3f54:	69 f7       	brne	.-38     	; 0x3f30 <LCD_enuInit+0x202>
    3f56:	14 c0       	rjmp	.+40     	; 0x3f80 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f58:	6b a1       	ldd	r22, Y+35	; 0x23
    3f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    3f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    3f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    3f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22
    3f68:	9a a3       	std	Y+34, r25	; 0x22
    3f6a:	89 a3       	std	Y+33, r24	; 0x21
    3f6c:	89 a1       	ldd	r24, Y+33	; 0x21
    3f6e:	9a a1       	ldd	r25, Y+34	; 0x22
    3f70:	9e 8f       	std	Y+30, r25	; 0x1e
    3f72:	8d 8f       	std	Y+29, r24	; 0x1d
    3f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	f1 f7       	brne	.-4      	; 0x3f78 <LCD_enuInit+0x24a>
    3f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    3f7e:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    3f80:	8f e0       	ldi	r24, 0x0F	; 15
    3f82:	0e 94 cb 23 	call	0x4796	; 0x4796 <LCD_invidSendCommend>
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	a0 e8       	ldi	r26, 0x80	; 128
    3f8c:	bf e3       	ldi	r27, 0x3F	; 63
    3f8e:	89 8f       	std	Y+25, r24	; 0x19
    3f90:	9a 8f       	std	Y+26, r25	; 0x1a
    3f92:	ab 8f       	std	Y+27, r26	; 0x1b
    3f94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f96:	69 8d       	ldd	r22, Y+25	; 0x19
    3f98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	4a e7       	ldi	r20, 0x7A	; 122
    3fa4:	53 e4       	ldi	r21, 0x43	; 67
    3fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	8d 8b       	std	Y+21, r24	; 0x15
    3fb0:	9e 8b       	std	Y+22, r25	; 0x16
    3fb2:	af 8b       	std	Y+23, r26	; 0x17
    3fb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3fba:	8f 89       	ldd	r24, Y+23	; 0x17
    3fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e8       	ldi	r20, 0x80	; 128
    3fc4:	5f e3       	ldi	r21, 0x3F	; 63
    3fc6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3fca:	88 23       	and	r24, r24
    3fcc:	2c f4       	brge	.+10     	; 0x3fd8 <LCD_enuInit+0x2aa>
		__ticks = 1;
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	9c 8b       	std	Y+20, r25	; 0x14
    3fd4:	8b 8b       	std	Y+19, r24	; 0x13
    3fd6:	3f c0       	rjmp	.+126    	; 0x4056 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    3fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3fda:	7e 89       	ldd	r23, Y+22	; 0x16
    3fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3fde:	98 8d       	ldd	r25, Y+24	; 0x18
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	3f ef       	ldi	r19, 0xFF	; 255
    3fe4:	4f e7       	ldi	r20, 0x7F	; 127
    3fe6:	57 e4       	ldi	r21, 0x47	; 71
    3fe8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3fec:	18 16       	cp	r1, r24
    3fee:	4c f5       	brge	.+82     	; 0x4042 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	40 e2       	ldi	r20, 0x20	; 32
    3ffe:	51 e4       	ldi	r21, 0x41	; 65
    4000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	bc 01       	movw	r22, r24
    400a:	cd 01       	movw	r24, r26
    400c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	9c 8b       	std	Y+20, r25	; 0x14
    4016:	8b 8b       	std	Y+19, r24	; 0x13
    4018:	0f c0       	rjmp	.+30     	; 0x4038 <LCD_enuInit+0x30a>
    401a:	89 e1       	ldi	r24, 0x19	; 25
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	9a 8b       	std	Y+18, r25	; 0x12
    4020:	89 8b       	std	Y+17, r24	; 0x11
    4022:	89 89       	ldd	r24, Y+17	; 0x11
    4024:	9a 89       	ldd	r25, Y+18	; 0x12
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	f1 f7       	brne	.-4      	; 0x4026 <LCD_enuInit+0x2f8>
    402a:	9a 8b       	std	Y+18, r25	; 0x12
    402c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    402e:	8b 89       	ldd	r24, Y+19	; 0x13
    4030:	9c 89       	ldd	r25, Y+20	; 0x14
    4032:	01 97       	sbiw	r24, 0x01	; 1
    4034:	9c 8b       	std	Y+20, r25	; 0x14
    4036:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4038:	8b 89       	ldd	r24, Y+19	; 0x13
    403a:	9c 89       	ldd	r25, Y+20	; 0x14
    403c:	00 97       	sbiw	r24, 0x00	; 0
    403e:	69 f7       	brne	.-38     	; 0x401a <LCD_enuInit+0x2ec>
    4040:	14 c0       	rjmp	.+40     	; 0x406a <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4042:	6d 89       	ldd	r22, Y+21	; 0x15
    4044:	7e 89       	ldd	r23, Y+22	; 0x16
    4046:	8f 89       	ldd	r24, Y+23	; 0x17
    4048:	98 8d       	ldd	r25, Y+24	; 0x18
    404a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	9c 8b       	std	Y+20, r25	; 0x14
    4054:	8b 8b       	std	Y+19, r24	; 0x13
    4056:	8b 89       	ldd	r24, Y+19	; 0x13
    4058:	9c 89       	ldd	r25, Y+20	; 0x14
    405a:	98 8b       	std	Y+16, r25	; 0x10
    405c:	8f 87       	std	Y+15, r24	; 0x0f
    405e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4060:	98 89       	ldd	r25, Y+16	; 0x10
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	f1 f7       	brne	.-4      	; 0x4062 <LCD_enuInit+0x334>
    4066:	98 8b       	std	Y+16, r25	; 0x10
    4068:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	0e 94 cb 23 	call	0x4796	; 0x4796 <LCD_invidSendCommend>
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	a0 e0       	ldi	r26, 0x00	; 0
    4076:	b0 e4       	ldi	r27, 0x40	; 64
    4078:	8b 87       	std	Y+11, r24	; 0x0b
    407a:	9c 87       	std	Y+12, r25	; 0x0c
    407c:	ad 87       	std	Y+13, r26	; 0x0d
    407e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4080:	6b 85       	ldd	r22, Y+11	; 0x0b
    4082:	7c 85       	ldd	r23, Y+12	; 0x0c
    4084:	8d 85       	ldd	r24, Y+13	; 0x0d
    4086:	9e 85       	ldd	r25, Y+14	; 0x0e
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	4a e7       	ldi	r20, 0x7A	; 122
    408e:	53 e4       	ldi	r21, 0x43	; 67
    4090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	8f 83       	std	Y+7, r24	; 0x07
    409a:	98 87       	std	Y+8, r25	; 0x08
    409c:	a9 87       	std	Y+9, r26	; 0x09
    409e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40a0:	6f 81       	ldd	r22, Y+7	; 0x07
    40a2:	78 85       	ldd	r23, Y+8	; 0x08
    40a4:	89 85       	ldd	r24, Y+9	; 0x09
    40a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	40 e8       	ldi	r20, 0x80	; 128
    40ae:	5f e3       	ldi	r21, 0x3F	; 63
    40b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    40b4:	88 23       	and	r24, r24
    40b6:	2c f4       	brge	.+10     	; 0x40c2 <LCD_enuInit+0x394>
		__ticks = 1;
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	9e 83       	std	Y+6, r25	; 0x06
    40be:	8d 83       	std	Y+5, r24	; 0x05
    40c0:	3f c0       	rjmp	.+126    	; 0x4140 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    40c2:	6f 81       	ldd	r22, Y+7	; 0x07
    40c4:	78 85       	ldd	r23, Y+8	; 0x08
    40c6:	89 85       	ldd	r24, Y+9	; 0x09
    40c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	3f ef       	ldi	r19, 0xFF	; 255
    40ce:	4f e7       	ldi	r20, 0x7F	; 127
    40d0:	57 e4       	ldi	r21, 0x47	; 71
    40d2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    40d6:	18 16       	cp	r1, r24
    40d8:	4c f5       	brge	.+82     	; 0x412c <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40da:	6b 85       	ldd	r22, Y+11	; 0x0b
    40dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    40de:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 e2       	ldi	r20, 0x20	; 32
    40e8:	51 e4       	ldi	r21, 0x41	; 65
    40ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	bc 01       	movw	r22, r24
    40f4:	cd 01       	movw	r24, r26
    40f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	9e 83       	std	Y+6, r25	; 0x06
    4100:	8d 83       	std	Y+5, r24	; 0x05
    4102:	0f c0       	rjmp	.+30     	; 0x4122 <LCD_enuInit+0x3f4>
    4104:	89 e1       	ldi	r24, 0x19	; 25
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	9c 83       	std	Y+4, r25	; 0x04
    410a:	8b 83       	std	Y+3, r24	; 0x03
    410c:	8b 81       	ldd	r24, Y+3	; 0x03
    410e:	9c 81       	ldd	r25, Y+4	; 0x04
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	f1 f7       	brne	.-4      	; 0x4110 <LCD_enuInit+0x3e2>
    4114:	9c 83       	std	Y+4, r25	; 0x04
    4116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4118:	8d 81       	ldd	r24, Y+5	; 0x05
    411a:	9e 81       	ldd	r25, Y+6	; 0x06
    411c:	01 97       	sbiw	r24, 0x01	; 1
    411e:	9e 83       	std	Y+6, r25	; 0x06
    4120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4122:	8d 81       	ldd	r24, Y+5	; 0x05
    4124:	9e 81       	ldd	r25, Y+6	; 0x06
    4126:	00 97       	sbiw	r24, 0x00	; 0
    4128:	69 f7       	brne	.-38     	; 0x4104 <LCD_enuInit+0x3d6>
    412a:	14 c0       	rjmp	.+40     	; 0x4154 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    412c:	6f 81       	ldd	r22, Y+7	; 0x07
    412e:	78 85       	ldd	r23, Y+8	; 0x08
    4130:	89 85       	ldd	r24, Y+9	; 0x09
    4132:	9a 85       	ldd	r25, Y+10	; 0x0a
    4134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	8d 83       	std	Y+5, r24	; 0x05
    4140:	8d 81       	ldd	r24, Y+5	; 0x05
    4142:	9e 81       	ldd	r25, Y+6	; 0x06
    4144:	9a 83       	std	Y+2, r25	; 0x02
    4146:	89 83       	std	Y+1, r24	; 0x01
    4148:	89 81       	ldd	r24, Y+1	; 0x01
    414a:	9a 81       	ldd	r25, Y+2	; 0x02
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	f1 f7       	brne	.-4      	; 0x414c <LCD_enuInit+0x41e>
    4150:	9a 83       	std	Y+2, r25	; 0x02
    4152:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    4154:	86 e0       	ldi	r24, 0x06	; 6
    4156:	0e 94 cb 23 	call	0x4796	; 0x4796 <LCD_invidSendCommend>

	return Local_enuErrorState;
    415a:	89 ad       	ldd	r24, Y+57	; 0x39
}
    415c:	e9 96       	adiw	r28, 0x39	; 57
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	cf 91       	pop	r28
    416a:	df 91       	pop	r29
    416c:	08 95       	ret

0000416e <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    416e:	df 93       	push	r29
    4170:	cf 93       	push	r28
    4172:	00 d0       	rcall	.+0      	; 0x4174 <LCD_enuDisplayChar+0x6>
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
    4178:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    417a:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	63 e0       	ldi	r22, 0x03	; 3
    4180:	41 e0       	ldi	r20, 0x01	; 1
    4182:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    4186:	8a 81       	ldd	r24, Y+2	; 0x02
    4188:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>

	return Local_enuErrorState;
    418c:	89 81       	ldd	r24, Y+1	; 0x01
}
    418e:	0f 90       	pop	r0
    4190:	0f 90       	pop	r0
    4192:	cf 91       	pop	r28
    4194:	df 91       	pop	r29
    4196:	08 95       	ret

00004198 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(char *Copy_u8Data, u8 Copy_u8DataLength){
    4198:	df 93       	push	r29
    419a:	cf 93       	push	r28
    419c:	00 d0       	rcall	.+0      	; 0x419e <LCD_enuDisplayString+0x6>
    419e:	00 d0       	rcall	.+0      	; 0x41a0 <LCD_enuDisplayString+0x8>
    41a0:	0f 92       	push	r0
    41a2:	cd b7       	in	r28, 0x3d	; 61
    41a4:	de b7       	in	r29, 0x3e	; 62
    41a6:	9c 83       	std	Y+4, r25	; 0x04
    41a8:	8b 83       	std	Y+3, r24	; 0x03
    41aa:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    41ac:	1a 82       	std	Y+2, r1	; 0x02

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	63 e0       	ldi	r22, 0x03	; 3
    41b2:	41 e0       	ldi	r20, 0x01	; 1
    41b4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	u8 Local_u8Iter = 0;
    41b8:	19 82       	std	Y+1, r1	; 0x01
    41ba:	0e c0       	rjmp	.+28     	; 0x41d8 <LCD_enuDisplayString+0x40>
	while(Local_u8Iter != Copy_u8DataLength){
		LCD_vidLatch(*(Copy_u8Data+Local_u8Iter));
    41bc:	89 81       	ldd	r24, Y+1	; 0x01
    41be:	28 2f       	mov	r18, r24
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	8b 81       	ldd	r24, Y+3	; 0x03
    41c4:	9c 81       	ldd	r25, Y+4	; 0x04
    41c6:	fc 01       	movw	r30, r24
    41c8:	e2 0f       	add	r30, r18
    41ca:	f3 1f       	adc	r31, r19
    41cc:	80 81       	ld	r24, Z
    41ce:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>
		Local_u8Iter++;
    41d2:	89 81       	ldd	r24, Y+1	; 0x01
    41d4:	8f 5f       	subi	r24, 0xFF	; 255
    41d6:	89 83       	std	Y+1, r24	; 0x01
ES_t LCD_enuDisplayString(char *Copy_u8Data, u8 Copy_u8DataLength){
	ES_t Local_enuErrorState = ES_NOK;

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
	u8 Local_u8Iter = 0;
	while(Local_u8Iter != Copy_u8DataLength){
    41d8:	99 81       	ldd	r25, Y+1	; 0x01
    41da:	8d 81       	ldd	r24, Y+5	; 0x05
    41dc:	98 17       	cp	r25, r24
    41de:	71 f7       	brne	.-36     	; 0x41bc <LCD_enuDisplayString+0x24>
		LCD_vidLatch(*(Copy_u8Data+Local_u8Iter));
		Local_u8Iter++;
	}

	return Local_enuErrorState;
    41e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0
    41ec:	cf 91       	pop	r28
    41ee:	df 91       	pop	r29
    41f0:	08 95       	ret

000041f2 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    41f2:	df 93       	push	r29
    41f4:	cf 93       	push	r28
    41f6:	00 d0       	rcall	.+0      	; 0x41f8 <LCD_enuSendCommand+0x6>
    41f8:	cd b7       	in	r28, 0x3d	; 61
    41fa:	de b7       	in	r29, 0x3e	; 62
    41fc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    41fe:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	63 e0       	ldi	r22, 0x03	; 3
    4204:	40 e0       	ldi	r20, 0x00	; 0
    4206:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    420a:	8a 81       	ldd	r24, Y+2	; 0x02
    420c:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>


	return Local_enuErrorState;
    4210:	89 81       	ldd	r24, Y+1	; 0x01
}
    4212:	0f 90       	pop	r0
    4214:	0f 90       	pop	r0
    4216:	cf 91       	pop	r28
    4218:	df 91       	pop	r29
    421a:	08 95       	ret

0000421c <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    421c:	df 93       	push	r29
    421e:	cf 93       	push	r28
    4220:	00 d0       	rcall	.+0      	; 0x4222 <LCD_enuDisplayIntegerNum+0x6>
    4222:	00 d0       	rcall	.+0      	; 0x4224 <LCD_enuDisplayIntegerNum+0x8>
    4224:	0f 92       	push	r0
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	6a 83       	std	Y+2, r22	; 0x02
    422c:	7b 83       	std	Y+3, r23	; 0x03
    422e:	8c 83       	std	Y+4, r24	; 0x04
    4230:	9d 83       	std	Y+5, r25	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    4232:	19 82       	std	Y+1, r1	; 0x01

	LCD_VoidDisplayAnyNumber(Copy_s32Num);
    4234:	8a 81       	ldd	r24, Y+2	; 0x02
    4236:	9b 81       	ldd	r25, Y+3	; 0x03
    4238:	ac 81       	ldd	r26, Y+4	; 0x04
    423a:	bd 81       	ldd	r27, Y+5	; 0x05
    423c:	bc 01       	movw	r22, r24
    423e:	cd 01       	movw	r24, r26
    4240:	0e 94 bb 24 	call	0x4976	; 0x4976 <LCD_VoidDisplayAnyNumber>

	return Local_enuErrorState = ES_OK;
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	89 83       	std	Y+1, r24	; 0x01
    4248:	89 81       	ldd	r24, Y+1	; 0x01

}
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	0f 90       	pop	r0
    4254:	cf 91       	pop	r28
    4256:	df 91       	pop	r29
    4258:	08 95       	ret

0000425a <LCD_DisplayFloatNumber>:

ES_t LCD_DisplayFloatNumber(f32 Copy_f32Number){
    425a:	ef 92       	push	r14
    425c:	ff 92       	push	r15
    425e:	0f 93       	push	r16
    4260:	1f 93       	push	r17
    4262:	df 93       	push	r29
    4264:	cf 93       	push	r28
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
    426a:	2f 97       	sbiw	r28, 0x0f	; 15
    426c:	0f b6       	in	r0, 0x3f	; 63
    426e:	f8 94       	cli
    4270:	de bf       	out	0x3e, r29	; 62
    4272:	0f be       	out	0x3f, r0	; 63
    4274:	cd bf       	out	0x3d, r28	; 61
    4276:	6c 87       	std	Y+12, r22	; 0x0c
    4278:	7d 87       	std	Y+13, r23	; 0x0d
    427a:	8e 87       	std	Y+14, r24	; 0x0e
    427c:	9f 87       	std	Y+15, r25	; 0x0f
	ES_t Local_enuErrorState = ES_NOK;
    427e:	1b 86       	std	Y+11, r1	; 0x0b


	s32 Local_s32IntPart =  (s32) Copy_f32Number;
    4280:	6c 85       	ldd	r22, Y+12	; 0x0c
    4282:	7d 85       	ldd	r23, Y+13	; 0x0d
    4284:	8e 85       	ldd	r24, Y+14	; 0x0e
    4286:	9f 85       	ldd	r25, Y+15	; 0x0f
    4288:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	8f 83       	std	Y+7, r24	; 0x07
    4292:	98 87       	std	Y+8, r25	; 0x08
    4294:	a9 87       	std	Y+9, r26	; 0x09
    4296:	ba 87       	std	Y+10, r27	; 0x0a
	f32 Local_f32FractPart;
	if(Copy_f32Number >= 0)
    4298:	6c 85       	ldd	r22, Y+12	; 0x0c
    429a:	7d 85       	ldd	r23, Y+13	; 0x0d
    429c:	8e 85       	ldd	r24, Y+14	; 0x0e
    429e:	9f 85       	ldd	r25, Y+15	; 0x0f
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e0       	ldi	r20, 0x00	; 0
    42a6:	50 e0       	ldi	r21, 0x00	; 0
    42a8:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    42ac:	88 23       	and	r24, r24
    42ae:	ac f0       	brlt	.+42     	; 0x42da <LCD_DisplayFloatNumber+0x80>
		Local_f32FractPart = (Copy_f32Number - Local_s32IntPart);
    42b0:	6f 81       	ldd	r22, Y+7	; 0x07
    42b2:	78 85       	ldd	r23, Y+8	; 0x08
    42b4:	89 85       	ldd	r24, Y+9	; 0x09
    42b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    42bc:	9b 01       	movw	r18, r22
    42be:	ac 01       	movw	r20, r24
    42c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    42c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    42c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    42c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    42c8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    42cc:	dc 01       	movw	r26, r24
    42ce:	cb 01       	movw	r24, r22
    42d0:	8b 83       	std	Y+3, r24	; 0x03
    42d2:	9c 83       	std	Y+4, r25	; 0x04
    42d4:	ad 83       	std	Y+5, r26	; 0x05
    42d6:	be 83       	std	Y+6, r27	; 0x06
    42d8:	1c c0       	rjmp	.+56     	; 0x4312 <LCD_DisplayFloatNumber+0xb8>
	else
		Local_f32FractPart = ((Copy_f32Number * -1) - Local_s32IntPart);
    42da:	8c 85       	ldd	r24, Y+12	; 0x0c
    42dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    42de:	ae 85       	ldd	r26, Y+14	; 0x0e
    42e0:	bf 85       	ldd	r27, Y+15	; 0x0f
    42e2:	7c 01       	movw	r14, r24
    42e4:	8d 01       	movw	r16, r26
    42e6:	17 fb       	bst	r17, 7
    42e8:	10 95       	com	r17
    42ea:	17 f9       	bld	r17, 7
    42ec:	10 95       	com	r17
    42ee:	6f 81       	ldd	r22, Y+7	; 0x07
    42f0:	78 85       	ldd	r23, Y+8	; 0x08
    42f2:	89 85       	ldd	r24, Y+9	; 0x09
    42f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f6:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    42fa:	9b 01       	movw	r18, r22
    42fc:	ac 01       	movw	r20, r24
    42fe:	c8 01       	movw	r24, r16
    4300:	b7 01       	movw	r22, r14
    4302:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	8b 83       	std	Y+3, r24	; 0x03
    430c:	9c 83       	std	Y+4, r25	; 0x04
    430e:	ad 83       	std	Y+5, r26	; 0x05
    4310:	be 83       	std	Y+6, r27	; 0x06

	LCD_VoidDisplayAnyNumber(Local_s32IntPart);
    4312:	8f 81       	ldd	r24, Y+7	; 0x07
    4314:	98 85       	ldd	r25, Y+8	; 0x08
    4316:	a9 85       	ldd	r26, Y+9	; 0x09
    4318:	ba 85       	ldd	r27, Y+10	; 0x0a
    431a:	bc 01       	movw	r22, r24
    431c:	cd 01       	movw	r24, r26
    431e:	0e 94 bb 24 	call	0x4976	; 0x4976 <LCD_VoidDisplayAnyNumber>
	if(Copy_f32Number - (s32) Copy_f32Number != 0){
    4322:	6c 85       	ldd	r22, Y+12	; 0x0c
    4324:	7d 85       	ldd	r23, Y+13	; 0x0d
    4326:	8e 85       	ldd	r24, Y+14	; 0x0e
    4328:	9f 85       	ldd	r25, Y+15	; 0x0f
    432a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	bc 01       	movw	r22, r24
    4334:	cd 01       	movw	r24, r26
    4336:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    433a:	9b 01       	movw	r18, r22
    433c:	ac 01       	movw	r20, r24
    433e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4340:	7d 85       	ldd	r23, Y+13	; 0x0d
    4342:	8e 85       	ldd	r24, Y+14	; 0x0e
    4344:	9f 85       	ldd	r25, Y+15	; 0x0f
    4346:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    434a:	dc 01       	movw	r26, r24
    434c:	cb 01       	movw	r24, r22
    434e:	bc 01       	movw	r22, r24
    4350:	cd 01       	movw	r24, r26
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e0       	ldi	r20, 0x00	; 0
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    435e:	88 23       	and	r24, r24
    4360:	19 f0       	breq	.+6      	; 0x4368 <LCD_DisplayFloatNumber+0x10e>
		LCD_vidLatch('.');
    4362:	8e e2       	ldi	r24, 0x2E	; 46
    4364:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>
	}
	u8 Local_u8FractDigits = LCD_u8ReturnNumOfDigits(Local_f32FractPart);
    4368:	8b 81       	ldd	r24, Y+3	; 0x03
    436a:	9c 81       	ldd	r25, Y+4	; 0x04
    436c:	ad 81       	ldd	r26, Y+5	; 0x05
    436e:	be 81       	ldd	r27, Y+6	; 0x06
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	0e 94 80 25 	call	0x4b00	; 0x4b00 <LCD_u8ReturnNumOfDigits>
    4378:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_u8Iterator = 0; Local_u8Iterator < Local_u8FractDigits; Local_u8Iterator++){
    437a:	19 82       	std	Y+1, r1	; 0x01
    437c:	39 c0       	rjmp	.+114    	; 0x43f0 <LCD_DisplayFloatNumber+0x196>
		Local_f32FractPart -= (s32) Local_f32FractPart;
    437e:	6b 81       	ldd	r22, Y+3	; 0x03
    4380:	7c 81       	ldd	r23, Y+4	; 0x04
    4382:	8d 81       	ldd	r24, Y+5	; 0x05
    4384:	9e 81       	ldd	r25, Y+6	; 0x06
    4386:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	bc 01       	movw	r22, r24
    4390:	cd 01       	movw	r24, r26
    4392:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4396:	9b 01       	movw	r18, r22
    4398:	ac 01       	movw	r20, r24
    439a:	6b 81       	ldd	r22, Y+3	; 0x03
    439c:	7c 81       	ldd	r23, Y+4	; 0x04
    439e:	8d 81       	ldd	r24, Y+5	; 0x05
    43a0:	9e 81       	ldd	r25, Y+6	; 0x06
    43a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	8b 83       	std	Y+3, r24	; 0x03
    43ac:	9c 83       	std	Y+4, r25	; 0x04
    43ae:	ad 83       	std	Y+5, r26	; 0x05
    43b0:	be 83       	std	Y+6, r27	; 0x06
		Local_f32FractPart *= 10;
    43b2:	6b 81       	ldd	r22, Y+3	; 0x03
    43b4:	7c 81       	ldd	r23, Y+4	; 0x04
    43b6:	8d 81       	ldd	r24, Y+5	; 0x05
    43b8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	40 e2       	ldi	r20, 0x20	; 32
    43c0:	51 e4       	ldi	r21, 0x41	; 65
    43c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	8b 83       	std	Y+3, r24	; 0x03
    43cc:	9c 83       	std	Y+4, r25	; 0x04
    43ce:	ad 83       	std	Y+5, r26	; 0x05
    43d0:	be 83       	std	Y+6, r27	; 0x06
		LCD_VoidDisplayAnyNumber((s32) Local_f32FractPart);
    43d2:	6b 81       	ldd	r22, Y+3	; 0x03
    43d4:	7c 81       	ldd	r23, Y+4	; 0x04
    43d6:	8d 81       	ldd	r24, Y+5	; 0x05
    43d8:	9e 81       	ldd	r25, Y+6	; 0x06
    43da:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    43de:	dc 01       	movw	r26, r24
    43e0:	cb 01       	movw	r24, r22
    43e2:	bc 01       	movw	r22, r24
    43e4:	cd 01       	movw	r24, r26
    43e6:	0e 94 bb 24 	call	0x4976	; 0x4976 <LCD_VoidDisplayAnyNumber>
	LCD_VoidDisplayAnyNumber(Local_s32IntPart);
	if(Copy_f32Number - (s32) Copy_f32Number != 0){
		LCD_vidLatch('.');
	}
	u8 Local_u8FractDigits = LCD_u8ReturnNumOfDigits(Local_f32FractPart);
	for(u8 Local_u8Iterator = 0; Local_u8Iterator < Local_u8FractDigits; Local_u8Iterator++){
    43ea:	89 81       	ldd	r24, Y+1	; 0x01
    43ec:	8f 5f       	subi	r24, 0xFF	; 255
    43ee:	89 83       	std	Y+1, r24	; 0x01
    43f0:	99 81       	ldd	r25, Y+1	; 0x01
    43f2:	8a 81       	ldd	r24, Y+2	; 0x02
    43f4:	98 17       	cp	r25, r24
    43f6:	18 f2       	brcs	.-122    	; 0x437e <LCD_DisplayFloatNumber+0x124>
		Local_f32FractPart -= (s32) Local_f32FractPart;
		Local_f32FractPart *= 10;
		LCD_VoidDisplayAnyNumber((s32) Local_f32FractPart);
	}

	return Local_enuErrorState = ES_OK;
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	8b 87       	std	Y+11, r24	; 0x0b
    43fc:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    43fe:	2f 96       	adiw	r28, 0x0f	; 15
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	f8 94       	cli
    4404:	de bf       	out	0x3e, r29	; 62
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	cd bf       	out	0x3d, r28	; 61
    440a:	cf 91       	pop	r28
    440c:	df 91       	pop	r29
    440e:	1f 91       	pop	r17
    4410:	0f 91       	pop	r16
    4412:	ff 90       	pop	r15
    4414:	ef 90       	pop	r14
    4416:	08 95       	ret

00004418 <LCD_enuDisplayExtraChar>:
ES_t LCD_enuDisplayExtraChar(u8* Copy_pu8Character,u8 Copy_u8CharNum ,u8 Copy_u8Position , u8 Copy_u8Entry)
{
    4418:	df 93       	push	r29
    441a:	cf 93       	push	r28
    441c:	cd b7       	in	r28, 0x3d	; 61
    441e:	de b7       	in	r29, 0x3e	; 62
    4420:	27 97       	sbiw	r28, 0x07	; 7
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	f8 94       	cli
    4426:	de bf       	out	0x3e, r29	; 62
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	cd bf       	out	0x3d, r28	; 61
    442c:	9c 83       	std	Y+4, r25	; 0x04
    442e:	8b 83       	std	Y+3, r24	; 0x03
    4430:	6d 83       	std	Y+5, r22	; 0x05
    4432:	4e 83       	std	Y+6, r20	; 0x06
    4434:	2f 83       	std	Y+7, r18	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    4436:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_u8CharNum <= 8)
    4438:	8d 81       	ldd	r24, Y+5	; 0x05
    443a:	89 30       	cpi	r24, 0x09	; 9
    443c:	08 f0       	brcs	.+2      	; 0x4440 <LCD_enuDisplayExtraChar+0x28>
    443e:	42 c0       	rjmp	.+132    	; 0x44c4 <LCD_enuDisplayExtraChar+0xac>
	{
		LCD_invidSendCommend(0x40);
    4440:	80 e4       	ldi	r24, 0x40	; 64
    4442:	0e 94 cb 23 	call	0x4796	; 0x4796 <LCD_invidSendCommend>
		u8 Local_u8Iter ;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	63 e0       	ldi	r22, 0x03	; 3
    444a:	41 e0       	ldi	r20, 0x01	; 1
    444c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
		for (Local_u8Iter=0 ; Local_u8Iter < (Copy_u8CharNum *8) ;Local_u8Iter ++)
    4450:	19 82       	std	Y+1, r1	; 0x01
    4452:	0e c0       	rjmp	.+28     	; 0x4470 <LCD_enuDisplayExtraChar+0x58>
		{
			LCD_vidLatch(Copy_pu8Character[Local_u8Iter]);
    4454:	89 81       	ldd	r24, Y+1	; 0x01
    4456:	28 2f       	mov	r18, r24
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	8b 81       	ldd	r24, Y+3	; 0x03
    445c:	9c 81       	ldd	r25, Y+4	; 0x04
    445e:	fc 01       	movw	r30, r24
    4460:	e2 0f       	add	r30, r18
    4462:	f3 1f       	adc	r31, r19
    4464:	80 81       	ld	r24, Z
    4466:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>
	if (Copy_u8CharNum <= 8)
	{
		LCD_invidSendCommend(0x40);
		u8 Local_u8Iter ;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		for (Local_u8Iter=0 ; Local_u8Iter < (Copy_u8CharNum *8) ;Local_u8Iter ++)
    446a:	89 81       	ldd	r24, Y+1	; 0x01
    446c:	8f 5f       	subi	r24, 0xFF	; 255
    446e:	89 83       	std	Y+1, r24	; 0x01
    4470:	89 81       	ldd	r24, Y+1	; 0x01
    4472:	28 2f       	mov	r18, r24
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	8d 81       	ldd	r24, Y+5	; 0x05
    4478:	88 2f       	mov	r24, r24
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	88 0f       	add	r24, r24
    447e:	99 1f       	adc	r25, r25
    4480:	88 0f       	add	r24, r24
    4482:	99 1f       	adc	r25, r25
    4484:	88 0f       	add	r24, r24
    4486:	99 1f       	adc	r25, r25
    4488:	28 17       	cp	r18, r24
    448a:	39 07       	cpc	r19, r25
    448c:	1c f3       	brlt	.-58     	; 0x4454 <LCD_enuDisplayExtraChar+0x3c>
		{
			LCD_vidLatch(Copy_pu8Character[Local_u8Iter]);
		}
		if (Copy_u8Entry == 0x04)
    448e:	8f 81       	ldd	r24, Y+7	; 0x07
    4490:	84 30       	cpi	r24, 0x04	; 4
    4492:	31 f4       	brne	.+12     	; 0x44a0 <LCD_enuDisplayExtraChar+0x88>
		{
			LCD_invidSendCommend(Copy_u8Position);
    4494:	8e 81       	ldd	r24, Y+6	; 0x06
    4496:	0e 94 cb 23 	call	0x4796	; 0x4796 <LCD_invidSendCommend>
			LCD_invidSendCommend(Copy_u8Entry);
    449a:	8f 81       	ldd	r24, Y+7	; 0x07
    449c:	0e 94 cb 23 	call	0x4796	; 0x4796 <LCD_invidSendCommend>
		}
		for (Local_u8Iter=0 ; Local_u8Iter < Copy_u8CharNum  ;Local_u8Iter ++)
    44a0:	19 82       	std	Y+1, r1	; 0x01
    44a2:	0b c0       	rjmp	.+22     	; 0x44ba <LCD_enuDisplayExtraChar+0xa2>
		{
			DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	63 e0       	ldi	r22, 0x03	; 3
    44a8:	41 e0       	ldi	r20, 0x01	; 1
    44aa:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
			LCD_vidLatch(Local_u8Iter);
    44ae:	89 81       	ldd	r24, Y+1	; 0x01
    44b0:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>
		if (Copy_u8Entry == 0x04)
		{
			LCD_invidSendCommend(Copy_u8Position);
			LCD_invidSendCommend(Copy_u8Entry);
		}
		for (Local_u8Iter=0 ; Local_u8Iter < Copy_u8CharNum  ;Local_u8Iter ++)
    44b4:	89 81       	ldd	r24, Y+1	; 0x01
    44b6:	8f 5f       	subi	r24, 0xFF	; 255
    44b8:	89 83       	std	Y+1, r24	; 0x01
    44ba:	99 81       	ldd	r25, Y+1	; 0x01
    44bc:	8d 81       	ldd	r24, Y+5	; 0x05
    44be:	98 17       	cp	r25, r24
    44c0:	88 f3       	brcs	.-30     	; 0x44a4 <LCD_enuDisplayExtraChar+0x8c>
    44c2:	02 c0       	rjmp	.+4      	; 0x44c8 <LCD_enuDisplayExtraChar+0xb0>
			LCD_vidLatch(Local_u8Iter);
		}
	}
	else
	{
		Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    44c4:	85 e0       	ldi	r24, 0x05	; 5
    44c6:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    44c8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    44ca:	27 96       	adiw	r28, 0x07	; 7
    44cc:	0f b6       	in	r0, 0x3f	; 63
    44ce:	f8 94       	cli
    44d0:	de bf       	out	0x3e, r29	; 62
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	cd bf       	out	0x3d, r28	; 61
    44d6:	cf 91       	pop	r28
    44d8:	df 91       	pop	r29
    44da:	08 95       	ret

000044dc <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    44dc:	df 93       	push	r29
    44de:	cf 93       	push	r28
    44e0:	cd b7       	in	r28, 0x3d	; 61
    44e2:	de b7       	in	r29, 0x3e	; 62
    44e4:	6d 97       	sbiw	r28, 0x1d	; 29
    44e6:	0f b6       	in	r0, 0x3f	; 63
    44e8:	f8 94       	cli
    44ea:	de bf       	out	0x3e, r29	; 62
    44ec:	0f be       	out	0x3f, r0	; 63
    44ee:	cd bf       	out	0x3d, r28	; 61
    44f0:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	64 e0       	ldi	r22, 0x04	; 4
    44f6:	40 e0       	ldi	r20, 0x00	; 0
    44f8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	66 e0       	ldi	r22, 0x06	; 6
    4500:	40 e0       	ldi	r20, 0x00	; 0
    4502:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    4506:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4508:	98 2f       	mov	r25, r24
    450a:	99 1f       	adc	r25, r25
    450c:	99 27       	eor	r25, r25
    450e:	99 1f       	adc	r25, r25
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	62 e0       	ldi	r22, 0x02	; 2
    4514:	49 2f       	mov	r20, r25
    4516:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    451a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    451c:	82 95       	swap	r24
    451e:	86 95       	lsr	r24
    4520:	86 95       	lsr	r24
    4522:	83 70       	andi	r24, 0x03	; 3
    4524:	98 2f       	mov	r25, r24
    4526:	91 70       	andi	r25, 0x01	; 1
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	65 e0       	ldi	r22, 0x05	; 5
    452c:	49 2f       	mov	r20, r25
    452e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    4532:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4534:	82 95       	swap	r24
    4536:	86 95       	lsr	r24
    4538:	87 70       	andi	r24, 0x07	; 7
    453a:	98 2f       	mov	r25, r24
    453c:	91 70       	andi	r25, 0x01	; 1
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	67 e0       	ldi	r22, 0x07	; 7
    4542:	49 2f       	mov	r20, r25
    4544:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    4548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    454a:	82 95       	swap	r24
    454c:	8f 70       	andi	r24, 0x0F	; 15
    454e:	98 2f       	mov	r25, r24
    4550:	91 70       	andi	r25, 0x01	; 1
    4552:	82 e0       	ldi	r24, 0x02	; 2
    4554:	62 e0       	ldi	r22, 0x02	; 2
    4556:	49 2f       	mov	r20, r25
    4558:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    455c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    455e:	86 95       	lsr	r24
    4560:	86 95       	lsr	r24
    4562:	86 95       	lsr	r24
    4564:	98 2f       	mov	r25, r24
    4566:	91 70       	andi	r25, 0x01	; 1
    4568:	82 e0       	ldi	r24, 0x02	; 2
    456a:	65 e0       	ldi	r22, 0x05	; 5
    456c:	49 2f       	mov	r20, r25
    456e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    4572:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4574:	86 95       	lsr	r24
    4576:	86 95       	lsr	r24
    4578:	98 2f       	mov	r25, r24
    457a:	91 70       	andi	r25, 0x01	; 1
    457c:	82 e0       	ldi	r24, 0x02	; 2
    457e:	67 e0       	ldi	r22, 0x07	; 7
    4580:	49 2f       	mov	r20, r25
    4582:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    4586:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4588:	86 95       	lsr	r24
    458a:	98 2f       	mov	r25, r24
    458c:	91 70       	andi	r25, 0x01	; 1
    458e:	83 e0       	ldi	r24, 0x03	; 3
    4590:	62 e0       	ldi	r22, 0x02	; 2
    4592:	49 2f       	mov	r20, r25
    4594:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    4598:	8d 8d       	ldd	r24, Y+29	; 0x1d
    459a:	98 2f       	mov	r25, r24
    459c:	91 70       	andi	r25, 0x01	; 1
    459e:	83 e0       	ldi	r24, 0x03	; 3
    45a0:	65 e0       	ldi	r22, 0x05	; 5
    45a2:	49 2f       	mov	r20, r25
    45a4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	66 e0       	ldi	r22, 0x06	; 6
    45ac:	41 e0       	ldi	r20, 0x01	; 1
    45ae:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	a0 e2       	ldi	r26, 0x20	; 32
    45b8:	b1 e4       	ldi	r27, 0x41	; 65
    45ba:	89 8f       	std	Y+25, r24	; 0x19
    45bc:	9a 8f       	std	Y+26, r25	; 0x1a
    45be:	ab 8f       	std	Y+27, r26	; 0x1b
    45c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c2:	69 8d       	ldd	r22, Y+25	; 0x19
    45c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	4a e7       	ldi	r20, 0x7A	; 122
    45d0:	53 e4       	ldi	r21, 0x43	; 67
    45d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	8d 8b       	std	Y+21, r24	; 0x15
    45dc:	9e 8b       	std	Y+22, r25	; 0x16
    45de:	af 8b       	std	Y+23, r26	; 0x17
    45e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45e2:	6d 89       	ldd	r22, Y+21	; 0x15
    45e4:	7e 89       	ldd	r23, Y+22	; 0x16
    45e6:	8f 89       	ldd	r24, Y+23	; 0x17
    45e8:	98 8d       	ldd	r25, Y+24	; 0x18
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	40 e8       	ldi	r20, 0x80	; 128
    45f0:	5f e3       	ldi	r21, 0x3F	; 63
    45f2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    45f6:	88 23       	and	r24, r24
    45f8:	2c f4       	brge	.+10     	; 0x4604 <LCD_vidLatch+0x128>
		__ticks = 1;
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	9c 8b       	std	Y+20, r25	; 0x14
    4600:	8b 8b       	std	Y+19, r24	; 0x13
    4602:	3f c0       	rjmp	.+126    	; 0x4682 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    4604:	6d 89       	ldd	r22, Y+21	; 0x15
    4606:	7e 89       	ldd	r23, Y+22	; 0x16
    4608:	8f 89       	ldd	r24, Y+23	; 0x17
    460a:	98 8d       	ldd	r25, Y+24	; 0x18
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	3f ef       	ldi	r19, 0xFF	; 255
    4610:	4f e7       	ldi	r20, 0x7F	; 127
    4612:	57 e4       	ldi	r21, 0x47	; 71
    4614:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4618:	18 16       	cp	r1, r24
    461a:	4c f5       	brge	.+82     	; 0x466e <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461c:	69 8d       	ldd	r22, Y+25	; 0x19
    461e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e2       	ldi	r20, 0x20	; 32
    462a:	51 e4       	ldi	r21, 0x41	; 65
    462c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	bc 01       	movw	r22, r24
    4636:	cd 01       	movw	r24, r26
    4638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	9c 8b       	std	Y+20, r25	; 0x14
    4642:	8b 8b       	std	Y+19, r24	; 0x13
    4644:	0f c0       	rjmp	.+30     	; 0x4664 <LCD_vidLatch+0x188>
    4646:	89 e1       	ldi	r24, 0x19	; 25
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	9a 8b       	std	Y+18, r25	; 0x12
    464c:	89 8b       	std	Y+17, r24	; 0x11
    464e:	89 89       	ldd	r24, Y+17	; 0x11
    4650:	9a 89       	ldd	r25, Y+18	; 0x12
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <LCD_vidLatch+0x176>
    4656:	9a 8b       	std	Y+18, r25	; 0x12
    4658:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465a:	8b 89       	ldd	r24, Y+19	; 0x13
    465c:	9c 89       	ldd	r25, Y+20	; 0x14
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	9c 8b       	std	Y+20, r25	; 0x14
    4662:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4664:	8b 89       	ldd	r24, Y+19	; 0x13
    4666:	9c 89       	ldd	r25, Y+20	; 0x14
    4668:	00 97       	sbiw	r24, 0x00	; 0
    466a:	69 f7       	brne	.-38     	; 0x4646 <LCD_vidLatch+0x16a>
    466c:	14 c0       	rjmp	.+40     	; 0x4696 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466e:	6d 89       	ldd	r22, Y+21	; 0x15
    4670:	7e 89       	ldd	r23, Y+22	; 0x16
    4672:	8f 89       	ldd	r24, Y+23	; 0x17
    4674:	98 8d       	ldd	r25, Y+24	; 0x18
    4676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	9c 8b       	std	Y+20, r25	; 0x14
    4680:	8b 8b       	std	Y+19, r24	; 0x13
    4682:	8b 89       	ldd	r24, Y+19	; 0x13
    4684:	9c 89       	ldd	r25, Y+20	; 0x14
    4686:	98 8b       	std	Y+16, r25	; 0x10
    4688:	8f 87       	std	Y+15, r24	; 0x0f
    468a:	8f 85       	ldd	r24, Y+15	; 0x0f
    468c:	98 89       	ldd	r25, Y+16	; 0x10
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	f1 f7       	brne	.-4      	; 0x468e <LCD_vidLatch+0x1b2>
    4692:	98 8b       	std	Y+16, r25	; 0x10
    4694:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	66 e0       	ldi	r22, 0x06	; 6
    469a:	40 e0       	ldi	r20, 0x00	; 0
    469c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    46a0:	80 e0       	ldi	r24, 0x00	; 0
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	a0 e2       	ldi	r26, 0x20	; 32
    46a6:	b1 e4       	ldi	r27, 0x41	; 65
    46a8:	8b 87       	std	Y+11, r24	; 0x0b
    46aa:	9c 87       	std	Y+12, r25	; 0x0c
    46ac:	ad 87       	std	Y+13, r26	; 0x0d
    46ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    46b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    46b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	4a e7       	ldi	r20, 0x7A	; 122
    46be:	53 e4       	ldi	r21, 0x43	; 67
    46c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	8f 83       	std	Y+7, r24	; 0x07
    46ca:	98 87       	std	Y+8, r25	; 0x08
    46cc:	a9 87       	std	Y+9, r26	; 0x09
    46ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46d0:	6f 81       	ldd	r22, Y+7	; 0x07
    46d2:	78 85       	ldd	r23, Y+8	; 0x08
    46d4:	89 85       	ldd	r24, Y+9	; 0x09
    46d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	40 e8       	ldi	r20, 0x80	; 128
    46de:	5f e3       	ldi	r21, 0x3F	; 63
    46e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    46e4:	88 23       	and	r24, r24
    46e6:	2c f4       	brge	.+10     	; 0x46f2 <LCD_vidLatch+0x216>
		__ticks = 1;
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	9e 83       	std	Y+6, r25	; 0x06
    46ee:	8d 83       	std	Y+5, r24	; 0x05
    46f0:	3f c0       	rjmp	.+126    	; 0x4770 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    46f2:	6f 81       	ldd	r22, Y+7	; 0x07
    46f4:	78 85       	ldd	r23, Y+8	; 0x08
    46f6:	89 85       	ldd	r24, Y+9	; 0x09
    46f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46fa:	20 e0       	ldi	r18, 0x00	; 0
    46fc:	3f ef       	ldi	r19, 0xFF	; 255
    46fe:	4f e7       	ldi	r20, 0x7F	; 127
    4700:	57 e4       	ldi	r21, 0x47	; 71
    4702:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4706:	18 16       	cp	r1, r24
    4708:	4c f5       	brge	.+82     	; 0x475c <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    470a:	6b 85       	ldd	r22, Y+11	; 0x0b
    470c:	7c 85       	ldd	r23, Y+12	; 0x0c
    470e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4710:	9e 85       	ldd	r25, Y+14	; 0x0e
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	40 e2       	ldi	r20, 0x20	; 32
    4718:	51 e4       	ldi	r21, 0x41	; 65
    471a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471e:	dc 01       	movw	r26, r24
    4720:	cb 01       	movw	r24, r22
    4722:	bc 01       	movw	r22, r24
    4724:	cd 01       	movw	r24, r26
    4726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	9e 83       	std	Y+6, r25	; 0x06
    4730:	8d 83       	std	Y+5, r24	; 0x05
    4732:	0f c0       	rjmp	.+30     	; 0x4752 <LCD_vidLatch+0x276>
    4734:	89 e1       	ldi	r24, 0x19	; 25
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	9c 83       	std	Y+4, r25	; 0x04
    473a:	8b 83       	std	Y+3, r24	; 0x03
    473c:	8b 81       	ldd	r24, Y+3	; 0x03
    473e:	9c 81       	ldd	r25, Y+4	; 0x04
    4740:	01 97       	sbiw	r24, 0x01	; 1
    4742:	f1 f7       	brne	.-4      	; 0x4740 <LCD_vidLatch+0x264>
    4744:	9c 83       	std	Y+4, r25	; 0x04
    4746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4748:	8d 81       	ldd	r24, Y+5	; 0x05
    474a:	9e 81       	ldd	r25, Y+6	; 0x06
    474c:	01 97       	sbiw	r24, 0x01	; 1
    474e:	9e 83       	std	Y+6, r25	; 0x06
    4750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4752:	8d 81       	ldd	r24, Y+5	; 0x05
    4754:	9e 81       	ldd	r25, Y+6	; 0x06
    4756:	00 97       	sbiw	r24, 0x00	; 0
    4758:	69 f7       	brne	.-38     	; 0x4734 <LCD_vidLatch+0x258>
    475a:	14 c0       	rjmp	.+40     	; 0x4784 <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475c:	6f 81       	ldd	r22, Y+7	; 0x07
    475e:	78 85       	ldd	r23, Y+8	; 0x08
    4760:	89 85       	ldd	r24, Y+9	; 0x09
    4762:	9a 85       	ldd	r25, Y+10	; 0x0a
    4764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	9e 83       	std	Y+6, r25	; 0x06
    476e:	8d 83       	std	Y+5, r24	; 0x05
    4770:	8d 81       	ldd	r24, Y+5	; 0x05
    4772:	9e 81       	ldd	r25, Y+6	; 0x06
    4774:	9a 83       	std	Y+2, r25	; 0x02
    4776:	89 83       	std	Y+1, r24	; 0x01
    4778:	89 81       	ldd	r24, Y+1	; 0x01
    477a:	9a 81       	ldd	r25, Y+2	; 0x02
    477c:	01 97       	sbiw	r24, 0x01	; 1
    477e:	f1 f7       	brne	.-4      	; 0x477c <LCD_vidLatch+0x2a0>
    4780:	9a 83       	std	Y+2, r25	; 0x02
    4782:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    4784:	6d 96       	adiw	r28, 0x1d	; 29
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	cf 91       	pop	r28
    4792:	df 91       	pop	r29
    4794:	08 95       	ret

00004796 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    4796:	df 93       	push	r29
    4798:	cf 93       	push	r28
    479a:	cd b7       	in	r28, 0x3d	; 61
    479c:	de b7       	in	r29, 0x3e	; 62
    479e:	2f 97       	sbiw	r28, 0x0f	; 15
    47a0:	0f b6       	in	r0, 0x3f	; 63
    47a2:	f8 94       	cli
    47a4:	de bf       	out	0x3e, r29	; 62
    47a6:	0f be       	out	0x3f, r0	; 63
    47a8:	cd bf       	out	0x3d, r28	; 61
    47aa:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    47ac:	81 e0       	ldi	r24, 0x01	; 1
    47ae:	63 e0       	ldi	r22, 0x03	; 3
    47b0:	40 e0       	ldi	r20, 0x00	; 0
    47b2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	64 e0       	ldi	r22, 0x04	; 4
    47ba:	40 e0       	ldi	r20, 0x00	; 0
    47bc:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	66 e0       	ldi	r22, 0x06	; 6
    47c4:	40 e0       	ldi	r20, 0x00	; 0
    47c6:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    47ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    47cc:	98 2f       	mov	r25, r24
    47ce:	99 1f       	adc	r25, r25
    47d0:	99 27       	eor	r25, r25
    47d2:	99 1f       	adc	r25, r25
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	62 e0       	ldi	r22, 0x02	; 2
    47d8:	49 2f       	mov	r20, r25
    47da:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    47de:	8f 85       	ldd	r24, Y+15	; 0x0f
    47e0:	82 95       	swap	r24
    47e2:	86 95       	lsr	r24
    47e4:	86 95       	lsr	r24
    47e6:	83 70       	andi	r24, 0x03	; 3
    47e8:	98 2f       	mov	r25, r24
    47ea:	91 70       	andi	r25, 0x01	; 1
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	65 e0       	ldi	r22, 0x05	; 5
    47f0:	49 2f       	mov	r20, r25
    47f2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    47f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    47f8:	82 95       	swap	r24
    47fa:	86 95       	lsr	r24
    47fc:	87 70       	andi	r24, 0x07	; 7
    47fe:	98 2f       	mov	r25, r24
    4800:	91 70       	andi	r25, 0x01	; 1
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	67 e0       	ldi	r22, 0x07	; 7
    4806:	49 2f       	mov	r20, r25
    4808:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    480c:	8f 85       	ldd	r24, Y+15	; 0x0f
    480e:	82 95       	swap	r24
    4810:	8f 70       	andi	r24, 0x0F	; 15
    4812:	98 2f       	mov	r25, r24
    4814:	91 70       	andi	r25, 0x01	; 1
    4816:	82 e0       	ldi	r24, 0x02	; 2
    4818:	62 e0       	ldi	r22, 0x02	; 2
    481a:	49 2f       	mov	r20, r25
    481c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    4820:	8f 85       	ldd	r24, Y+15	; 0x0f
    4822:	86 95       	lsr	r24
    4824:	86 95       	lsr	r24
    4826:	86 95       	lsr	r24
    4828:	98 2f       	mov	r25, r24
    482a:	91 70       	andi	r25, 0x01	; 1
    482c:	82 e0       	ldi	r24, 0x02	; 2
    482e:	65 e0       	ldi	r22, 0x05	; 5
    4830:	49 2f       	mov	r20, r25
    4832:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    4836:	8f 85       	ldd	r24, Y+15	; 0x0f
    4838:	86 95       	lsr	r24
    483a:	86 95       	lsr	r24
    483c:	98 2f       	mov	r25, r24
    483e:	91 70       	andi	r25, 0x01	; 1
    4840:	82 e0       	ldi	r24, 0x02	; 2
    4842:	67 e0       	ldi	r22, 0x07	; 7
    4844:	49 2f       	mov	r20, r25
    4846:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    484a:	8f 85       	ldd	r24, Y+15	; 0x0f
    484c:	86 95       	lsr	r24
    484e:	98 2f       	mov	r25, r24
    4850:	91 70       	andi	r25, 0x01	; 1
    4852:	83 e0       	ldi	r24, 0x03	; 3
    4854:	62 e0       	ldi	r22, 0x02	; 2
    4856:	49 2f       	mov	r20, r25
    4858:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    485c:	8f 85       	ldd	r24, Y+15	; 0x0f
    485e:	98 2f       	mov	r25, r24
    4860:	91 70       	andi	r25, 0x01	; 1
    4862:	83 e0       	ldi	r24, 0x03	; 3
    4864:	65 e0       	ldi	r22, 0x05	; 5
    4866:	49 2f       	mov	r20, r25
    4868:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	66 e0       	ldi	r22, 0x06	; 6
    4870:	41 e0       	ldi	r20, 0x01	; 1
    4872:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    4876:	80 e0       	ldi	r24, 0x00	; 0
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	a0 e2       	ldi	r26, 0x20	; 32
    487c:	b1 e4       	ldi	r27, 0x41	; 65
    487e:	8b 87       	std	Y+11, r24	; 0x0b
    4880:	9c 87       	std	Y+12, r25	; 0x0c
    4882:	ad 87       	std	Y+13, r26	; 0x0d
    4884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4886:	6b 85       	ldd	r22, Y+11	; 0x0b
    4888:	7c 85       	ldd	r23, Y+12	; 0x0c
    488a:	8d 85       	ldd	r24, Y+13	; 0x0d
    488c:	9e 85       	ldd	r25, Y+14	; 0x0e
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	4a e7       	ldi	r20, 0x7A	; 122
    4894:	53 e4       	ldi	r21, 0x43	; 67
    4896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	8f 83       	std	Y+7, r24	; 0x07
    48a0:	98 87       	std	Y+8, r25	; 0x08
    48a2:	a9 87       	std	Y+9, r26	; 0x09
    48a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48a6:	6f 81       	ldd	r22, Y+7	; 0x07
    48a8:	78 85       	ldd	r23, Y+8	; 0x08
    48aa:	89 85       	ldd	r24, Y+9	; 0x09
    48ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	40 e8       	ldi	r20, 0x80	; 128
    48b4:	5f e3       	ldi	r21, 0x3F	; 63
    48b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48ba:	88 23       	and	r24, r24
    48bc:	2c f4       	brge	.+10     	; 0x48c8 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	9e 83       	std	Y+6, r25	; 0x06
    48c4:	8d 83       	std	Y+5, r24	; 0x05
    48c6:	3f c0       	rjmp	.+126    	; 0x4946 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    48c8:	6f 81       	ldd	r22, Y+7	; 0x07
    48ca:	78 85       	ldd	r23, Y+8	; 0x08
    48cc:	89 85       	ldd	r24, Y+9	; 0x09
    48ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	3f ef       	ldi	r19, 0xFF	; 255
    48d4:	4f e7       	ldi	r20, 0x7F	; 127
    48d6:	57 e4       	ldi	r21, 0x47	; 71
    48d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48dc:	18 16       	cp	r1, r24
    48de:	4c f5       	brge	.+82     	; 0x4932 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    48e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    48e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    48e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    48e8:	20 e0       	ldi	r18, 0x00	; 0
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	40 e2       	ldi	r20, 0x20	; 32
    48ee:	51 e4       	ldi	r21, 0x41	; 65
    48f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	bc 01       	movw	r22, r24
    48fa:	cd 01       	movw	r24, r26
    48fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4900:	dc 01       	movw	r26, r24
    4902:	cb 01       	movw	r24, r22
    4904:	9e 83       	std	Y+6, r25	; 0x06
    4906:	8d 83       	std	Y+5, r24	; 0x05
    4908:	0f c0       	rjmp	.+30     	; 0x4928 <LCD_invidSendCommend+0x192>
    490a:	89 e1       	ldi	r24, 0x19	; 25
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	9c 83       	std	Y+4, r25	; 0x04
    4910:	8b 83       	std	Y+3, r24	; 0x03
    4912:	8b 81       	ldd	r24, Y+3	; 0x03
    4914:	9c 81       	ldd	r25, Y+4	; 0x04
    4916:	01 97       	sbiw	r24, 0x01	; 1
    4918:	f1 f7       	brne	.-4      	; 0x4916 <LCD_invidSendCommend+0x180>
    491a:	9c 83       	std	Y+4, r25	; 0x04
    491c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    491e:	8d 81       	ldd	r24, Y+5	; 0x05
    4920:	9e 81       	ldd	r25, Y+6	; 0x06
    4922:	01 97       	sbiw	r24, 0x01	; 1
    4924:	9e 83       	std	Y+6, r25	; 0x06
    4926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4928:	8d 81       	ldd	r24, Y+5	; 0x05
    492a:	9e 81       	ldd	r25, Y+6	; 0x06
    492c:	00 97       	sbiw	r24, 0x00	; 0
    492e:	69 f7       	brne	.-38     	; 0x490a <LCD_invidSendCommend+0x174>
    4930:	14 c0       	rjmp	.+40     	; 0x495a <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4932:	6f 81       	ldd	r22, Y+7	; 0x07
    4934:	78 85       	ldd	r23, Y+8	; 0x08
    4936:	89 85       	ldd	r24, Y+9	; 0x09
    4938:	9a 85       	ldd	r25, Y+10	; 0x0a
    493a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	9e 83       	std	Y+6, r25	; 0x06
    4944:	8d 83       	std	Y+5, r24	; 0x05
    4946:	8d 81       	ldd	r24, Y+5	; 0x05
    4948:	9e 81       	ldd	r25, Y+6	; 0x06
    494a:	9a 83       	std	Y+2, r25	; 0x02
    494c:	89 83       	std	Y+1, r24	; 0x01
    494e:	89 81       	ldd	r24, Y+1	; 0x01
    4950:	9a 81       	ldd	r25, Y+2	; 0x02
    4952:	01 97       	sbiw	r24, 0x01	; 1
    4954:	f1 f7       	brne	.-4      	; 0x4952 <LCD_invidSendCommend+0x1bc>
    4956:	9a 83       	std	Y+2, r25	; 0x02
    4958:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	66 e0       	ldi	r22, 0x06	; 6
    495e:	40 e0       	ldi	r20, 0x00	; 0
    4960:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
}
    4964:	2f 96       	adiw	r28, 0x0f	; 15
    4966:	0f b6       	in	r0, 0x3f	; 63
    4968:	f8 94       	cli
    496a:	de bf       	out	0x3e, r29	; 62
    496c:	0f be       	out	0x3f, r0	; 63
    496e:	cd bf       	out	0x3d, r28	; 61
    4970:	cf 91       	pop	r28
    4972:	df 91       	pop	r29
    4974:	08 95       	ret

00004976 <LCD_VoidDisplayAnyNumber>:


static inline void LCD_VoidDisplayAnyNumber(s32 Copy_s32Num)
{
    4976:	df 93       	push	r29
    4978:	cf 93       	push	r28
    497a:	cd b7       	in	r28, 0x3d	; 61
    497c:	de b7       	in	r29, 0x3e	; 62
    497e:	2a 97       	sbiw	r28, 0x0a	; 10
    4980:	0f b6       	in	r0, 0x3f	; 63
    4982:	f8 94       	cli
    4984:	de bf       	out	0x3e, r29	; 62
    4986:	0f be       	out	0x3f, r0	; 63
    4988:	cd bf       	out	0x3d, r28	; 61
    498a:	6f 83       	std	Y+7, r22	; 0x07
    498c:	78 87       	std	Y+8, r23	; 0x08
    498e:	89 87       	std	Y+9, r24	; 0x09
    4990:	9a 87       	std	Y+10, r25	; 0x0a

	s32 Local_s32Reverse=0;
    4992:	1b 82       	std	Y+3, r1	; 0x03
    4994:	1c 82       	std	Y+4, r1	; 0x04
    4996:	1d 82       	std	Y+5, r1	; 0x05
    4998:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    499a:	1a 82       	std	Y+2, r1	; 0x02
    499c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_s32Num == 0){
    499e:	8f 81       	ldd	r24, Y+7	; 0x07
    49a0:	98 85       	ldd	r25, Y+8	; 0x08
    49a2:	a9 85       	ldd	r26, Y+9	; 0x09
    49a4:	ba 85       	ldd	r27, Y+10	; 0x0a
    49a6:	00 97       	sbiw	r24, 0x00	; 0
    49a8:	a1 05       	cpc	r26, r1
    49aa:	b1 05       	cpc	r27, r1
    49ac:	41 f4       	brne	.+16     	; 0x49be <LCD_VoidDisplayAnyNumber+0x48>
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    49ae:	81 e0       	ldi	r24, 0x01	; 1
    49b0:	63 e0       	ldi	r22, 0x03	; 3
    49b2:	41 e0       	ldi	r20, 0x01	; 1
    49b4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
		LCD_vidLatch('0');
    49b8:	80 e3       	ldi	r24, 0x30	; 48
    49ba:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>
	}
	if(Copy_s32Num <0)
    49be:	8f 81       	ldd	r24, Y+7	; 0x07
    49c0:	98 85       	ldd	r25, Y+8	; 0x08
    49c2:	a9 85       	ldd	r26, Y+9	; 0x09
    49c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    49c6:	bb 23       	and	r27, r27
    49c8:	0c f0       	brlt	.+2      	; 0x49cc <LCD_VoidDisplayAnyNumber+0x56>
    49ca:	57 c0       	rjmp	.+174    	; 0x4a7a <LCD_VoidDisplayAnyNumber+0x104>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	63 e0       	ldi	r22, 0x03	; 3
    49d0:	41 e0       	ldi	r20, 0x01	; 1
    49d2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    49d6:	8d e2       	ldi	r24, 0x2D	; 45
    49d8:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    49dc:	8f 81       	ldd	r24, Y+7	; 0x07
    49de:	98 85       	ldd	r25, Y+8	; 0x08
    49e0:	a9 85       	ldd	r26, Y+9	; 0x09
    49e2:	ba 85       	ldd	r27, Y+10	; 0x0a
    49e4:	b0 95       	com	r27
    49e6:	a0 95       	com	r26
    49e8:	90 95       	com	r25
    49ea:	81 95       	neg	r24
    49ec:	9f 4f       	sbci	r25, 0xFF	; 255
    49ee:	af 4f       	sbci	r26, 0xFF	; 255
    49f0:	bf 4f       	sbci	r27, 0xFF	; 255
    49f2:	8f 83       	std	Y+7, r24	; 0x07
    49f4:	98 87       	std	Y+8, r25	; 0x08
    49f6:	a9 87       	std	Y+9, r26	; 0x09
    49f8:	ba 87       	std	Y+10, r27	; 0x0a
    49fa:	3f c0       	rjmp	.+126    	; 0x4a7a <LCD_VoidDisplayAnyNumber+0x104>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    49fc:	8f 81       	ldd	r24, Y+7	; 0x07
    49fe:	98 85       	ldd	r25, Y+8	; 0x08
    4a00:	a9 85       	ldd	r26, Y+9	; 0x09
    4a02:	ba 85       	ldd	r27, Y+10	; 0x0a
    4a04:	2a e0       	ldi	r18, 0x0A	; 10
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	40 e0       	ldi	r20, 0x00	; 0
    4a0a:	50 e0       	ldi	r21, 0x00	; 0
    4a0c:	bc 01       	movw	r22, r24
    4a0e:	cd 01       	movw	r24, r26
    4a10:	0e 94 be 2a 	call	0x557c	; 0x557c <__divmodsi4>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    4a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a1e:	ad 81       	ldd	r26, Y+5	; 0x05
    4a20:	be 81       	ldd	r27, Y+6	; 0x06
    4a22:	2a e0       	ldi	r18, 0x0A	; 10
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	40 e0       	ldi	r20, 0x00	; 0
    4a28:	50 e0       	ldi	r21, 0x00	; 0
    4a2a:	bc 01       	movw	r22, r24
    4a2c:	cd 01       	movw	r24, r26
    4a2e:	0e 94 9f 2a 	call	0x553e	; 0x553e <__mulsi3>
    4a32:	9b 01       	movw	r18, r22
    4a34:	ac 01       	movw	r20, r24
    4a36:	8a 81       	ldd	r24, Y+2	; 0x02
    4a38:	88 2f       	mov	r24, r24
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	a0 e0       	ldi	r26, 0x00	; 0
    4a3e:	b0 e0       	ldi	r27, 0x00	; 0
    4a40:	82 0f       	add	r24, r18
    4a42:	93 1f       	adc	r25, r19
    4a44:	a4 1f       	adc	r26, r20
    4a46:	b5 1f       	adc	r27, r21
    4a48:	8b 83       	std	Y+3, r24	; 0x03
    4a4a:	9c 83       	std	Y+4, r25	; 0x04
    4a4c:	ad 83       	std	Y+5, r26	; 0x05
    4a4e:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    4a50:	8f 81       	ldd	r24, Y+7	; 0x07
    4a52:	98 85       	ldd	r25, Y+8	; 0x08
    4a54:	a9 85       	ldd	r26, Y+9	; 0x09
    4a56:	ba 85       	ldd	r27, Y+10	; 0x0a
    4a58:	2a e0       	ldi	r18, 0x0A	; 10
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	bc 01       	movw	r22, r24
    4a62:	cd 01       	movw	r24, r26
    4a64:	0e 94 be 2a 	call	0x557c	; 0x557c <__divmodsi4>
    4a68:	da 01       	movw	r26, r20
    4a6a:	c9 01       	movw	r24, r18
    4a6c:	8f 83       	std	Y+7, r24	; 0x07
    4a6e:	98 87       	std	Y+8, r25	; 0x08
    4a70:	a9 87       	std	Y+9, r26	; 0x09
    4a72:	ba 87       	std	Y+10, r27	; 0x0a
		Local_u8NumDigit ++;
    4a74:	89 81       	ldd	r24, Y+1	; 0x01
    4a76:	8f 5f       	subi	r24, 0xFF	; 255
    4a78:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    4a7a:	8f 81       	ldd	r24, Y+7	; 0x07
    4a7c:	98 85       	ldd	r25, Y+8	; 0x08
    4a7e:	a9 85       	ldd	r26, Y+9	; 0x09
    4a80:	ba 85       	ldd	r27, Y+10	; 0x0a
    4a82:	00 97       	sbiw	r24, 0x00	; 0
    4a84:	a1 05       	cpc	r26, r1
    4a86:	b1 05       	cpc	r27, r1
    4a88:	09 f0       	breq	.+2      	; 0x4a8c <LCD_VoidDisplayAnyNumber+0x116>
    4a8a:	b8 cf       	rjmp	.-144    	; 0x49fc <LCD_VoidDisplayAnyNumber+0x86>
    4a8c:	2d c0       	rjmp	.+90     	; 0x4ae8 <LCD_VoidDisplayAnyNumber+0x172>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    4a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a90:	9c 81       	ldd	r25, Y+4	; 0x04
    4a92:	ad 81       	ldd	r26, Y+5	; 0x05
    4a94:	be 81       	ldd	r27, Y+6	; 0x06
    4a96:	2a e0       	ldi	r18, 0x0A	; 10
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e0       	ldi	r20, 0x00	; 0
    4a9c:	50 e0       	ldi	r21, 0x00	; 0
    4a9e:	bc 01       	movw	r22, r24
    4aa0:	cd 01       	movw	r24, r26
    4aa2:	0e 94 be 2a 	call	0x557c	; 0x557c <__divmodsi4>
    4aa6:	dc 01       	movw	r26, r24
    4aa8:	cb 01       	movw	r24, r22
    4aaa:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	63 e0       	ldi	r22, 0x03	; 3
    4ab0:	41 e0       	ldi	r20, 0x01	; 1
    4ab2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    4ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab8:	80 5d       	subi	r24, 0xD0	; 208
    4aba:	0e 94 6e 22 	call	0x44dc	; 0x44dc <LCD_vidLatch>
		Local_s32Reverse /= 10;
    4abe:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ac2:	ad 81       	ldd	r26, Y+5	; 0x05
    4ac4:	be 81       	ldd	r27, Y+6	; 0x06
    4ac6:	2a e0       	ldi	r18, 0x0A	; 10
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	40 e0       	ldi	r20, 0x00	; 0
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	bc 01       	movw	r22, r24
    4ad0:	cd 01       	movw	r24, r26
    4ad2:	0e 94 be 2a 	call	0x557c	; 0x557c <__divmodsi4>
    4ad6:	da 01       	movw	r26, r20
    4ad8:	c9 01       	movw	r24, r18
    4ada:	8b 83       	std	Y+3, r24	; 0x03
    4adc:	9c 83       	std	Y+4, r25	; 0x04
    4ade:	ad 83       	std	Y+5, r26	; 0x05
    4ae0:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    4ae2:	89 81       	ldd	r24, Y+1	; 0x01
    4ae4:	81 50       	subi	r24, 0x01	; 1
    4ae6:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    4ae8:	89 81       	ldd	r24, Y+1	; 0x01
    4aea:	88 23       	and	r24, r24
    4aec:	81 f6       	brne	.-96     	; 0x4a8e <LCD_VoidDisplayAnyNumber+0x118>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

}
    4aee:	2a 96       	adiw	r28, 0x0a	; 10
    4af0:	0f b6       	in	r0, 0x3f	; 63
    4af2:	f8 94       	cli
    4af4:	de bf       	out	0x3e, r29	; 62
    4af6:	0f be       	out	0x3f, r0	; 63
    4af8:	cd bf       	out	0x3d, r28	; 61
    4afa:	cf 91       	pop	r28
    4afc:	df 91       	pop	r29
    4afe:	08 95       	ret

00004b00 <LCD_u8ReturnNumOfDigits>:

static inline u8 LCD_u8ReturnNumOfDigits(f32 Copy_s32Num){
    4b00:	df 93       	push	r29
    4b02:	cf 93       	push	r28
    4b04:	00 d0       	rcall	.+0      	; 0x4b06 <LCD_u8ReturnNumOfDigits+0x6>
    4b06:	00 d0       	rcall	.+0      	; 0x4b08 <LCD_u8ReturnNumOfDigits+0x8>
    4b08:	0f 92       	push	r0
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
    4b0e:	6a 83       	std	Y+2, r22	; 0x02
    4b10:	7b 83       	std	Y+3, r23	; 0x03
    4b12:	8c 83       	std	Y+4, r24	; 0x04
    4b14:	9d 83       	std	Y+5, r25	; 0x05
	u8 Local_u8Digits = 0;
    4b16:	19 82       	std	Y+1, r1	; 0x01
    4b18:	2d c0       	rjmp	.+90     	; 0x4b74 <LCD_u8ReturnNumOfDigits+0x74>
	while (Copy_s32Num > 0){
		Copy_s32Num *= 10;
    4b1a:	6a 81       	ldd	r22, Y+2	; 0x02
    4b1c:	7b 81       	ldd	r23, Y+3	; 0x03
    4b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b20:	9d 81       	ldd	r25, Y+5	; 0x05
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	40 e2       	ldi	r20, 0x20	; 32
    4b28:	51 e4       	ldi	r21, 0x41	; 65
    4b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	8a 83       	std	Y+2, r24	; 0x02
    4b34:	9b 83       	std	Y+3, r25	; 0x03
    4b36:	ac 83       	std	Y+4, r26	; 0x04
    4b38:	bd 83       	std	Y+5, r27	; 0x05
		Copy_s32Num -= (s32) Copy_s32Num;
    4b3a:	6a 81       	ldd	r22, Y+2	; 0x02
    4b3c:	7b 81       	ldd	r23, Y+3	; 0x03
    4b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b40:	9d 81       	ldd	r25, Y+5	; 0x05
    4b42:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	bc 01       	movw	r22, r24
    4b4c:	cd 01       	movw	r24, r26
    4b4e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4b52:	9b 01       	movw	r18, r22
    4b54:	ac 01       	movw	r20, r24
    4b56:	6a 81       	ldd	r22, Y+2	; 0x02
    4b58:	7b 81       	ldd	r23, Y+3	; 0x03
    4b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    4b5e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4b62:	dc 01       	movw	r26, r24
    4b64:	cb 01       	movw	r24, r22
    4b66:	8a 83       	std	Y+2, r24	; 0x02
    4b68:	9b 83       	std	Y+3, r25	; 0x03
    4b6a:	ac 83       	std	Y+4, r26	; 0x04
    4b6c:	bd 83       	std	Y+5, r27	; 0x05
		Local_u8Digits++;
    4b6e:	89 81       	ldd	r24, Y+1	; 0x01
    4b70:	8f 5f       	subi	r24, 0xFF	; 255
    4b72:	89 83       	std	Y+1, r24	; 0x01

}

static inline u8 LCD_u8ReturnNumOfDigits(f32 Copy_s32Num){
	u8 Local_u8Digits = 0;
	while (Copy_s32Num > 0){
    4b74:	6a 81       	ldd	r22, Y+2	; 0x02
    4b76:	7b 81       	ldd	r23, Y+3	; 0x03
    4b78:	8c 81       	ldd	r24, Y+4	; 0x04
    4b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e0       	ldi	r20, 0x00	; 0
    4b82:	50 e0       	ldi	r21, 0x00	; 0
    4b84:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4b88:	18 16       	cp	r1, r24
    4b8a:	3c f2       	brlt	.-114    	; 0x4b1a <LCD_u8ReturnNumOfDigits+0x1a>
		Copy_s32Num *= 10;
		Copy_s32Num -= (s32) Copy_s32Num;
		Local_u8Digits++;
	}
	if(Local_u8Digits > MAX_FRACTION_DIGITS)
    4b8c:	89 81       	ldd	r24, Y+1	; 0x01
    4b8e:	84 30       	cpi	r24, 0x04	; 4
    4b90:	10 f0       	brcs	.+4      	; 0x4b96 <LCD_u8ReturnNumOfDigits+0x96>
		Local_u8Digits = MAX_FRACTION_DIGITS;
    4b92:	83 e0       	ldi	r24, 0x03	; 3
    4b94:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Digits;
    4b96:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b98:	0f 90       	pop	r0
    4b9a:	0f 90       	pop	r0
    4b9c:	0f 90       	pop	r0
    4b9e:	0f 90       	pop	r0
    4ba0:	0f 90       	pop	r0
    4ba2:	cf 91       	pop	r28
    4ba4:	df 91       	pop	r29
    4ba6:	08 95       	ret

00004ba8 <KPAD_enuInit>:
#include "KPAD_config.h"
#include "KPAD_priv.h"

extern PAD_t KPAD_AstrKeyPadConfig[NUM_KPAD];

ES_t KPAD_enuInit(PAD_t *Copy_pstrKeysConfig){
    4ba8:	df 93       	push	r29
    4baa:	cf 93       	push	r28
    4bac:	00 d0       	rcall	.+0      	; 0x4bae <KPAD_enuInit+0x6>
    4bae:	00 d0       	rcall	.+0      	; 0x4bb0 <KPAD_enuInit+0x8>
    4bb0:	00 d0       	rcall	.+0      	; 0x4bb2 <KPAD_enuInit+0xa>
    4bb2:	cd b7       	in	r28, 0x3d	; 61
    4bb4:	de b7       	in	r29, 0x3e	; 62
    4bb6:	9e 83       	std	Y+6, r25	; 0x06
    4bb8:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    4bba:	1c 82       	std	Y+4, r1	; 0x04
	if(Copy_pstrKeysConfig != NULL){
    4bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc0:	00 97       	sbiw	r24, 0x00	; 0
    4bc2:	09 f4       	brne	.+2      	; 0x4bc6 <KPAD_enuInit+0x1e>
    4bc4:	f0 c0       	rjmp	.+480    	; 0x4da6 <KPAD_enuInit+0x1fe>
		u8 Local_u8Iterator, Local_ROWSIterator, Local_COLSIterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < NUM_KPAD; Local_u8Iterator++){
    4bc6:	1b 82       	std	Y+3, r1	; 0x03
    4bc8:	e7 c0       	rjmp	.+462    	; 0x4d98 <KPAD_enuInit+0x1f0>

			for(Local_ROWSIterator = 0; Local_ROWSIterator < NUM_ROWS; Local_ROWSIterator++){
    4bca:	1a 82       	std	Y+2, r1	; 0x02
    4bcc:	6b c0       	rjmp	.+214    	; 0x4ca4 <KPAD_enuInit+0xfc>
				DIO_enuSetPinDir(Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Port, Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Pin, DIO_u8INPUT);
    4bce:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd0:	88 2f       	mov	r24, r24
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	9c 01       	movw	r18, r24
    4bd6:	22 95       	swap	r18
    4bd8:	32 95       	swap	r19
    4bda:	30 7f       	andi	r19, 0xF0	; 240
    4bdc:	32 27       	eor	r19, r18
    4bde:	20 7f       	andi	r18, 0xF0	; 240
    4be0:	32 27       	eor	r19, r18
    4be2:	8d 81       	ldd	r24, Y+5	; 0x05
    4be4:	9e 81       	ldd	r25, Y+6	; 0x06
    4be6:	28 0f       	add	r18, r24
    4be8:	39 1f       	adc	r19, r25
    4bea:	8a 81       	ldd	r24, Y+2	; 0x02
    4bec:	88 2f       	mov	r24, r24
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	88 0f       	add	r24, r24
    4bf2:	99 1f       	adc	r25, r25
    4bf4:	f9 01       	movw	r30, r18
    4bf6:	e8 0f       	add	r30, r24
    4bf8:	f9 1f       	adc	r31, r25
    4bfa:	40 81       	ld	r20, Z
    4bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfe:	88 2f       	mov	r24, r24
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	9c 01       	movw	r18, r24
    4c04:	22 95       	swap	r18
    4c06:	32 95       	swap	r19
    4c08:	30 7f       	andi	r19, 0xF0	; 240
    4c0a:	32 27       	eor	r19, r18
    4c0c:	20 7f       	andi	r18, 0xF0	; 240
    4c0e:	32 27       	eor	r19, r18
    4c10:	8d 81       	ldd	r24, Y+5	; 0x05
    4c12:	9e 81       	ldd	r25, Y+6	; 0x06
    4c14:	28 0f       	add	r18, r24
    4c16:	39 1f       	adc	r19, r25
    4c18:	8a 81       	ldd	r24, Y+2	; 0x02
    4c1a:	88 2f       	mov	r24, r24
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	82 0f       	add	r24, r18
    4c24:	93 1f       	adc	r25, r19
    4c26:	fc 01       	movw	r30, r24
    4c28:	31 96       	adiw	r30, 0x01	; 1
    4c2a:	90 81       	ld	r25, Z
    4c2c:	84 2f       	mov	r24, r20
    4c2e:	69 2f       	mov	r22, r25
    4c30:	40 e0       	ldi	r20, 0x00	; 0
    4c32:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
				DIO_enuSetPinValue(Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Port, Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Pin,  DIO_u8PULL_UP);
    4c36:	8b 81       	ldd	r24, Y+3	; 0x03
    4c38:	88 2f       	mov	r24, r24
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	9c 01       	movw	r18, r24
    4c3e:	22 95       	swap	r18
    4c40:	32 95       	swap	r19
    4c42:	30 7f       	andi	r19, 0xF0	; 240
    4c44:	32 27       	eor	r19, r18
    4c46:	20 7f       	andi	r18, 0xF0	; 240
    4c48:	32 27       	eor	r19, r18
    4c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c4e:	28 0f       	add	r18, r24
    4c50:	39 1f       	adc	r19, r25
    4c52:	8a 81       	ldd	r24, Y+2	; 0x02
    4c54:	88 2f       	mov	r24, r24
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	88 0f       	add	r24, r24
    4c5a:	99 1f       	adc	r25, r25
    4c5c:	f9 01       	movw	r30, r18
    4c5e:	e8 0f       	add	r30, r24
    4c60:	f9 1f       	adc	r31, r25
    4c62:	40 81       	ld	r20, Z
    4c64:	8b 81       	ldd	r24, Y+3	; 0x03
    4c66:	88 2f       	mov	r24, r24
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	9c 01       	movw	r18, r24
    4c6c:	22 95       	swap	r18
    4c6e:	32 95       	swap	r19
    4c70:	30 7f       	andi	r19, 0xF0	; 240
    4c72:	32 27       	eor	r19, r18
    4c74:	20 7f       	andi	r18, 0xF0	; 240
    4c76:	32 27       	eor	r19, r18
    4c78:	8d 81       	ldd	r24, Y+5	; 0x05
    4c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c7c:	28 0f       	add	r18, r24
    4c7e:	39 1f       	adc	r19, r25
    4c80:	8a 81       	ldd	r24, Y+2	; 0x02
    4c82:	88 2f       	mov	r24, r24
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	88 0f       	add	r24, r24
    4c88:	99 1f       	adc	r25, r25
    4c8a:	82 0f       	add	r24, r18
    4c8c:	93 1f       	adc	r25, r19
    4c8e:	fc 01       	movw	r30, r24
    4c90:	31 96       	adiw	r30, 0x01	; 1
    4c92:	90 81       	ld	r25, Z
    4c94:	84 2f       	mov	r24, r20
    4c96:	69 2f       	mov	r22, r25
    4c98:	41 e0       	ldi	r20, 0x01	; 1
    4c9a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrKeysConfig != NULL){
		u8 Local_u8Iterator, Local_ROWSIterator, Local_COLSIterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < NUM_KPAD; Local_u8Iterator++){

			for(Local_ROWSIterator = 0; Local_ROWSIterator < NUM_ROWS; Local_ROWSIterator++){
    4c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca0:	8f 5f       	subi	r24, 0xFF	; 255
    4ca2:	8a 83       	std	Y+2, r24	; 0x02
    4ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca6:	84 30       	cpi	r24, 0x04	; 4
    4ca8:	08 f4       	brcc	.+2      	; 0x4cac <KPAD_enuInit+0x104>
    4caa:	91 cf       	rjmp	.-222    	; 0x4bce <KPAD_enuInit+0x26>
				DIO_enuSetPinDir(Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Port, Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Pin, DIO_u8INPUT);
				DIO_enuSetPinValue(Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Port, Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Pin,  DIO_u8PULL_UP);
			}
			for(Local_COLSIterator = 0; Local_COLSIterator < NUM_COLS; Local_COLSIterator++){
    4cac:	19 82       	std	Y+1, r1	; 0x01
    4cae:	6d c0       	rjmp	.+218    	; 0x4d8a <KPAD_enuInit+0x1e2>
				DIO_enuSetPinDir(Copy_pstrKeysConfig[Local_u8Iterator].KCOLS[Local_COLSIterator].C_Port, Copy_pstrKeysConfig[Local_u8Iterator].KCOLS[Local_COLSIterator].C_Pin,  DIO_u8OUTPUT);
    4cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb2:	88 2f       	mov	r24, r24
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	9c 01       	movw	r18, r24
    4cb8:	22 95       	swap	r18
    4cba:	32 95       	swap	r19
    4cbc:	30 7f       	andi	r19, 0xF0	; 240
    4cbe:	32 27       	eor	r19, r18
    4cc0:	20 7f       	andi	r18, 0xF0	; 240
    4cc2:	32 27       	eor	r19, r18
    4cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc8:	28 0f       	add	r18, r24
    4cca:	39 1f       	adc	r19, r25
    4ccc:	89 81       	ldd	r24, Y+1	; 0x01
    4cce:	88 2f       	mov	r24, r24
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	04 96       	adiw	r24, 0x04	; 4
    4cd4:	88 0f       	add	r24, r24
    4cd6:	99 1f       	adc	r25, r25
    4cd8:	f9 01       	movw	r30, r18
    4cda:	e8 0f       	add	r30, r24
    4cdc:	f9 1f       	adc	r31, r25
    4cde:	40 81       	ld	r20, Z
    4ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ce2:	88 2f       	mov	r24, r24
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	9c 01       	movw	r18, r24
    4ce8:	22 95       	swap	r18
    4cea:	32 95       	swap	r19
    4cec:	30 7f       	andi	r19, 0xF0	; 240
    4cee:	32 27       	eor	r19, r18
    4cf0:	20 7f       	andi	r18, 0xF0	; 240
    4cf2:	32 27       	eor	r19, r18
    4cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf8:	28 0f       	add	r18, r24
    4cfa:	39 1f       	adc	r19, r25
    4cfc:	89 81       	ldd	r24, Y+1	; 0x01
    4cfe:	88 2f       	mov	r24, r24
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	88 0f       	add	r24, r24
    4d04:	99 1f       	adc	r25, r25
    4d06:	82 0f       	add	r24, r18
    4d08:	93 1f       	adc	r25, r19
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	39 96       	adiw	r30, 0x09	; 9
    4d0e:	90 81       	ld	r25, Z
    4d10:	84 2f       	mov	r24, r20
    4d12:	69 2f       	mov	r22, r25
    4d14:	41 e0       	ldi	r20, 0x01	; 1
    4d16:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
				DIO_enuSetPinValue(Copy_pstrKeysConfig[Local_u8Iterator].KCOLS[Local_COLSIterator].C_Port, Copy_pstrKeysConfig[Local_u8Iterator].KCOLS[Local_COLSIterator].C_Pin,  DIO_u8HIGH);
    4d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d1c:	88 2f       	mov	r24, r24
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	9c 01       	movw	r18, r24
    4d22:	22 95       	swap	r18
    4d24:	32 95       	swap	r19
    4d26:	30 7f       	andi	r19, 0xF0	; 240
    4d28:	32 27       	eor	r19, r18
    4d2a:	20 7f       	andi	r18, 0xF0	; 240
    4d2c:	32 27       	eor	r19, r18
    4d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d30:	9e 81       	ldd	r25, Y+6	; 0x06
    4d32:	28 0f       	add	r18, r24
    4d34:	39 1f       	adc	r19, r25
    4d36:	89 81       	ldd	r24, Y+1	; 0x01
    4d38:	88 2f       	mov	r24, r24
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	04 96       	adiw	r24, 0x04	; 4
    4d3e:	88 0f       	add	r24, r24
    4d40:	99 1f       	adc	r25, r25
    4d42:	f9 01       	movw	r30, r18
    4d44:	e8 0f       	add	r30, r24
    4d46:	f9 1f       	adc	r31, r25
    4d48:	40 81       	ld	r20, Z
    4d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4c:	88 2f       	mov	r24, r24
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	9c 01       	movw	r18, r24
    4d52:	22 95       	swap	r18
    4d54:	32 95       	swap	r19
    4d56:	30 7f       	andi	r19, 0xF0	; 240
    4d58:	32 27       	eor	r19, r18
    4d5a:	20 7f       	andi	r18, 0xF0	; 240
    4d5c:	32 27       	eor	r19, r18
    4d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d60:	9e 81       	ldd	r25, Y+6	; 0x06
    4d62:	28 0f       	add	r18, r24
    4d64:	39 1f       	adc	r19, r25
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	88 2f       	mov	r24, r24
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	88 0f       	add	r24, r24
    4d6e:	99 1f       	adc	r25, r25
    4d70:	82 0f       	add	r24, r18
    4d72:	93 1f       	adc	r25, r19
    4d74:	fc 01       	movw	r30, r24
    4d76:	39 96       	adiw	r30, 0x09	; 9
    4d78:	90 81       	ld	r25, Z
    4d7a:	84 2f       	mov	r24, r20
    4d7c:	69 2f       	mov	r22, r25
    4d7e:	41 e0       	ldi	r20, 0x01	; 1
    4d80:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>

			for(Local_ROWSIterator = 0; Local_ROWSIterator < NUM_ROWS; Local_ROWSIterator++){
				DIO_enuSetPinDir(Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Port, Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Pin, DIO_u8INPUT);
				DIO_enuSetPinValue(Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Port, Copy_pstrKeysConfig[Local_u8Iterator].KROWS[Local_ROWSIterator].R_Pin,  DIO_u8PULL_UP);
			}
			for(Local_COLSIterator = 0; Local_COLSIterator < NUM_COLS; Local_COLSIterator++){
    4d84:	89 81       	ldd	r24, Y+1	; 0x01
    4d86:	8f 5f       	subi	r24, 0xFF	; 255
    4d88:	89 83       	std	Y+1, r24	; 0x01
    4d8a:	89 81       	ldd	r24, Y+1	; 0x01
    4d8c:	84 30       	cpi	r24, 0x04	; 4
    4d8e:	08 f4       	brcc	.+2      	; 0x4d92 <KPAD_enuInit+0x1ea>
    4d90:	8f cf       	rjmp	.-226    	; 0x4cb0 <KPAD_enuInit+0x108>

ES_t KPAD_enuInit(PAD_t *Copy_pstrKeysConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrKeysConfig != NULL){
		u8 Local_u8Iterator, Local_ROWSIterator, Local_COLSIterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < NUM_KPAD; Local_u8Iterator++){
    4d92:	8b 81       	ldd	r24, Y+3	; 0x03
    4d94:	8f 5f       	subi	r24, 0xFF	; 255
    4d96:	8b 83       	std	Y+3, r24	; 0x03
    4d98:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9a:	82 30       	cpi	r24, 0x02	; 2
    4d9c:	08 f4       	brcc	.+2      	; 0x4da0 <KPAD_enuInit+0x1f8>
    4d9e:	15 cf       	rjmp	.-470    	; 0x4bca <KPAD_enuInit+0x22>
				DIO_enuSetPinValue(Copy_pstrKeysConfig[Local_u8Iterator].KCOLS[Local_COLSIterator].C_Port, Copy_pstrKeysConfig[Local_u8Iterator].KCOLS[Local_COLSIterator].C_Pin,  DIO_u8HIGH);
			}


		}
		Local_enuErrorState = ES_OK;
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	8c 83       	std	Y+4, r24	; 0x04
    4da4:	02 c0       	rjmp	.+4      	; 0x4daa <KPAD_enuInit+0x202>
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    4da6:	82 e0       	ldi	r24, 0x02	; 2
    4da8:	8c 83       	std	Y+4, r24	; 0x04
	}
	return Local_enuErrorState;
    4daa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4dac:	26 96       	adiw	r28, 0x06	; 6
    4dae:	0f b6       	in	r0, 0x3f	; 63
    4db0:	f8 94       	cli
    4db2:	de bf       	out	0x3e, r29	; 62
    4db4:	0f be       	out	0x3f, r0	; 63
    4db6:	cd bf       	out	0x3d, r28	; 61
    4db8:	cf 91       	pop	r28
    4dba:	df 91       	pop	r29
    4dbc:	08 95       	ret

00004dbe <KPAD_enuGetKeyValue>:

ES_t KPAD_enuGetKeyValue(u8 Copy_u8KpadID, u8 *Copy_u8Value){
    4dbe:	df 93       	push	r29
    4dc0:	cf 93       	push	r28
    4dc2:	cd b7       	in	r28, 0x3d	; 61
    4dc4:	de b7       	in	r29, 0x3e	; 62
    4dc6:	ab 97       	sbiw	r28, 0x2b	; 43
    4dc8:	0f b6       	in	r0, 0x3f	; 63
    4dca:	f8 94       	cli
    4dcc:	de bf       	out	0x3e, r29	; 62
    4dce:	0f be       	out	0x3f, r0	; 63
    4dd0:	cd bf       	out	0x3d, r28	; 61
    4dd2:	8b a3       	std	Y+35, r24	; 0x23
    4dd4:	7d a3       	std	Y+37, r23	; 0x25
    4dd6:	6c a3       	std	Y+36, r22	; 0x24

	ES_t Local_enuErrorState = ES_NOK;
    4dd8:	19 8a       	std	Y+17, r1	; 0x11

	if (Copy_u8Value != NULL)
    4dda:	8c a1       	ldd	r24, Y+36	; 0x24
    4ddc:	9d a1       	ldd	r25, Y+37	; 0x25
    4dde:	00 97       	sbiw	r24, 0x00	; 0
    4de0:	09 f4       	brne	.+2      	; 0x4de4 <KPAD_enuGetKeyValue+0x26>
    4de2:	c8 c1       	rjmp	.+912    	; 0x5174 <KPAD_enuGetKeyValue+0x3b6>
		{

			*Copy_u8Value = KEY_NOT_PRESSED;
    4de4:	ec a1       	ldd	r30, Y+36	; 0x24
    4de6:	fd a1       	ldd	r31, Y+37	; 0x25
    4de8:	8f ef       	ldi	r24, 0xFF	; 255
    4dea:	80 83       	st	Z, r24

			u8 Local_Au8KeyValues[NUM_ROWS][NUM_COLS] = KEYS_VALUES;
    4dec:	ce 01       	movw	r24, r28
    4dee:	42 96       	adiw	r24, 0x12	; 18
    4df0:	98 a7       	std	Y+40, r25	; 0x28
    4df2:	8f a3       	std	Y+39, r24	; 0x27
    4df4:	e5 ed       	ldi	r30, 0xD5	; 213
    4df6:	f1 e0       	ldi	r31, 0x01	; 1
    4df8:	fa a7       	std	Y+42, r31	; 0x2a
    4dfa:	e9 a7       	std	Y+41, r30	; 0x29
    4dfc:	f0 e1       	ldi	r31, 0x10	; 16
    4dfe:	fb a7       	std	Y+43, r31	; 0x2b
    4e00:	e9 a5       	ldd	r30, Y+41	; 0x29
    4e02:	fa a5       	ldd	r31, Y+42	; 0x2a
    4e04:	00 80       	ld	r0, Z
    4e06:	89 a5       	ldd	r24, Y+41	; 0x29
    4e08:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e0a:	01 96       	adiw	r24, 0x01	; 1
    4e0c:	9a a7       	std	Y+42, r25	; 0x2a
    4e0e:	89 a7       	std	Y+41, r24	; 0x29
    4e10:	ef a1       	ldd	r30, Y+39	; 0x27
    4e12:	f8 a5       	ldd	r31, Y+40	; 0x28
    4e14:	00 82       	st	Z, r0
    4e16:	8f a1       	ldd	r24, Y+39	; 0x27
    4e18:	98 a5       	ldd	r25, Y+40	; 0x28
    4e1a:	01 96       	adiw	r24, 0x01	; 1
    4e1c:	98 a7       	std	Y+40, r25	; 0x28
    4e1e:	8f a3       	std	Y+39, r24	; 0x27
    4e20:	9b a5       	ldd	r25, Y+43	; 0x2b
    4e22:	91 50       	subi	r25, 0x01	; 1
    4e24:	9b a7       	std	Y+43, r25	; 0x2b
    4e26:	eb a5       	ldd	r30, Y+43	; 0x2b
    4e28:	ee 23       	and	r30, r30
    4e2a:	51 f7       	brne	.-44     	; 0x4e00 <KPAD_enuGetKeyValue+0x42>

			u8 Local_u8PinValue = KEY_NOT_PRESSED;
    4e2c:	8f ef       	ldi	r24, 0xFF	; 255
    4e2e:	8a a3       	std	Y+34, r24	; 0x22

			u8 Local_u8RowIter , Local_u8ColIter;

			for (Local_u8ColIter =0; Local_u8ColIter < NUM_COLS ; Local_u8ColIter ++)
    4e30:	1f 86       	std	Y+15, r1	; 0x0f
    4e32:	9b c1       	rjmp	.+822    	; 0x516a <KPAD_enuGetKeyValue+0x3ac>
			{
				DIO_enuSetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KCOLS[Local_u8ColIter].C_Port,KPAD_AstrKeyPadConfig[Copy_u8KpadID].KCOLS[Local_u8ColIter].C_Pin, DIO_u8LOW);
    4e34:	8b a1       	ldd	r24, Y+35	; 0x23
    4e36:	48 2f       	mov	r20, r24
    4e38:	50 e0       	ldi	r21, 0x00	; 0
    4e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e3c:	28 2f       	mov	r18, r24
    4e3e:	30 e0       	ldi	r19, 0x00	; 0
    4e40:	ca 01       	movw	r24, r20
    4e42:	88 0f       	add	r24, r24
    4e44:	99 1f       	adc	r25, r25
    4e46:	88 0f       	add	r24, r24
    4e48:	99 1f       	adc	r25, r25
    4e4a:	88 0f       	add	r24, r24
    4e4c:	99 1f       	adc	r25, r25
    4e4e:	82 0f       	add	r24, r18
    4e50:	93 1f       	adc	r25, r19
    4e52:	04 96       	adiw	r24, 0x04	; 4
    4e54:	88 0f       	add	r24, r24
    4e56:	99 1f       	adc	r25, r25
    4e58:	fc 01       	movw	r30, r24
    4e5a:	e0 55       	subi	r30, 0x50	; 80
    4e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    4e5e:	60 81       	ld	r22, Z
    4e60:	8b a1       	ldd	r24, Y+35	; 0x23
    4e62:	48 2f       	mov	r20, r24
    4e64:	50 e0       	ldi	r21, 0x00	; 0
    4e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e68:	28 2f       	mov	r18, r24
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	ca 01       	movw	r24, r20
    4e6e:	88 0f       	add	r24, r24
    4e70:	99 1f       	adc	r25, r25
    4e72:	88 0f       	add	r24, r24
    4e74:	99 1f       	adc	r25, r25
    4e76:	88 0f       	add	r24, r24
    4e78:	99 1f       	adc	r25, r25
    4e7a:	82 0f       	add	r24, r18
    4e7c:	93 1f       	adc	r25, r19
    4e7e:	88 0f       	add	r24, r24
    4e80:	99 1f       	adc	r25, r25
    4e82:	fc 01       	movw	r30, r24
    4e84:	e7 54       	subi	r30, 0x47	; 71
    4e86:	fe 4f       	sbci	r31, 0xFE	; 254
    4e88:	90 81       	ld	r25, Z
    4e8a:	86 2f       	mov	r24, r22
    4e8c:	69 2f       	mov	r22, r25
    4e8e:	40 e0       	ldi	r20, 0x00	; 0
    4e90:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>

				for (Local_u8RowIter =0 ; Local_u8RowIter < NUM_ROWS ; Local_u8RowIter ++)
    4e94:	18 8a       	std	Y+16, r1	; 0x10
    4e96:	32 c1       	rjmp	.+612    	; 0x50fc <KPAD_enuGetKeyValue+0x33e>
				{
					DIO_enuGetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Port, KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Pin, &Local_u8PinValue);
    4e98:	8b a1       	ldd	r24, Y+35	; 0x23
    4e9a:	48 2f       	mov	r20, r24
    4e9c:	50 e0       	ldi	r21, 0x00	; 0
    4e9e:	88 89       	ldd	r24, Y+16	; 0x10
    4ea0:	28 2f       	mov	r18, r24
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	ca 01       	movw	r24, r20
    4ea6:	88 0f       	add	r24, r24
    4ea8:	99 1f       	adc	r25, r25
    4eaa:	88 0f       	add	r24, r24
    4eac:	99 1f       	adc	r25, r25
    4eae:	88 0f       	add	r24, r24
    4eb0:	99 1f       	adc	r25, r25
    4eb2:	82 0f       	add	r24, r18
    4eb4:	93 1f       	adc	r25, r19
    4eb6:	88 0f       	add	r24, r24
    4eb8:	99 1f       	adc	r25, r25
    4eba:	fc 01       	movw	r30, r24
    4ebc:	e0 55       	subi	r30, 0x50	; 80
    4ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec0:	60 81       	ld	r22, Z
    4ec2:	8b a1       	ldd	r24, Y+35	; 0x23
    4ec4:	48 2f       	mov	r20, r24
    4ec6:	50 e0       	ldi	r21, 0x00	; 0
    4ec8:	88 89       	ldd	r24, Y+16	; 0x10
    4eca:	28 2f       	mov	r18, r24
    4ecc:	30 e0       	ldi	r19, 0x00	; 0
    4ece:	ca 01       	movw	r24, r20
    4ed0:	88 0f       	add	r24, r24
    4ed2:	99 1f       	adc	r25, r25
    4ed4:	88 0f       	add	r24, r24
    4ed6:	99 1f       	adc	r25, r25
    4ed8:	88 0f       	add	r24, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	82 0f       	add	r24, r18
    4ede:	93 1f       	adc	r25, r19
    4ee0:	88 0f       	add	r24, r24
    4ee2:	99 1f       	adc	r25, r25
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	ef 54       	subi	r30, 0x4F	; 79
    4ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    4eea:	90 81       	ld	r25, Z
    4eec:	9e 01       	movw	r18, r28
    4eee:	2e 5d       	subi	r18, 0xDE	; 222
    4ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ef2:	86 2f       	mov	r24, r22
    4ef4:	69 2f       	mov	r22, r25
    4ef6:	a9 01       	movw	r20, r18
    4ef8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuGetPinValue>
					if (! Local_u8PinValue)
    4efc:	8a a1       	ldd	r24, Y+34	; 0x22
    4efe:	88 23       	and	r24, r24
    4f00:	09 f0       	breq	.+2      	; 0x4f04 <KPAD_enuGetKeyValue+0x146>
    4f02:	f9 c0       	rjmp	.+498    	; 0x50f6 <KPAD_enuGetKeyValue+0x338>
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	a0 e2       	ldi	r26, 0x20	; 32
    4f0a:	b1 e4       	ldi	r27, 0x41	; 65
    4f0c:	8b 87       	std	Y+11, r24	; 0x0b
    4f0e:	9c 87       	std	Y+12, r25	; 0x0c
    4f10:	ad 87       	std	Y+13, r26	; 0x0d
    4f12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f1c:	20 e0       	ldi	r18, 0x00	; 0
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	4a e7       	ldi	r20, 0x7A	; 122
    4f22:	53 e4       	ldi	r21, 0x43	; 67
    4f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f28:	dc 01       	movw	r26, r24
    4f2a:	cb 01       	movw	r24, r22
    4f2c:	8f 83       	std	Y+7, r24	; 0x07
    4f2e:	98 87       	std	Y+8, r25	; 0x08
    4f30:	a9 87       	std	Y+9, r26	; 0x09
    4f32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f34:	6f 81       	ldd	r22, Y+7	; 0x07
    4f36:	78 85       	ldd	r23, Y+8	; 0x08
    4f38:	89 85       	ldd	r24, Y+9	; 0x09
    4f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	40 e8       	ldi	r20, 0x80	; 128
    4f42:	5f e3       	ldi	r21, 0x3F	; 63
    4f44:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4f48:	88 23       	and	r24, r24
    4f4a:	2c f4       	brge	.+10     	; 0x4f56 <KPAD_enuGetKeyValue+0x198>
		__ticks = 1;
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	9e 83       	std	Y+6, r25	; 0x06
    4f52:	8d 83       	std	Y+5, r24	; 0x05
    4f54:	3f c0       	rjmp	.+126    	; 0x4fd4 <KPAD_enuGetKeyValue+0x216>
	else if (__tmp > 65535)
    4f56:	6f 81       	ldd	r22, Y+7	; 0x07
    4f58:	78 85       	ldd	r23, Y+8	; 0x08
    4f5a:	89 85       	ldd	r24, Y+9	; 0x09
    4f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	3f ef       	ldi	r19, 0xFF	; 255
    4f62:	4f e7       	ldi	r20, 0x7F	; 127
    4f64:	57 e4       	ldi	r21, 0x47	; 71
    4f66:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4f6a:	18 16       	cp	r1, r24
    4f6c:	4c f5       	brge	.+82     	; 0x4fc0 <KPAD_enuGetKeyValue+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	40 e2       	ldi	r20, 0x20	; 32
    4f7c:	51 e4       	ldi	r21, 0x41	; 65
    4f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f82:	dc 01       	movw	r26, r24
    4f84:	cb 01       	movw	r24, r22
    4f86:	bc 01       	movw	r22, r24
    4f88:	cd 01       	movw	r24, r26
    4f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f8e:	dc 01       	movw	r26, r24
    4f90:	cb 01       	movw	r24, r22
    4f92:	9e 83       	std	Y+6, r25	; 0x06
    4f94:	8d 83       	std	Y+5, r24	; 0x05
    4f96:	0f c0       	rjmp	.+30     	; 0x4fb6 <KPAD_enuGetKeyValue+0x1f8>
    4f98:	89 e1       	ldi	r24, 0x19	; 25
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	9c 83       	std	Y+4, r25	; 0x04
    4f9e:	8b 83       	std	Y+3, r24	; 0x03
    4fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa4:	01 97       	sbiw	r24, 0x01	; 1
    4fa6:	f1 f7       	brne	.-4      	; 0x4fa4 <KPAD_enuGetKeyValue+0x1e6>
    4fa8:	9c 83       	std	Y+4, r25	; 0x04
    4faa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fac:	8d 81       	ldd	r24, Y+5	; 0x05
    4fae:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb0:	01 97       	sbiw	r24, 0x01	; 1
    4fb2:	9e 83       	std	Y+6, r25	; 0x06
    4fb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fba:	00 97       	sbiw	r24, 0x00	; 0
    4fbc:	69 f7       	brne	.-38     	; 0x4f98 <KPAD_enuGetKeyValue+0x1da>
    4fbe:	14 c0       	rjmp	.+40     	; 0x4fe8 <KPAD_enuGetKeyValue+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    4fc2:	78 85       	ldd	r23, Y+8	; 0x08
    4fc4:	89 85       	ldd	r24, Y+9	; 0x09
    4fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fcc:	dc 01       	movw	r26, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	9e 83       	std	Y+6, r25	; 0x06
    4fd2:	8d 83       	std	Y+5, r24	; 0x05
    4fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fd8:	9a 83       	std	Y+2, r25	; 0x02
    4fda:	89 83       	std	Y+1, r24	; 0x01
    4fdc:	89 81       	ldd	r24, Y+1	; 0x01
    4fde:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe0:	01 97       	sbiw	r24, 0x01	; 1
    4fe2:	f1 f7       	brne	.-4      	; 0x4fe0 <KPAD_enuGetKeyValue+0x222>
    4fe4:	9a 83       	std	Y+2, r25	; 0x02
    4fe6:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(10);
						DIO_enuGetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Port, KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Pin, &Local_u8PinValue);
    4fe8:	8b a1       	ldd	r24, Y+35	; 0x23
    4fea:	48 2f       	mov	r20, r24
    4fec:	50 e0       	ldi	r21, 0x00	; 0
    4fee:	88 89       	ldd	r24, Y+16	; 0x10
    4ff0:	28 2f       	mov	r18, r24
    4ff2:	30 e0       	ldi	r19, 0x00	; 0
    4ff4:	ca 01       	movw	r24, r20
    4ff6:	88 0f       	add	r24, r24
    4ff8:	99 1f       	adc	r25, r25
    4ffa:	88 0f       	add	r24, r24
    4ffc:	99 1f       	adc	r25, r25
    4ffe:	88 0f       	add	r24, r24
    5000:	99 1f       	adc	r25, r25
    5002:	82 0f       	add	r24, r18
    5004:	93 1f       	adc	r25, r19
    5006:	88 0f       	add	r24, r24
    5008:	99 1f       	adc	r25, r25
    500a:	fc 01       	movw	r30, r24
    500c:	e0 55       	subi	r30, 0x50	; 80
    500e:	fe 4f       	sbci	r31, 0xFE	; 254
    5010:	60 81       	ld	r22, Z
    5012:	8b a1       	ldd	r24, Y+35	; 0x23
    5014:	48 2f       	mov	r20, r24
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	88 89       	ldd	r24, Y+16	; 0x10
    501a:	28 2f       	mov	r18, r24
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	ca 01       	movw	r24, r20
    5020:	88 0f       	add	r24, r24
    5022:	99 1f       	adc	r25, r25
    5024:	88 0f       	add	r24, r24
    5026:	99 1f       	adc	r25, r25
    5028:	88 0f       	add	r24, r24
    502a:	99 1f       	adc	r25, r25
    502c:	82 0f       	add	r24, r18
    502e:	93 1f       	adc	r25, r19
    5030:	88 0f       	add	r24, r24
    5032:	99 1f       	adc	r25, r25
    5034:	fc 01       	movw	r30, r24
    5036:	ef 54       	subi	r30, 0x4F	; 79
    5038:	fe 4f       	sbci	r31, 0xFE	; 254
    503a:	90 81       	ld	r25, Z
    503c:	9e 01       	movw	r18, r28
    503e:	2e 5d       	subi	r18, 0xDE	; 222
    5040:	3f 4f       	sbci	r19, 0xFF	; 255
    5042:	86 2f       	mov	r24, r22
    5044:	69 2f       	mov	r22, r25
    5046:	a9 01       	movw	r20, r18
    5048:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuGetPinValue>
						if (! Local_u8PinValue)
    504c:	8a a1       	ldd	r24, Y+34	; 0x22
    504e:	88 23       	and	r24, r24
    5050:	09 f0       	breq	.+2      	; 0x5054 <KPAD_enuGetKeyValue+0x296>
    5052:	51 c0       	rjmp	.+162    	; 0x50f6 <KPAD_enuGetKeyValue+0x338>
    5054:	32 c0       	rjmp	.+100    	; 0x50ba <KPAD_enuGetKeyValue+0x2fc>
						{
							while (! Local_u8PinValue)
							{
								DIO_enuGetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Port, KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Pin, &Local_u8PinValue);
    5056:	8b a1       	ldd	r24, Y+35	; 0x23
    5058:	48 2f       	mov	r20, r24
    505a:	50 e0       	ldi	r21, 0x00	; 0
    505c:	88 89       	ldd	r24, Y+16	; 0x10
    505e:	28 2f       	mov	r18, r24
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	ca 01       	movw	r24, r20
    5064:	88 0f       	add	r24, r24
    5066:	99 1f       	adc	r25, r25
    5068:	88 0f       	add	r24, r24
    506a:	99 1f       	adc	r25, r25
    506c:	88 0f       	add	r24, r24
    506e:	99 1f       	adc	r25, r25
    5070:	82 0f       	add	r24, r18
    5072:	93 1f       	adc	r25, r19
    5074:	88 0f       	add	r24, r24
    5076:	99 1f       	adc	r25, r25
    5078:	fc 01       	movw	r30, r24
    507a:	e0 55       	subi	r30, 0x50	; 80
    507c:	fe 4f       	sbci	r31, 0xFE	; 254
    507e:	60 81       	ld	r22, Z
    5080:	8b a1       	ldd	r24, Y+35	; 0x23
    5082:	48 2f       	mov	r20, r24
    5084:	50 e0       	ldi	r21, 0x00	; 0
    5086:	88 89       	ldd	r24, Y+16	; 0x10
    5088:	28 2f       	mov	r18, r24
    508a:	30 e0       	ldi	r19, 0x00	; 0
    508c:	ca 01       	movw	r24, r20
    508e:	88 0f       	add	r24, r24
    5090:	99 1f       	adc	r25, r25
    5092:	88 0f       	add	r24, r24
    5094:	99 1f       	adc	r25, r25
    5096:	88 0f       	add	r24, r24
    5098:	99 1f       	adc	r25, r25
    509a:	82 0f       	add	r24, r18
    509c:	93 1f       	adc	r25, r19
    509e:	88 0f       	add	r24, r24
    50a0:	99 1f       	adc	r25, r25
    50a2:	fc 01       	movw	r30, r24
    50a4:	ef 54       	subi	r30, 0x4F	; 79
    50a6:	fe 4f       	sbci	r31, 0xFE	; 254
    50a8:	90 81       	ld	r25, Z
    50aa:	9e 01       	movw	r18, r28
    50ac:	2e 5d       	subi	r18, 0xDE	; 222
    50ae:	3f 4f       	sbci	r19, 0xFF	; 255
    50b0:	86 2f       	mov	r24, r22
    50b2:	69 2f       	mov	r22, r25
    50b4:	a9 01       	movw	r20, r18
    50b6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <DIO_enuGetPinValue>
					{
						_delay_ms(10);
						DIO_enuGetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Port, KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Pin, &Local_u8PinValue);
						if (! Local_u8PinValue)
						{
							while (! Local_u8PinValue)
    50ba:	8a a1       	ldd	r24, Y+34	; 0x22
    50bc:	88 23       	and	r24, r24
    50be:	59 f2       	breq	.-106    	; 0x5056 <KPAD_enuGetKeyValue+0x298>
							{
								DIO_enuGetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Port, KPAD_AstrKeyPadConfig[Copy_u8KpadID].KROWS[Local_u8RowIter].R_Pin, &Local_u8PinValue);
							}

							*Copy_u8Value = Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    50c0:	88 89       	ldd	r24, Y+16	; 0x10
    50c2:	28 2f       	mov	r18, r24
    50c4:	30 e0       	ldi	r19, 0x00	; 0
    50c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    50c8:	48 2f       	mov	r20, r24
    50ca:	50 e0       	ldi	r21, 0x00	; 0
    50cc:	22 0f       	add	r18, r18
    50ce:	33 1f       	adc	r19, r19
    50d0:	22 0f       	add	r18, r18
    50d2:	33 1f       	adc	r19, r19
    50d4:	ce 01       	movw	r24, r28
    50d6:	01 96       	adiw	r24, 0x01	; 1
    50d8:	82 0f       	add	r24, r18
    50da:	93 1f       	adc	r25, r19
    50dc:	84 0f       	add	r24, r20
    50de:	95 1f       	adc	r25, r21
    50e0:	fc 01       	movw	r30, r24
    50e2:	71 96       	adiw	r30, 0x11	; 17
    50e4:	80 81       	ld	r24, Z
    50e6:	ec a1       	ldd	r30, Y+36	; 0x24
    50e8:	fd a1       	ldd	r31, Y+37	; 0x25
    50ea:	80 83       	st	Z, r24

							return Local_enuErrorState=ES_OK;
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	89 8b       	std	Y+17, r24	; 0x11
    50f0:	f9 89       	ldd	r31, Y+17	; 0x11
    50f2:	fe a3       	std	Y+38, r31	; 0x26
    50f4:	43 c0       	rjmp	.+134    	; 0x517c <KPAD_enuGetKeyValue+0x3be>

			for (Local_u8ColIter =0; Local_u8ColIter < NUM_COLS ; Local_u8ColIter ++)
			{
				DIO_enuSetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KCOLS[Local_u8ColIter].C_Port,KPAD_AstrKeyPadConfig[Copy_u8KpadID].KCOLS[Local_u8ColIter].C_Pin, DIO_u8LOW);

				for (Local_u8RowIter =0 ; Local_u8RowIter < NUM_ROWS ; Local_u8RowIter ++)
    50f6:	88 89       	ldd	r24, Y+16	; 0x10
    50f8:	8f 5f       	subi	r24, 0xFF	; 255
    50fa:	88 8b       	std	Y+16, r24	; 0x10
    50fc:	88 89       	ldd	r24, Y+16	; 0x10
    50fe:	84 30       	cpi	r24, 0x04	; 4
    5100:	08 f4       	brcc	.+2      	; 0x5104 <KPAD_enuGetKeyValue+0x346>
    5102:	ca ce       	rjmp	.-620    	; 0x4e98 <KPAD_enuGetKeyValue+0xda>
							return Local_enuErrorState=ES_OK;
						}
					}
				}

				DIO_enuSetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KCOLS[Local_u8ColIter].C_Port,KPAD_AstrKeyPadConfig[Copy_u8KpadID].KCOLS[Local_u8ColIter].C_Pin, DIO_u8HIGH);
    5104:	8b a1       	ldd	r24, Y+35	; 0x23
    5106:	48 2f       	mov	r20, r24
    5108:	50 e0       	ldi	r21, 0x00	; 0
    510a:	8f 85       	ldd	r24, Y+15	; 0x0f
    510c:	28 2f       	mov	r18, r24
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	ca 01       	movw	r24, r20
    5112:	88 0f       	add	r24, r24
    5114:	99 1f       	adc	r25, r25
    5116:	88 0f       	add	r24, r24
    5118:	99 1f       	adc	r25, r25
    511a:	88 0f       	add	r24, r24
    511c:	99 1f       	adc	r25, r25
    511e:	82 0f       	add	r24, r18
    5120:	93 1f       	adc	r25, r19
    5122:	04 96       	adiw	r24, 0x04	; 4
    5124:	88 0f       	add	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	fc 01       	movw	r30, r24
    512a:	e0 55       	subi	r30, 0x50	; 80
    512c:	fe 4f       	sbci	r31, 0xFE	; 254
    512e:	60 81       	ld	r22, Z
    5130:	8b a1       	ldd	r24, Y+35	; 0x23
    5132:	48 2f       	mov	r20, r24
    5134:	50 e0       	ldi	r21, 0x00	; 0
    5136:	8f 85       	ldd	r24, Y+15	; 0x0f
    5138:	28 2f       	mov	r18, r24
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	ca 01       	movw	r24, r20
    513e:	88 0f       	add	r24, r24
    5140:	99 1f       	adc	r25, r25
    5142:	88 0f       	add	r24, r24
    5144:	99 1f       	adc	r25, r25
    5146:	88 0f       	add	r24, r24
    5148:	99 1f       	adc	r25, r25
    514a:	82 0f       	add	r24, r18
    514c:	93 1f       	adc	r25, r19
    514e:	88 0f       	add	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	fc 01       	movw	r30, r24
    5154:	e7 54       	subi	r30, 0x47	; 71
    5156:	fe 4f       	sbci	r31, 0xFE	; 254
    5158:	90 81       	ld	r25, Z
    515a:	86 2f       	mov	r24, r22
    515c:	69 2f       	mov	r22, r25
    515e:	41 e0       	ldi	r20, 0x01	; 1
    5160:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>

			u8 Local_u8PinValue = KEY_NOT_PRESSED;

			u8 Local_u8RowIter , Local_u8ColIter;

			for (Local_u8ColIter =0; Local_u8ColIter < NUM_COLS ; Local_u8ColIter ++)
    5164:	8f 85       	ldd	r24, Y+15	; 0x0f
    5166:	8f 5f       	subi	r24, 0xFF	; 255
    5168:	8f 87       	std	Y+15, r24	; 0x0f
    516a:	8f 85       	ldd	r24, Y+15	; 0x0f
    516c:	84 30       	cpi	r24, 0x04	; 4
    516e:	08 f4       	brcc	.+2      	; 0x5172 <KPAD_enuGetKeyValue+0x3b4>
    5170:	61 ce       	rjmp	.-830    	; 0x4e34 <KPAD_enuGetKeyValue+0x76>
    5172:	02 c0       	rjmp	.+4      	; 0x5178 <KPAD_enuGetKeyValue+0x3ba>
				DIO_enuSetPinValue(KPAD_AstrKeyPadConfig[Copy_u8KpadID].KCOLS[Local_u8ColIter].C_Port,KPAD_AstrKeyPadConfig[Copy_u8KpadID].KCOLS[Local_u8ColIter].C_Pin, DIO_u8HIGH);
			}
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    5174:	82 e0       	ldi	r24, 0x02	; 2
    5176:	89 8b       	std	Y+17, r24	; 0x11
		}
	return Local_enuErrorState;
    5178:	89 89       	ldd	r24, Y+17	; 0x11
    517a:	8e a3       	std	Y+38, r24	; 0x26
    517c:	8e a1       	ldd	r24, Y+38	; 0x26
}
    517e:	ab 96       	adiw	r28, 0x2b	; 43
    5180:	0f b6       	in	r0, 0x3f	; 63
    5182:	f8 94       	cli
    5184:	de bf       	out	0x3e, r29	; 62
    5186:	0f be       	out	0x3f, r0	; 63
    5188:	cd bf       	out	0x3d, r28	; 61
    518a:	cf 91       	pop	r28
    518c:	df 91       	pop	r29
    518e:	08 95       	ret

00005190 <DC_enuInit>:
#include "DC_config.h"
#include "DC_priv.h"

extern DC_t DC_AstrMotorConfig[NUM_MOTORS] ;

ES_t DC_enuInit(DC_t *Copy_pstrMotorConfig){
    5190:	df 93       	push	r29
    5192:	cf 93       	push	r28
    5194:	00 d0       	rcall	.+0      	; 0x5196 <DC_enuInit+0x6>
    5196:	00 d0       	rcall	.+0      	; 0x5198 <DC_enuInit+0x8>
    5198:	cd b7       	in	r28, 0x3d	; 61
    519a:	de b7       	in	r29, 0x3e	; 62
    519c:	9c 83       	std	Y+4, r25	; 0x04
    519e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    51a0:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pstrMotorConfig != NULL){
    51a2:	8b 81       	ldd	r24, Y+3	; 0x03
    51a4:	9c 81       	ldd	r25, Y+4	; 0x04
    51a6:	00 97       	sbiw	r24, 0x00	; 0
    51a8:	09 f4       	brne	.+2      	; 0x51ac <DC_enuInit+0x1c>
    51aa:	a0 c0       	rjmp	.+320    	; 0x52ec <DC_enuInit+0x15c>
	u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < NUM_MOTORS; Local_u8Iterator++){
    51ac:	19 82       	std	Y+1, r1	; 0x01
    51ae:	97 c0       	rjmp	.+302    	; 0x52de <DC_enuInit+0x14e>
			DIO_enuSetPinDir(Copy_pstrMotorConfig[Local_u8Iterator].DC_Port1, Copy_pstrMotorConfig[Local_u8Iterator].DC_Pin1, DIO_u8OUTPUT);
    51b0:	89 81       	ldd	r24, Y+1	; 0x01
    51b2:	28 2f       	mov	r18, r24
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	c9 01       	movw	r24, r18
    51b8:	88 0f       	add	r24, r24
    51ba:	99 1f       	adc	r25, r25
    51bc:	88 0f       	add	r24, r24
    51be:	99 1f       	adc	r25, r25
    51c0:	28 0f       	add	r18, r24
    51c2:	39 1f       	adc	r19, r25
    51c4:	8b 81       	ldd	r24, Y+3	; 0x03
    51c6:	9c 81       	ldd	r25, Y+4	; 0x04
    51c8:	fc 01       	movw	r30, r24
    51ca:	e2 0f       	add	r30, r18
    51cc:	f3 1f       	adc	r31, r19
    51ce:	40 81       	ld	r20, Z
    51d0:	89 81       	ldd	r24, Y+1	; 0x01
    51d2:	28 2f       	mov	r18, r24
    51d4:	30 e0       	ldi	r19, 0x00	; 0
    51d6:	c9 01       	movw	r24, r18
    51d8:	88 0f       	add	r24, r24
    51da:	99 1f       	adc	r25, r25
    51dc:	88 0f       	add	r24, r24
    51de:	99 1f       	adc	r25, r25
    51e0:	28 0f       	add	r18, r24
    51e2:	39 1f       	adc	r19, r25
    51e4:	8b 81       	ldd	r24, Y+3	; 0x03
    51e6:	9c 81       	ldd	r25, Y+4	; 0x04
    51e8:	fc 01       	movw	r30, r24
    51ea:	e2 0f       	add	r30, r18
    51ec:	f3 1f       	adc	r31, r19
    51ee:	91 81       	ldd	r25, Z+1	; 0x01
    51f0:	84 2f       	mov	r24, r20
    51f2:	69 2f       	mov	r22, r25
    51f4:	41 e0       	ldi	r20, 0x01	; 1
    51f6:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>
			DIO_enuSetPinDir(Copy_pstrMotorConfig[Local_u8Iterator].DC_Port2, Copy_pstrMotorConfig[Local_u8Iterator].DC_Pin2, DIO_u8OUTPUT);
    51fa:	89 81       	ldd	r24, Y+1	; 0x01
    51fc:	28 2f       	mov	r18, r24
    51fe:	30 e0       	ldi	r19, 0x00	; 0
    5200:	c9 01       	movw	r24, r18
    5202:	88 0f       	add	r24, r24
    5204:	99 1f       	adc	r25, r25
    5206:	88 0f       	add	r24, r24
    5208:	99 1f       	adc	r25, r25
    520a:	28 0f       	add	r18, r24
    520c:	39 1f       	adc	r19, r25
    520e:	8b 81       	ldd	r24, Y+3	; 0x03
    5210:	9c 81       	ldd	r25, Y+4	; 0x04
    5212:	fc 01       	movw	r30, r24
    5214:	e2 0f       	add	r30, r18
    5216:	f3 1f       	adc	r31, r19
    5218:	42 81       	ldd	r20, Z+2	; 0x02
    521a:	89 81       	ldd	r24, Y+1	; 0x01
    521c:	28 2f       	mov	r18, r24
    521e:	30 e0       	ldi	r19, 0x00	; 0
    5220:	c9 01       	movw	r24, r18
    5222:	88 0f       	add	r24, r24
    5224:	99 1f       	adc	r25, r25
    5226:	88 0f       	add	r24, r24
    5228:	99 1f       	adc	r25, r25
    522a:	28 0f       	add	r18, r24
    522c:	39 1f       	adc	r19, r25
    522e:	8b 81       	ldd	r24, Y+3	; 0x03
    5230:	9c 81       	ldd	r25, Y+4	; 0x04
    5232:	fc 01       	movw	r30, r24
    5234:	e2 0f       	add	r30, r18
    5236:	f3 1f       	adc	r31, r19
    5238:	93 81       	ldd	r25, Z+3	; 0x03
    523a:	84 2f       	mov	r24, r20
    523c:	69 2f       	mov	r22, r25
    523e:	41 e0       	ldi	r20, 0x01	; 1
    5240:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DIO_enuSetPinDir>

			DIO_enuSetPinValue(Copy_pstrMotorConfig[Local_u8Iterator].DC_Port1, Copy_pstrMotorConfig[Local_u8Iterator].DC_Pin1, DIO_u8LOW);
    5244:	89 81       	ldd	r24, Y+1	; 0x01
    5246:	28 2f       	mov	r18, r24
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	c9 01       	movw	r24, r18
    524c:	88 0f       	add	r24, r24
    524e:	99 1f       	adc	r25, r25
    5250:	88 0f       	add	r24, r24
    5252:	99 1f       	adc	r25, r25
    5254:	28 0f       	add	r18, r24
    5256:	39 1f       	adc	r19, r25
    5258:	8b 81       	ldd	r24, Y+3	; 0x03
    525a:	9c 81       	ldd	r25, Y+4	; 0x04
    525c:	fc 01       	movw	r30, r24
    525e:	e2 0f       	add	r30, r18
    5260:	f3 1f       	adc	r31, r19
    5262:	40 81       	ld	r20, Z
    5264:	89 81       	ldd	r24, Y+1	; 0x01
    5266:	28 2f       	mov	r18, r24
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	c9 01       	movw	r24, r18
    526c:	88 0f       	add	r24, r24
    526e:	99 1f       	adc	r25, r25
    5270:	88 0f       	add	r24, r24
    5272:	99 1f       	adc	r25, r25
    5274:	28 0f       	add	r18, r24
    5276:	39 1f       	adc	r19, r25
    5278:	8b 81       	ldd	r24, Y+3	; 0x03
    527a:	9c 81       	ldd	r25, Y+4	; 0x04
    527c:	fc 01       	movw	r30, r24
    527e:	e2 0f       	add	r30, r18
    5280:	f3 1f       	adc	r31, r19
    5282:	91 81       	ldd	r25, Z+1	; 0x01
    5284:	84 2f       	mov	r24, r20
    5286:	69 2f       	mov	r22, r25
    5288:	40 e0       	ldi	r20, 0x00	; 0
    528a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(Copy_pstrMotorConfig[Local_u8Iterator].DC_Port2, Copy_pstrMotorConfig[Local_u8Iterator].DC_Pin2, DIO_u8LOW);
    528e:	89 81       	ldd	r24, Y+1	; 0x01
    5290:	28 2f       	mov	r18, r24
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	c9 01       	movw	r24, r18
    5296:	88 0f       	add	r24, r24
    5298:	99 1f       	adc	r25, r25
    529a:	88 0f       	add	r24, r24
    529c:	99 1f       	adc	r25, r25
    529e:	28 0f       	add	r18, r24
    52a0:	39 1f       	adc	r19, r25
    52a2:	8b 81       	ldd	r24, Y+3	; 0x03
    52a4:	9c 81       	ldd	r25, Y+4	; 0x04
    52a6:	fc 01       	movw	r30, r24
    52a8:	e2 0f       	add	r30, r18
    52aa:	f3 1f       	adc	r31, r19
    52ac:	42 81       	ldd	r20, Z+2	; 0x02
    52ae:	89 81       	ldd	r24, Y+1	; 0x01
    52b0:	28 2f       	mov	r18, r24
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	c9 01       	movw	r24, r18
    52b6:	88 0f       	add	r24, r24
    52b8:	99 1f       	adc	r25, r25
    52ba:	88 0f       	add	r24, r24
    52bc:	99 1f       	adc	r25, r25
    52be:	28 0f       	add	r18, r24
    52c0:	39 1f       	adc	r19, r25
    52c2:	8b 81       	ldd	r24, Y+3	; 0x03
    52c4:	9c 81       	ldd	r25, Y+4	; 0x04
    52c6:	fc 01       	movw	r30, r24
    52c8:	e2 0f       	add	r30, r18
    52ca:	f3 1f       	adc	r31, r19
    52cc:	93 81       	ldd	r25, Z+3	; 0x03
    52ce:	84 2f       	mov	r24, r20
    52d0:	69 2f       	mov	r22, r25
    52d2:	40 e0       	ldi	r20, 0x00	; 0
    52d4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>

ES_t DC_enuInit(DC_t *Copy_pstrMotorConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrMotorConfig != NULL){
	u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < NUM_MOTORS; Local_u8Iterator++){
    52d8:	89 81       	ldd	r24, Y+1	; 0x01
    52da:	8f 5f       	subi	r24, 0xFF	; 255
    52dc:	89 83       	std	Y+1, r24	; 0x01
    52de:	89 81       	ldd	r24, Y+1	; 0x01
    52e0:	88 23       	and	r24, r24
    52e2:	09 f4       	brne	.+2      	; 0x52e6 <DC_enuInit+0x156>
    52e4:	65 cf       	rjmp	.-310    	; 0x51b0 <DC_enuInit+0x20>

			DIO_enuSetPinValue(Copy_pstrMotorConfig[Local_u8Iterator].DC_Port1, Copy_pstrMotorConfig[Local_u8Iterator].DC_Pin1, DIO_u8LOW);
			DIO_enuSetPinValue(Copy_pstrMotorConfig[Local_u8Iterator].DC_Port2, Copy_pstrMotorConfig[Local_u8Iterator].DC_Pin2, DIO_u8LOW);

		}
		Local_enuErrorState = ES_OK;
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	8a 83       	std	Y+2, r24	; 0x02
    52ea:	02 c0       	rjmp	.+4      	; 0x52f0 <DC_enuInit+0x160>
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    52ec:	82 e0       	ldi	r24, 0x02	; 2
    52ee:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
    52f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    52f2:	0f 90       	pop	r0
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	0f 90       	pop	r0
    52fa:	cf 91       	pop	r28
    52fc:	df 91       	pop	r29
    52fe:	08 95       	ret

00005300 <DC_enuSetMotorDir>:

ES_t DC_enuSetMotorDir(u8 Copy_u8MotorID, u8 Copy_u8Direction){
    5300:	df 93       	push	r29
    5302:	cf 93       	push	r28
    5304:	00 d0       	rcall	.+0      	; 0x5306 <DC_enuSetMotorDir+0x6>
    5306:	00 d0       	rcall	.+0      	; 0x5308 <DC_enuSetMotorDir+0x8>
    5308:	0f 92       	push	r0
    530a:	cd b7       	in	r28, 0x3d	; 61
    530c:	de b7       	in	r29, 0x3e	; 62
    530e:	8a 83       	std	Y+2, r24	; 0x02
    5310:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    5312:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8MotorID <= NUM_MOTORS && (Copy_u8Direction == CLOCKWISE || Copy_u8Direction == ANTICLOCKWISE)){
    5314:	8a 81       	ldd	r24, Y+2	; 0x02
    5316:	82 30       	cpi	r24, 0x02	; 2
    5318:	08 f0       	brcs	.+2      	; 0x531c <DC_enuSetMotorDir+0x1c>
    531a:	a0 c0       	rjmp	.+320    	; 0x545c <DC_enuSetMotorDir+0x15c>
    531c:	8b 81       	ldd	r24, Y+3	; 0x03
    531e:	88 33       	cpi	r24, 0x38	; 56
    5320:	21 f0       	breq	.+8      	; 0x532a <DC_enuSetMotorDir+0x2a>
    5322:	8b 81       	ldd	r24, Y+3	; 0x03
    5324:	82 34       	cpi	r24, 0x42	; 66
    5326:	09 f0       	breq	.+2      	; 0x532a <DC_enuSetMotorDir+0x2a>
    5328:	99 c0       	rjmp	.+306    	; 0x545c <DC_enuSetMotorDir+0x15c>
			switch(Copy_u8Direction){
    532a:	8b 81       	ldd	r24, Y+3	; 0x03
    532c:	28 2f       	mov	r18, r24
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	3d 83       	std	Y+5, r19	; 0x05
    5332:	2c 83       	std	Y+4, r18	; 0x04
    5334:	8c 81       	ldd	r24, Y+4	; 0x04
    5336:	9d 81       	ldd	r25, Y+5	; 0x05
    5338:	88 33       	cpi	r24, 0x38	; 56
    533a:	91 05       	cpc	r25, r1
    533c:	39 f0       	breq	.+14     	; 0x534c <DC_enuSetMotorDir+0x4c>
    533e:	2c 81       	ldd	r18, Y+4	; 0x04
    5340:	3d 81       	ldd	r19, Y+5	; 0x05
    5342:	22 34       	cpi	r18, 0x42	; 66
    5344:	31 05       	cpc	r19, r1
    5346:	09 f4       	brne	.+2      	; 0x534a <DC_enuSetMotorDir+0x4a>
    5348:	44 c0       	rjmp	.+136    	; 0x53d2 <DC_enuSetMotorDir+0xd2>
    534a:	85 c0       	rjmp	.+266    	; 0x5456 <DC_enuSetMotorDir+0x156>
			case CLOCKWISE:
				DIO_enuSetPinValue(DC_AstrMotorConfig[Copy_u8MotorID].DC_Port1, DC_AstrMotorConfig[Copy_u8MotorID].DC_Pin1, DIO_u8HIGH);
    534c:	8a 81       	ldd	r24, Y+2	; 0x02
    534e:	28 2f       	mov	r18, r24
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	c9 01       	movw	r24, r18
    5354:	88 0f       	add	r24, r24
    5356:	99 1f       	adc	r25, r25
    5358:	88 0f       	add	r24, r24
    535a:	99 1f       	adc	r25, r25
    535c:	82 0f       	add	r24, r18
    535e:	93 1f       	adc	r25, r19
    5360:	fc 01       	movw	r30, r24
    5362:	e0 53       	subi	r30, 0x30	; 48
    5364:	fe 4f       	sbci	r31, 0xFE	; 254
    5366:	40 81       	ld	r20, Z
    5368:	8a 81       	ldd	r24, Y+2	; 0x02
    536a:	28 2f       	mov	r18, r24
    536c:	30 e0       	ldi	r19, 0x00	; 0
    536e:	c9 01       	movw	r24, r18
    5370:	88 0f       	add	r24, r24
    5372:	99 1f       	adc	r25, r25
    5374:	88 0f       	add	r24, r24
    5376:	99 1f       	adc	r25, r25
    5378:	82 0f       	add	r24, r18
    537a:	93 1f       	adc	r25, r19
    537c:	fc 01       	movw	r30, r24
    537e:	ef 52       	subi	r30, 0x2F	; 47
    5380:	fe 4f       	sbci	r31, 0xFE	; 254
    5382:	90 81       	ld	r25, Z
    5384:	84 2f       	mov	r24, r20
    5386:	69 2f       	mov	r22, r25
    5388:	41 e0       	ldi	r20, 0x01	; 1
    538a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(DC_AstrMotorConfig[Copy_u8MotorID].DC_Port2, DC_AstrMotorConfig[Copy_u8MotorID].DC_Pin2, DIO_u8LOW);
    538e:	8a 81       	ldd	r24, Y+2	; 0x02
    5390:	28 2f       	mov	r18, r24
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	c9 01       	movw	r24, r18
    5396:	88 0f       	add	r24, r24
    5398:	99 1f       	adc	r25, r25
    539a:	88 0f       	add	r24, r24
    539c:	99 1f       	adc	r25, r25
    539e:	82 0f       	add	r24, r18
    53a0:	93 1f       	adc	r25, r19
    53a2:	fc 01       	movw	r30, r24
    53a4:	ee 52       	subi	r30, 0x2E	; 46
    53a6:	fe 4f       	sbci	r31, 0xFE	; 254
    53a8:	40 81       	ld	r20, Z
    53aa:	8a 81       	ldd	r24, Y+2	; 0x02
    53ac:	28 2f       	mov	r18, r24
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	c9 01       	movw	r24, r18
    53b2:	88 0f       	add	r24, r24
    53b4:	99 1f       	adc	r25, r25
    53b6:	88 0f       	add	r24, r24
    53b8:	99 1f       	adc	r25, r25
    53ba:	82 0f       	add	r24, r18
    53bc:	93 1f       	adc	r25, r19
    53be:	fc 01       	movw	r30, r24
    53c0:	ed 52       	subi	r30, 0x2D	; 45
    53c2:	fe 4f       	sbci	r31, 0xFE	; 254
    53c4:	90 81       	ld	r25, Z
    53c6:	84 2f       	mov	r24, r20
    53c8:	69 2f       	mov	r22, r25
    53ca:	40 e0       	ldi	r20, 0x00	; 0
    53cc:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
    53d0:	42 c0       	rjmp	.+132    	; 0x5456 <DC_enuSetMotorDir+0x156>

				break;
			case ANTICLOCKWISE:
				DIO_enuSetPinValue(DC_AstrMotorConfig[Copy_u8MotorID].DC_Port1, DC_AstrMotorConfig[Copy_u8MotorID].DC_Pin1, DIO_u8LOW);
    53d2:	8a 81       	ldd	r24, Y+2	; 0x02
    53d4:	28 2f       	mov	r18, r24
    53d6:	30 e0       	ldi	r19, 0x00	; 0
    53d8:	c9 01       	movw	r24, r18
    53da:	88 0f       	add	r24, r24
    53dc:	99 1f       	adc	r25, r25
    53de:	88 0f       	add	r24, r24
    53e0:	99 1f       	adc	r25, r25
    53e2:	82 0f       	add	r24, r18
    53e4:	93 1f       	adc	r25, r19
    53e6:	fc 01       	movw	r30, r24
    53e8:	e0 53       	subi	r30, 0x30	; 48
    53ea:	fe 4f       	sbci	r31, 0xFE	; 254
    53ec:	40 81       	ld	r20, Z
    53ee:	8a 81       	ldd	r24, Y+2	; 0x02
    53f0:	28 2f       	mov	r18, r24
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	c9 01       	movw	r24, r18
    53f6:	88 0f       	add	r24, r24
    53f8:	99 1f       	adc	r25, r25
    53fa:	88 0f       	add	r24, r24
    53fc:	99 1f       	adc	r25, r25
    53fe:	82 0f       	add	r24, r18
    5400:	93 1f       	adc	r25, r19
    5402:	fc 01       	movw	r30, r24
    5404:	ef 52       	subi	r30, 0x2F	; 47
    5406:	fe 4f       	sbci	r31, 0xFE	; 254
    5408:	90 81       	ld	r25, Z
    540a:	84 2f       	mov	r24, r20
    540c:	69 2f       	mov	r22, r25
    540e:	40 e0       	ldi	r20, 0x00	; 0
    5410:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(DC_AstrMotorConfig[Copy_u8MotorID].DC_Port2, DC_AstrMotorConfig[Copy_u8MotorID].DC_Pin2, DIO_u8HIGH);
    5414:	8a 81       	ldd	r24, Y+2	; 0x02
    5416:	28 2f       	mov	r18, r24
    5418:	30 e0       	ldi	r19, 0x00	; 0
    541a:	c9 01       	movw	r24, r18
    541c:	88 0f       	add	r24, r24
    541e:	99 1f       	adc	r25, r25
    5420:	88 0f       	add	r24, r24
    5422:	99 1f       	adc	r25, r25
    5424:	82 0f       	add	r24, r18
    5426:	93 1f       	adc	r25, r19
    5428:	fc 01       	movw	r30, r24
    542a:	ee 52       	subi	r30, 0x2E	; 46
    542c:	fe 4f       	sbci	r31, 0xFE	; 254
    542e:	40 81       	ld	r20, Z
    5430:	8a 81       	ldd	r24, Y+2	; 0x02
    5432:	28 2f       	mov	r18, r24
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	c9 01       	movw	r24, r18
    5438:	88 0f       	add	r24, r24
    543a:	99 1f       	adc	r25, r25
    543c:	88 0f       	add	r24, r24
    543e:	99 1f       	adc	r25, r25
    5440:	82 0f       	add	r24, r18
    5442:	93 1f       	adc	r25, r19
    5444:	fc 01       	movw	r30, r24
    5446:	ed 52       	subi	r30, 0x2D	; 45
    5448:	fe 4f       	sbci	r31, 0xFE	; 254
    544a:	90 81       	ld	r25, Z
    544c:	84 2f       	mov	r24, r20
    544e:	69 2f       	mov	r22, r25
    5450:	41 e0       	ldi	r20, 0x01	; 1
    5452:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_enuSetPinValue>
				break;
			}
			Local_enuErrorState = ES_OK;
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	89 83       	std	Y+1, r24	; 0x01
    545a:	02 c0       	rjmp	.+4      	; 0x5460 <DC_enuSetMotorDir+0x160>
		}
		else{
			Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    545c:	85 e0       	ldi	r24, 0x05	; 5
    545e:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
    5460:	89 81       	ldd	r24, Y+1	; 0x01
}
    5462:	0f 90       	pop	r0
    5464:	0f 90       	pop	r0
    5466:	0f 90       	pop	r0
    5468:	0f 90       	pop	r0
    546a:	0f 90       	pop	r0
    546c:	cf 91       	pop	r28
    546e:	df 91       	pop	r29
    5470:	08 95       	ret

00005472 <DC_enuTogMotorDir>:

ES_t DC_enuTogMotorDir(u8 Copy_u8MotorID){
    5472:	df 93       	push	r29
    5474:	cf 93       	push	r28
    5476:	00 d0       	rcall	.+0      	; 0x5478 <DC_enuTogMotorDir+0x6>
    5478:	cd b7       	in	r28, 0x3d	; 61
    547a:	de b7       	in	r29, 0x3e	; 62
    547c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    547e:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8MotorID <= NUM_MOTORS){
    5480:	8a 81       	ldd	r24, Y+2	; 0x02
    5482:	82 30       	cpi	r24, 0x02	; 2
    5484:	08 f0       	brcs	.+2      	; 0x5488 <DC_enuTogMotorDir+0x16>
    5486:	43 c0       	rjmp	.+134    	; 0x550e <DC_enuTogMotorDir+0x9c>
			DIO_enuTogPinValue(DC_AstrMotorConfig[Copy_u8MotorID].DC_Port1, DC_AstrMotorConfig[Copy_u8MotorID].DC_Pin1);
    5488:	8a 81       	ldd	r24, Y+2	; 0x02
    548a:	28 2f       	mov	r18, r24
    548c:	30 e0       	ldi	r19, 0x00	; 0
    548e:	c9 01       	movw	r24, r18
    5490:	88 0f       	add	r24, r24
    5492:	99 1f       	adc	r25, r25
    5494:	88 0f       	add	r24, r24
    5496:	99 1f       	adc	r25, r25
    5498:	82 0f       	add	r24, r18
    549a:	93 1f       	adc	r25, r19
    549c:	fc 01       	movw	r30, r24
    549e:	e0 53       	subi	r30, 0x30	; 48
    54a0:	fe 4f       	sbci	r31, 0xFE	; 254
    54a2:	40 81       	ld	r20, Z
    54a4:	8a 81       	ldd	r24, Y+2	; 0x02
    54a6:	28 2f       	mov	r18, r24
    54a8:	30 e0       	ldi	r19, 0x00	; 0
    54aa:	c9 01       	movw	r24, r18
    54ac:	88 0f       	add	r24, r24
    54ae:	99 1f       	adc	r25, r25
    54b0:	88 0f       	add	r24, r24
    54b2:	99 1f       	adc	r25, r25
    54b4:	82 0f       	add	r24, r18
    54b6:	93 1f       	adc	r25, r19
    54b8:	fc 01       	movw	r30, r24
    54ba:	ef 52       	subi	r30, 0x2F	; 47
    54bc:	fe 4f       	sbci	r31, 0xFE	; 254
    54be:	90 81       	ld	r25, Z
    54c0:	84 2f       	mov	r24, r20
    54c2:	69 2f       	mov	r22, r25
    54c4:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_enuTogPinValue>
			DIO_enuTogPinValue(DC_AstrMotorConfig[Copy_u8MotorID].DC_Port2, DC_AstrMotorConfig[Copy_u8MotorID].DC_Pin2);
    54c8:	8a 81       	ldd	r24, Y+2	; 0x02
    54ca:	28 2f       	mov	r18, r24
    54cc:	30 e0       	ldi	r19, 0x00	; 0
    54ce:	c9 01       	movw	r24, r18
    54d0:	88 0f       	add	r24, r24
    54d2:	99 1f       	adc	r25, r25
    54d4:	88 0f       	add	r24, r24
    54d6:	99 1f       	adc	r25, r25
    54d8:	82 0f       	add	r24, r18
    54da:	93 1f       	adc	r25, r19
    54dc:	fc 01       	movw	r30, r24
    54de:	ee 52       	subi	r30, 0x2E	; 46
    54e0:	fe 4f       	sbci	r31, 0xFE	; 254
    54e2:	40 81       	ld	r20, Z
    54e4:	8a 81       	ldd	r24, Y+2	; 0x02
    54e6:	28 2f       	mov	r18, r24
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	c9 01       	movw	r24, r18
    54ec:	88 0f       	add	r24, r24
    54ee:	99 1f       	adc	r25, r25
    54f0:	88 0f       	add	r24, r24
    54f2:	99 1f       	adc	r25, r25
    54f4:	82 0f       	add	r24, r18
    54f6:	93 1f       	adc	r25, r19
    54f8:	fc 01       	movw	r30, r24
    54fa:	ed 52       	subi	r30, 0x2D	; 45
    54fc:	fe 4f       	sbci	r31, 0xFE	; 254
    54fe:	90 81       	ld	r25, Z
    5500:	84 2f       	mov	r24, r20
    5502:	69 2f       	mov	r22, r25
    5504:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_enuTogPinValue>

			Local_enuErrorState = ES_OK;
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	89 83       	std	Y+1, r24	; 0x01
    550c:	02 c0       	rjmp	.+4      	; 0x5512 <DC_enuTogMotorDir+0xa0>
		}
		else{
			Local_enuErrorState = ES_COMPONENT_OUT_OF_RANGE;
    550e:	85 e0       	ldi	r24, 0x05	; 5
    5510:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
    5512:	89 81       	ldd	r24, Y+1	; 0x01
}
    5514:	0f 90       	pop	r0
    5516:	0f 90       	pop	r0
    5518:	cf 91       	pop	r28
    551a:	df 91       	pop	r29
    551c:	08 95       	ret

0000551e <main>:

/**********************************************AUTO TRIGGERING MODE*****************************************************/

void ADC_ISR_CONVERSION_COMPELETE(void);

int main(void){
    551e:	df 93       	push	r29
    5520:	cf 93       	push	r28
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62


	return 0;
    5526:	80 e0       	ldi	r24, 0x00	; 0
    5528:	90 e0       	ldi	r25, 0x00	; 0
}
    552a:	cf 91       	pop	r28
    552c:	df 91       	pop	r29
    552e:	08 95       	ret

00005530 <ADC_ISR_CONVERSION_COMPELETE>:
void ADC_ISR_CONVERSION_COMPELETE(void){
    5530:	df 93       	push	r29
    5532:	cf 93       	push	r28
    5534:	cd b7       	in	r28, 0x3d	; 61
    5536:	de b7       	in	r29, 0x3e	; 62

}
    5538:	cf 91       	pop	r28
    553a:	df 91       	pop	r29
    553c:	08 95       	ret

0000553e <__mulsi3>:
    553e:	62 9f       	mul	r22, r18
    5540:	d0 01       	movw	r26, r0
    5542:	73 9f       	mul	r23, r19
    5544:	f0 01       	movw	r30, r0
    5546:	82 9f       	mul	r24, r18
    5548:	e0 0d       	add	r30, r0
    554a:	f1 1d       	adc	r31, r1
    554c:	64 9f       	mul	r22, r20
    554e:	e0 0d       	add	r30, r0
    5550:	f1 1d       	adc	r31, r1
    5552:	92 9f       	mul	r25, r18
    5554:	f0 0d       	add	r31, r0
    5556:	83 9f       	mul	r24, r19
    5558:	f0 0d       	add	r31, r0
    555a:	74 9f       	mul	r23, r20
    555c:	f0 0d       	add	r31, r0
    555e:	65 9f       	mul	r22, r21
    5560:	f0 0d       	add	r31, r0
    5562:	99 27       	eor	r25, r25
    5564:	72 9f       	mul	r23, r18
    5566:	b0 0d       	add	r27, r0
    5568:	e1 1d       	adc	r30, r1
    556a:	f9 1f       	adc	r31, r25
    556c:	63 9f       	mul	r22, r19
    556e:	b0 0d       	add	r27, r0
    5570:	e1 1d       	adc	r30, r1
    5572:	f9 1f       	adc	r31, r25
    5574:	bd 01       	movw	r22, r26
    5576:	cf 01       	movw	r24, r30
    5578:	11 24       	eor	r1, r1
    557a:	08 95       	ret

0000557c <__divmodsi4>:
    557c:	97 fb       	bst	r25, 7
    557e:	09 2e       	mov	r0, r25
    5580:	05 26       	eor	r0, r21
    5582:	0e d0       	rcall	.+28     	; 0x55a0 <__divmodsi4_neg1>
    5584:	57 fd       	sbrc	r21, 7
    5586:	04 d0       	rcall	.+8      	; 0x5590 <__divmodsi4_neg2>
    5588:	14 d0       	rcall	.+40     	; 0x55b2 <__udivmodsi4>
    558a:	0a d0       	rcall	.+20     	; 0x55a0 <__divmodsi4_neg1>
    558c:	00 1c       	adc	r0, r0
    558e:	38 f4       	brcc	.+14     	; 0x559e <__divmodsi4_exit>

00005590 <__divmodsi4_neg2>:
    5590:	50 95       	com	r21
    5592:	40 95       	com	r20
    5594:	30 95       	com	r19
    5596:	21 95       	neg	r18
    5598:	3f 4f       	sbci	r19, 0xFF	; 255
    559a:	4f 4f       	sbci	r20, 0xFF	; 255
    559c:	5f 4f       	sbci	r21, 0xFF	; 255

0000559e <__divmodsi4_exit>:
    559e:	08 95       	ret

000055a0 <__divmodsi4_neg1>:
    55a0:	f6 f7       	brtc	.-4      	; 0x559e <__divmodsi4_exit>
    55a2:	90 95       	com	r25
    55a4:	80 95       	com	r24
    55a6:	70 95       	com	r23
    55a8:	61 95       	neg	r22
    55aa:	7f 4f       	sbci	r23, 0xFF	; 255
    55ac:	8f 4f       	sbci	r24, 0xFF	; 255
    55ae:	9f 4f       	sbci	r25, 0xFF	; 255
    55b0:	08 95       	ret

000055b2 <__udivmodsi4>:
    55b2:	a1 e2       	ldi	r26, 0x21	; 33
    55b4:	1a 2e       	mov	r1, r26
    55b6:	aa 1b       	sub	r26, r26
    55b8:	bb 1b       	sub	r27, r27
    55ba:	fd 01       	movw	r30, r26
    55bc:	0d c0       	rjmp	.+26     	; 0x55d8 <__udivmodsi4_ep>

000055be <__udivmodsi4_loop>:
    55be:	aa 1f       	adc	r26, r26
    55c0:	bb 1f       	adc	r27, r27
    55c2:	ee 1f       	adc	r30, r30
    55c4:	ff 1f       	adc	r31, r31
    55c6:	a2 17       	cp	r26, r18
    55c8:	b3 07       	cpc	r27, r19
    55ca:	e4 07       	cpc	r30, r20
    55cc:	f5 07       	cpc	r31, r21
    55ce:	20 f0       	brcs	.+8      	; 0x55d8 <__udivmodsi4_ep>
    55d0:	a2 1b       	sub	r26, r18
    55d2:	b3 0b       	sbc	r27, r19
    55d4:	e4 0b       	sbc	r30, r20
    55d6:	f5 0b       	sbc	r31, r21

000055d8 <__udivmodsi4_ep>:
    55d8:	66 1f       	adc	r22, r22
    55da:	77 1f       	adc	r23, r23
    55dc:	88 1f       	adc	r24, r24
    55de:	99 1f       	adc	r25, r25
    55e0:	1a 94       	dec	r1
    55e2:	69 f7       	brne	.-38     	; 0x55be <__udivmodsi4_loop>
    55e4:	60 95       	com	r22
    55e6:	70 95       	com	r23
    55e8:	80 95       	com	r24
    55ea:	90 95       	com	r25
    55ec:	9b 01       	movw	r18, r22
    55ee:	ac 01       	movw	r20, r24
    55f0:	bd 01       	movw	r22, r26
    55f2:	cf 01       	movw	r24, r30
    55f4:	08 95       	ret

000055f6 <__prologue_saves__>:
    55f6:	2f 92       	push	r2
    55f8:	3f 92       	push	r3
    55fa:	4f 92       	push	r4
    55fc:	5f 92       	push	r5
    55fe:	6f 92       	push	r6
    5600:	7f 92       	push	r7
    5602:	8f 92       	push	r8
    5604:	9f 92       	push	r9
    5606:	af 92       	push	r10
    5608:	bf 92       	push	r11
    560a:	cf 92       	push	r12
    560c:	df 92       	push	r13
    560e:	ef 92       	push	r14
    5610:	ff 92       	push	r15
    5612:	0f 93       	push	r16
    5614:	1f 93       	push	r17
    5616:	cf 93       	push	r28
    5618:	df 93       	push	r29
    561a:	cd b7       	in	r28, 0x3d	; 61
    561c:	de b7       	in	r29, 0x3e	; 62
    561e:	ca 1b       	sub	r28, r26
    5620:	db 0b       	sbc	r29, r27
    5622:	0f b6       	in	r0, 0x3f	; 63
    5624:	f8 94       	cli
    5626:	de bf       	out	0x3e, r29	; 62
    5628:	0f be       	out	0x3f, r0	; 63
    562a:	cd bf       	out	0x3d, r28	; 61
    562c:	09 94       	ijmp

0000562e <__epilogue_restores__>:
    562e:	2a 88       	ldd	r2, Y+18	; 0x12
    5630:	39 88       	ldd	r3, Y+17	; 0x11
    5632:	48 88       	ldd	r4, Y+16	; 0x10
    5634:	5f 84       	ldd	r5, Y+15	; 0x0f
    5636:	6e 84       	ldd	r6, Y+14	; 0x0e
    5638:	7d 84       	ldd	r7, Y+13	; 0x0d
    563a:	8c 84       	ldd	r8, Y+12	; 0x0c
    563c:	9b 84       	ldd	r9, Y+11	; 0x0b
    563e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5640:	b9 84       	ldd	r11, Y+9	; 0x09
    5642:	c8 84       	ldd	r12, Y+8	; 0x08
    5644:	df 80       	ldd	r13, Y+7	; 0x07
    5646:	ee 80       	ldd	r14, Y+6	; 0x06
    5648:	fd 80       	ldd	r15, Y+5	; 0x05
    564a:	0c 81       	ldd	r16, Y+4	; 0x04
    564c:	1b 81       	ldd	r17, Y+3	; 0x03
    564e:	aa 81       	ldd	r26, Y+2	; 0x02
    5650:	b9 81       	ldd	r27, Y+1	; 0x01
    5652:	ce 0f       	add	r28, r30
    5654:	d1 1d       	adc	r29, r1
    5656:	0f b6       	in	r0, 0x3f	; 63
    5658:	f8 94       	cli
    565a:	de bf       	out	0x3e, r29	; 62
    565c:	0f be       	out	0x3f, r0	; 63
    565e:	cd bf       	out	0x3d, r28	; 61
    5660:	ed 01       	movw	r28, r26
    5662:	08 95       	ret

00005664 <_exit>:
    5664:	f8 94       	cli

00005666 <__stop_program>:
    5666:	ff cf       	rjmp	.-2      	; 0x5666 <__stop_program>
